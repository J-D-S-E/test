Repository: studioimaginaire/phue
Branch: master
File: .gitignore

*.pyc
*~
*.swp
test.py
*.DS_Store
*.sublime-workspace
dist
MANIFEST


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: .travis.yml

language: python
matrix:
  fast_finish: true
  include:
    - python: "2.7"
      env: TOXENV=py27
    - python: "3.5"
      env: TOXENV=py35
    - python: "2.7"
      env: TOXENV=pep8
install: pip install tox
script: tox


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: CHANGELOG.md

# phue changelog

## r11
- Add support for deleting scenes
- Various bug fixes

## r10
- Misc bug fixes
- Better support for schedules

## r9
- Added unit tests (sdague)
- Added scene support (sdague)
- Added sensor support (eldstal)
- Added reachable and type attributes to the Light object (carlosperate)
- Changed License to MIT

## r8
- iOS compatibility (Nathanaël Lécaudé)
- Logging fixes
- Added effect changing options (bradykent)
- Several unicode fixes (Nathanaël Lécaudé)
- Misc bug fixes

## r7
- Added to pypi
- Added support for Python 3 (Nathanaël Lécaudé)
- Logging level can be set with b.set_logging() (Nathanaël Lécaudé)
- Logging level can be set at init: b = Bridge(logging = 'debug') (Nathanaël Lécaudé)
- Added docstrings to Light properties (Nathanaël Lécaudé)
- Added colormode property to Light class (Nathanaël Lécaudé)
- IP is now optional if present in config file (Nathanaël Lécaudé)
- Implemented groups (Nathanaël Lécaudé)
- Implemented schedules (Nathanaël Lécaudé)
- Renamed get_info to get_api (Nathanaël Lécaudé)
- Renamed get_lights to get_light_objects (Nathanaël Lécaudé)
- Renamed set_state and get_state to set_light and get_light (Nathanaël Lécaudé)
- Fixed important bug when using set_state with a list of lights (Nathanaël Lécaudé)
- Add access to Light objects via direct indexing of the Bridge object via __getitem__ (Marshall Perrin)
- Implement real logging using Python's logging module, including error checking and display of responses from the server. (Marshall Perrin)
- Add function colortemp_k for color temperatures in Kelvin. (Marshall Perrin)
- Some additional error checking for invalid or missing parameters (Marshall Perrin)
- More details in docstrings. (Marshall Perrin)


## r6
- Light objects are now obtained using the get_lights method
- Added the alert method to the Light object
- All requests now use httplib for consistency
- Moved all source to github
- Renamed the module to phue

## r5
 - Renamed the Bulb() object to Light() so it reflects the official API better
 - You can now pass the username as argument to the Bridge class if you don't want to read/store to file
 - You can now get the bridge name with brdige.name or set it with bridge.name = 'newname'
 - The set_state method can now use a dictionary as first argument to send more complex messages


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: LICENSE

The MIT License (MIT)

Copyright (c) 2014 Nathanaël Lécaudé
https://github.com/studioimaginaire/phue

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: README.md

# phue: A Python library for Philips Hue

Full featured Python library to control the Philips Hue lighting system.

## Features

- Compliant with the Philips Hue API 1.0
- Support for Lights
- Support for Groups
- Support for Schedules
- Support for Scenes
- Support for Sensors
- Compatible with Python 2.6.x and upwards
- Compatible with Python 3
- No dependencies
- Simple structure, single phue.py file
- Work in a procedural way or object oriented way

## Installation

### Using distutils

```
sudo easy_install phue
```
or
```
pip install phue
```

### Manually

phue consists of a single file (phue.py) that you can put in your python search path or in site-packages (or dist-packages depending on the platform)
You can also simply run it by putting it in the same directory as you main script file or start a python interpreter in the same directory.
phue works with Python 2.6.x, 2.7.x and 3.x

## Examples

### Basic usage

Using the set_light and get_light methods you can control pretty much all the parameters :

```python
#!/usr/bin/python

from phue import Bridge

b = Bridge('ip_of_your_bridge')

# If the app is not registered and the button is not pressed, press the button and call connect() (this only needs to be run a single time)
b.connect()

# Get the bridge state (This returns the full dictionary that you can explore)
b.get_api()

# Prints if light 1 is on or not
b.get_light(1, 'on')

# Set brightness of lamp 1 to max
b.set_light(1, 'bri', 254)

# Set brightness of lamp 2 to 50%
b.set_light(2, 'bri', 127)

# Turn lamp 2 on
b.set_light(2,'on', True)

# You can also control multiple lamps by sending a list as lamp_id
b.set_light( [1,2], 'on', True)

# Get the name of a lamp
b.get_light(1, 'name')

# You can also use light names instead of the id
b.get_light('Kitchen')
b.set_light('Kitchen', 'bri', 254)

# Also works with lists
b.set_light(['Bathroom', 'Garage'], 'on', False)

# The set_light method can also take a dictionary as the second argument to do more fancy stuff
# This will turn light 1 on with a transition time of 30 seconds
command =  {'transitiontime' : 300, 'on' : True, 'bri' : 254}
b.set_light(1, command)
```

### Light Objects

If you want to work in a more object-oriented way, there are several ways you can get Light objects.

#### Get a flat list of light objects
```python

lights = b.lights

# Print light names
for l in lights:
    print(l.name)

# Set brightness of each light to 127
for l in lights:
    l.brightness = 127

```

#### Get Light objects as dictionaries

```python
# Get a dictionary with the light id as the key
lights = b.get_light_objects('id')

# Get the name of light 1, set the brightness to 127
lights[1].name
lights[1].brightness = 127

# Get a dictionary with the light name as the key
light_names = b.get_light_objects('name')

# Set the brightness of the bulb named "Kitchen"
light_names["Kitchen"].brightness = 254

# Set lights using name as key
for light in ['Kitchen', 'Bedroom', 'Garage']
    light_names[light].on = True
    light_names[light].hue = 15000
    light_names[light].saturation = 120

# Get a flat list of the light objects (same as calling b.lights)
lights_list = b.get_light_objects('list')

for light in lights_list:
   light.on = True
   light.brightness = 127

```

### Setting Transition Times

In the Hue API, transition times are specified in deciseconds (tenths
of a second). This
is not tracked as a device setting, but rather needs to be applied on
each individual transition command you want to control the time of.

This can be done by specifying a transitiontime keyword when calling
set_light on the bridge:


```python
# Set brightness of lamp 1 to max, rapidly
b.set_light(1, 'bri', 254, transitiontime=1)
```

As a convenience, the Light class implements a wrapper that remembers
a specified transition time for that light, and applies it
automatically to every transition:

```python
light = light_names['Kitchen']
light.transitiontime = 2
# this next transition will happen rapidly
light.brightness = 20    
```

Note that there is a known bug where turning a light off with the
transitiontime specified can cause the brightness level to behave
erratically when the light is turned back on. See [this
discussion](http://www.everyhue.com/vanilla/discussion/204/bug-with-brightness-when-requesting-ontrue-transitiontime5)
This package attempts to work around this issue by automatically
resetting the brightness when necessary, but this may not work in all
cases.

Transition times from 0-300 deciseconds (i.e. 0 - 30 seconds) have
been tested to work.

### Groups

You can also work with the groups functionality of the Bridge. If groups aren't working, try re-setting the bridge by unpluging it and plugging it back again.

```python

# List groups
b.get_group()

# List group 1
b.get_group(1)

# Get name of group 1
b.get_group(1, 'name')

# Get lights in group 1
b.get_group(1,'lights')

# Create a group with lights 1 and 3
b.create_group('Kitchen', [1,3])

# Rename group with id 1
b.set_group(1, 'name', 'New Group Name')

# Change lights within group 1
b.set_group(1, 'lights', [3,4])

# Turn group 1 off
b.set_group(1, 'on', False)

# Delete group 2
b.delete_group(1)

```

### Schedules

You can view, create and delete schedules using the following methods. Note that updates to the Hue API now use local time instead of UTC. If you have issues with schedules not triggering correctly, double check that the time zone is set correctly on your Hue Bridge and that your time in your code is not in UTC by default.

```python

# Get the list of different schedules
b.get_schedule()

# Get the data of a particular schedules
b.get_schedule(1)

# Create a schedule for a light, arguments are name, time, light_id, data (as a dictionary) and optional description
data = {'on': False, 'transitiontime': 600}
b.create_schedule('My schedule', '2012-11-12T22:34:00', 1, data, 'Bedtime' )

# Create a schedule for a group, same as above but with a group_id instead of light_id
data = {'on': False, 'transitiontime': 600}
b.create_group_schedule('My schedule', '2012-11-12T22:34:00', 0, data, 'Bedtime' )

# Delete a schedule
b.delete_schedule(1)

```

## Using phue with Max/MSP via Jython

You can use the phue library within [Max/MSP](http://www.cycling74.com) by using [Nick Rothwell's](http://www.cassiel.com) Jython objects.  He recently updated the version to support Jython 2.7 which is required for phue to work.

Download it here: https://github.com/cassiel/net.loadbang.jython

## Using phue on iOS via Pythonista

You can use phue on your iOS device via the [Pythonista](http://omz-software.com/pythonista) app.
This is a great way to build quick prototypes on iOS as you don't need to compile anything, you can code directly from the device itself.

See this little example:

http://www.youtube.com/embed/6K-fxWG6JSs

## Acknowledgments

Huge thanks to http://rsmck.co.uk/hue for hacking the protocol !

## License

MIT - http://opensource.org/licenses/MIT

"Hue Personal Wireless Lighting" is a trademark owned by Koninklijke Philips Electronics N.V., see www.meethue.com for more information.
I am in no way affiliated with the Philips organization.


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: TODO.md

#phue TODO

 * Find a more elegant way to deal with transitiontime
 * Add a Group class
 * Cleanup the connect and register_app methods
 * ~~Replace prints with proper logging mechanism~~
 * ~~Read/Write config file from cwd if home is not writable~~
 * ~~Store IP in config file~~
 * ~~Add support for groups~~
 * ~~Make username passable as argument and config file optional (so it can run when no write access is present like on iphone)~~
 * ~~Rename Bulb to Light to conform to API~~ (done)
 * ~~Add the ability to get and set the bridge name~~ (done)
 * ~~Update Bulbs dictionary when lights are renamed~~ (done)


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: examples/flicker.py

import random
from time import sleep
from phue import Bridge
b = Bridge('192.168.0.23')
b.connect()
lights = b.lights

def select_multiple_lights():
  '''
  Selects a random number of lights from the list of lights every time, resulting in a 'flickering' look.
  '''
  return random.choices(range(1,len(lights)+1),k=random.randint(1,len(lights)))

def multi_modal():
      '''
      Generates a random transition time between 0.2 and 0.7 seconds folowing a multi-modal distribution.
      This results in really fast transitions, but also slow transitions.
      '''
      return [2+int(random.betavariate(1,9)*5),2+int(random.betavariate(9,1)*5)][bool(random.getrandbits(1))]

def candle_flicker():
  '''
  Sends a command to change a certain number of lights a different color temperature every time. ct_inc was finicky, so I've used ct instead.
  All inputs use a beta distribution, as it looked more natural. A similar look can be achieved using a triangular distribution as well.
  '''
  b.set_light(select_multiple_lights(), {'transitiontime' : multi_modal(), 'on' : True, 'bri' : 1+int(random.betavariate(2,5)*253), 'ct' : 153+int(random.betavariate(9,4)*347)})
  
while True:
  candle_flicker()
  sleep(random.random())


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: examples/hue-rainbow.py

#!/usr/bin/python
# This script will have all lights, which are on, continuously loop through the rainbow 
# in the time specified in totalTime
from phue import Bridge
import random

b = Bridge() # Enter bridge IP here.

# If running for the first time, press button on bridge and run with b.connect() uncommented
# b.connect()

lights = b.get_light_objects()

totalTime = 30 # in seconds
transitionTime = 1 # in seconds

maxHue = 65535
hueIncrement = maxHue / totalTime

for light in lights:
    light.transitiontime = transitionTime * 10
    light.brightness = 254
    light.saturation = 254
    # light.on = True # uncomment to turn all lights on

hue = 0
while True:
    for light in lights:
	      light.hue = hue

    hue = (hue + hueIncrement) % maxHue

    sleep(transitionTime)


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: examples/random_colors.py

#!/usr/bin/python
from phue import Bridge
import random

b = Bridge() # Enter bridge IP here.

#If running for the first time, press button on bridge and run with b.connect() uncommented
#b.connect()

lights = b.get_light_objects()

for light in lights:
	light.brightness = 254
	light.xy = [random.random(),random.random()]




=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: examples/rgb_colors.py

#!/usr/bin/python
from phue import Bridge

def rgb_to_xy(red, green, blue):
    """ conversion of RGB colors to CIE1931 XY colors
    Formulas implemented from: https://gist.github.com/popcorn245/30afa0f98eea1c2fd34d

    Args: 
        red (float): a number between 0.0 and 1.0 representing red in the RGB space
        green (float): a number between 0.0 and 1.0 representing green in the RGB space
        blue (float): a number between 0.0 and 1.0 representing blue in the RGB space

    Returns:
        xy (list): x and y
    """

    # gamma correction
    red = pow((red + 0.055) / (1.0 + 0.055), 2.4) if red > 0.04045 else (red / 12.92)
    green = pow((green + 0.055) / (1.0 + 0.055), 2.4) if green > 0.04045 else (green / 12.92)
    blue =  pow((blue + 0.055) / (1.0 + 0.055), 2.4) if blue > 0.04045 else (blue / 12.92)

    # convert rgb to xyz
    x = red * 0.649926 + green * 0.103455 + blue * 0.197109
    y = red * 0.234327 + green * 0.743075 + blue * 0.022598
    z = green * 0.053077 + blue * 1.035763

    # convert xyz to xy
    x = x / (x + y + z)
    y = y / (x + y + z)

    # TODO check color gamut if known
     
    return [x, y]


b = Bridge() # Enter bridge IP here.

#If running for the first time, press button on bridge and run with b.connect() uncommented
#b.connect()

# RGB colors to XY  
xy = rgb_to_xy(1.0, 0.28627, 0.95686)

lights = b.get_light_objects()

for light in lights:
    # y might be used as brightness value, however, dark colors will turn the lights off
    #brightness = int(xy[1]*255)
    brightness = 255 
    light.xy = xy 


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: examples/tk_gui_complex.py

#!/usr/bin/python
from Tkinter import *
from phue import Bridge

'''
This example creates 3 sliders for the first 3 lights
and shows the name of the light under each slider.
There is also a checkbox to toggle the light.
'''

b = Bridge() # Enter bridge IP here.

#If running for the first time, press button on bridge and run with b.connect() uncommented
#b.connect()

root = Tk()

horizontal_frame = Frame(root)
horizontal_frame.pack()

lights = b.get_light_objects('id')

for light_id in lights:
    channel_frame = Frame(horizontal_frame)
    channel_frame.pack(side = LEFT)

    scale_command = lambda x, light_id=light_id: b.set_light(light_id,{'bri': int(x), 'transitiontime': 1})
    scale = Scale(channel_frame, from_ = 254, to = 0, command = scale_command, length = 200, showvalue = 0)
    scale.set(b.get_light(light_id,'bri'))
    scale.pack()

    button_var = BooleanVar()
    button_var.set(b.get_light(light_id, 'on'))
    button_command = lambda button_var=button_var, light_id=light_id: b.set_light(light_id, 'on', button_var.get())
    button = Checkbutton(channel_frame, variable = button_var, command = button_command)
    button.pack()

    label = Label(channel_frame)
    label.config(text = b.get_light(light_id,'name'))
    label.pack()

root.mainloop()

=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: examples/tk_gui_hsb.py

#!/usr/bin/python
from Tkinter import *
from phue import Bridge

'''
This example creates 3 sliders for the first 3 lights
and shows the name of the light under each slider.
There is also a checkbox to toggle the light.
'''

b = Bridge() # Enter bridge IP here.

#If running for the first time, press button on bridge and run with b.connect() uncommented
#b.connect()

root = Tk()

lights = b.get_light_objects('id')
light_selection = []


def curry(fn, *cargs, **ckwargs):
    def call_fn(*fargs, **fkwargs):
        d = ckwargs.copy()
        d.update(fkwargs)
        return fn(*(cargs + fargs), **d)
    return call_fn

def hue_command(x):
    if len(light_selection) > 0:
        b.set_light(light_selection, 'hue', int(x))
def sat_command(x):
    if len(light_selection) > 0:
        b.set_light(light_selection, 'sat', int(x))
def bri_command(x):
    if len(light_selection) > 0:
        b.set_light(light_selection, 'bri', int(x))

def select_button_command(light, button_state):
    global light_selection
    if button_state.get():
        light_selection.append(light)
    else:
        light_selection.remove(light)
    print light_selection

slider_frame = Frame(root)
slider_frame.pack(pady = 10)

channels_frame = Frame(root)
channels_frame.pack()

label_frame = Frame(channels_frame)
label_frame.pack(side=LEFT, padx = 10)

label_state = Label(label_frame)
label_state.config(text = 'State')
label_state.pack()

label_select = Label(label_frame)
label_select.config(text = 'Select')
label_select.pack()

label_name = Label(label_frame)
label_name.config(text = 'Name')
label_name.pack()

hue_slider = Scale(slider_frame, from_ = 65535, to = 0, command = hue_command)
sat_slider = Scale(slider_frame, from_ = 254, to = 0, command = sat_command)
bri_slider = Scale(slider_frame, from_ = 254, to = 0, command = bri_command)
hue_slider.pack(side=LEFT)
sat_slider.pack(side=LEFT)
bri_slider.pack(side=LEFT)


for light_id in lights:
    channel_frame = Frame(channels_frame)
    channel_frame.pack(side = LEFT, padx = 10)
    
    button_var = BooleanVar()
    button_var.set(b.get_light(light_id, 'on'))
    button_command = lambda button_var=button_var, light_id=light_id: b.set_light(light_id, 'on', button_var.get())
    button = Checkbutton(channel_frame, variable = button_var, command = button_command)
    button.pack()

    select_button_var = BooleanVar()
    #select_button_var.set(b.get_light(light_id, 'on'))
    select_button_callback = curry(select_button_command, light_id, select_button_var)
    select_button = Checkbutton(channel_frame, variable = select_button_var, command = select_button_callback)
    select_button.pack()

    label = Label(channel_frame)
    label.config(text = b.get_light(light_id,'name'))
    label.pack()

root.mainloop()

=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: examples/tk_gui_simple.py

#!/usr/bin/python
from Tkinter import *
from phue import Bridge

'''
This example creates a slider that controls the
brightness of the first 3 lights.
'''

b = Bridge() # Enter bridge IP here.

#If running for the first time, press button on bridge and run with b.connect() uncommented
#b.connect()

b.set_light([1,2,3], 'on', True)

def sel(data):
    b.set_light([1,2,3],{'bri':int(data), 'transitiontime': 1})

root = Tk()
scale = Scale( root, from_ = 254, to = 0, command= sel, length = 200 )
scale.set(b.get_light(1,'bri'))
scale.pack(anchor=CENTER)

root.mainloop()

=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: phue.py

#!/usr/bin/python
# -*- coding: utf-8 -*-

'''
phue by Nathanaël Lécaudé - A Philips Hue Python library
Contributions by Marshall Perrin, Justin Lintz
https://github.com/studioimaginaire/phue
Original protocol hacking by rsmck : http://rsmck.co.uk/hue

Published under the MIT license - See LICENSE file for more details.

"Hue Personal Wireless Lighting" is a trademark owned by Koninklijke Philips Electronics N.V., see www.meethue.com for more information.
I am in no way affiliated with the Philips organization.

'''

import json
import logging
import os
import platform
import sys
import socket
if sys.version_info[0] > 2:
    PY3K = True
else:
    PY3K = False

if PY3K:
    import http.client as httplib
else:
    import httplib

logger = logging.getLogger('phue')


if platform.system() == 'Windows':
    USER_HOME = 'USERPROFILE'
else:
    USER_HOME = 'HOME'

__version__ = '1.2'


def is_string(data):
    """Utility method to see if data is a string."""
    if PY3K:
        return isinstance(data, str)
    else:
        return isinstance(data, str) or isinstance(data, unicode)  # noqa

def encodeString(string):
    """Utility method to encode strings as utf-8."""
    if PY3K:
        return string
    else:
        return string.encode('utf-8')

def decodeString(string):
    """Utility method to decode strings as utf-8."""
    if PY3K:
        return string
    else:
        return string.decode('utf-8')

class PhueException(Exception):

    def __init__(self, id, message):
        self.id = id
        self.message = message


class PhueRegistrationException(PhueException):
    pass


class PhueRequestTimeout(PhueException):
    pass


class Light(object):

    """ Hue Light object

    Light settings can be accessed or set via the properties of this object.

    """
    def __init__(self, bridge, light_id):
        self.bridge = bridge
        self.light_id = light_id

        self._name = None
        self._on = None
        self._brightness = None
        self._colormode = None
        self._hue = None
        self._saturation = None
        self._xy = None
        self._colortemp = None
        self._effect = None
        self._alert = None
        self.transitiontime = None  # default
        self._reset_bri_after_on = None
        self._reachable = None
        self._type = None

    def __repr__(self):
        # like default python repr function, but add light name
        return '<{0}.{1} object "{2}" at {3}>'.format(
            self.__class__.__module__,
            self.__class__.__name__,
            self.name,
            hex(id(self)))

    # Wrapper functions for get/set through the bridge, adding support for
    # remembering the transitiontime parameter if the user has set it
    def _get(self, *args, **kwargs):
        return self.bridge.get_light(self.light_id, *args, **kwargs)

    def _set(self, *args, **kwargs):

        if self.transitiontime is not None:
            kwargs['transitiontime'] = self.transitiontime
            logger.debug("Setting with transitiontime = {0} ds = {1} s".format(
                self.transitiontime, float(self.transitiontime) / 10))

            if (args[0] == 'on' and args[1] is False) or (
                    kwargs.get('on', True) is False):
                self._reset_bri_after_on = True
        return self.bridge.set_light(self.light_id, *args, **kwargs)

    @property
    def name(self):
        '''Get or set the name of the light [string]'''
        return encodeString(self._get('name'))

    @name.setter
    def name(self, value):
        old_name = self.name
        self._name = value
        self._set('name', self._name)

        logger.debug("Renaming light from '{0}' to '{1}'".format(
            old_name, value))

        self.bridge.lights_by_name[self.name] = self
        del self.bridge.lights_by_name[old_name]

    @property
    def on(self):
        '''Get or set the state of the light [True|False]'''
        self._on = self._get('on')
        return self._on

    @on.setter
    def on(self, value):

        # Some added code here to work around known bug where
        # turning off with transitiontime set makes it restart on brightness = 1
        # see
        # http://www.everyhue.com/vanilla/discussion/204/bug-with-brightness-when-requesting-ontrue-transitiontime5

        # if we're turning off, save whether this bug in the hardware has been
        # invoked
        if self._on and value is False:
            self._reset_bri_after_on = self.transitiontime is not None
            if self._reset_bri_after_on:
                logger.warning(
                    'Turned off light with transitiontime specified, brightness will be reset on power on')

        self._set('on', value)

        # work around bug by resetting brightness after a power on
        if self._on is False and value is True:
            if self._reset_bri_after_on:
                logger.warning(
                    'Light was turned off with transitiontime specified, brightness needs to be reset now.')
                self.brightness = self._brightness
                self._reset_bri_after_on = False

        self._on = value

    @property
    def colormode(self):
        '''Get the color mode of the light [hs|xy|ct]'''
        self._colormode = self._get('colormode')
        return self._colormode

    @property
    def brightness(self):
        '''Get or set the brightness of the light [0-254].

        0 is not off'''

        self._brightness = self._get('bri')
        return self._brightness

    @brightness.setter
    def brightness(self, value):
        self._brightness = value
        self._set('bri', self._brightness)

    @property
    def hue(self):
        '''Get or set the hue of the light [0-65535]'''
        self._hue = self._get('hue')
        return self._hue

    @hue.setter
    def hue(self, value):
        self._hue = int(value)
        self._set('hue', self._hue)

    @property
    def saturation(self):
        '''Get or set the saturation of the light [0-254]

        0 = white
        254 = most saturated
        '''
        self._saturation = self._get('sat')
        return self._saturation

    @saturation.setter
    def saturation(self, value):
        self._saturation = value
        self._set('sat', self._saturation)

    @property
    def xy(self):
        '''Get or set the color coordinates of the light [ [0.0-1.0, 0.0-1.0] ]

        This is in a color space similar to CIE 1931 (but not quite identical)
        '''
        self._xy = self._get('xy')
        return self._xy

    @xy.setter
    def xy(self, value):
        self._xy = value
        self._set('xy', self._xy)

    @property
    def colortemp(self):
        '''Get or set the color temperature of the light, in units of mireds [154-500]'''
        self._colortemp = self._get('ct')
        return self._colortemp

    @colortemp.setter
    def colortemp(self, value):
        if value < 154:
            logger.warn('154 mireds is coolest allowed color temp')
        elif value > 500:
            logger.warn('500 mireds is warmest allowed color temp')
        self._colortemp = value
        self._set('ct', self._colortemp)

    @property
    def colortemp_k(self):
        '''Get or set the color temperature of the light, in units of Kelvin [2000-6500]'''
        self._colortemp = self._get('ct')
        return int(round(1e6 / self._colortemp))

    @colortemp_k.setter
    def colortemp_k(self, value):
        if value > 6500:
            logger.warn('6500 K is max allowed color temp')
            value = 6500
        elif value < 2000:
            logger.warn('2000 K is min allowed color temp')
            value = 2000

        colortemp_mireds = int(round(1e6 / value))
        logger.debug("{0:d} K is {1} mireds".format(value, colortemp_mireds))
        self.colortemp = colortemp_mireds

    @property
    def effect(self):
        '''Check the effect setting of the light. [none|colorloop]'''
        self._effect = self._get('effect')
        return self._effect

    @effect.setter
    def effect(self, value):
        self._effect = value
        self._set('effect', self._effect)

    @property
    def alert(self):
        '''Get or set the alert state of the light [select|lselect|none]'''
        self._alert = self._get('alert')
        return self._alert

    @alert.setter
    def alert(self, value):
        if value is None:
            value = 'none'
        self._alert = value
        self._set('alert', self._alert)

    @property
    def reachable(self):
        '''Get the reachable state of the light [boolean]'''
        self._reachable = self._get('reachable')
        return self._reachable

    @property
    def type(self):
        '''Get the type of the light [string]'''
        self._type = self._get('type')
        return self._type


class SensorState(dict):
    def __init__(self, bridge, sensor_id):
        self._bridge = bridge
        self._sensor_id = sensor_id

    def __setitem__(self, key, value):
        dict.__setitem__(self, key, value)
        self._bridge.set_sensor_state(self._sensor_id, self)


class SensorConfig(dict):
    def __init__(self, bridge, sensor_id):
        self._bridge = bridge
        self._sensor_id = sensor_id

    def __setitem__(self, key, value):
        dict.__setitem__(self, key, value)
        self._bridge.set_sensor_config(self._sensor_id, self)


class Sensor(object):

    """ Hue Sensor object

    Sensor config and state can be read and updated via the properties of this object

    """
    def __init__(self, bridge, sensor_id):
        self.bridge = bridge
        self.sensor_id = sensor_id

        self._name = None
        self._model = None
        self._swversion = None
        self._type = None
        self._uniqueid = None
        self._manufacturername = None
        self._state = SensorState(bridge, sensor_id)
        self._config = {}
        self._recycle = None

    def __repr__(self):
        # like default python repr function, but add sensor name
        return '<{0}.{1} object "{2}" at {3}>'.format(
            self.__class__.__module__,
            self.__class__.__name__,
            self.name,
            hex(id(self)))

    # Wrapper functions for get/set through the bridge
    def _get(self, *args, **kwargs):
        return self.bridge.get_sensor(self.sensor_id, *args, **kwargs)

    def _set(self, *args, **kwargs):
        return self.bridge.set_sensor(self.sensor_id, *args, **kwargs)

    @property
    def name(self):
        '''Get or set the name of the sensor [string]'''
        return encodeString(self._get('name'))

    @name.setter
    def name(self, value):
        old_name = self.name
        self._name = value
        self._set('name', self._name)

        logger.debug("Renaming sensor from '{0}' to '{1}'".format(
            old_name, value))

        self.bridge.sensors_by_name[self.name] = self
        del self.bridge.sensors_by_name[old_name]

    @property
    def modelid(self):
        '''Get a unique identifier of the hardware model of this sensor [string]'''
        self._modelid = self._get('modelid')
        return self._modelid

    @property
    def swversion(self):
        '''Get the software version identifier of the sensor's firmware [string]'''
        self._swversion = self._get('swversion')
        return self._swversion

    @property
    def type(self):
        '''Get the sensor type of this device [string]'''
        self._type = self._get('type')
        return self._type

    @property
    def uniqueid(self):
        '''Get the unique device ID of this sensor [string]'''
        self._uniqueid = self._get('uniqueid')
        return self._uniqueid

    @property
    def manufacturername(self):
        '''Get the name of the manufacturer [string]'''
        self._manufacturername = self._get('manufacturername')
        return self._manufacturername

    @property
    def state(self):
        ''' A dictionary of sensor state. Some values can be updated, some are read-only. [dict]'''
        data = self._get('state')
        self._state.clear()
        self._state.update(data)
        return self._state

    @state.setter
    def state(self, data):
        self._state.clear()
        self._state.update(data)

    @property
    def config(self):
        ''' A dictionary of sensor config. Some values can be updated, some are read-only. [dict]'''
        data = self._get('config')
        self._config.clear()
        self._config.update(data)
        return self._config

    @config.setter
    def config(self, data):
        self._config.clear()
        self._config.update(data)

    @property
    def recycle(self):
        ''' True if this resource should be automatically removed when the last reference to it disappears [bool]'''
        self._recycle = self._get('manufacturername')
        return self._manufacturername


class Group(Light):

    """ A group of Hue lights, tracked as a group on the bridge

    Example:

        >>> b = Bridge()
        >>> g1 = Group(b, 1)
        >>> g1.hue = 50000 # all lights in that group turn blue
        >>> g1.on = False # all will turn off

        >>> g2 = Group(b, 'Kitchen')  # you can also look up groups by name
        >>> # will raise a LookupError if the name doesn't match

    """

    def __init__(self, bridge, group_id):
        Light.__init__(self, bridge, None)
        del self.light_id  # not relevant for a group
        self._any_on = None
        self._all_on = None

        try:
            self.group_id = int(group_id)
        except:
            name = group_id
            groups = bridge.get_group()
            for idnumber, info in groups.items():
                if info['name'] == decodeString(name):
                    self.group_id = int(idnumber)
                    break
            else:
                raise LookupError("Could not find a group by that name.")

    # Wrapper functions for get/set through the bridge, adding support for
    # remembering the transitiontime parameter if the user has set it
    def _get(self, *args, **kwargs):
        return self.bridge.get_group(self.group_id, *args, **kwargs)

    def _set(self, *args, **kwargs):
        # let's get basic group functionality working first before adding
        # transition time...
        if self.transitiontime is not None:
            kwargs['transitiontime'] = self.transitiontime
            logger.debug("Setting with transitiontime = {0} ds = {1} s".format(
                self.transitiontime, float(self.transitiontime) / 10))

            if (args[0] == 'on' and args[1] is False) or (
                    kwargs.get('on', True) is False):
                self._reset_bri_after_on = True
        return self.bridge.set_group(self.group_id, *args, **kwargs)

    @property
    def name(self):
        '''Get or set the name of the light group [string]'''
        return encodeString(self._get('name'))

    @name.setter
    def name(self, value):
        old_name = self.name
        self._name = value
        logger.debug("Renaming light group from '{0}' to '{1}'".format(
            old_name, value))
        self._set('name', self._name)

    @property
    def any_on(self):
        """If true at least one light in the group is on"""
        self._any_on = self._get('any_on')
        return self._any_on

    @property
    def all_on(self):
        """If true all lights in the group are on"""
        self._all_on = self._get('all_on')
        return self._all_on

    @property
    def lights(self):
        """ Return a list of all lights in this group"""
        # response = self.bridge.request('GET', '/api/{0}/groups/{1}'.format(self.bridge.username, self.group_id))
        # return [Light(self.bridge, int(l)) for l in response['lights']]
        return [Light(self.bridge, int(l)) for l in self._get('lights')]

    @lights.setter
    def lights(self, value):
        """ Change the lights that are in this group"""
        logger.debug("Setting lights in group {0} to {1}".format(
            self.group_id, str(value)))
        self._set('lights', value)


class AllLights(Group):

    """ All the Hue lights connected to your bridge

    This makes use of the semi-documented feature that
    "Group 0" of lights appears to be a group automatically
    consisting of all lights.  This is not returned by
    listing the groups, but is accessible if you explicitly
    ask for group 0.
    """
    def __init__(self, bridge=None):
        if bridge is None:
            bridge = Bridge()
        Group.__init__(self, bridge, 0)


class Scene(object):
    """ Container for Scene """

    def __init__(self, sid, appdata=None, lastupdated=None,
                 lights=None, locked=False, name="", owner="",
                 picture="", recycle=False, version=0, type="", group="",
                 *args, **kwargs):
        self.scene_id = sid
        self.appdata = appdata or {}
        self.lastupdated = lastupdated
        if lights is not None:
            self.lights = sorted([int(x) for x in lights])
        else:
            self.lights = []
        self.locked = locked
        self.name = encodeString(name)
        self.owner = owner
        self.picture = picture
        self.recycle = recycle
        self.version = version
        self.type = type
        self.group = group

    def __repr__(self):
        # like default python repr function, but add scene name
        return '<{0}.{1} id="{2}" name="{3}" lights={4}>'.format(
            self.__class__.__module__,
            self.__class__.__name__,
            self.scene_id,
            self.name,
            self.lights)


class Bridge(object):

    """ Interface to the Hue ZigBee bridge

    You can obtain Light objects by calling the get_light_objects method:

        >>> b = Bridge(ip='192.168.1.100')
        >>> b.get_light_objects()
        [<phue.Light at 0x10473d750>,
         <phue.Light at 0x1046ce110>]

    Or more succinctly just by accessing this Bridge object as a list or dict:

        >>> b[1]
        <phue.Light at 0x10473d750>
        >>> b['Kitchen']
        <phue.Light at 0x10473d750>



    """
    def __init__(self, ip=None, username=None, config_file_path=None):
        """ Initialization function.

        Parameters:
        ------------
        ip : string
            IP address as dotted quad
        username : string, optional

        """

        if config_file_path is not None:
            self.config_file_path = config_file_path
        elif os.getenv(USER_HOME) is not None and os.access(os.getenv(USER_HOME), os.W_OK):
            self.config_file_path = os.path.join(os.getenv(USER_HOME), '.python_hue')
        elif 'iPad' in platform.machine() or 'iPhone' in platform.machine() or 'iPad' in platform.machine():
            self.config_file_path = os.path.join(os.getenv(USER_HOME), 'Documents', '.python_hue')
        else:
            self.config_file_path = os.path.join(os.getcwd(), '.python_hue')

        self.ip = ip
        self.username = username
        self.lights_by_id = {}
        self.lights_by_name = {}
        self.sensors_by_id = {}
        self.sensors_by_name = {}
        self._name = None

        # self.minutes = 600 # these do not seem to be used anywhere?
        # self.seconds = 10

        self.connect()

    @property
    def name(self):
        '''Get or set the name of the bridge [string]'''
        self._name = self.request(
            'GET', '/api/' + self.username + '/config')['name']
        return self._name

    @name.setter
    def name(self, value):
        self._name = value
        data = {'name': self._name}
        self.request(
            'PUT', '/api/' + self.username + '/config', data)

    def request(self, mode='GET', address=None, data=None):
        """ Utility function for HTTP GET/PUT requests for the API"""
        connection = httplib.HTTPConnection(self.ip, timeout=10)

        try:
            if mode == 'GET' or mode == 'DELETE':
                connection.request(mode, address)
            if mode == 'PUT' or mode == 'POST':
                connection.request(mode, address, json.dumps(data))

            logger.debug("{0} {1} {2}".format(mode, address, str(data)))

        except socket.timeout:
            error = "{} Request to {}{} timed out.".format(mode, self.ip, address)

            logger.exception(error)
            raise PhueRequestTimeout(None, error)

        result = connection.getresponse()
        response = result.read()
        connection.close()
        if PY3K:
            response = response.decode('utf-8')

        logger.debug(response)
        return json.loads(response)

    def get_ip_address(self, set_result=False):

        """ Get the bridge ip address from the meethue.com nupnp api """

        connection = httplib.HTTPSConnection('www.meethue.com')
        connection.request('GET', '/api/nupnp')

        logger.info('Connecting to meethue.com/api/nupnp')

        result = connection.getresponse()

        if PY3K:
            data = json.loads(str(result.read(), encoding='utf-8'))
        else:
            result_str = result.read()
            data = json.loads(result_str)

        """ close connection after read() is done, to prevent issues with read() """

        connection.close()

        ip = str(data[0]['internalipaddress'])

        if ip:
            if set_result:
                self.ip = ip

            return ip
        else:
            return False

    def register_app(self):
        """ Register this computer with the Hue bridge hardware and save the resulting access token """
        registration_request = {"devicetype": "python_hue"}
        response = self.request('POST', '/api', registration_request)
        for line in response:
            for key in line:
                if 'success' in key:
                    with open(self.config_file_path, 'w') as f:
                        logger.info(
                            'Writing configuration file to ' + self.config_file_path)
                        f.write(json.dumps({self.ip: line['success']}))
                        logger.info('Reconnecting to the bridge')
                    self.connect()
                if 'error' in key:
                    error_type = line['error']['type']
                    if error_type == 101:
                        raise PhueRegistrationException(error_type,
                                                        'The link button has not been pressed in the last 30 seconds.')
                    if error_type == 7:
                        raise PhueException(error_type,
                                            'Unknown username')

    def connect(self):
        """ Connect to the Hue bridge """
        logger.info('Attempting to connect to the bridge...')
        # If the ip and username were provided at class init
        if self.ip is not None and self.username is not None:
            logger.info('Using ip: ' + self.ip)
            logger.info('Using username: ' + self.username)
            return

        if self.ip is None or self.username is None:
            try:
                with open(self.config_file_path) as f:
                    config = json.loads(f.read())
                    if self.ip is None:
                        self.ip = list(config.keys())[0]
                        logger.info('Using ip from config: ' + self.ip)
                    else:
                        logger.info('Using ip: ' + self.ip)
                    if self.username is None:
                        self.username = config[self.ip]['username']
                        logger.info(
                            'Using username from config: ' + self.username)
                    else:
                        logger.info('Using username: ' + self.username)
            except Exception as e:
                logger.info(
                    'Error opening config file, will attempt bridge registration')
                self.register_app()

    def get_light_id_by_name(self, name):
        """ Lookup a light id based on string name. Case-sensitive. """
        lights = self.get_light()
        for light_id in lights:
            if decodeString(name) == lights[light_id]['name']:
                return light_id
        return False

    def get_light_objects(self, mode='list'):
        """Returns a collection containing the lights, either by name or id (use 'id' or 'name' as the mode)
        The returned collection can be either a list (default), or a dict.
        Set mode='id' for a dict by light ID, or mode='name' for a dict by light name.   """
        if self.lights_by_id == {}:
            lights = self.request('GET', '/api/' + self.username + '/lights/')
            for light in lights:
                self.lights_by_id[int(light)] = Light(self, int(light))
                self.lights_by_name[lights[light][
                    'name']] = self.lights_by_id[int(light)]
        if mode == 'id':
            return self.lights_by_id
        if mode == 'name':
            return self.lights_by_name
        if mode == 'list':
            # return ligts in sorted id order, dicts have no natural order
            return [self.lights_by_id[id] for id in sorted(self.lights_by_id)]

    def get_sensor_id_by_name(self, name):
        """ Lookup a sensor id based on string name. Case-sensitive. """
        sensors = self.get_sensor()
        for sensor_id in sensors:
            if decodeString(name) == sensors[sensor_id]['name']:
                return sensor_id
        return False

    def get_sensor_objects(self, mode='list'):
        """Returns a collection containing the sensors, either by name or id (use 'id' or 'name' as the mode)
        The returned collection can be either a list (default), or a dict.
        Set mode='id' for a dict by sensor ID, or mode='name' for a dict by sensor name.   """
        if self.sensors_by_id == {}:
            sensors = self.request('GET', '/api/' + self.username + '/sensors/')
            for sensor in sensors:
                self.sensors_by_id[int(sensor)] = Sensor(self, int(sensor))
                self.sensors_by_name[sensors[sensor][
                    'name']] = self.sensors_by_id[int(sensor)]
        if mode == 'id':
            return self.sensors_by_id
        if mode == 'name':
            return self.sensors_by_name
        if mode == 'list':
            return self.sensors_by_id.values()

    def __getitem__(self, key):
        """ Lights are accessibly by indexing the bridge either with
        an integer index or string name. """
        if self.lights_by_id == {}:
            self.get_light_objects()

        try:
            return self.lights_by_id[key]
        except:
            try:
                return self.lights_by_name[decodeString(key)]
            except:
                raise KeyError(
                    'Not a valid key (integer index starting with 1, or light name): ' + str(key))

    @property
    def lights(self):
        """ Access lights as a list """
        return self.get_light_objects()

    def get_api(self):
        """ Returns the full api dictionary """
        return self.request('GET', '/api/' + self.username)

    def get_light(self, light_id=None, parameter=None):
        """ Gets state by light_id and parameter"""

        if is_string(light_id):
            light_id = self.get_light_id_by_name(light_id)
        if light_id is None:
            return self.request('GET', '/api/' + self.username + '/lights/')
        state = self.request(
            'GET', '/api/' + self.username + '/lights/' + str(light_id))
        if parameter is None:
            return state
        if parameter in ['name', 'type', 'uniqueid', 'swversion']:
            return state[parameter]
        else:
            try:
                return state['state'][parameter]
            except KeyError as e:
                raise KeyError(
                    'Not a valid key, parameter %s is not associated with light %s)'
                    % (parameter, light_id))

    def set_light(self, light_id, parameter, value=None, transitiontime=None):
        """ Adjust properties of one or more lights.

        light_id can be a single lamp or an array of lamps
        parameters: 'on' : True|False , 'bri' : 0-254, 'sat' : 0-254, 'ct': 154-500
                    'xy' : [0.0-1.0, 0.0-1.0]

        transitiontime : in **deciseconds**, time for this transition to take place
                         Note that transitiontime only applies to *this* light
                         command, it is not saved as a setting for use in the future!
                         Use the Light class' transitiontime attribute if you want
                         persistent time settings.

        """
        if isinstance(parameter, dict):
            data = parameter
        else:
            data = {parameter: value}

        if transitiontime is not None:
            data['transitiontime'] = int(round(
                transitiontime))  # must be int for request format

        light_id_array = light_id
        if isinstance(light_id, int) or is_string(light_id):
            light_id_array = [light_id]
        result = []
        for light in light_id_array:
            logger.debug(str(data))
            if parameter == 'name':
                result.append(self.request('PUT', '/api/' + self.username + '/lights/' + str(
                    light_id), data))
            else:
                if is_string(light):
                    converted_light = self.get_light_id_by_name(light)
                else:
                    converted_light = light
                result.append(self.request('PUT', '/api/' + self.username + '/lights/' + str(
                    converted_light) + '/state', data))
            if 'error' in list(result[-1][0].keys()):
                logger.warn("ERROR: {0} for light {1}".format(
                    result[-1][0]['error']['description'], light))

        logger.debug(result)
        return result

    # Sensors #####

    @property
    def sensors(self):
        """ Access sensors as a list """
        return self.get_sensor_objects()

    def create_sensor(self, name, modelid, swversion, sensor_type, uniqueid, manufacturername, state={}, config={}, recycle=False):
        """ Create a new sensor in the bridge. Returns (ID,None) of the new sensor or (None,message) if creation failed. """
        data = {
            "name": name,
            "modelid": modelid,
            "swversion": swversion,
            "type": sensor_type,
            "uniqueid": uniqueid,
            "manufacturername": manufacturername,
            "recycle": recycle
        }
        if (isinstance(state, dict) and state != {}):
            data["state"] = state

        if (isinstance(config, dict) and config != {}):
            data["config"] = config

        result = self.request('POST', '/api/' + self.username + '/sensors/', data)

        if ("success" in result[0].keys()):
            new_id = result[0]["success"]["id"]
            logger.debug("Created sensor with ID " + new_id)
            new_sensor = Sensor(self, int(new_id))
            self.sensors_by_id[new_id] = new_sensor
            self.sensors_by_name[name] = new_sensor
            return new_id, None
        else:
            logger.debug("Failed to create sensor:" + repr(result[0]))
            return None, result[0]

    def get_sensor(self, sensor_id=None, parameter=None):
        """ Gets state by sensor_id and parameter"""

        if is_string(sensor_id):
            sensor_id = self.get_sensor_id_by_name(sensor_id)
        if sensor_id is None:
            return self.request('GET', '/api/' + self.username + '/sensors/')
        data = self.request(
            'GET', '/api/' + self.username + '/sensors/' + str(sensor_id))

        if isinstance(data, list):
            logger.debug("Unable to read sensor with ID {0}: {1}".format(sensor_id, repr(data)))
            return None

        if parameter is None:
            return data
        return data[parameter]

    def set_sensor(self, sensor_id, parameter, value=None):
        """ Adjust properties of a sensor

        sensor_id must be a single sensor.
        parameters: 'name' : string

        """
        if isinstance(parameter, dict):
            data = parameter
        else:
            data = {parameter: value}

        result = None
        logger.debug(str(data))
        result = self.request('PUT', '/api/' + self.username + '/sensors/' + str(
            sensor_id), data)
        if 'error' in list(result[0].keys()):
            logger.warn("ERROR: {0} for sensor {1}".format(
                result[0]['error']['description'], sensor_id))

        logger.debug(result)
        return result

    def set_sensor_state(self, sensor_id, parameter, value=None):
        """ Adjust the "state" object of a sensor

        sensor_id must be a single sensor.
        parameters: any parameter(s) present in the sensor's "state" dictionary.

        """
        self.set_sensor_content(sensor_id, parameter, value, "state")

    def set_sensor_config(self, sensor_id, parameter, value=None):
        """ Adjust the "config" object of a sensor

        sensor_id must be a single sensor.
        parameters: any parameter(s) present in the sensor's "config" dictionary.

        """
        self.set_sensor_content(sensor_id, parameter, value, "config")

    def set_sensor_content(self, sensor_id, parameter, value=None, structure="state"):
        """ Adjust the "state" or "config" structures of a sensor
        """
        if (structure != "state" and structure != "config"):
            logger.debug("set_sensor_current expects structure 'state' or 'config'.")
            return False

        if isinstance(parameter, dict):
            data = parameter.copy()
        else:
            data = {parameter: value}

        # Attempting to set this causes an error.
        if "lastupdated" in data:
            del data["lastupdated"]

        result = None
        logger.debug(str(data))
        result = self.request('PUT', '/api/' + self.username + '/sensors/' + str(
            sensor_id) + "/" + structure, data)
        if 'error' in list(result[0].keys()):
            logger.warn("ERROR: {0} for sensor {1}".format(
                result[0]['error']['description'], sensor_id))

        logger.debug(result)
        return result

    def delete_sensor(self, sensor_id):
        try:
            name = self.sensors_by_id[sensor_id].name
            del self.sensors_by_name[name]
            del self.sensors_by_id[sensor_id]
            return self.request('DELETE', '/api/' + self.username + '/sensors/' + str(sensor_id))
        except:
            logger.debug("Unable to delete nonexistent sensor with ID {0}".format(sensor_id))

    # Groups of lights #####
    @property
    def groups(self):
        """ Access groups as a list """
        return [Group(self, int(groupid)) for groupid in self.get_group().keys()]

    def get_group_id_by_name(self, name):
        """ Lookup a group id based on string name. Case-sensitive. """
        groups = self.get_group()
        for group_id in groups:
            if decodeString(name) == groups[group_id]['name']:
                return int(group_id)
        return False

    def get_group(self, group_id=None, parameter=None):
        if is_string(group_id):
            group_id = self.get_group_id_by_name(group_id)
        if group_id is False:
            logger.error('Group name does not exist')
            return
        if group_id is None:
            return self.request('GET', '/api/' + self.username + '/groups/')
        if parameter is None:
            return self.request('GET', '/api/' + self.username + '/groups/' + str(group_id))
        elif parameter == 'name' or parameter == 'lights':
            return self.request('GET', '/api/' + self.username + '/groups/' + str(group_id))[parameter]
        elif parameter in ('any_on', 'all_on'):
            return self.request('GET', '/api/' + self.username + '/groups/' + str(group_id))['state'][parameter]
        else:
            return self.request('GET', '/api/' + self.username + '/groups/' + str(group_id))['action'][parameter]

    def set_group(self, group_id, parameter, value=None, transitiontime=None):
        """ Change light settings for a group

        group_id : int, id number for group
        parameter : 'name' or 'lights'
        value: string, or list of light IDs if you're setting the lights

        """

        if isinstance(parameter, dict):
            data = parameter
        elif parameter == 'lights' and (isinstance(value, list) or isinstance(value, int)):
            if isinstance(value, int):
                value = [value]
            data = {parameter: [str(x) for x in value]}
        else:
            data = {parameter: value}

        if transitiontime is not None:
            data['transitiontime'] = int(round(
                transitiontime))  # must be int for request format

        group_id_array = group_id
        if isinstance(group_id, int) or is_string(group_id):
            group_id_array = [group_id]
        result = []
        for group in group_id_array:
            logger.debug(str(data))
            if is_string(group):
                converted_group = self.get_group_id_by_name(group)
            else:
                converted_group = group
            if converted_group is False:
                logger.error('Group name does not exist')
                return
            if parameter == 'name' or parameter == 'lights':
                result.append(self.request('PUT', '/api/' + self.username + '/groups/' + str(converted_group), data))
            else:
                result.append(self.request('PUT', '/api/' + self.username + '/groups/' + str(converted_group) + '/action', data))

        if 'error' in list(result[-1][0].keys()):
            logger.warn("ERROR: {0} for group {1}".format(
                result[-1][0]['error']['description'], group))

        logger.debug(result)
        return result

    def create_group(self, name, lights=None):
        """ Create a group of lights

        Parameters
        ------------
        name : string
            Name for this group of lights
        lights : list
            List of lights to be in the group.

        """
        data = {'lights': [str(x) for x in lights], 'name': name}
        return self.request('POST', '/api/' + self.username + '/groups/', data)

    def delete_group(self, group_id):
        return self.request('DELETE', '/api/' + self.username + '/groups/' + str(group_id))

    # Scenes #####
    @property
    def scenes(self):
        return [Scene(k, **v) for k, v in self.get_scene().items()]

    def create_group_scene(self, name, group):
        """Create a Group Scene

        Group scenes are based on the definition of groups and contain always all
        lights from the selected group. No other lights from other rooms can be
        added to a group scene and the group scene can not contain less lights
        as available in the selected group. If a group is extended with new lights,
        the new lights are added with default color to all group scenes based on
        the corresponding group. This app has no influence on this behavior, it
        was defined by Philips.

        :param name: The name of the scene to be created
        :param group: The group id of where the scene will be added
        :return:
        """
        data = {
            "name": name,
            "group": group,
            "recycle": True,
            "type": "GroupScene"
        }
        return self.request('POST', '/api/' + self.username + '/scenes', data)

    def modify_scene(self, scene_id, data):
        return self.request('PUT', '/api/' + self.username + '/scenes/' + scene_id, data)

    def get_scene(self):
        return self.request('GET', '/api/' + self.username + '/scenes')

    def activate_scene(self, group_id, scene_id, transition_time=4):
        return self.request('PUT', '/api/' + self.username + '/groups/' +
                            str(group_id) + '/action',
                            {
                                "scene": scene_id,
                                "transitiontime": transition_time
                            })

    def run_scene(self, group_name, scene_name, transition_time=4):
        """Run a scene by group and scene name.

        As of 1.11 of the Hue API the scenes are accessable in the
        API. With the gen 2 of the official HUE app everything is
        organized by room groups.

        This provides a convenience way of activating scenes by group
        name and scene name. If we find exactly 1 group and 1 scene
        with the matching names, we run them.

        If we find more than one we run the first scene who has
        exactly the same lights defined as the group. This is far from
        perfect, but is convenient for setting lights symbolically (and
        can be improved later).

        :param transition_time: The duration of the transition from the
        light’s current state to the new state in a multiple of 100ms
        :returns True if a scene was run, False otherwise

        """
        groups = [x for x in self.groups if x.name == group_name]
        scenes = [x for x in self.scenes if x.name == scene_name]
        if len(groups) != 1:
            logger.warn("run_scene: More than 1 group found by name {}".format(group_name))
            return False
        group = groups[0]
        if len(scenes) == 0:
            logger.warn("run_scene: No scene found {}".format(scene_name))
            return False
        if len(scenes) == 1:
            self.activate_scene(group.group_id, scenes[0].scene_id, transition_time)
            return True
        # otherwise, lets figure out if one of the named scenes uses
        # all the lights of the group
        group_lights = sorted([x.light_id for x in group.lights])
        for scene in scenes:
            if group_lights == scene.lights:
                self.activate_scene(group.group_id, scene.scene_id, transition_time)
                return True
        logger.warn("run_scene: did not find a scene: {} "
                    "that shared lights with group {}".format(scene_name, group_name))
        return False

    def delete_scene(self, scene_id):
        try:
            return self.request('DELETE', '/api/' + self.username + '/scenes/' + str(scene_id))
        except:
            logger.debug("Unable to delete scene with ID {0}".format(scene_id))

    # Schedules #####
    def get_schedule(self, schedule_id=None, parameter=None):
        if schedule_id is None:
            return self.request('GET', '/api/' + self.username + '/schedules')
        if parameter is None:
            return self.request('GET', '/api/' + self.username + '/schedules/' + str(schedule_id))

    def create_schedule(self, name, time, light_id, data, description=' '):
        schedule = {
            'name': name,
            'localtime': time,
            'description': description,
            'command':
            {
                'method': 'PUT',
                'address': ('/api/' + self.username +
                            '/lights/' + str(light_id) + '/state'),
                'body': data
            }
        }
        return self.request('POST', '/api/' + self.username + '/schedules', schedule)

    def set_schedule_attributes(self, schedule_id, attributes):
        """
        :param schedule_id: The ID of the schedule
        :param attributes: Dictionary with attributes and their new values
        """
        return self.request('PUT', '/api/' + self.username + '/schedules/' + str(schedule_id), data=attributes)

    def create_group_schedule(self, name, time, group_id, data, description=' '):
        schedule = {
            'name': name,
            'localtime': time,
            'description': description,
            'command':
            {
                'method': 'PUT',
                'address': ('/api/' + self.username +
                            '/groups/' + str(group_id) + '/action'),
                'body': data
            }
        }
        return self.request('POST', '/api/' + self.username + '/schedules', schedule)

    def delete_schedule(self, schedule_id):
        return self.request('DELETE', '/api/' + self.username + '/schedules/' + str(schedule_id))

if __name__ == '__main__':
    import argparse

    logging.basicConfig(level=logging.DEBUG)

    parser = argparse.ArgumentParser()
    parser.add_argument('--host', required=True)
    parser.add_argument('--config-file-path', required=False)
    args = parser.parse_args()

    while True:
        try:
            b = Bridge(args.host, config_file_path=args.config_file_path)
            break
        except PhueRegistrationException as e:
            if PY3K:
                input('Press button on Bridge then hit Enter to try again')
            else:
                raw_input('Press button on Bridge then hit Enter to try again')  # noqa


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: phue.sublime-project

{
	"folders":
	[
		{
			"follow_symlinks": true,
			"path": "../phue"
		}
	]
}


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: setup.py

# -*- coding: utf-8 -*-

from phue import __version__
from distutils.core import setup

setup(
    name = 'phue',
    version = __version__,
    description = 'A Philips Hue Python library',
    author = 'Nathanaël Lécaudé',
    license='MIT',
    url = 'https://github.com/studioimaginaire/phue',
    py_modules=['phue'],
)


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: test-requirements.txt

py27: mock
pytest>=2.9.2
pytest-cov>=2.3.1
pytest-timeout>=1.0.0
testtools


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: tests/fakes.py

import json
import sys
import samples

if sys.version_info[0] > 2:
    from io import BytesIO as StringIO
    def dump(data):
        return json.dumps(data).encode('utf-8')
else:
    from StringIO import StringIO
    def dump(data):
       return json.dumps(data)


class Request(object):
    def __init__(self, mode, addr, data):
        self.mode = mode
        self.addr = addr
        self.data = data


class FakeHTTP(object):

    def __init__(self, *args, **kwargs):
        super(FakeHTTP, self).__init__()
        self.call = None

    def request(self, mode, addr, data=None):
        self.call = Request(mode, addr, data)

    def getresponse(self):
        data = samples.RESP[self.call.mode][self.call.addr]
        return StringIO(dump(data))

    def close(self):
        pass


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: tests/samples.py

LIGHTS1 = {
    u'1': {u'manufacturername': u'Philips',
           u'modelid': u'LCT001',
           u'name': u'Living Room Bulb',
           u'state': {u'alert': u'none',
                      u'bri': 254,
                      u'colormode': u'xy',
                      u'ct': 382,
                      u'effect': u'none',
                      u'hue': 14665,
                      u'on': True,
                      u'reachable': True,
                      u'sat': 156,
                      u'xy': [0.4677, 0.4121]},
           u'swversion': u'5.23.1.13452',
           u'type': u'Extended color light',
           u'uniqueid': u'00:17:88:01:00:d1:fd:53-0b'},
    u'10': {u'manufacturername': u'Philips',
            u'modelid': u'LCT001',
            u'name': u'Porch 4',
            u'state': {u'alert': u'none',
                       u'bri': 117,
                       u'colormode': u'xy',
                       u'ct': 500,
                       u'effect': u'none',
                       u'hue': 11004,
                       u'on': False,
                       u'reachable': True,
                       u'sat': 252,
                       u'xy': [0.5593, 0.406]},
            u'swversion': u'5.23.1.13452',
            u'type': u'Extended color light',
            u'uniqueid': u'00:17:88:01:00:ec:74:ab-0b'},
    u'11': {u'manufacturername': u'Philips',
            u'modelid': u'LST002',
            u'name': u'Living Room light strips',
            u'state': {u'alert': u'none',
                       u'bri': 254,
                       u'colormode': u'xy',
                       u'ct': 389,
                       u'effect': u'none',
                       u'hue': 64967,
                       u'on': True,
                       u'reachable': True,
                       u'sat': 79,
                       u'xy': [0.472, 0.353]},
            u'swversion': u'5.50.2.19072',
            u'type': u'Extended color light',
            u'uniqueid': u'00:17:88:01:01:1a:22:cd-0b'},
    u'12': {u'manufacturername': u'Philips',
            u'modelid': u'LCT007',
            u'name': u'Arwen Dresser',
            u'state': {u'alert': u'none',
                       u'bri': 251,
                       u'colormode': u'xy',
                       u'ct': 403,
                       u'effect': u'none',
                       u'hue': 14314,
                       u'on': False,
                       u'reachable': True,
                       u'sat': 172,
                       u'xy': [0.4791, 0.4139]},
            u'swversion': u'5.50.1.19085',
            u'type': u'Extended color light',
            u'uniqueid': u'00:17:88:01:10:47:9a:fe-0b'},
    u'13': {u'manufacturername': u'Philips',
            u'modelid': u'LCT007',
            u'name': u'Arwen Changing Table',
            u'state': {u'alert': u'none',
                       u'bri': 117,
                       u'colormode': u'xy',
                       u'ct': 488,
                       u'effect': u'none',
                       u'hue': 12713,
                       u'on': False,
                       u'reachable': True,
                       u'sat': 222,
                       u'xy': [0.5224, 0.414]},
            u'swversion': u'5.50.1.19085',
            u'type': u'Extended color light',
            u'uniqueid': u'00:17:88:01:10:31:ee:f0-0b'},
    u'2': {u'manufacturername': u'Philips',
           u'modelid': u'LCT001',
           u'name': u'Bedroom Susan',
           u'state': {u'alert': u'none',
                      u'bri': 117,
                      u'colormode': u'xy',
                      u'ct': 153,
                      u'effect': u'none',
                      u'hue': 52067,
                      u'on': False,
                      u'reachable': True,
                      u'sat': 237,
                      u'xy': [0.3089, 0.1334]},
           u'swversion': u'5.23.1.13452',
           u'type': u'Extended color light',
           u'uniqueid': u'00:17:88:01:00:f9:02:ae-0b'},
    u'3': {u'manufacturername': u'Philips',
           u'modelid': u'LCT001',
           u'name': u'Bedroom Sean',
           u'state': {u'alert': u'none',
                      u'bri': 117,
                      u'colormode': u'xy',
                      u'ct': 153,
                      u'effect': u'none',
                      u'hue': 52067,
                      u'on': False,
                      u'reachable': True,
                      u'sat': 237,
                      u'xy': [0.3089, 0.1334]},
           u'swversion': u'5.23.1.13452',
           u'type': u'Extended color light',
           u'uniqueid': u'00:17:88:01:00:fe:00:e3-0b'},
    u'4': {u'manufacturername': u'Philips',
           u'modelid': u'LLC010',
           u'name': u'Living Room Iris',
           u'state': {u'alert': u'none',
                      u'bri': 254,
                      u'colormode': u'xy',
                      u'effect': u'none',
                      u'hue': 58619,
                      u'on': True,
                      u'reachable': True,
                      u'sat': 81,
                      u'xy': [0.4715, 0.3499]},
           u'swversion': u'5.23.1.13452',
           u'type': u'Color light',
           u'uniqueid': u'00:17:88:01:00:12:01:83-0b'},
    u'5': {u'manufacturername': u'Philips',
           u'modelid': u'LST001',
           u'name': u'Living Room Dim Strip',
           u'state': {u'alert': u'none',
                      u'bri': 254,
                      u'colormode': u'xy',
                      u'effect': u'none',
                      u'hue': 58619,
                      u'on': True,
                      u'reachable': True,
                      u'sat': 81,
                      u'xy': [0.4715, 0.3499]},
           u'swversion': u'5.23.1.13452',
           u'type': u'Color light',
           u'uniqueid': u'00:17:88:01:00:cd:b2:03-0b'},
    u'6': {u'manufacturername': u'Philips',
           u'modelid': u'LLC011',
           u'name': u'Arwen Flower',
           u'state': {u'alert': u'none',
                      u'bri': 3,
                      u'colormode': u'xy',
                      u'effect': u'none',
                      u'hue': 64654,
                      u'on': True,
                      u'reachable': True,
                      u'sat': 249,
                      u'xy': [0.6855, 0.2927]},
           u'swversion': u'5.23.1.13452',
           u'type': u'Color light',
           u'uniqueid': u'00:17:88:01:00:c5:23:7e-0b'},
    u'7': {u'manufacturername': u'Philips',
           u'modelid': u'LCT001',
           u'name': u'Porch Fan 1',
           u'state': {u'alert': u'none',
                      u'bri': 117,
                      u'colormode': u'xy',
                      u'ct': 500,
                      u'effect': u'none',
                      u'hue': 11004,
                      u'on': False,
                      u'reachable': True,
                      u'sat': 252,
                      u'xy': [0.5593, 0.406]},
           u'swversion': u'5.23.1.13452',
           u'type': u'Extended color light',
           u'uniqueid': u'00:17:88:01:00:fe:8a:df-0b'},
    u'8': {u'manufacturername': u'Philips',
           u'modelid': u'LCT001',
           u'name': u'Porch Fan 2',
           u'state': {u'alert': u'none',
                      u'bri': 117,
                      u'colormode': u'xy',
                      u'ct': 500,
                      u'effect': u'none',
                      u'hue': 11004,
                      u'on': False,
                      u'reachable': True,
                      u'sat': 252,
                      u'xy': [0.5593, 0.406]},
           u'swversion': u'5.23.1.13452',
           u'type': u'Extended color light',
           u'uniqueid': u'00:17:88:01:00:f9:88:37-0b'},
    u'9': {u'manufacturername': u'Philips',
           u'modelid': u'LCT001',
           u'name': u'Porch 3',
           u'state': {u'alert': u'none',
                      u'bri': 117,
                      u'colormode': u'xy',
                      u'ct': 500,
                      u'effect': u'none',
                      u'hue': 11004,
                      u'on': False,
                      u'reachable': True,
                      u'sat': 252,
                      u'xy': [0.5593, 0.406]},
           u'swversion': u'5.23.1.13452',
           u'type': u'Extended color light',
           u'uniqueid': u'00:17:88:01:00:fe:88:17-0b'}}

RESP = dict(GET=dict(), POST=dict(), PUT=dict(), DELETE=dict())
RESP['GET']['/api/username/lights/'] = LIGHTS1
for key, value in LIGHTS1.items():
    RESP['GET']['/api/username/lights/%s' % key] = LIGHTS1[key]


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: tests/test_basic_import.py

# Published under the MIT license - See LICENSE file for more detail
#
# This is a basic test file which just tests that things import, which
# means that this is even vaguely python code.

import testtools

import phue  # noqa


class TestImport(testtools.TestCase):

    def test_import_works(self):
        pass


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: tests/test_request.py

# Published under the MIT license - See LICENSE file for more detail
#
# This is a basic test file which just tests that things import, which
# means that this is even vaguely python code.

import fixtures
import os
import sys
import testtools

try:
    from unittest import mock
except ImportError:
    import mock

import phue
import fakes

if sys.version_info[0] > 2:
    httplib = 'http.client.HTTPConnection'
else:
    httplib = 'httplib.HTTPConnection'


class TestRequest(testtools.TestCase):

    def setUp(self):
        super(TestRequest, self).setUp()
        self.home = fixtures.TempHomeDir()
        self.useFixture(self.home)

    def test_register(self):
        """test that registration happens automatically during setup."""
        confname = os.path.join(self.home.path, '.python_hue')
        with mock.patch("phue.Bridge.request") as req:
            req.return_value = [{'success': {'username': 'fooo'}}]
            bridge = phue.Bridge(ip="10.0.0.0")
            self.assertEqual(bridge.config_file_path, confname)

        # check contents of file
        with open(confname) as f:
            contents = f.read()
            self.assertEqual(contents, '{"10.0.0.0": {"username": "fooo"}}')

        # make sure we can open under a different file
        bridge2 = phue.Bridge(ip="10.0.0.0")
        self.assertEqual(bridge2.username, "fooo")

        # and that we can even open without an ip address
        bridge3 = phue.Bridge()
        self.assertEqual(bridge3.username, "fooo")
        self.assertEqual(bridge3.ip, "10.0.0.0")

    def test_register_fail(self):
        """Test that registration fails in the expected way for timeout"""
        with mock.patch("phue.Bridge.request") as req:
            req.return_value = [{'error': {'type': 101}}]
            self.assertRaises(phue.PhueRegistrationException,
                              phue.Bridge, ip="10.0.0.0")

    def test_register_unknown_user(self):
        """Test that registration for unknown user works."""
        with mock.patch("phue.Bridge.request") as req:
            req.return_value = [{'error': {'type': 7}}]
            self.assertRaises(phue.PhueException,
                              phue.Bridge, ip="10.0.0.0")


class TestLights(testtools.TestCase):

    def setUp(self):
        super(TestLights, self).setUp()
        self.useFixture(fixtures.MonkeyPatch(httplib, fakes.FakeHTTP))
        self.bridge = phue.Bridge(ip="10.0.0.0", username="username")

    def test_get_lights(self):
        lights = self.bridge.get_light_objects('id')
        self.assertEqual(lights[1].name, "Living Room Bulb")


=======================================================================================================================================================================

Repository: studioimaginaire/phue
Branch: master
File: tox.ini

[tox]
envlist = pep8, py27, py35
skip_missing_interpreters = True

[testenv]
setenv =
    LANG=en_US.UTF-8
    PYTHONPATH = {toxinidir}
commands =
     py.test -v --timeout=30 --duration=10 --cov=phue --cov-report html {posargs}
deps =
     -r{toxinidir}/test-requirements.txt

[testenv:pep8]
deps = flake8
basepython = python3
commands =
     flake8 phue.py

[flake8]
ignore = E501
exclude =  .venv,.git,.tox,dist,doc,*lib/python*,*egg,build


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: .github/PULL_REQUEST_TEMPLATE.md

<!--
  You are amazing! Thanks for contributing to our project!
  Please fill the template to help maintainers processing your PR.

  Don't forget to create the PR against the correct branch:
  - new product id -> new_product_ids
  - anything else -> dev
-->
## Context
<!--
  Summarize the motivation and context of the change.
  Which issue are you dealing with?
-->


## Proposed change
<!--
  Describe the change. How are you fixing the issue?
-->


## Type of change
<!--
  What type of change does your PR introduce?
  Please, check only 1 box!
-->

- [ ] Dependency upgrade
- [ ] Bugfix (non-breaking change which fixes an issue)
- [ ] New device
- [ ] New product id (the device is already supported with a different id)
- [ ] New feature (which adds functionality to an existing device)
- [ ] Breaking change (fix/feature causing existing functionality to break)
- [ ] Code quality improvements to existing code or addition of tests
- [ ] Documentation

## Additional information
<!--
  Link docs and related issues, when applicable.
-->

- This PR fixes issue: fixes #
- This PR is related to: 
- Link to documentation pull request: 

## Checklist
<!--
  Please do your best to check these boxes.
-->

- [ ] The code change is tested and works locally.
- [ ] The code has been formatted using Black.
- [ ] The code follows the [Zen of Python](https://www.python.org/dev/peps/pep-0020/).
- [ ] I am creating the Pull Request against the correct branch.
- [ ] Documentation added/updated.


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: .github/workflows/flake8.yaml

name: Python flake8

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        pip install flake8 flake8-quotes
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. ignore magic numbers and use double quotes and ignore numbers with zeroes before them.
        # and ignore lowercase hex numbers and ignore isort incorrect imports
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=90 --ignore=WPS432,WPS339,WPS341,I --inline-quotes double --statistics


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: .gitignore

*.pyc


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: LICENSE

The MIT License (MIT)

Copyright (c) 2014 Mike Ryan
Copyright (c) 2016 Matthew Garrett

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: README.md

# python-broadlink

A Python module and CLI for controlling Broadlink devices locally. The following devices are supported:

- **Universal remotes**: RM home, RM mini 3, RM plus, RM pro, RM pro+, RM4 mini, RM4 pro, RM4C mini, RM4S, RM4 TV mate
- **Smart plugs**: SP mini, SP mini 3, SP mini+, SP1, SP2, SP2-BR, SP2-CL, SP2-IN, SP2-UK, SP3, SP3-EU, SP3S-EU, SP3S-US, SP4L-AU, SP4L-EU, SP4L-UK, SP4M, SP4M-US, Ankuoo NEO, Ankuoo NEO PRO, Efergy Ego, BG AHC/U-01
- **Switches**: MCB1, SC1, SCB1E, SCB2
- **Outlets**: BG 800, BG 900
- **Power strips**: MP1-1K3S2U, MP1-1K4S, MP2
- **Environment sensors**: A1
- **Alarm kits**: S1C, S2KIT
- **Light bulbs**: LB1, LB26 R1, LB27 R1, SB800TD
- **Curtain motors**: Dooya DT360E-45/20
- **Thermostats**: Hysen HY02B05H
- **Hubs**: S3

## Installation

Use pip3 to install the latest version of this module.

```
pip3 install broadlink
```

## Basic functions

First, open Python 3 and import this module.

```
python3
```
```python3
import broadlink
```

Now let's try some functions...

### Setup

In order to control the device, you need to connect it to your local network. If you have already configured the device with the Broadlink app, this step is not necessary.

1. Put the device into AP Mode.
  - Long press the reset button until the blue LED is blinking quickly.
  - Long press again until blue LED is blinking slowly.
  - Manually connect to the WiFi SSID named BroadlinkProv.
2. Connect the device to your local network with the setup function.
```python3
broadlink.setup('myssid', 'mynetworkpass', 3)
```

Security mode options are (0 = none, 1 = WEP, 2 = WPA1, 3 = WPA2, 4 = WPA1/2)

#### Advanced options

You may need to specify a broadcast address if setup is not working.
```python3
broadlink.setup('myssid', 'mynetworkpass', 3, ip_address='192.168.0.255')
```

### Discovery

Use this function to discover devices:

```python3
devices = broadlink.discover()
```

#### Advanced options
You may need to specify `local_ip_address` or `discover_ip_address` if discovery does not return any devices.

Using the IP address of your local machine:
```python3
devices = broadlink.discover(local_ip_address='192.168.0.100')
```

Using the broadcast address of your subnet:
```python3
devices = broadlink.discover(discover_ip_address='192.168.0.255')
```

If the device is locked, it may not be discoverable with broadcast. In such cases, you can use the unicast version `broadlink.hello()` for direct discovery:
```python3
device = broadlink.hello('192.168.0.16')
```

If you are a perfomance freak, use `broadlink.xdiscover()` to create devices instantly:
```python3
for device in broadlink.xdiscover():
    print(device)  # Example action. Do whatever you want here.
```

### Authentication
After discovering the device, call the `auth()` method to obtain the authentication key required for further communication:
```python3
device.auth()
```

The next steps depend on the type of device you want to control.

## Universal remotes

### Learning IR codes

Learning IR codes takes place in three steps.

1. Enter learning mode:
```python3
device.enter_learning()
```
2. When the LED blinks, point the remote at the Broadlink device and press the button you want to learn.
3. Get the IR packet.
```python3
packet = device.check_data()
```

### Learning RF codes

Learning RF codes takes place in six steps.

1. Sweep the frequency:
```python3
device.sweep_frequency()
```
2. When the LED blinks, point the remote at the Broadlink device for the first time and long press the button you want to learn.
3. Check if the frequency was successfully identified:
```python3
ok = device.check_frequency()
if ok:
    print('Frequency found!')
```
4. Enter learning mode:
```python3
device.find_rf_packet()
```
5. When the LED blinks, point the remote at the Broadlink device for the second time and short press the button you want to learn.
6. Get the RF packet:
```python3
packet = device.check_data()
```

#### Notes

Universal remotes with product id 0x2712 use the same method for learning IR and RF codes. They don't need to sweep frequency. Just call `device.enter_learning()` and `device.check_data()`.

### Canceling learning

You can exit the learning mode in the middle of the process by calling this method:
```python3
device.cancel_sweep_frequency()
```

### Sending IR/RF packets
```python3
device.send_data(packet)
```

### Fetching sensor data
```python3
data = device.check_sensors()
```

## Switches

### Setting power state
```python3
device.set_power(True)
device.set_power(False)
```

### Checking power state
```python3
state = device.check_power()
```

### Checking energy consumption
```python3
state = device.get_energy()
```

## Power strips

### Setting power state
```python3
device.set_power(1, True)  # Example socket. It could be 2 or 3.
device.set_power(1, False)
```

### Checking power state
```python3
state = device.check_power()
```

## Light bulbs

### Fetching data
```python3
state = device.get_state()
```

### Setting state attributes
```python3
devices[0].set_state(pwr=0)
devices[0].set_state(pwr=1)
devices[0].set_state(brightness=75)
devices[0].set_state(bulb_colormode=0)
devices[0].set_state(blue=255)
devices[0].set_state(red=0)
devices[0].set_state(green=128)
devices[0].set_state(bulb_colormode=1)
```

## Environment sensors

### Fetching sensor data
```python3
data = device.check_sensors()
```

## Hubs

### Discovering subdevices
```python3
device.get_subdevices()
```

### Fetching data
Use the DID obtained from get_subdevices() for the input parameter to query specific sub-device.

```python3
device.get_state(did="00000000000000000000a043b0d06963")
```

### Setting state attributes
The parameters depend on the type of subdevice that is being controlled. In this example, we are controlling LC-1 switches:

#### Turn on
```python3
device.set_state(did="00000000000000000000a043b0d0783a", pwr=1)
device.set_state(did="00000000000000000000a043b0d0783a", pwr1=1)
device.set_state(did="00000000000000000000a043b0d0783a", pwr2=1)
```
#### Turn off
```python3
device.set_state(did="00000000000000000000a043b0d0783a", pwr=0)
device.set_state(did="00000000000000000000a043b0d0783a", pwr1=0)
device.set_state(did="00000000000000000000a043b0d0783a", pwr2=0)
```


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: TROUBLESHOOTING.md

# Troubleshooting

## Firmware issues

### AP setup fails with non-alphanumeric passwords

Some devices ship with firmware that cannot connect to WLANs with non-alphanumeric passwords. To fix this, update the firmware to the latest version. You can also change the password to one with just letters and numbers or create a separate guest network with a simpler password.

_First seen on Broadlink RM4 pro 0x6026. Already fixed in firmware v52079._


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/__init__.py

#!/usr/bin/env python3
"""The python-broadlink library."""
import socket
from typing import Generator, List, Optional, Tuple, Union

from . import exceptions as e
from .const import DEFAULT_BCAST_ADDR, DEFAULT_PORT, DEFAULT_TIMEOUT
from .alarm import S1C
from .climate import hvac, hysen
from .cover import dooya, dooya2, wser
from .device import Device, ping, scan
from .hub import s3
from .light import lb1, lb2
from .remote import rm, rm4, rm4mini, rm4pro, rmmini, rmminib, rmpro
from .sensor import a1, a2
from .switch import bg1, ehc31, mp1, mp1s, sp1, sp2, sp2s, sp3, sp3s, sp4, sp4b

SUPPORTED_TYPES = {
    sp1: {
        0x0000: ("SP1", "Broadlink"),
    },
    sp2: {
        0x2717: ("NEO", "Ankuoo"),
        0x2719: ("SP2-compatible", "Honeywell"),
        0x271A: ("SP2-compatible", "Honeywell"),
        0x2720: ("SP mini", "Broadlink"),
        0x2728: ("SP2-compatible", "URANT"),
        0x273E: ("SP mini", "Broadlink"),
        0x7530: ("SP2", "Broadlink (OEM)"),
        0x7539: ("SP2-IL", "Broadlink (OEM)"),
        0x753E: ("SP mini 3", "Broadlink"),
        0x7540: ("MP2", "Broadlink"),
        0x7544: ("SP2-CL", "Broadlink"),
        0x7546: ("SP2-UK/BR/IN", "Broadlink (OEM)"),
        0x7547: ("SC1", "Broadlink"),
        0x7549: ("SP mini 3", "Broadlink (OEM)"),
        0x7918: ("SP2", "Broadlink (OEM)"),
        0x7919: ("SP2-compatible", "Honeywell"),
        0x791A: ("SP2-compatible", "Honeywell"),
        0x7D0D: ("SP mini 3", "Broadlink (OEM)"),
    },
    sp2s: {
        0x2711: ("SP2", "Broadlink"),
        0x2716: ("NEO PRO", "Ankuoo"),
        0x271D: ("Ego", "Efergy"),
        0x2736: ("SP mini+", "Broadlink"),
    },
    sp3: {
        0x2733: ("SP3", "Broadlink"),
        0x7D00: ("SP3-EU", "Broadlink (OEM)"),
    },
    sp3s: {
        0x9479: ("SP3S-US", "Broadlink"),
        0x947A: ("SP3S-EU", "Broadlink"),
    },
    sp4: {
        0x7568: ("SP4L-CN", "Broadlink"),
        0x756B: ("SP4M-JP", "Broadlink"),
        0x756C: ("SP4M", "Broadlink"),
        0x756F: ("MCB1", "Broadlink"),
        0x7579: ("SP4L-EU", "Broadlink"),
        0x757B: ("SP4L-AU", "Broadlink"),
        0x7583: ("SP mini 3", "Broadlink"),
        0x7587: ("SP4L-UK", "Broadlink"),
        0x7D11: ("SP mini 3", "Broadlink"),
        0xA4F9: ("WS4", "Broadlink (OEM)"),
        0xA569: ("SP4L-UK", "Broadlink"),
        0xA56A: ("MCB1", "Broadlink"),
        0xA56B: ("SCB1E", "Broadlink"),
        0xA56C: ("SP4L-EU", "Broadlink"),
        0xA576: ("SP4L-AU", "Broadlink"),
        0xA589: ("SP4L-UK", "Broadlink"),
        0xA5D3: ("SP4L-EU", "Broadlink"),
        0xA6F4: ("SP4D-US", "Broadlink"),
    },
    sp4b: {
        0x5115: ("SCB1E", "Broadlink"),
        0x51E2: ("AHC/U-01", "BG Electrical"),
        0x6111: ("MCB1", "Broadlink"),
        0x6113: ("SCB1E", "Broadlink"),
        0x618B: ("SP4L-EU", "Broadlink"),
        0x6489: ("SP4L-AU", "Broadlink"),
        0x648B: ("SP4M-US", "Broadlink"),
        0x648C: ("SP4L-US", "Broadlink"),
        0x6494: ("SCB2", "Broadlink"),
    },
    rmmini: {
        0x2737: ("RM mini 3", "Broadlink"),
        0x278F: ("RM mini", "Broadlink"),
        0x27B7: ("RM mini 3", "Broadlink"),
        0x27C2: ("RM mini 3", "Broadlink"),
        0x27C7: ("RM mini 3", "Broadlink"),
        0x27CC: ("RM mini 3", "Broadlink"),
        0x27CD: ("RM mini 3", "Broadlink"),
        0x27D0: ("RM mini 3", "Broadlink"),
        0x27D1: ("RM mini 3", "Broadlink"),
        0x27D3: ("RM mini 3", "Broadlink"),
        0x27DC: ("RM mini 3", "Broadlink"),
        0x27DE: ("RM mini 3", "Broadlink"),
    },
    rmpro: {
        0x2712: ("RM pro/pro+", "Broadlink"),
        0x272A: ("RM pro", "Broadlink"),
        0x273D: ("RM pro", "Broadlink"),
        0x277C: ("RM home", "Broadlink"),
        0x2783: ("RM home", "Broadlink"),
        0x2787: ("RM pro", "Broadlink"),
        0x278B: ("RM plus", "Broadlink"),
        0x2797: ("RM pro+", "Broadlink"),
        0x279D: ("RM pro+", "Broadlink"),
        0x27A1: ("RM plus", "Broadlink"),
        0x27A6: ("RM plus", "Broadlink"),
        0x27A9: ("RM pro+", "Broadlink"),
        0x27C3: ("RM pro+", "Broadlink"),
    },
    rmminib: {
        0x5F36: ("RM mini 3", "Broadlink"),
        0x6507: ("RM mini 3", "Broadlink"),
        0x6508: ("RM mini 3", "Broadlink"),
    },
    rm4mini: {
        0x51DA: ("RM4 mini", "Broadlink"),
        0x5209: ("RM4 TV mate", "Broadlink"),
        0x520C: ("RM4 mini", "Broadlink"),
        0x520D: ("RM4C mini", "Broadlink"),
        0x5211: ("RM4C mate", "Broadlink"),
        0x5212: ("RM4 TV mate", "Broadlink"),
        0x5216: ("RM4 mini", "Broadlink"),
        0x521C: ("RM4 mini", "Broadlink"),
        0x6070: ("RM4C mini", "Broadlink"),
        0x610E: ("RM4 mini", "Broadlink"),
        0x610F: ("RM4C mini", "Broadlink"),
        0x62BC: ("RM4 mini", "Broadlink"),
        0x62BE: ("RM4C mini", "Broadlink"),
        0x6364: ("RM4S", "Broadlink"),
        0x648D: ("RM4 mini", "Broadlink"),
        0x6539: ("RM4C mini", "Broadlink"),
        0x653A: ("RM4 mini", "Broadlink"),
    },
    rm4pro: {
        0x520B: ("RM4 pro", "Broadlink"),
        0x5213: ("RM4 pro", "Broadlink"),
        0x5218: ("RM4C pro", "Broadlink"),
        0x6026: ("RM4 pro", "Broadlink"),
        0x6184: ("RM4C pro", "Broadlink"),
        0x61A2: ("RM4 pro", "Broadlink"),
        0x649B: ("RM4 pro", "Broadlink"),
        0x653C: ("RM4 pro", "Broadlink"),
    },
    a1: {
        0x2714: ("A1", "Broadlink"),
    },
    a2: {
        0x4F60: ("A2", "Broadlink"),
    },
    mp1: {
        0x4EB5: ("MP1-1K4S", "Broadlink"),
        0x4F1B: ("MP1-1K3S2U", "Broadlink (OEM)"),
        0x4F65: ("MP1-1K3S2U", "Broadlink"),
    },
    mp1s: {
        0x4EF7: ("MP1-1K4S", "Broadlink (OEM)"),
    },
    lb1: {
        0x5043: ("SB800TD", "Broadlink (OEM)"),
        0x504E: ("LB1", "Broadlink"),
        0x606D: ("SLA22RGB9W81/SLA27RGB9W81", "Luceco"),
        0x606E: ("SB500TD", "Broadlink (OEM)"),
        0x60C7: ("LB1", "Broadlink"),
        0x60C8: ("LB1", "Broadlink"),
        0x6112: ("LB1", "Broadlink"),
        0x644B: ("LB1", "Broadlink"),
        0x644C: ("LB27 R1", "Broadlink"),
        0x644E: ("LB26 R1", "Broadlink"),
        0x6488: ("LB27 C1", "Broadlink"),
    },
    lb2: {
        0xA4F4: ("LB27 R1", "Broadlink"),
        0xA5F7: ("LB27 R1", "Broadlink"),
        0xA6EF: ("EFCF60WSMT", "Luceco"),
    },
    S1C: {
        0x2722: ("S2KIT", "Broadlink"),
    },
    s3: {
        0xA59C: ("S3", "Broadlink"),
        0xA64D: ("S3", "Broadlink"),
    },
    hvac: {
        0x4E2A: ("HVAC", "Licensed manufacturer"),
    },
    hysen: {
        0x4EAD: ("HY02/HY03", "Hysen"),
    },
    dooya: {
        0x4E4D: ("DT360E-45/20", "Dooya"),
    },
    dooya2: {
        0x4F6E: ("DT360E-45/20", "Dooya"),
    },
    wser: {
        0x4F6C: ("WSER", "Wistar"),
    },
    bg1: {
        0x51E3: ("BG800/BG900", "BG Electrical"),
    },
    ehc31: {
        0x6480: ("EHC31", "BG Electrical"),
    },
}


def gendevice(
    dev_type: int,
    host: Tuple[str, int],
    mac: Union[bytes, str],
    name: str = "",
    is_locked: bool = False,
) -> Device:
    """Generate a device."""
    for dev_cls, products in SUPPORTED_TYPES.items():
        try:
            model, manufacturer = products[dev_type]

        except KeyError:
            continue

        return dev_cls(
            host,
            mac,
            dev_type,
            name=name,
            model=model,
            manufacturer=manufacturer,
            is_locked=is_locked,
        )

    return Device(host, mac, dev_type, name=name, is_locked=is_locked)


def hello(
    ip_address: str,
    port: int = DEFAULT_PORT,
    timeout: int = DEFAULT_TIMEOUT,
) -> Device:
    """Direct device discovery.

    Useful if the device is locked.
    """
    try:
        return next(
            xdiscover(
                timeout=timeout,
                discover_ip_address=ip_address,
                discover_ip_port=port,
            )
        )
    except StopIteration as err:
        raise e.NetworkTimeoutError(
            -4000,
            "Network timeout",
            f"No response received within {timeout}s",
        ) from err


def discover(
    timeout: int = DEFAULT_TIMEOUT,
    local_ip_address: Optional[str] = None,
    discover_ip_address: str = DEFAULT_BCAST_ADDR,
    discover_ip_port: int = DEFAULT_PORT,
) -> List[Device]:
    """Discover devices connected to the local network."""
    responses = scan(
        timeout, local_ip_address, discover_ip_address, discover_ip_port
    )
    return [gendevice(*resp) for resp in responses]


def xdiscover(
    timeout: int = DEFAULT_TIMEOUT,
    local_ip_address: Optional[str] = None,
    discover_ip_address: str = DEFAULT_BCAST_ADDR,
    discover_ip_port: int = DEFAULT_PORT,
) -> Generator[Device, None, None]:
    """Discover devices connected to the local network.

    This function returns a generator that yields devices instantly.
    """
    responses = scan(
        timeout, local_ip_address, discover_ip_address, discover_ip_port
    )
    for resp in responses:
        yield gendevice(*resp)


# Setup a new Broadlink device via AP Mode. Review the README to see how to enter AP Mode.
# Only tested with Broadlink RM3 Mini (Blackbean)
def setup(
    ssid: str,
    password: str,
    security_mode: int,
    ip_address: str = DEFAULT_BCAST_ADDR,
) -> None:
    """Set up a new Broadlink device via AP mode."""
    # Security mode options are (0 - none, 1 = WEP, 2 = WPA1, 3 = WPA2, 4 = WPA1/2)
    payload = bytearray(0x88)
    payload[0x26] = 0x14  # This seems to always be set to 14
    # Add the SSID to the payload
    ssid_start = 68
    ssid_length = 0
    for letter in ssid:
        payload[(ssid_start + ssid_length)] = ord(letter)
        ssid_length += 1
    # Add the WiFi password to the payload
    pass_start = 100
    pass_length = 0
    for letter in password:
        payload[(pass_start + pass_length)] = ord(letter)
        pass_length += 1

    payload[0x84] = ssid_length  # Character length of SSID
    payload[0x85] = pass_length  # Character length of password
    payload[0x86] = security_mode  # Type of encryption

    checksum = sum(payload, 0xBEAF) & 0xFFFF
    payload[0x20] = checksum & 0xFF  # Checksum 1 position
    payload[0x21] = checksum >> 8  # Checksum 2 position

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # Internet  # UDP
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    sock.sendto(payload, (ip_address, DEFAULT_PORT))
    sock.close()


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/alarm.py

"""Support for alarm kits."""
from . import exceptions as e
from .device import Device


class S1C(Device):
    """Controls a Broadlink S1C."""

    TYPE = "S1C"

    _SENSORS_TYPES = {
        0x31: "Door Sensor",
        0x91: "Key Fob",
        0x21: "Motion Sensor",
    }

    def get_sensors_status(self) -> dict:
        """Return the state of the sensors."""
        packet = bytearray(16)
        packet[0] = 0x06
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        count = payload[0x4]
        sensor_data = payload[0x6:]
        sensors = [
            bytearray(sensor_data[i * 83 : (i + 1) * 83])
            for i in range(len(sensor_data) // 83)
        ]
        return {
            "count": count,
            "sensors": [
                {
                    "status": sensor[0],
                    "name": sensor[4:26].decode().strip("\x00"),
                    "type": self._SENSORS_TYPES.get(sensor[3], "Unknown"),
                    "order": sensor[1],
                    "serial": sensor[26:30].hex(),
                }
                for sensor in sensors
                if any(sensor[26:30])
            ],
        }


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/climate.py

"""Support for climate control."""
import enum
import struct
from typing import List, Sequence

from . import exceptions as e
from .device import Device
from .helpers import CRC16


class hysen(Device):
    """Controls a Hysen heating thermostat.

    This device is manufactured by Hysen and sold under different
    brands, including Floureon, Beca Energy, Beok and Decdeal.

    Supported models:
    - HY02B05H
    - HY03WE
    """

    TYPE = "HYS"

    def send_request(self, request: Sequence[int]) -> bytes:
        """Send a request to the device."""
        packet = bytearray()
        packet.extend((len(request) + 2).to_bytes(2, "little"))
        packet.extend(request)
        packet.extend(CRC16.calculate(request).to_bytes(2, "little"))

        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])

        p_len = int.from_bytes(payload[:0x02], "little")
        nom_crc = int.from_bytes(payload[p_len:p_len+2], "little")
        real_crc = CRC16.calculate(payload[0x02:p_len])

        if nom_crc != real_crc:
            raise e.DataValidationError(
                -4008,
                "Received data packet check error",
                f"Expected a checksum of {nom_crc} and received {real_crc}",
            )

        return payload[0x02:p_len]

    def _decode_temp(self, payload, base_index):
        base_temp = payload[base_index] / 2.0
        add_offset = (payload[4] >> 3) & 1  # should offset be added?
        offset_raw_value = (payload[17] >> 4) & 3  # offset value
        offset = (offset_raw_value + 1) / 10 if add_offset else 0.0
        return base_temp + offset

    def get_temp(self) -> float:
        """Return the room temperature in degrees celsius."""
        payload = self.send_request([0x01, 0x03, 0x00, 0x00, 0x00, 0x08])
        return self._decode_temp(payload, 5)

    def get_external_temp(self) -> float:
        """Return the external temperature in degrees celsius."""
        payload = self.send_request([0x01, 0x03, 0x00, 0x00, 0x00, 0x08])
        return self._decode_temp(payload, 18)

    def get_full_status(self) -> dict:
        """Return the state of the device.

        Timer schedule included.
        """
        payload = self.send_request([0x01, 0x03, 0x00, 0x00, 0x00, 0x16])
        data = {}
        data["remote_lock"] = payload[3] & 1
        data["power"] = payload[4] & 1
        data["active"] = (payload[4] >> 4) & 1
        data["temp_manual"] = (payload[4] >> 6) & 1
        data["heating_cooling"] = (payload[4] >> 7) & 1
        data["room_temp"] = self._decode_temp(payload, 5)
        data["thermostat_temp"] = payload[6] / 2.0
        data["auto_mode"] = payload[7] & 0x0F
        data["loop_mode"] = payload[7] >> 4
        data["sensor"] = payload[8]
        data["osv"] = payload[9]
        data["dif"] = payload[10]
        data["svh"] = payload[11]
        data["svl"] = payload[12]
        data["room_temp_adj"] = (
            int.from_bytes(payload[13:15], "big", signed=True) / 10.0
        )
        data["fre"] = payload[15]
        data["poweron"] = payload[16]
        data["unknown"] = payload[17]
        data["external_temp"] = self._decode_temp(payload, 18)
        data["hour"] = payload[19]
        data["min"] = payload[20]
        data["sec"] = payload[21]
        data["dayofweek"] = payload[22]

        weekday = []
        for i in range(0, 6):
            weekday.append(
                {
                    "start_hour": payload[2 * i + 23],
                    "start_minute": payload[2 * i + 24],
                    "temp": payload[i + 39] / 2.0,
                }
            )

        data["weekday"] = weekday
        weekend = []
        for i in range(6, 8):
            weekend.append(
                {
                    "start_hour": payload[2 * i + 23],
                    "start_minute": payload[2 * i + 24],
                    "temp": payload[i + 39] / 2.0,
                }
            )

        data["weekend"] = weekend
        return data

    # Change controller mode
    # auto_mode = 1 for auto (scheduled/timed) mode, 0 for manual mode.
    # Manual mode will activate last used temperature.
    # In typical usage call set_temp to activate manual control and set temp.
    # loop_mode refers to index in [ "12345,67", "123456,7", "1234567" ]
    # E.g. loop_mode = 0 ("12345,67") means Saturday and Sunday (weekend schedule)
    # loop_mode = 2 ("1234567") means every day, including Saturday and Sunday (weekday schedule)
    # The sensor command is currently experimental
    def set_mode(
        self, auto_mode: int, loop_mode: int, sensor: int = 0
    ) -> None:
        """Set the mode of the device."""
        mode_byte = ((loop_mode + 1) << 4) + auto_mode
        self.send_request([0x01, 0x06, 0x00, 0x02, mode_byte, sensor])

    # Advanced settings
    # Sensor mode (SEN) sensor = 0 for internal sensor, 1 for external sensor,
    # 2 for internal control temperature, external limit temperature. Factory default: 0.
    # Set temperature range for external sensor (OSV) osv = 5..99. Factory default: 42C
    # Deadzone for floor temprature (dIF) dif = 1..9. Factory default: 2C
    # Upper temperature limit for internal sensor (SVH) svh = 5..99. Factory default: 35C
    # Lower temperature limit for internal sensor (SVL) svl = 5..99. Factory default: 5C
    # Actual temperature calibration (AdJ) adj = -0.5. Precision 0.1C
    # Anti-freezing function (FrE) fre = 0 for anti-freezing function shut down,
    #  1 for anti-freezing function open. Factory default: 0
    # Power on memory (POn) poweron = 0 for off, 1 for on. Default: 0
    def set_advanced(
        self,
        loop_mode: int,
        sensor: int,
        osv: int,
        dif: int,
        svh: int,
        svl: int,
        adj: float,
        fre: int,
        poweron: int,
    ) -> None:
        """Set advanced options."""
        self.send_request(
            [
                0x01,
                0x10,
                0x00,
                0x02,
                0x00,
                0x05,
                0x0A,
                loop_mode,
                sensor,
                osv,
                dif,
                svh,
                svl,
                int(adj * 10) >> 8 & 0xFF,
                int(adj * 10) & 0xFF,
                fre,
                poweron,
            ]
        )

    # For backwards compatibility only.  Prefer calling set_mode directly.
    # Note this function invokes loop_mode=0 and sensor=0.
    def switch_to_auto(self) -> None:
        """Switch mode to auto."""
        self.set_mode(auto_mode=1, loop_mode=0)

    def switch_to_manual(self) -> None:
        """Switch mode to manual."""
        self.set_mode(auto_mode=0, loop_mode=0)

    # Set temperature for manual mode (also activates manual mode if currently in automatic)
    def set_temp(self, temp: float) -> None:
        """Set the target temperature."""
        self.send_request([0x01, 0x06, 0x00, 0x01, 0x00, int(temp * 2)])

    # Set device on(1) or off(0), does not deactivate Wifi connectivity.
    # Remote lock disables control by buttons on thermostat.
    # heating_cooling: heating(0) cooling(1)
    def set_power(
        self, power: int = 1, remote_lock: int = 0, heating_cooling: int = 0
    ) -> None:
        """Set the power state of the device."""
        state = (heating_cooling << 7) + power
        self.send_request([0x01, 0x06, 0x00, 0x00, remote_lock, state])

    # set time on device
    # n.b. day=1 is Monday, ..., day=7 is Sunday
    def set_time(self, hour: int, minute: int, second: int, day: int) -> None:
        """Set the time."""
        self.send_request(
            [
                0x01,
                0x10,
                0x00,
                0x08,
                0x00,
                0x02,
                0x04,
                hour,
                minute,
                second,
                day
            ]
        )

    # Set timer schedule
    # Format is the same as you get from get_full_status.
    # weekday is a list (ordered) of 6 dicts like:
    # {'start_hour':17, 'start_minute':30, 'temp': 22 }
    # Each one specifies the thermostat temp that will become effective at start_hour:start_minute
    # weekend is similar but only has 2 (e.g. switch on in morning and off in afternoon)
    def set_schedule(self, weekday: List[dict], weekend: List[dict]) -> None:
        """Set timer schedule."""
        request = [0x01, 0x10, 0x00, 0x0A, 0x00, 0x0C, 0x18]

        # weekday times
        for i in range(0, 6):
            request.append(weekday[i]["start_hour"])
            request.append(weekday[i]["start_minute"])

        # weekend times
        for i in range(0, 2):
            request.append(weekend[i]["start_hour"])
            request.append(weekend[i]["start_minute"])

        # weekday temperatures
        for i in range(0, 6):
            request.append(int(weekday[i]["temp"] * 2))

        # weekend temperatures
        for i in range(0, 2):
            request.append(int(weekend[i]["temp"] * 2))

        self.send_request(request)


class hvac(Device):
    """Controls a HVAC.

    Supported models:
    - Tornado SMART X SQ series
    - Aux ASW-H12U3/JIR1DI-US
    - Aux ASW-H36U2/LFR1DI-US
    """

    TYPE = "HVAC"

    @enum.unique
    class Mode(enum.IntEnum):
        """Enumerates modes."""

        AUTO = 0
        COOL = 1
        DRY = 2
        HEAT = 3
        FAN = 4

    @enum.unique
    class Speed(enum.IntEnum):
        """Enumerates fan speed."""

        HIGH = 1
        MID = 2
        LOW = 3
        AUTO = 5

    @enum.unique
    class Preset(enum.IntEnum):
        """Enumerates presets."""

        NORMAL = 0
        TURBO = 1
        MUTE = 2

    @enum.unique
    class SwHoriz(enum.IntEnum):
        """Enumerates horizontal swing."""

        ON = 0
        OFF = 7

    @enum.unique
    class SwVert(enum.IntEnum):
        """Enumerates vertical swing."""

        ON = 0
        POS1 = 1
        POS2 = 2
        POS3 = 3
        POS4 = 4
        POS5 = 5
        OFF = 7

    def _encode(self, data: bytes) -> bytes:
        """Encode data for transport."""
        packet = bytearray(10)
        p_len = 10 + len(data)
        struct.pack_into(
            "<HHHHH", packet, 0, p_len, 0x00BB, 0x8006, 0, len(data)
        )
        packet += data
        crc = CRC16.calculate(packet[0x02:], polynomial=0x9BE4)
        packet += crc.to_bytes(2, "little")
        return packet

    def _decode(self, response: bytes) -> bytes:
        """Decode data from transport."""
        # payload[0x2:0x8] == bytes([0xbb, 0x00, 0x07, 0x00, 0x00, 0x00])
        payload = self.decrypt(response[0x38:])
        p_len = int.from_bytes(payload[:0x02], "little")
        nom_crc = int.from_bytes(payload[p_len:p_len+2], "little")
        real_crc = CRC16.calculate(payload[0x02:p_len], polynomial=0x9BE4)

        if nom_crc != real_crc:
            raise e.DataValidationError(
                -4008,
                "Received data packet check error",
                f"Expected a checksum of {nom_crc} and received {real_crc}",
            )

        d_len = int.from_bytes(payload[0x08:0x0A], "little")
        return payload[0x0A:0x0A+d_len]

    def _send(self, command: int, data: bytes = b"") -> bytes:
        """Send a command to the unit."""
        prefix = bytes([((command << 4) | 1), 1])
        packet = self._encode(prefix + data)
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        return self._decode(response)[0x02:]

    def _parse_state(self, data: bytes) -> dict:
        """Parse state."""
        state = {}
        state["power"] = bool(data[0x08] & 1 << 5)
        state["target_temp"] = 8 + (data[0x00] >> 3) + (data[0x04] >> 7) * 0.5
        state["swing_v"] = self.SwVert(data[0x00] & 0b111)
        state["swing_h"] = self.SwHoriz(data[0x01] >> 5)
        state["mode"] = self.Mode(data[0x05] >> 5)
        state["speed"] = self.Speed(data[0x03] >> 5)
        state["preset"] = self.Preset(data[0x04] >> 6)
        state["sleep"] = bool(data[0x05] & 1 << 2)
        state["ifeel"] = bool(data[0x05] & 1 << 3)
        state["health"] = bool(data[0x08] & 1 << 1)
        state["clean"] = bool(data[0x08] & 1 << 2)
        state["display"] = bool(data[0x0A] & 1 << 4)
        state["mildew"] = bool(data[0x0A] & 1 << 3)
        return state

    def set_state(
        self,
        power: bool,
        target_temp: float,  # 16<=target_temp<=32
        mode: Mode,
        speed: Speed,
        preset: Preset,
        swing_h: SwHoriz,
        swing_v: SwVert,
        sleep: bool,
        ifeel: bool,
        display: bool,
        health: bool,
        clean: bool,
        mildew: bool,
    ) -> dict:
        """Set the state of the device."""
        # TODO: decode unknown bits
        UNK0 = 0b100
        UNK1 = 0b1101
        UNK2 = 0b101

        target_temp = round(target_temp * 2) / 2

        if preset == self.Preset.MUTE:
            if mode != self.Mode.FAN:
                raise ValueError("mute is only available in fan mode")
            speed = self.Speed.LOW

        elif preset == self.Preset.TURBO:
            if mode not in {self.Mode.COOL, self.Mode.HEAT}:
                raise ValueError("turbo is only available in cooling/heating")
            speed = self.Speed.HIGH

        data = bytearray(0x0D)
        data[0x00] = (int(target_temp) - 8 << 3) | swing_v
        data[0x01] = (swing_h << 5) | UNK0
        data[0x02] = ((target_temp % 1 == 0.5) << 7) | UNK1
        data[0x03] = speed << 5
        data[0x04] = preset << 6
        data[0x05] = mode << 5 | sleep << 2 | ifeel << 3
        data[0x08] = power << 5 | clean << 2 | (health and 0b11)
        data[0x0A] = display << 4 | mildew << 3
        data[0x0C] = UNK2

        resp = self._send(0, data)
        return self._parse_state(resp)

    def get_state(self) -> dict:
        """Returns a dictionary with the unit's parameters.

        Returns:
            dict:
                power (bool):
                target_temp (float): temperature set point 16<n<32
                mode (hvac.Mode):
                speed (hvac.Speed):
                preset (hvac.Preset):
                swing_h (hvac.SwHoriz):
                swing_v (hvac.SwVert):
                sleep (bool):
                ifeel (bool):
                display (bool):
                health (bool):
                clean (bool):
                mildew (bool):
        """
        resp = self._send(1)

        if len(resp) < 13:
            raise e.DataValidationError(
                -4007,
                "Received data packet length error",
                f"Expected at least 15 bytes and received {len(resp) + 2}",
            )

        return self._parse_state(resp)

    def get_ac_info(self) -> dict:
        """Returns dictionary with AC info.

        Returns:
            dict:
                power (bool): power
                ambient_temp (float): ambient temperature
        """
        resp = self._send(2)

        if len(resp) < 22:
            raise e.DataValidationError(
                -4007,
                "Received data packet length error",
                f"Expected at least 24 bytes and received {len(resp) + 2}",
            )

        ac_info = {}
        ac_info["power"] = resp[0x1] & 1

        ambient_temp = resp[0x05] & 0b11111, resp[0x15] & 0b11111
        if any(ambient_temp):
            ac_info["ambient_temp"] = ambient_temp[0] + ambient_temp[1] / 10.0

        return ac_info


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/const.py

"""Constants."""
DEFAULT_BCAST_ADDR = "255.255.255.255"
DEFAULT_PORT = 80
DEFAULT_RETRY_INTVL = 1
DEFAULT_TIMEOUT = 10


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/cover.py

"""Support for covers."""
import time
from typing import Sequence

from . import exceptions as e
from .device import Device


class dooya(Device):
    """Controls a Dooya curtain motor."""

    TYPE = "DT360E"

    def _send(self, command: int, attribute: int = 0) -> int:
        """Send a packet to the device."""
        packet = bytearray(16)
        packet[0x00] = 0x09
        packet[0x02] = 0xBB
        packet[0x03] = command
        packet[0x04] = attribute
        packet[0x09] = 0xFA
        packet[0x0A] = 0x44

        resp = self.send_packet(0x6A, packet)
        e.check_error(resp[0x22:0x24])
        payload = self.decrypt(resp[0x38:])
        return payload[4]

    def open(self) -> int:
        """Open the curtain."""
        return self._send(0x01)

    def close(self) -> int:
        """Close the curtain."""
        return self._send(0x02)

    def stop(self) -> int:
        """Stop the curtain."""
        return self._send(0x03)

    def get_percentage(self) -> int:
        """Return the position of the curtain."""
        return self._send(0x06, 0x5D)

    def set_percentage_and_wait(self, new_percentage: int) -> None:
        """Set the position of the curtain."""
        current = self.get_percentage()
        if current > new_percentage:
            self.close()
            while current is not None and current > new_percentage:
                time.sleep(0.2)
                current = self.get_percentage()

        elif current < new_percentage:
            self.open()
            while current is not None and current < new_percentage:
                time.sleep(0.2)
                current = self.get_percentage()
        self.stop()


class dooya2(Device):
    """Controls a Dooya curtain motor (version 2)."""

    TYPE = "DT360E-2"

    def _send(self, operation: int, data: Sequence = b""):
        """Send a command to the device."""
        packet = bytearray(12)
        packet[0x02] = 0xA5
        packet[0x03] = 0xA5
        packet[0x04] = 0x5A
        packet[0x05] = 0x5A
        packet[0x08] = operation
        packet[0x09] = 0x0B

        if data:
            data_len = len(data)
            packet[0x0A] = data_len & 0xFF
            packet[0x0B] = data_len >> 8
            packet += bytes(2)
            packet.extend(data)

        checksum = sum(packet, 0xBEAF) & 0xFFFF
        packet[0x06] = checksum & 0xFF
        packet[0x07] = checksum >> 8

        packet_len = len(packet) - 2
        packet[0x00] = packet_len & 0xFF
        packet[0x01] = packet_len >> 8

        resp = self.send_packet(0x6A, packet)
        e.check_error(resp[0x22:0x24])
        payload = self.decrypt(resp[0x38:])
        return payload

    def open(self) -> None:
        """Open the curtain."""
        self._send(2, [0x00, 0x01, 0x00])

    def close(self) -> None:
        """Close the curtain."""
        self._send(2, [0x00, 0x02, 0x00])

    def stop(self) -> None:
        """Stop the curtain."""
        self._send(2, [0x00, 0x03, 0x00])

    def get_percentage(self) -> int:
        """Return the position of the curtain."""
        resp = self._send(1, [0x00, 0x06, 0x00])
        return resp[0x11]

    def set_percentage(self, new_percentage: int) -> None:
        """Set the position of the curtain."""
        self._send(2, [0x00, 0x09, new_percentage])


class wser(Device):
    """Controls a Wistar curtain motor"""

    TYPE = "WSER"

    def _send(self, operation: int, data: Sequence = b""):
        """Send a command to the device."""
        packet = bytearray(12)
        packet[0x02] = 0xA5
        packet[0x03] = 0xA5
        packet[0x04] = 0x5A
        packet[0x05] = 0x5A
        packet[0x08] = operation
        packet[0x09] = 0x0B

        if data:
            data_len = len(data)
            packet[0x0A] = data_len & 0xFF
            packet[0x0B] = data_len >> 8
            packet += bytes(2)
            packet.extend(data)

        checksum = sum(packet, 0xBEAF) & 0xFFFF
        packet[0x06] = checksum & 0xFF
        packet[0x07] = checksum >> 8

        packet_len = len(packet) - 2
        packet[0x00] = packet_len & 0xFF
        packet[0x01] = packet_len >> 8

        resp = self.send_packet(0x6A, packet)
        e.check_error(resp[0x22:0x24])
        payload = self.decrypt(resp[0x38:])
        return payload

    def get_position(self) -> int:
        """Return the position of the curtain."""
        resp = self._send(1, [])
        position = resp[0x0E]
        return position

    def open(self) -> int:
        """Open the curtain."""
        resp = self._send(2, [0x4A, 0x31, 0xA0])
        position = resp[0x0E]
        return position

    def close(self) -> int:
        """Close the curtain."""
        resp = self._send(2, [0x61, 0x32, 0xA0])
        position = resp[0x0E]
        return position

    def stop(self) -> int:
        """Stop the curtain."""
        resp = self._send(2, [0x4C, 0x73, 0xA0])
        position = resp[0x0E]
        return position

    def set_position(self, position: int) -> int:
        """Set the position of the curtain."""
        resp = self._send(2, [position, 0x70, 0xA0])
        position = resp[0x0E]
        return position


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/device.py

"""Support for Broadlink devices."""
import socket
import threading
import random
import time
from typing import Generator, Optional, Tuple, Union

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

from . import exceptions as e
from .const import (
    DEFAULT_BCAST_ADDR,
    DEFAULT_PORT,
    DEFAULT_RETRY_INTVL,
    DEFAULT_TIMEOUT,
)
from .protocol import Datetime

HelloResponse = Tuple[int, Tuple[str, int], str, str, bool]


def scan(
    timeout: int = DEFAULT_TIMEOUT,
    local_ip_address: Optional[str] = None,
    discover_ip_address: str = DEFAULT_BCAST_ADDR,
    discover_ip_port: int = DEFAULT_PORT,
) -> Generator[HelloResponse, None, None]:
    """Broadcast a hello message and yield responses."""
    conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    conn.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)

    if local_ip_address:
        conn.bind((local_ip_address, 0))
        port = conn.getsockname()[1]
    else:
        local_ip_address = "0.0.0.0"
        port = 0

    packet = bytearray(0x30)
    packet[0x08:0x14] = Datetime.pack(Datetime.now())
    packet[0x18:0x1C] = socket.inet_aton(local_ip_address)[::-1]
    packet[0x1C:0x1E] = port.to_bytes(2, "little")
    packet[0x26] = 6

    checksum = sum(packet, 0xBEAF) & 0xFFFF
    packet[0x20:0x22] = checksum.to_bytes(2, "little")

    start_time = time.time()
    discovered = []

    try:
        while (time.time() - start_time) < timeout:
            time_left = timeout - (time.time() - start_time)
            conn.settimeout(min(DEFAULT_RETRY_INTVL, time_left))
            conn.sendto(packet, (discover_ip_address, discover_ip_port))

            while True:
                try:
                    resp, host = conn.recvfrom(1024)
                except socket.timeout:
                    break

                devtype = resp[0x34] | resp[0x35] << 8
                mac = resp[0x3A:0x40][::-1]

                if (host, mac, devtype) in discovered:
                    continue
                discovered.append((host, mac, devtype))

                name = resp[0x40:].split(b"\x00")[0].decode()
                is_locked = bool(resp[0x7F])
                yield devtype, host, mac, name, is_locked
    finally:
        conn.close()


def ping(ip_address: str, port: int = DEFAULT_PORT) -> None:
    """Send a ping packet to an address.

    This packet feeds the watchdog timer of firmwares >= v53.
    Useful to prevent reboots when the cloud cannot be reached.
    It must be sent every 2 minutes in such cases.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as conn:
        conn.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        packet = bytearray(0x30)
        packet[0x26] = 1
        conn.sendto(packet, (ip_address, port))


class Device:
    """Controls a Broadlink device."""

    TYPE = "Unknown"

    __INIT_KEY = "097628343fe99e23765c1513accf8b02"
    __INIT_VECT = "562e17996d093d28ddb3ba695a2e6f58"

    def __init__(
        self,
        host: Tuple[str, int],
        mac: Union[bytes, str],
        devtype: int,
        timeout: int = DEFAULT_TIMEOUT,
        name: str = "",
        model: str = "",
        manufacturer: str = "",
        is_locked: bool = False,
    ) -> None:
        """Initialize the controller."""
        self.host = host
        self.mac = bytes.fromhex(mac) if isinstance(mac, str) else mac
        self.devtype = devtype
        self.timeout = timeout
        self.name = name
        self.model = model
        self.manufacturer = manufacturer
        self.is_locked = is_locked
        self.count = random.randint(0x8000, 0xFFFF)
        self.iv = bytes.fromhex(self.__INIT_VECT)
        self.id = 0
        self.type = self.TYPE  # For backwards compatibility.
        self.lock = threading.Lock()

        self.aes = None
        self.update_aes(bytes.fromhex(self.__INIT_KEY))

    def __repr__(self) -> str:
        """Return a formal representation of the device."""
        return (
            "%s.%s(%s, mac=%r, devtype=%r, timeout=%r, name=%r, "
            "model=%r, manufacturer=%r, is_locked=%r)"
        ) % (
            self.__class__.__module__,
            self.__class__.__qualname__,
            self.host,
            self.mac,
            self.devtype,
            self.timeout,
            self.name,
            self.model,
            self.manufacturer,
            self.is_locked,
        )

    def __str__(self) -> str:
        """Return a readable representation of the device."""
        return "%s (%s / %s:%s / %s)" % (
            self.name or "Unknown",
            " ".join(filter(None, [self.manufacturer, self.model, hex(self.devtype)])),
            *self.host,
            ":".join(format(x, "02X") for x in self.mac),
        )

    def update_aes(self, key: bytes) -> None:
        """Update AES."""
        self.aes = Cipher(
            algorithms.AES(bytes(key)), modes.CBC(self.iv), backend=default_backend()
        )

    def encrypt(self, payload: bytes) -> bytes:
        """Encrypt the payload."""
        encryptor = self.aes.encryptor()
        return encryptor.update(bytes(payload)) + encryptor.finalize()

    def decrypt(self, payload: bytes) -> bytes:
        """Decrypt the payload."""
        decryptor = self.aes.decryptor()
        return decryptor.update(bytes(payload)) + decryptor.finalize()

    def auth(self) -> bool:
        """Authenticate to the device."""
        self.id = 0
        self.update_aes(bytes.fromhex(self.__INIT_KEY))

        packet = bytearray(0x50)
        packet[0x04:0x14] = [0x31] * 16
        packet[0x1E] = 0x01
        packet[0x2D] = 0x01
        packet[0x30:0x36] = "Test 1".encode()

        response = self.send_packet(0x65, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])

        self.id = int.from_bytes(payload[:0x4], "little")
        self.update_aes(payload[0x04:0x14])
        return True

    def hello(self, local_ip_address=None) -> bool:
        """Send a hello message to the device.

        Device information is checked before updating name and lock status.
        """
        responses = scan(
            timeout=self.timeout,
            local_ip_address=local_ip_address,
            discover_ip_address=self.host[0],
            discover_ip_port=self.host[1],
        )
        try:
            devtype, _, mac, name, is_locked = next(responses)

        except StopIteration as err:
            raise e.NetworkTimeoutError(
                -4000,
                "Network timeout",
                f"No response received within {self.timeout}s",
            ) from err

        if mac != self.mac:
            raise e.DataValidationError(
                -2040,
                "Device information is not intact",
                "The MAC address is different",
                f"Expected {self.mac} and received {mac}",
            )

        if devtype != self.devtype:
            raise e.DataValidationError(
                -2040,
                "Device information is not intact",
                "The product ID is different",
                f"Expected {self.devtype} and received {devtype}",
            )

        self.name = name
        self.is_locked = is_locked
        return True

    def ping(self) -> None:
        """Ping the device.

        This packet feeds the watchdog timer of firmwares >= v53.
        Useful to prevent reboots when the cloud cannot be reached.
        It must be sent every 2 minutes in such cases.
        """
        ping(self.host[0], port=self.host[1])

    def get_fwversion(self) -> int:
        """Get firmware version."""
        packet = bytearray([0x68])
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        return payload[0x4] | payload[0x5] << 8

    def set_name(self, name: str) -> None:
        """Set device name."""
        packet = bytearray(4)
        packet += name.encode("utf-8")
        packet += bytearray(0x50 - len(packet))
        packet[0x43] = self.is_locked
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        self.name = name

    def set_lock(self, state: bool) -> None:
        """Lock/unlock the device."""
        packet = bytearray(4)
        packet += self.name.encode("utf-8")
        packet += bytearray(0x50 - len(packet))
        packet[0x43] = bool(state)
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        self.is_locked = bool(state)

    def get_type(self) -> str:
        """Return device type."""
        return self.type

    def send_packet(self, packet_type: int, payload: bytes) -> bytes:
        """Send a packet to the device."""
        self.count = ((self.count + 1) | 0x8000) & 0xFFFF
        packet = bytearray(0x38)
        packet[0x00:0x08] = bytes.fromhex("5aa5aa555aa5aa55")
        packet[0x24:0x26] = self.devtype.to_bytes(2, "little")
        packet[0x26:0x28] = packet_type.to_bytes(2, "little")
        packet[0x28:0x2A] = self.count.to_bytes(2, "little")
        packet[0x2A:0x30] = self.mac[::-1]
        packet[0x30:0x34] = self.id.to_bytes(4, "little")

        p_checksum = sum(payload, 0xBEAF) & 0xFFFF
        packet[0x34:0x36] = p_checksum.to_bytes(2, "little")

        padding = (16 - len(payload)) % 16
        payload = self.encrypt(payload + bytes(padding))
        packet.extend(payload)

        checksum = sum(packet, 0xBEAF) & 0xFFFF
        packet[0x20:0x22] = checksum.to_bytes(2, "little")

        with self.lock and socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as conn:
            timeout = self.timeout
            start_time = time.time()

            while True:
                time_left = timeout - (time.time() - start_time)
                conn.settimeout(min(DEFAULT_RETRY_INTVL, time_left))
                conn.sendto(packet, self.host)

                try:
                    resp = conn.recvfrom(2048)[0]
                    break
                except socket.timeout as err:
                    if (time.time() - start_time) > timeout:
                        raise e.NetworkTimeoutError(
                            -4000,
                            "Network timeout",
                            f"No response received within {timeout}s",
                        ) from err

        if len(resp) < 0x30:
            raise e.DataValidationError(
                -4007,
                "Received data packet length error",
                f"Expected at least 48 bytes and received {len(resp)}",
            )

        nom_checksum = int.from_bytes(resp[0x20:0x22], "little")
        real_checksum = sum(resp, 0xBEAF) - sum(resp[0x20:0x22]) & 0xFFFF

        if nom_checksum != real_checksum:
            raise e.DataValidationError(
                -4008,
                "Received data packet check error",
                f"Expected a checksum of {nom_checksum} and received {real_checksum}",
            )

        return resp


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/exceptions.py

"""Exceptions for Broadlink devices."""
import collections
import struct


class BroadlinkException(Exception):
    """Base class common to all Broadlink exceptions."""

    def __init__(self, *args, **kwargs):
        """Initialize the exception."""
        super().__init__(*args, **kwargs)
        if len(args) >= 2:
            self.errno = args[0]
            self.strerror = ": ".join(str(arg) for arg in args[1:])
        elif len(args) == 1:
            self.errno = None
            self.strerror = str(args[0])
        else:
            self.errno = None
            self.strerror = ""

    def __str__(self):
        """Return str(self)."""
        if self.errno is not None:
            return "[Errno %s] %s" % (self.errno, self.strerror)
        return self.strerror

    def __eq__(self, other):
        """Return self==value."""
        # pylint: disable=unidiomatic-typecheck
        return type(self) == type(other) and self.args == other.args

    def __hash__(self):
        """Return hash(self)."""
        return hash((type(self), self.args))


class MultipleErrors(BroadlinkException):
    """Multiple errors."""

    def __init__(self, *args, **kwargs):
        """Initialize the exception."""
        errors = args[0][:] if args else []
        counter = collections.Counter(errors)
        strerror = "Multiple errors occurred: %s" % counter
        super().__init__(strerror, **kwargs)
        self.errors = errors

    def __repr__(self):
        """Return repr(self)."""
        return "MultipleErrors(%r)" % self.errors

    def __str__(self):
        """Return str(self)."""
        return self.strerror


class AuthenticationError(BroadlinkException):
    """Authentication error."""


class AuthorizationError(BroadlinkException):
    """Authorization error."""


class CommandNotSupportedError(BroadlinkException):
    """Command not supported error."""


class ConnectionClosedError(BroadlinkException):
    """Connection closed error."""


class StructureAbnormalError(BroadlinkException):
    """Structure abnormal error."""


class DeviceOfflineError(BroadlinkException):
    """Device offline error."""


class ReadError(BroadlinkException):
    """Read error."""


class SendError(BroadlinkException):
    """Send error."""


class SSIDNotFoundError(BroadlinkException):
    """SSID not found error."""


class StorageError(BroadlinkException):
    """Storage error."""


class WriteError(BroadlinkException):
    """Write error."""


class NetworkTimeoutError(BroadlinkException):
    """Network timeout error."""


class DataValidationError(BroadlinkException):
    """Data validation error."""


class UnknownError(BroadlinkException):
    """Unknown error."""


BROADLINK_EXCEPTIONS = {
    # Firmware-related errors are generated by the device.
    -1: (AuthenticationError, "Authentication failed"),
    -2: (ConnectionClosedError, "You have been logged out"),
    -3: (DeviceOfflineError, "The device is offline"),
    -4: (CommandNotSupportedError, "Command not supported"),
    -5: (StorageError, "The device storage is full"),
    -6: (StructureAbnormalError, "Structure is abnormal"),
    -7: (AuthorizationError, "Control key is expired"),
    -8: (SendError, "Send error"),
    -9: (WriteError, "Write error"),
    -10: (ReadError, "Read error"),
    -11: (SSIDNotFoundError, "SSID could not be found in AP configuration"),
    # SDK related errors are generated by this module.
    -2040: (DataValidationError, "Device information is not intact"),
    -4000: (NetworkTimeoutError, "Network timeout"),
    -4007: (DataValidationError, "Received data packet length error"),
    -4008: (DataValidationError, "Received data packet check error"),
    -4009: (DataValidationError, "Received data packet information type error"),
    -4010: (DataValidationError, "Received encrypted data packet length error"),
    -4011: (DataValidationError, "Received encrypted data packet check error"),
    -4012: (AuthorizationError, "Device control ID error"),
}


def exception(err_code: int) -> BroadlinkException:
    """Return exception corresponding to an error code."""
    try:
        exc, msg = BROADLINK_EXCEPTIONS[err_code]
        return exc(err_code, msg)
    except KeyError:
        return UnknownError(err_code, "Unknown error")


def check_error(error: bytes) -> None:
    """Raise exception if an error occurred."""
    error_code = struct.unpack("h", error)[0]
    if error_code:
        raise exception(error_code)


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/helpers.py

"""Helper functions and classes."""
from typing import Dict, List, Sequence


class CRC16:
    """Helps with CRC-16 calculation.

    CRC tables are cached for performance.
    """

    _cache: Dict[int, List[int]] = {}

    @classmethod
    def get_table(cls, polynomial: int) -> List[int]:
        """Return the CRC-16 table for a polynomial."""
        try:
            crc_table = cls._cache[polynomial]
        except KeyError:
            crc_table = []
            for dividend in range(0, 256):
                remainder = dividend
                for _ in range(0, 8):
                    if remainder & 1:
                        remainder = remainder >> 1 ^ polynomial
                    else:
                        remainder = remainder >> 1
                crc_table.append(remainder)
            cls._cache[polynomial] = crc_table
        return crc_table

    @classmethod
    def calculate(
        cls,
        sequence: Sequence[int],
        polynomial: int = 0xA001,  # CRC-16-ANSI.
        init_value: int = 0xFFFF,
    ) -> int:
        """Calculate the CRC-16 of a sequence of integers."""
        crc_table = cls.get_table(polynomial)
        crc = init_value
        for item in sequence:
            crc = crc >> 8 ^ crc_table[(crc ^ item) & 0xFF]
        return crc


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/hub.py

"""Support for hubs."""
import struct
import json
from typing import Optional

from . import exceptions as e
from .device import Device


class s3(Device):
    """Controls a Broadlink S3."""

    TYPE = "S3"
    MAX_SUBDEVICES = 8

    def get_subdevices(self, step: int = 5) -> list:
        """Return a list of sub devices."""
        total = self.MAX_SUBDEVICES
        sub_devices = []
        seen = set()
        index = 0

        while index < total:
            state = {"count": step, "index": index}
            packet = self._encode(14, state)
            resp = self.send_packet(0x6A, packet)
            e.check_error(resp[0x22:0x24])
            resp = self._decode(resp)

            for device in resp["list"]:
                did = device["did"]
                if did in seen:
                    continue

                seen.add(did)
                sub_devices.append(device)

            total = resp["total"]
            if len(seen) >= total:
                break

            index += step

        return sub_devices

    def get_state(self, did: Optional[str] = None) -> dict:
        """Return the power state of the device."""
        state = {}
        if did is not None:
            state["did"] = did

        packet = self._encode(1, state)
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        return self._decode(response)

    def set_state(
        self,
        did: Optional[str] = None,
        pwr1: Optional[bool] = None,
        pwr2: Optional[bool] = None,
        pwr3: Optional[bool] = None,
    ) -> dict:
        """Set the power state of the device."""
        state = {}
        if did is not None:
            state["did"] = did
        if pwr1 is not None:
            state["pwr1"] = int(bool(pwr1))
        if pwr2 is not None:
            state["pwr2"] = int(bool(pwr2))
        if pwr3 is not None:
            state["pwr3"] = int(bool(pwr3))

        packet = self._encode(2, state)
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        return self._decode(response)

    def _encode(self, flag: int, state: dict) -> bytes:
        """Encode a JSON packet."""
        # flag: 1 for reading, 2 for writing.
        packet = bytearray(12)
        data = json.dumps(state, separators=(",", ":")).encode()
        struct.pack_into(
            "<HHHBBI", packet, 0, 0xA5A5, 0x5A5A, 0, flag, 0x0B, len(data)
        )
        packet.extend(data)
        checksum = sum(packet, 0xBEAF) & 0xFFFF
        packet[0x04:0x06] = checksum.to_bytes(2, "little")
        return packet

    def _decode(self, response: bytes) -> dict:
        """Decode a JSON packet."""
        payload = self.decrypt(response[0x38:])
        js_len = struct.unpack_from("<I", payload, 0x08)[0]
        state = json.loads(payload[0x0C:0x0C+js_len])
        return state


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/light.py

"""Support for lights."""
import enum
import json
import struct
from typing import Optional

from . import exceptions as e
from .device import Device


class lb1(Device):
    """Controls a Broadlink LB1."""

    TYPE = "LB1"

    @enum.unique
    class ColorMode(enum.IntEnum):
        """Enumerates color modes."""

        RGB = 0
        WHITE = 1
        SCENE = 2

    def get_state(self) -> dict:
        """Return the power state of the device.

        Example: `{'red': 128, 'blue': 255, 'green': 128, 'pwr': 1, 'brightness': 75, 'colortemp': 2700, 'hue': 240, 'saturation': 50, 'transitionduration': 1500, 'maxworktime': 0, 'bulb_colormode': 1, 'bulb_scenes': '["@01686464,0,0,0", "#ffffff,10,0,#000000,190,0,0", "2700+100,0,0,0", "#ff0000,500,2500,#00FF00,500,2500,#0000FF,500,2500,0", "@01686464,100,2400,@01686401,100,2400,0", "@01686464,100,2400,@01686401,100,2400,@005a6464,100,2400,@005a6401,100,2400,0", "@01686464,10,0,@00000000,190,0,0", "@01686464,200,0,@005a6464,200,0,0"]', 'bulb_scene': '', 'bulb_sceneidx': 255}`
        """
        packet = self._encode(1, {})
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        return self._decode(response)

    def set_state(
        self,
        pwr: Optional[bool] = None,
        red: Optional[int] = None,
        blue: Optional[int] = None,
        green: Optional[int] = None,
        brightness: Optional[int] = None,
        colortemp: Optional[int] = None,
        hue: Optional[int] = None,
        saturation: Optional[int] = None,
        transitionduration: Optional[int] = None,
        maxworktime: Optional[int] = None,
        bulb_colormode: Optional[int] = None,
        bulb_scenes: Optional[str] = None,
        bulb_scene: Optional[str] = None,
        bulb_sceneidx: Optional[int] = None,
    ) -> dict:
        """Set the power state of the device."""
        state = {}
        if pwr is not None:
            state["pwr"] = int(bool(pwr))
        if red is not None:
            state["red"] = int(red)
        if blue is not None:
            state["blue"] = int(blue)
        if green is not None:
            state["green"] = int(green)
        if brightness is not None:
            state["brightness"] = int(brightness)
        if colortemp is not None:
            state["colortemp"] = int(colortemp)
        if hue is not None:
            state["hue"] = int(hue)
        if saturation is not None:
            state["saturation"] = int(saturation)
        if transitionduration is not None:
            state["transitionduration"] = int(transitionduration)
        if maxworktime is not None:
            state["maxworktime"] = int(maxworktime)
        if bulb_colormode is not None:
            state["bulb_colormode"] = int(bulb_colormode)
        if bulb_scenes is not None:
            state["bulb_scenes"] = str(bulb_scenes)
        if bulb_scene is not None:
            state["bulb_scene"] = str(bulb_scene)
        if bulb_sceneidx is not None:
            state["bulb_sceneidx"] = int(bulb_sceneidx)

        packet = self._encode(2, state)
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        return self._decode(response)

    def _encode(self, flag: int, state: dict) -> bytes:
        """Encode a JSON packet."""
        # flag: 1 for reading, 2 for writing.
        packet = bytearray(14)
        data = json.dumps(state, separators=(",", ":")).encode()
        p_len = 12 + len(data)
        struct.pack_into(
            "<HHHHBBI", packet, 0, p_len, 0xA5A5, 0x5A5A, 0, flag, 0x0B, len(data)
        )
        packet.extend(data)
        checksum = sum(packet[0x02:], 0xBEAF) & 0xFFFF
        packet[0x06:0x08] = checksum.to_bytes(2, "little")
        return packet

    def _decode(self, response: bytes) -> dict:
        """Decode a JSON packet."""
        payload = self.decrypt(response[0x38:])
        js_len = struct.unpack_from("<I", payload, 0xA)[0]
        state = json.loads(payload[0xE:0xE+js_len])
        return state


class lb2(Device):
    """Controls a Broadlink LB26/LB27."""

    TYPE = "LB2"

    @enum.unique
    class ColorMode(enum.IntEnum):
        """Enumerates color modes."""

        RGB = 0
        WHITE = 1
        SCENE = 2

    def get_state(self) -> dict:
        """Return the power state of the device.

        Example: `{'red': 128, 'blue': 255, 'green': 128, 'pwr': 1, 'brightness': 75, 'colortemp': 2700, 'hue': 240, 'saturation': 50, 'transitionduration': 1500, 'maxworktime': 0, 'bulb_colormode': 1, 'bulb_scenes': '["@01686464,0,0,0", "#ffffff,10,0,#000000,190,0,0", "2700+100,0,0,0", "#ff0000,500,2500,#00FF00,500,2500,#0000FF,500,2500,0", "@01686464,100,2400,@01686401,100,2400,0", "@01686464,100,2400,@01686401,100,2400,@005a6464,100,2400,@005a6401,100,2400,0", "@01686464,10,0,@00000000,190,0,0", "@01686464,200,0,@005a6464,200,0,0"]', 'bulb_scene': ''}`
        """
        packet = self._encode(1, {})
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        return self._decode(response)

    def set_state(
        self,
        pwr: Optional[bool] = None,
        red: Optional[int] = None,
        blue: Optional[int] = None,
        green: Optional[int] = None,
        brightness: Optional[int] = None,
        colortemp: Optional[int] = None,
        hue: Optional[int] = None,
        saturation: Optional[int] = None,
        transitionduration: Optional[int] = None,
        maxworktime: Optional[int] = None,
        bulb_colormode: Optional[int] = None,
        bulb_scenes: Optional[str] = None,
        bulb_scene: Optional[str] = None,
    ) -> dict:
        """Set the power state of the device."""
        state = {}
        if pwr is not None:
            state["pwr"] = int(bool(pwr))
        if red is not None:
            state["red"] = int(red)
        if blue is not None:
            state["blue"] = int(blue)
        if green is not None:
            state["green"] = int(green)
        if brightness is not None:
            state["brightness"] = int(brightness)
        if colortemp is not None:
            state["colortemp"] = int(colortemp)
        if hue is not None:
            state["hue"] = int(hue)
        if saturation is not None:
            state["saturation"] = int(saturation)
        if transitionduration is not None:
            state["transitionduration"] = int(transitionduration)
        if maxworktime is not None:
            state["maxworktime"] = int(maxworktime)
        if bulb_colormode is not None:
            state["bulb_colormode"] = int(bulb_colormode)
        if bulb_scenes is not None:
            state["bulb_scenes"] = str(bulb_scenes)
        if bulb_scene is not None:
            state["bulb_scene"] = str(bulb_scene)

        packet = self._encode(2, state)
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        return self._decode(response)

    def _encode(self, flag: int, state: dict) -> bytes:
        """Encode a JSON packet."""
        # flag: 1 for reading, 2 for writing.
        packet = bytearray(12)
        data = json.dumps(state, separators=(",", ":")).encode()
        struct.pack_into(
            "<HHHBBI", packet, 0, 0xA5A5, 0x5A5A, 0, flag, 0x0B, len(data)
        )
        packet.extend(data)
        checksum = sum(packet, 0xBEAF) & 0xFFFF
        packet[0x04:0x06] = checksum.to_bytes(2, "little")
        return packet

    def _decode(self, response: bytes) -> dict:
        """Decode a JSON packet."""
        payload = self.decrypt(response[0x38:])
        js_len = struct.unpack_from("<I", payload, 0x08)[0]
        state = json.loads(payload[0x0C:0x0C+js_len])
        return state


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/protocol.py

"""The networking part of the python-broadlink library."""
import datetime as dt
import time


class Datetime:
    """Helps to pack and unpack datetime objects for the Broadlink protocol."""

    @staticmethod
    def pack(datetime: dt.datetime) -> bytes:
        """Pack the timestamp to be sent over the Broadlink protocol."""
        data = bytearray(12)
        utcoffset = int(datetime.utcoffset().total_seconds() / 3600)
        data[:0x04] = utcoffset.to_bytes(4, "little", signed=True)
        data[0x04:0x06] = datetime.year.to_bytes(2, "little")
        data[0x06] = datetime.minute
        data[0x07] = datetime.hour
        data[0x08] = int(datetime.strftime("%y"))
        data[0x09] = datetime.isoweekday()
        data[0x0A] = datetime.day
        data[0x0B] = datetime.month
        return data

    @staticmethod
    def unpack(data: bytes) -> dt.datetime:
        """Unpack a timestamp received over the Broadlink protocol."""
        utcoffset = int.from_bytes(data[0x00:0x04], "little", signed=True)
        year = int.from_bytes(data[0x04:0x06], "little")
        minute = data[0x06]
        hour = data[0x07]
        subyear = data[0x08]
        isoweekday = data[0x09]
        day = data[0x0A]
        month = data[0x0B]

        tz_info = dt.timezone(dt.timedelta(hours=utcoffset))
        datetime = dt.datetime(year, month, day, hour, minute, 0, 0, tz_info)

        if datetime.isoweekday() != isoweekday:
            raise ValueError("isoweekday does not match")
        if int(datetime.strftime("%y")) != subyear:
            raise ValueError("subyear does not match")

        return datetime

    @staticmethod
    def now() -> dt.datetime:
        """Return the current date and time with timezone info."""
        tz_info = dt.timezone(dt.timedelta(seconds=-time.timezone))
        return dt.datetime.now(tz_info)


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/remote.py

"""Support for universal remotes."""
import struct
from typing import List, Optional, Tuple

from . import exceptions as e
from .device import Device


def pulses_to_data(pulses: List[int], tick: float = 32.84) -> bytes:
    """Convert a microsecond duration sequence into a Broadlink IR packet."""
    result = bytearray(4)
    result[0x00] = 0x26

    for pulse in pulses:
        div, mod = divmod(int(pulse // tick), 256)
        if div:
            result.append(0)
            result.append(div)
        result.append(mod)

    data_len = len(result) - 4
    result[0x02] = data_len & 0xFF
    result[0x03] = data_len >> 8

    return result


def data_to_pulses(data: bytes, tick: float = 32.84) -> List[int]:
    """Parse a Broadlink packet into a microsecond duration sequence."""
    result = []
    index = 4
    end = min(256 * data[0x03] + data[0x02] + 4, len(data))

    while index < end:
        chunk = data[index]
        index += 1

        if chunk == 0:
            try:
                chunk = 256 * data[index] + data[index + 1]
            except IndexError as err:
                raise ValueError("Malformed data.") from err
            index += 2

        result.append(int(chunk * tick))

    return result


class rmmini(Device):
    """Controls a Broadlink RM mini 3."""

    TYPE = "RMMINI"

    def _send(self, command: int, data: bytes = b"") -> bytes:
        """Send a packet to the device."""
        packet = struct.pack("<I", command) + data
        resp = self.send_packet(0x6A, packet)
        e.check_error(resp[0x22:0x24])
        payload = self.decrypt(resp[0x38:])
        return payload[0x4:]

    def update(self) -> None:
        """Update device name and lock status."""
        resp = self._send(0x1)
        self.name = resp[0x48:].split(b"\x00")[0].decode()
        self.is_locked = bool(resp[0x87])

    def send_data(self, data: bytes) -> None:
        """Send a code to the device."""
        self._send(0x2, data)

    def enter_learning(self) -> None:
        """Enter infrared learning mode."""
        self._send(0x3)

    def check_data(self) -> bytes:
        """Return the last captured code."""
        return self._send(0x4)


class rmpro(rmmini):
    """Controls a Broadlink RM pro."""

    TYPE = "RMPRO"

    def sweep_frequency(self) -> None:
        """Sweep frequency."""
        self._send(0x19)

    def check_frequency(self) -> Tuple[bool, float]:
        """Return True if the frequency was identified successfully."""
        resp = self._send(0x1A)
        is_found = bool(resp[0])
        frequency = struct.unpack("<I", resp[1:5])[0] / 1000.0
        return is_found, frequency

    def find_rf_packet(self, frequency: Optional[float] = None) -> None:
        """Enter radiofrequency learning mode."""
        payload = bytearray()
        if frequency:
            payload += struct.pack("<I", int(frequency * 1000))
        self._send(0x1B, payload)

    def cancel_sweep_frequency(self) -> None:
        """Cancel sweep frequency."""
        self._send(0x1E)

    def check_sensors(self) -> dict:
        """Return the state of the sensors."""
        resp = self._send(0x1)
        temp = struct.unpack("<bb", resp[:0x2])
        return {"temperature": temp[0x0] + temp[0x1] / 10.0}

    def check_temperature(self) -> float:
        """Return the temperature."""
        return self.check_sensors()["temperature"]


class rmminib(rmmini):
    """Controls a Broadlink RM mini 3 (new firmware)."""

    TYPE = "RMMINIB"

    def _send(self, command: int, data: bytes = b"") -> bytes:
        """Send a packet to the device."""
        packet = struct.pack("<HI", len(data) + 4, command) + data
        resp = self.send_packet(0x6A, packet)
        e.check_error(resp[0x22:0x24])
        payload = self.decrypt(resp[0x38:])
        p_len = struct.unpack("<H", payload[:0x2])[0]
        return payload[0x6:p_len+2]


class rm4mini(rmminib):
    """Controls a Broadlink RM4 mini."""

    TYPE = "RM4MINI"

    def check_sensors(self) -> dict:
        """Return the state of the sensors."""
        resp = self._send(0x24)
        temp = struct.unpack("<bb", resp[:0x2])
        return {
            "temperature": temp[0x0] + temp[0x1] / 100.0,
            "humidity": resp[0x2] + resp[0x3] / 100.0,
        }

    def check_temperature(self) -> float:
        """Return the temperature."""
        return self.check_sensors()["temperature"]

    def check_humidity(self) -> float:
        """Return the humidity."""
        return self.check_sensors()["humidity"]


class rm4pro(rm4mini, rmpro):
    """Controls a Broadlink RM4 pro."""

    TYPE = "RM4PRO"


class rm(rmpro):
    """For backwards compatibility."""

    TYPE = "RM2"


class rm4(rm4pro):
    """For backwards compatibility."""

    TYPE = "RM4"


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/sensor.py

"""Support for sensors."""
from typing import Sequence

from . import exceptions as e
from .device import Device


class a1(Device):
    """Controls a Broadlink A1."""

    TYPE = "A1"

    _SENSORS_AND_LEVELS = (
        ("light", ("dark", "dim", "normal", "bright")),
        ("air_quality", ("excellent", "good", "normal", "bad")),
        ("noise", ("quiet", "normal", "noisy")),
    )

    def check_sensors(self) -> dict:
        """Return the state of the sensors."""
        data = self.check_sensors_raw()
        for sensor, levels in self._SENSORS_AND_LEVELS:
            try:
                data[sensor] = levels[data[sensor]]
            except IndexError:
                data[sensor] = "unknown"
        return data

    def check_sensors_raw(self) -> dict:
        """Return the state of the sensors in raw format."""
        packet = bytearray([0x1])
        resp = self.send_packet(0x6A, packet)
        e.check_error(resp[0x22:0x24])
        data = self.decrypt(resp[0x38:])

        return {
            "temperature": data[0x04] + data[0x05] / 10.0,
            "humidity": data[0x06] + data[0x07] / 10.0,
            "light": data[0x08],
            "air_quality": data[0x0A],
            "noise": data[0x0C],
        }


class a2(Device):
    """Controls a Broadlink A2."""

    TYPE = "A2"

    def _send(self, operation: int, data: Sequence = b""):
        """Send a command to the device."""
        packet = bytearray(12)
        packet[0x02] = 0xA5
        packet[0x03] = 0xA5
        packet[0x04] = 0x5A
        packet[0x05] = 0x5A
        packet[0x08] = operation
        packet[0x09] = 0x0B

        if data:
            data_len = len(data)
            packet[0x0A] = data_len & 0xFF
            packet[0x0B] = data_len >> 8
            packet += bytes(2)
            packet.extend(data)

        checksum = sum(packet, 0xBEAF) & 0xFFFF
        packet[0x06] = checksum & 0xFF
        packet[0x07] = checksum >> 8

        packet_len = len(packet) - 2
        packet[0x00] = packet_len & 0xFF
        packet[0x01] = packet_len >> 8

        resp = self.send_packet(0x6A, packet)
        e.check_error(resp[0x22:0x24])
        payload = self.decrypt(resp[0x38:])
        return payload

    def check_sensors_raw(self) -> dict:
        """Return the state of the sensors in raw format."""
        data = self._send(1)

        return {
            "temperature": data[0x13] * 256 + data[0x14],
            "humidity": data[0x15] * 256 + data[0x16],
            "pm10": data[0x0D] * 256 + data[0x0E],
            "pm2_5": data[0x0F] * 256 + data[0x10],
            "pm1": data[0x11] * 256 + data[0x12],
        }


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: broadlink/switch.py

"""Support for switches."""
import json
import struct
from typing import Optional

from . import exceptions as e
from .device import Device


class sp1(Device):
    """Controls a Broadlink SP1."""

    TYPE = "SP1"

    def set_power(self, pwr: bool) -> None:
        """Set the power state of the device."""
        packet = bytearray(4)
        packet[0] = bool(pwr)
        response = self.send_packet(0x66, packet)
        e.check_error(response[0x22:0x24])


class sp2(Device):
    """Controls a Broadlink SP2."""

    TYPE = "SP2"

    def set_power(self, pwr: bool) -> None:
        """Set the power state of the device."""
        packet = bytearray(16)
        packet[0] = 2
        packet[4] = bool(pwr)
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])

    def check_power(self) -> bool:
        """Return the power state of the device."""
        packet = bytearray(16)
        packet[0] = 1
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        return bool(payload[0x4])


class sp2s(sp2):
    """Controls a Broadlink SP2S."""

    TYPE = "SP2S"

    def get_energy(self) -> float:
        """Return the power consumption in W."""
        packet = bytearray(16)
        packet[0] = 4
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        return int.from_bytes(payload[0x4:0x7], "little") / 1000


class sp3(Device):
    """Controls a Broadlink SP3."""

    TYPE = "SP3"

    def set_power(self, pwr: bool) -> None:
        """Set the power state of the device."""
        packet = bytearray(16)
        packet[0] = 2
        packet[4] = self.check_nightlight() << 1 | bool(pwr)
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])

    def set_nightlight(self, ntlight: bool) -> None:
        """Set the night light state of the device."""
        packet = bytearray(16)
        packet[0] = 2
        packet[4] = bool(ntlight) << 1 | self.check_power()
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])

    def check_power(self) -> bool:
        """Return the power state of the device."""
        packet = bytearray(16)
        packet[0] = 1
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        return bool(payload[0x4] & 1)

    def check_nightlight(self) -> bool:
        """Return the state of the night light."""
        packet = bytearray(16)
        packet[0] = 1
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        return bool(payload[0x4] & 2)


class sp3s(sp2):
    """Controls a Broadlink SP3S."""

    TYPE = "SP3S"

    def get_energy(self) -> float:
        """Return the power consumption in W."""
        packet = bytearray([8, 0, 254, 1, 5, 1, 0, 0, 0, 45])
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        energy = payload[0x7:0x4:-1].hex()
        return int(energy) / 100


class sp4(Device):
    """Controls a Broadlink SP4."""

    TYPE = "SP4"

    def set_power(self, pwr: bool) -> None:
        """Set the power state of the device."""
        self.set_state(pwr=pwr)

    def set_nightlight(self, ntlight: bool) -> None:
        """Set the night light state of the device."""
        self.set_state(ntlight=ntlight)

    def set_state(
        self,
        pwr: Optional[bool] = None,
        ntlight: Optional[bool] = None,
        indicator: Optional[bool] = None,
        ntlbrightness: Optional[int] = None,
        maxworktime: Optional[int] = None,
        childlock: Optional[bool] = None,
    ) -> dict:
        """Set state of device."""
        state = {}
        if pwr is not None:
            state["pwr"] = int(bool(pwr))
        if ntlight is not None:
            state["ntlight"] = int(bool(ntlight))
        if indicator is not None:
            state["indicator"] = int(bool(indicator))
        if ntlbrightness is not None:
            state["ntlbrightness"] = ntlbrightness
        if maxworktime is not None:
            state["maxworktime"] = maxworktime
        if childlock is not None:
            state["childlock"] = int(bool(childlock))

        packet = self._encode(2, state)
        response = self.send_packet(0x6A, packet)
        return self._decode(response)

    def check_power(self) -> bool:
        """Return the power state of the device."""
        state = self.get_state()
        return bool(state["pwr"])

    def check_nightlight(self) -> bool:
        """Return the state of the night light."""
        state = self.get_state()
        return bool(state["ntlight"])

    def get_state(self) -> dict:
        """Get full state of device."""
        packet = self._encode(1, {})
        response = self.send_packet(0x6A, packet)
        return self._decode(response)

    def _encode(self, flag: int, state: dict) -> bytes:
        """Encode a message."""
        packet = bytearray(12)
        data = json.dumps(state, separators=(",", ":")).encode()
        struct.pack_into(
            "<HHHBBI", packet, 0, 0xA5A5, 0x5A5A, 0x0000, flag, 0x0B, len(data)
        )
        packet.extend(data)
        checksum = sum(packet, 0xBEAF) & 0xFFFF
        packet[0x04:0x06] = checksum.to_bytes(2, "little")
        return packet

    def _decode(self, response: bytes) -> dict:
        """Decode a message."""
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        js_len = struct.unpack_from("<I", payload, 0x08)[0]
        state = json.loads(payload[0x0C:0x0C+js_len])
        return state


class sp4b(sp4):
    """Controls a Broadlink SP4 (type B)."""

    TYPE = "SP4B"

    def get_state(self) -> dict:
        """Get full state of device."""
        state = super().get_state()

        # Convert sensor data to float. Remove keys if sensors are not supported.
        sensor_attrs = ["current", "volt", "power", "totalconsum", "overload"]
        for attr in sensor_attrs:
            value = state.pop(attr, -1)
            if value != -1:
                state[attr] = value / 1000
        return state

    def _encode(self, flag: int, state: dict) -> bytes:
        """Encode a message."""
        packet = bytearray(14)
        data = json.dumps(state, separators=(",", ":")).encode()
        length = 12 + len(data)
        struct.pack_into(
            "<HHHHBBI",
            packet,
            0,
            length,
            0xA5A5,
            0x5A5A,
            0x0000,
            flag,
            0x0B,
            len(data),
        )
        packet.extend(data)
        checksum = sum(packet[0x02:], 0xBEAF) & 0xFFFF
        packet[0x06:0x08] = checksum.to_bytes(2, "little")
        return packet

    def _decode(self, response: bytes) -> dict:
        """Decode a message."""
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        js_len = struct.unpack_from("<I", payload, 0xA)[0]
        state = json.loads(payload[0x0E:0x0E+js_len])
        return state


class bg1(Device):
    """Controls a BG Electrical smart outlet."""

    TYPE = "BG1"

    def get_state(self) -> dict:
        """Return the power state of the device.

        Example: `{"pwr":1,"pwr1":1,"pwr2":0,"maxworktime":60,"maxworktime1":60,"maxworktime2":0,"idcbrightness":50}`
        """
        packet = self._encode(1, {})
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        return self._decode(response)

    def set_state(
        self,
        pwr: Optional[bool] = None,
        pwr1: Optional[bool] = None,
        pwr2: Optional[bool] = None,
        maxworktime: Optional[int] = None,
        maxworktime1: Optional[int] = None,
        maxworktime2: Optional[int] = None,
        idcbrightness: Optional[int] = None,
    ) -> dict:
        """Set the power state of the device."""
        state = {}
        if pwr is not None:
            state["pwr"] = int(bool(pwr))
        if pwr1 is not None:
            state["pwr1"] = int(bool(pwr1))
        if pwr2 is not None:
            state["pwr2"] = int(bool(pwr2))
        if maxworktime is not None:
            state["maxworktime"] = maxworktime
        if maxworktime1 is not None:
            state["maxworktime1"] = maxworktime1
        if maxworktime2 is not None:
            state["maxworktime2"] = maxworktime2
        if idcbrightness is not None:
            state["idcbrightness"] = idcbrightness

        packet = self._encode(2, state)
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        return self._decode(response)

    def _encode(self, flag: int, state: dict) -> bytes:
        """Encode a message."""
        packet = bytearray(14)
        data = json.dumps(state).encode()
        length = 12 + len(data)
        struct.pack_into(
            "<HHHHBBI",
            packet,
            0,
            length,
            0xA5A5,
            0x5A5A,
            0x0000,
            flag,
            0x0B,
            len(data),
        )
        packet.extend(data)
        checksum = sum(packet[0x2:], 0xBEAF) & 0xFFFF
        packet[0x06:0x08] = checksum.to_bytes(2, "little")
        return packet

    def _decode(self, response: bytes) -> dict:
        """Decode a message."""
        payload = self.decrypt(response[0x38:])
        js_len = struct.unpack_from("<I", payload, 0x0A)[0]
        state = json.loads(payload[0x0E:0x0E+js_len])
        return state


class ehc31(bg1):
    """Controls a BG Electrical smart extension lead."""

    TYPE = "EHC31"

    def set_state(
        self,
        pwr: Optional[bool] = None,
        pwr1: Optional[bool] = None,
        pwr2: Optional[bool] = None,
        pwr3: Optional[bool] = None,
        maxworktime1: Optional[int] = None,
        maxworktime2: Optional[int] = None,
        maxworktime3: Optional[int] = None,
        idcbrightness: Optional[int] = None,
        childlock: Optional[bool] = None,
        childlock1: Optional[bool] = None,
        childlock2: Optional[bool] = None,
        childlock3: Optional[bool] = None,
        childlock4: Optional[bool] = None,
    ) -> dict:
        """Set the power state of the device."""
        state = {}
        if pwr is not None:
            state["pwr"] = int(bool(pwr))
        if pwr1 is not None:
            state["pwr1"] = int(bool(pwr1))
        if pwr2 is not None:
            state["pwr2"] = int(bool(pwr2))
        if pwr3 is not None:
            state["pwr3"] = int(bool(pwr3))
        if maxworktime1 is not None:
            state["maxworktime1"] = maxworktime1
        if maxworktime2 is not None:
            state["maxworktime2"] = maxworktime2
        if maxworktime3 is not None:
            state["maxworktime3"] = maxworktime3
        if idcbrightness is not None:
            state["idcbrightness"] = idcbrightness
        if childlock is not None:
            state["childlock"] = int(bool(childlock))
        if childlock1 is not None:
            state["childlock1"] = int(bool(childlock1))
        if childlock2 is not None:
            state["childlock2"] = int(bool(childlock2))
        if childlock3 is not None:
            state["childlock3"] = int(bool(childlock3))
        if childlock4 is not None:
            state["childlock4"] = int(bool(childlock4))

        packet = self._encode(2, state)
        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        return self._decode(response)


class mp1(Device):
    """Controls a Broadlink MP1."""

    TYPE = "MP1"

    def set_power_mask(self, sid_mask: int, pwr: bool) -> None:
        """Set the power state of the device."""
        packet = bytearray(16)
        packet[0x00] = 0x0D
        packet[0x02] = 0xA5
        packet[0x03] = 0xA5
        packet[0x04] = 0x5A
        packet[0x05] = 0x5A
        packet[0x06] = 0xB2 + ((sid_mask << 1) if pwr else sid_mask)
        packet[0x07] = 0xC0
        packet[0x08] = 0x02
        packet[0x0A] = 0x03
        packet[0x0D] = sid_mask
        packet[0x0E] = sid_mask if pwr else 0

        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])

    def set_power(self, sid: int, pwr: bool) -> None:
        """Set the power state of the device."""
        sid_mask = 0x01 << (sid - 1)
        self.set_power_mask(sid_mask, pwr)

    def check_power_raw(self) -> int:
        """Return the power state of the device in raw format."""
        packet = bytearray(16)
        packet[0x00] = 0x0A
        packet[0x02] = 0xA5
        packet[0x03] = 0xA5
        packet[0x04] = 0x5A
        packet[0x05] = 0x5A
        packet[0x06] = 0xAE
        packet[0x07] = 0xC0
        packet[0x08] = 0x01

        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        return payload[0x0E]

    def check_power(self) -> dict:
        """Return the power state of the device."""
        data = self.check_power_raw()
        return {
            "s1": bool(data & 1),
            "s2": bool(data & 2),
            "s3": bool(data & 4),
            "s4": bool(data & 8),
        }


class mp1s(mp1):
    """Controls a Broadlink MP1S."""

    TYPE = "MP1S"

    def get_state(self) -> dict:
        """Return the power state of the device.

        voltage in V.
        current in A.
        power in W.
        power consumption in kW·h.
        """
        packet = bytearray(16)
        packet[0x00] = 0x0E
        packet[0x02] = 0xA5
        packet[0x03] = 0xA5
        packet[0x04] = 0x5A
        packet[0x05] = 0x5A
        packet[0x06] = 0xB2
        packet[0x07] = 0xC0
        packet[0x08] = 0x01
        packet[0x0A] = 0x04

        response = self.send_packet(0x6A, packet)
        e.check_error(response[0x22:0x24])
        payload = self.decrypt(response[0x38:])
        payload_str = payload.hex()[4:-6]

        def get_value(start, end, factors):
            value = sum(
                int(payload_str[i-2:i]) * factor
                for i, factor in zip(range(start, end, -2), factors)
            )
            return value

        return {
            "volt": get_value(34, 30, [10, 0.1]),
            "current": get_value(40, 34, [1, 0.01, 0.0001]),
            "power": get_value(46, 40, [100, 1, 0.01]),
            "totalconsum": get_value(54, 46, [10000, 100, 1, 0.01]),
        }


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: cli/README.md

Command line interface for python-broadlink
===========================================

This is a command line interface for the python-broadlink API.


Requirements
------------
You need to install the module first:
```
pip3 install broadlink
```

Installation
-----------
Download "broadlink_cli" and "broadlink_discovery".


Programs
--------
* broadlink_discovery: Discover Broadlink devices connected to the local network.

* broadlink_cli: Send commands and query the Broadlink device.


Device specification formats
----------------------------

Using separate parameters for each information:
```
broadlink_cli --type 0x2712 --host 1.1.1.1 --mac aaaaaaaaaa --temp
```

Using all parameters as a single argument:
```
broadlink_cli --device "0x2712 1.1.1.1 aaaaaaaaaa" --temp
```

Using file with parameters:
```
broadlink_cli --device @BEDROOM.device --temp
```
This is prefered as the configuration is stored in a file and you can change
it later to point to a different device.

Example usage
-------------

### Common commands

#### Join device to the Wi-Fi network
```
broadlink_cli --joinwifi SSID PASSWORD
```

#### Discover devices connected to the local network
```
broadlink_discovery
```

### Universal remotes

#### Learn IR code and show at console
```
broadlink_cli --device @BEDROOM.device --learn 
```

#### Learn RF code and show at console
```
broadlink_cli --device @BEDROOM.device --rfscanlearn
```

#### Learn IR code and save to file
```
broadlink_cli --device @BEDROOM.device --learnfile LG-TV.power
```

#### Learn RF code and save to file
```
broadlink_cli --device @BEDROOM.device --rfscanlearn --learnfile LG-TV.power
```

#### Send code
```
broadlink_cli --device @BEDROOM.device --send DATA
```

#### Send code from file
```
broadlink_cli --device @BEDROOM.device --send @LG-TV.power
```

#### Check temperature
```
broadlink_cli --device @BEDROOM.device --temperature
```

#### Check humidity
```
broadlink_cli --device @BEDROOM.device --humidity
```

### Smart plugs

#### Turn on
```
broadlink_cli --device @BEDROOM.device --turnon
```

#### Turn off
```
broadlink_cli --device @BEDROOM.device --turnoff
```

#### Turn on nightlight
```
broadlink_cli --device @BEDROOM.device --turnnlon
```

#### Turn off nightlight
```
broadlink_cli --device @BEDROOM.device --turnnloff
```

#### Check power state
```
broadlink_cli --device @BEDROOM.device --check
```

#### Check nightlight state
```
broadlink_cli --device @BEDROOM.device --checknl
```

#### Check power consumption
```
broadlink_cli --device @BEDROOM.device --energy
```


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: cli/broadlink_cli

#!/usr/bin/env python3
import argparse
import base64
import time
from typing import List

import broadlink
from broadlink.const import DEFAULT_PORT
from broadlink.exceptions import ReadError, StorageError
from broadlink.remote import data_to_pulses, pulses_to_data

TIMEOUT = 30


def auto_int(x):
    return int(x, 0)


def format_pulses(pulses: List[int]) -> str:
    """Format pulses."""
    return " ".join(
        f"+{pulse}" if i % 2 == 0 else f"-{pulse}"
        for i, pulse in enumerate(pulses)
    )


def parse_pulses(data: List[str]) -> List[int]:
    """Parse pulses."""
    return [abs(int(s)) for s in data]


parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
parser.add_argument("--device", help="device definition as 'type host mac'")
parser.add_argument("--type", type=auto_int, default=0x2712, help="type of device")
parser.add_argument("--host", help="host address")
parser.add_argument("--mac", help="mac address (hex reverse), as used by python-broadlink library")
parser.add_argument("--temperature", action="store_true", help="request temperature from device")
parser.add_argument("--humidity", action="store_true", help="request humidity from device")
parser.add_argument("--energy", action="store_true", help="request energy consumption from device")
parser.add_argument("--check", action="store_true", help="check current power state")
parser.add_argument("--checknl", action="store_true", help="check current nightlight state")
parser.add_argument("--turnon", action="store_true", help="turn on device")
parser.add_argument("--turnoff", action="store_true", help="turn off device")
parser.add_argument("--turnnlon", action="store_true", help="turn on nightlight on the device")
parser.add_argument("--turnnloff", action="store_true", help="turn off nightlight on the device")
parser.add_argument("--switch", action="store_true", help="switch state from on to off and off to on")
parser.add_argument("--send", action="store_true", help="send command")
parser.add_argument("--sensors", action="store_true", help="check all sensors")
parser.add_argument("--learn", action="store_true", help="learn command")
parser.add_argument("--rflearn", action="store_true", help="rf scan learning")
parser.add_argument("--frequency", type=float, help="specify radiofrequency for learning")
parser.add_argument("--learnfile", help="save learned command to a specified file")
parser.add_argument("--durations", action="store_true",
                    help="use durations in micro seconds instead of the Broadlink format")
parser.add_argument("--convert", action="store_true", help="convert input data to durations")
parser.add_argument("--joinwifi", nargs=2, help="Args are SSID PASSPHRASE to configure Broadlink device with")
parser.add_argument("data", nargs='*', help="Data to send or convert")
args = parser.parse_args()

if args.device:
    values = args.device.split()
    devtype = int(values[0], 0)
    host = values[1]
    mac = bytearray.fromhex(values[2])
elif args.mac:
    devtype = args.type
    host = args.host
    mac = bytearray.fromhex(args.mac)

if args.host or args.device:
    dev = broadlink.gendevice(devtype, (host, DEFAULT_PORT), mac)
    dev.auth()

if args.joinwifi:
    broadlink.setup(args.joinwifi[0], args.joinwifi[1], 4)

if args.convert:
    data = bytearray.fromhex(''.join(args.data))
    pulses = data_to_pulses(data)
    print(format_pulses(pulses))
if args.temperature:
    print(dev.check_temperature())
if args.humidity:
    print(dev.check_humidity())
if args.energy:
    print(dev.get_energy())
if args.sensors:
    data = dev.check_sensors()
    for key in data:
        print("{} {}".format(key, data[key]))
if args.send:
    data = (
        pulses_to_data(parse_pulses(args.data))
        if args.durations
        else bytes.fromhex(''.join(args.data))
    )
    dev.send_data(data)
if args.learn or (args.learnfile and not args.rflearn):
    dev.enter_learning()
    print("Learning...")
    start = time.time()
    while time.time() - start < TIMEOUT:
        time.sleep(1)
        try:
            data = dev.check_data()
        except (ReadError, StorageError):
            continue
        else:
            break
    else:
        print("No data received...")
        exit(1)

    print("Packet found!")
    raw_fmt = data.hex()
    base64_fmt = base64.b64encode(data).decode('ascii')
    pulse_fmt = format_pulses(data_to_pulses(data))

    print("Raw:", raw_fmt)
    print("Base64:", base64_fmt)
    print("Pulses:", pulse_fmt)

    if args.learnfile:
        print("Saving to {}".format(args.learnfile))
        with open(args.learnfile, "w") as text_file:
            text_file.write(pulse_fmt if args.durations else raw_fmt)
if args.check:
    if dev.check_power():
        print('* ON *')
    else:
        print('* OFF *')
if args.checknl:
    if dev.check_nightlight():
        print('* ON *')
    else:
        print('* OFF *')
if args.turnon:
    dev.set_power(True)
    if dev.check_power():
        print('== Turned * ON * ==')
    else:
        print('!! Still OFF !!')
if args.turnoff:
    dev.set_power(False)
    if dev.check_power():
        print('!! Still ON !!')
    else:
        print('== Turned * OFF * ==')
if args.turnnlon:
    dev.set_nightlight(True)
    if dev.check_nightlight():
        print('== Turned * ON * ==')
    else:
        print('!! Still OFF !!')
if args.turnnloff:
    dev.set_nightlight(False)
    if dev.check_nightlight():
        print('!! Still ON !!')
    else:
        print('== Turned * OFF * ==')
if args.switch:
    if dev.check_power():
        dev.set_power(False)
        print('* Switch to OFF *')
    else:
        dev.set_power(True)
        print('* Switch to ON *')
if args.rflearn:
    if args.frequency:
        frequency = args.frequency
        print("Press the button you want to learn, a short press...")
    else:
        dev.sweep_frequency()
        print("Detecting radiofrequency, press and hold the button to learn...")

        start = time.time()
        while time.time() - start < TIMEOUT:
            time.sleep(1)
            locked, frequency = dev.check_frequency()
            if locked:
                break
        else:
            print("Radiofrequency not found")
            dev.cancel_sweep_frequency()
            exit(1)

        print("Radiofrequency detected: {}MHz".format(frequency))
        print("You can now let go of the button")

        input("Press enter to continue...")

        print("Press the button again, now a short press.")

    dev.find_rf_packet(frequency)

    start = time.time()
    while time.time() - start < TIMEOUT:
        time.sleep(1)
        try:
            data = dev.check_data()
        except (ReadError, StorageError):
            continue
        else:
            break
    else:
        print("No data received...")
        exit(1)

    print("Packet found!")
    raw_fmt = data.hex()
    base64_fmt = base64.b64encode(data).decode('ascii')
    pulse_fmt = format_pulses(data_to_pulses(data))

    print("Raw:", raw_fmt)
    print("Base64:", base64_fmt)
    print("Pulses:", pulse_fmt)

    if args.learnfile:
        print("Saving to {}".format(args.learnfile))
        with open(args.learnfile, "w") as text_file:
            text_file.write(pulse_fmt if args.durations else raw_fmt)


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: cli/broadlink_discovery

#!/usr/bin/env python3
import argparse

import broadlink
from broadlink.const import DEFAULT_BCAST_ADDR, DEFAULT_TIMEOUT
from broadlink.exceptions import StorageError

parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
parser.add_argument("--timeout", type=int, default=DEFAULT_TIMEOUT, help="timeout to wait for receiving discovery responses")
parser.add_argument("--ip", default=None, help="ip address to use in the discovery")
parser.add_argument("--dst-ip", default=DEFAULT_BCAST_ADDR, help="destination ip address to use in the discovery")
args = parser.parse_args()

print("Discovering...")
devices = broadlink.discover(timeout=args.timeout, local_ip_address=args.ip, discover_ip_address=args.dst_ip)
for device in devices:
    if device.auth():
        print("###########################################")
        print(device.type)
        print("# broadlink_cli --type {} --host {} --mac {}".format(hex(device.devtype), device.host[0],
                                                                    ''.join(format(x, '02x') for x in device.mac)))
        print("Device file data (to be used with --device @filename in broadlink_cli) : ")
        print("{} {} {}".format(hex(device.devtype), device.host[0], ''.join(format(x, '02x') for x in device.mac)))
        try:
            print("temperature = {}".format(device.check_temperature()))
        except (AttributeError, StorageError):
            pass
        print("")
    else:
        print("Error authenticating with device : {}".format(device.host))


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: protocol.md

Broadlink RM2 network protocol
==============================

Encryption
----------

Packets include AES-based encryption in CBC mode. The initial key is 0x09, 0x76, 0x28, 0x34, 0x3f, 0xe9, 0x9e, 0x23, 0x76, 0x5c, 0x15, 0x13, 0xac, 0xcf, 0x8b, 0x02. The IV is 0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3, 0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58.

Checksum
--------

Construct the packet and set checksum bytes to zero. Add each byte to the starting value of 0xbeaf, wrapping after 0xffff.

New device setup
----------------

To setup a new Broadlink device while in AP Mode a 136 byte packet needs to be sent to the device as follows:

| Offset  | Contents |
|---------|----------|
|0x00-0x19|00|
|0x20-0x21|Checksum as a little-endian 16 bit integer|
|0x26|14 (Always 14)|
|0x44-0x63|SSID Name (zero padding is appended)|
|0x64-0x83|Password (zero padding is appended)|
|0x84|Character length of SSID|
|0x85|Character length of password|
|0x86|Wireless security mode (00 - none, 01 = WEP, 02 = WPA1, 03 = WPA2, 04 = WPA1/2)|
|0x87-88|00|

Send this packet as a UDP broadcast to 255.255.255.255 on port 80.

Network discovery
-----------------

To discover Broadlink devices on the local network, send a 48 byte packet with the following contents:

| Offset  | Contents |
|---------|----------|
|0x00-0x07|00|
|0x08-0x0b|Current offset from GMT as a little-endian 32 bit integer|
|0x0c-0x0d|Current year as a little-endian 16 bit integer|
|0x0e|Current number of seconds past the minute|
|0x0f|Current number of minutes past the hour|
|0x10|Current number of hours past midnight|
|0x11|Current day of the week (Monday = 1, Tuesday = 2, etc)|
|0x12|Current day in month|
|0x13|Current month|
|0x14-0x17|00|
|0x18-0x1b|Local IP address|
|0x1c-0x1d|Source port as a little-endian 16 bit integer|
|0x1e-0x1f|00|
|0x20-0x21|Checksum as a little-endian 16 bit integer|
|0x22-0x25|00|
|0x26|06|
|0x27-0x2f|00|

Send this packet as a UDP broadcast to 255.255.255.255 on port 80.

Response (any unicast response):

| Offset  | Contents |
|---------|----------|
|0x34-0x35|Device type as a little-endian 16 bit integer (see device type mapping)|
|0x3a-0x3f|MAC address of the target device|

Device type mapping:

| Device type in response packet | Device type | Treat as |
|---------|----------|----------|
|0|SP1|SP1|
|0x2711|SP2|SP2|
|0x2719 or 0x7919 or 0x271a or 0x791a|Honeywell SP2|SP2|
|0x2720|SPMini|SP2|
|0x753e|SP3|SP2|
|0x2728|SPMini2|SP2
|0x2733 or 0x273e|OEM branded SPMini|SP2|
|>= 0x7530 and <= 0x7918|OEM branded SPMini2|SP2|
|0x2736|SPMiniPlus|SP2|
|0x2712|RM2|RM|
|0x2737|RM Mini / RM3 Mini Blackbean|RM|
|0x273d|RM Pro Phicomm|RM|
|0x2783|RM2 Home Plus|RM|
|0x277c|RM2 Home Plus GDT|RM|
|0x272a|RM2 Pro Plus|RM|
|0x2787|RM2 Pro Plus2|RM|
|0x278b|RM2 Pro Plus BL|RM|
|0x278f|RM Mini Shate|RM|
|0x2714|A1|A1|
|0x4EB5|MP1|MP1|


Command packet format
---------------------

The command packet header is 56 bytes long with the following format:

|Offset|Contents|
|------|--------|
|0x00|0x5a|
|0x01|0xa5|
|0x02|0xaa|
|0x03|0x55|
|0x04|0x5a|
|0x05|0xa5|
|0x06|0xaa|
|0x07|0x55|
|0x08-0x1f|00|
|0x20-0x21|Checksum of full packet as a little-endian 16 bit integer|
|0x22-0x23|00|
|0x24-0x25|Device type as a little-endian 16 bit integer|
|0x26-0x27|Command code as a little-endian 16 bit integer|
|0x28-0x29|Packet count as a little-endian 16 bit integer|
|0x2a-0x2f|Local MAC address|
|0x30-0x33|Local device ID (obtained during authentication, 00 before authentication)|
|0x34-0x35|Checksum of unencrypted payload as a little-endian 16 bit integer
|0x36-0x37|00|

The payload is appended immediately after this. The checksum at 0x20 is calculated *after* the payload is appended, and covers the entire packet (including the checksum at 0x34). Therefore:

1. Generate packet header with checksum values set to 0
2. Set the checksum initialisation value to 0xbeaf and calculate the checksum of the unencrypted payload. Set 0x34-0x35 to this value.
3. Encrypt and append the payload
4. Set the checksum initialisation value to 0xbeaf and calculate the checksum of the entire packet. Set 0x20-0x21 to this value.

Authorisation
-------------

You must obtain an authorisation key from the device before you can communicate. To do so, generate an 80 byte packet with the following contents:

|Offset|Contents|
|------|--------|
|0x00-0x03|00|
|0x04-0x12|A 15-digit value that represents this device. Broadlink's implementation uses the IMEI.|
|0x13|01|
|0x14-0x2c|00|
|0x2d|0x01|
|0x30-0x7f|NULL-terminated ASCII string containing the device name|

Send this payload with a command value of 0x0065. The response packet will contain an encrypted payload from byte 0x38 onwards. Decrypt this using the default key and IV. The format of the decrypted payload is:

|Offset|Contents|
|------|--------|
|0x00-0x03|Device ID|
|0x04-0x13|Device encryption key|

All further command packets must use this encryption key and device ID.

Entering learning mode
----------------------

Send the following 16 byte payload with a command value of 0x006a:

|Offset|Contents|
|------|--------|
|0x00|0x03|
|0x01-0x0f|0x00|

Reading back data from learning mode
------------------------------------

Send the following 16 byte payload with a command value of 0x006a:

|Offset|Contents|
|------|--------|
|0x00|0x04|
|0x01-0x0f|0x00|

Byte 0x22 of the response contains a little-endian 16 bit error code. If this is 0, a code has been obtained. Bytes 0x38 and onward of the response are encrypted. Decrypt them. Bytes 0x04 and onward of the decrypted payload contain the captured data.

Sending data
------------

Send the following payload with a command byte of 0x006a

|Offset|Contents|
|------|--------|
|0x00|0x02|
|0x01-0x03|0x00|
|0x04|0x26 = IR, 0xb2 for RF 433Mhz, 0xd7 for RF 315Mhz|
|0x05|repeat count, (0 = no repeat, 1 send twice, .....)|
|0x06-0x07|Length of the following data in little endian|
|0x08 ....|Pulse lengths in 2^-15 s units (µs * 269 / 8192 works very well)|
|....|For IR codes, the pulse lengths should be paired as ON, OFF|

Each value is represented by one byte. If the length exceeds one byte
then it is stored big endian with a leading 0.

Captures of IR codes from the device will always end with a constant OFF value of `0x00 0x0d 0x05` but the trailing silence can be anything on transmit. The likely reason for this value is a capped timeout value on detection. The value is about 102 milliseconds.

Example: The header for my Optoma projector is 8920 4450  
8920 * 269 / 8192 = 0x124  
4450 * 269 / 8192 = 0x92  

So the data starts with `0x00 0x1 0x24 0x92 ....`


Todo
----

* Support for other devices using the Broadlink protocol (various smart home devices)
* Figure out what the format of the data packets actually is.
* Deal with the response after AP Mode WiFi network setup.



=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: requirements.txt

cryptography==3.2


=======================================================================================================================================================================

Repository: mjg59/python-broadlink
Branch: master
File: setup.py

#!/usr/bin/env python
# -*- coding: utf-8 -*-


from setuptools import setup, find_packages


version = '0.19.0'

setup(
    name="broadlink",
    version=version,
    author="Matthew Garrett",
    author_email="mjg59@srcf.ucam.org",
    url="http://github.com/mjg59/python-broadlink",
    packages=find_packages(),
    scripts=[],
    install_requires=["cryptography>=3.2"],
    description="Python API for controlling Broadlink devices",
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python",
    ],
    include_package_data=True,
    zip_safe=False,
)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: .github/workflows/codeql-analysis.yml

# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '17 1 * * 4'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: .github/workflows/contrib.yml

name: Contrib Test

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  tests:
    name: "Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-20.04"
    env:
      USING_COVERAGE: '3.6,3.8'

    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade cryptography requests colorama

      - name: "Run testcontrib.py on ${{ matrix.python-version }}"
        run: "python -m testcontrib.py"


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: .github/workflows/pylint.yml

name: Pylint

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        pip install -r requirements.txt
    - name: Analyzing the code with pylint
      run: |
        pylint -E tinytuya/*.py


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: .github/workflows/test.yml

name: Build Test

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  tests:
    name: "Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-20.04"
    env:
      USING_COVERAGE: '3.6,3.8'

    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-python@v4"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade cryptography requests colorama

      - name: "Run test.py on ${{ matrix.python-version }}"
        run: "python -m test.py"


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: .gitignore

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
upload.sh

# testing
test.sh
.vscode/
sandbox/
.DS_Store
.vscode/settings.json
devices.json
tinytuya.json
snapshot.json
tuya-raw.json
server/testproxy.sh
server/uploadtest.sh
devices.json.off
mappings.json

# packet captures
*.pcap
*.pcapng

# backup files
*.bak
*~

# test scripts
server/r


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: .pylintrc

[MESSAGES CONTROL]
disable=consider-iterating-dictionary, consider-swap-variables, consider-using-enumerate, cyclic-import, consider-using-max-builtin, no-else-continue, consider-using-min-builtin, consider-using-in, super-with-arguments, protected-access, import-outside-toplevel, multiple-statements, unidiomatic-typecheck, no-else-break, import-error, invalid-name, missing-docstring, no-else-return, no-member, too-many-lines, line-too-long, too-many-ancestors, too-many-arguments, too-many-branches, too-many-instance-attributes, too-many-locals, too-many-nested-blocks, too-many-return-statements, too-many-statements, too-few-public-methods, ungrouped-imports, use-dict-literal, superfluous-parens, fixme, consider-using-f-string, bare-except, broad-except, unused-variable, unspecified-encoding, redefined-builtin, consider-using-dict-items, redundant-u-string-prefix, useless-object-inheritance 

[SIMILARITIES]
min-similarity-lines=8


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: DP_Mapping.md

# Tuya Cloud - Changing the Control Instruction Mode

DPS to Name mappings are now downloaded with devices.json starting with TinyTuya v1.12.8.  If this DPS mapping is not correct then you will need to change the Control Instruction Mode to DP Instruction Mode.

## How to get the full DPS mapping from Tuya Cloud.

This how-to will show you how to activate “DP Instruction” mode for your Tuya devices when using Tuya Cloud to pull data.  This will result in getting the full list of DPS values and their properties for your devices.

### Step 1 - Log in to your account on [iot.tuya.com](iot.tuya.com)

### Step 2 - Navigate to "Cloud" -> "Development" then select your project.

### Step 3 - Select "Devices" tab.

<img width="756" alt="image" src="https://user-images.githubusercontent.com/836718/218344965-8f6cd378-d8fd-4e46-b35e-5e2ba2d3a9d4.png">

### Step 4- Select the device types and click the the "pencil icon" to edit. 

<img width="753" alt="image" src="https://user-images.githubusercontent.com/836718/218361449-f8c03832-8be3-4b25-b2cd-223dc2c89923.png">

### Step 5 - Select the "DP Instruction" box and "Save Configuration"

<img width="757" alt="image" src="https://user-images.githubusercontent.com/836718/218344985-41183289-ee0e-4484-aa8d-7489fc3a9f15.png">

There doesn't appear to be a way to globally set "DP Instruction" for all device types.  You will need to select each device type and repeat the above step.

### Step 6 - Use TinyTuya to access the full set of DPS

After 12-24 hours, you should now be able to poll the Tuya Cloud using TinyTuya to get the full list of DPS properties and values.  Simply delete `devices.json` and re-run the Wizard.


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: LICENSE

MIT License

Copyright (c) 2024 Jason Cox

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: README.md

# TinyTuya

[![License](https://img.shields.io/github/license/jasonacox/tinytuya)](https://img.shields.io/github/license/jasonacox/tinytuya)
[![PyPI version](https://badge.fury.io/py/tinytuya.svg)](https://badge.fury.io/py/tinytuya)
[![Build Test](https://github.com/jasonacox/tinytuya/actions/workflows/test.yml/badge.svg)](https://github.com/jasonacox/tinytuya/actions/workflows/test.yml)
[![Contrib Test](https://github.com/jasonacox/tinytuya/actions/workflows/contrib.yml/badge.svg)](https://github.com/jasonacox/tinytuya/actions/workflows/contrib.yml)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/tinytuya)](https://img.shields.io/pypi/pyversions/tinytuya)
[![PyPI Downloads](https://static.pepy.tech/badge/tinytuya/month)](https://static.pepy.tech/badge/tinytuya/month)

Python module to interface with Tuya WiFi smart devices

## Description

This python module controls and reads state of [Tuya](https://en.tuya.com/) compatible WiFi Smart Devices (Plugs, Switches, Lights, Window Covers, etc.) using the local area network (LAN) or the cloud (TuyaCloud API).  This is a compatible replacement for the `pytuya` PyPI module and currently supports Tuya Protocols 3.1, 3.2, 3.3, 3.4 and 3.5.

[Tuya](https://en.tuya.com/) devices are designed to communicate with the TuyaCloud but most also expose a local area network API.  This allows us to directly control the devices without using the cloud. This python module provides a way to poll status and issue commands to these devices.

TinyTuya can also connect to the Tuya Cloud to poll status and issue commands to Tuya devices.

![TinyTuya Diagram](https://raw.githubusercontent.com/jasonacox/tinytuya/master/docs/TinyTuya-diagram.svg)

```python
# Example Usage of TinyTuya
import tinytuya

d = tinytuya.Device('DEVICE_ID_HERE', 'IP_ADDRESS_HERE', 'LOCAL_KEY_HERE', version=3.3)
data = d.status() 
print('Device status: %r' % data)
```

NOTE: Devices need to be **activated** by Smart Life App.

## TinyTuya Installation  

```bash
# Install TinyTuya Library
python -m pip install tinytuya

# Optional: Install Command Line Tool
pipx install tinytuya
```

Pip will attempt to install `cryptography`, `requests` and `colorama` if not already installed.

## Tuya Device Preparation

Controlling and monitoring Tuya devices on your network requires the following:
* *Address* - Network address (IPv4) of the device e.g. 10.0.1.100
* *Device ID* - Unique identifier for the Tuya device
* *Version* - Tuya protocol version used (3.1, 3.2, 3.3, 3.4 or 3.5)
* *Local_Key* - Security key needed to access the Tuya device. See [Setup Wizard](https://github.com/jasonacox/tinytuya#setup-wizard---getting-local-keys) to get these keys.

### Network Scanner

TinyTuya has a built in network scanner that can be used to find Tuya Devices on your local network. It will show *Address*, *Device ID* and *Version* for each device. Your LAN and firewall will need to allow UDP (6666, 6667 and 7000) and TCP (6668) traffic.

```bash
python -m tinytuya scan
```

### Setup Wizard - Getting Local Keys

TinyTuya has a built-in setup Wizard that uses the Tuya IoT Cloud Platform to generate a JSON list (devices.json) of all your registered devices, including secret *Local_Key* and *Name* of your devices. Follow the steps below:

1. PAIR - Download the *Smart Life App* or *Tuya Smart App*, available for [iPhone](https://itunes.apple.com/us/app/smart-life-smart-living/id1115101477?mt=8) or [Android](https://play.google.com/store/apps/details?id=com.tuya.smartlife&hl=en). Set up your SmartLife account and pair all of your Tuya devices (this is important as you cannot access a device that has not been paired).  Do not use a 'guest' account, otherwise it will get deleted without confirmation at step 3.

2. SCAN (Optional) - Run the TinyTuya scan to get a list of Tuya devices on your network. It will show device *Address*, *Device ID* and *Version* number (3.x):
    ```bash
    python -m tinytuya scan
    ```
    NOTE: You will need to use one of the displayed *Device IDs* for step 4.

3. TUYA ACCOUNT - Set up a Tuya Account (see [PDF Instructions](https://github.com/jasonacox/tinytuya/files/12836816/Tuya.IoT.API.Setup.v2.pdf)):
    * *NOTE: Tuya often changes their portal and services. Please open an [issue](https://github.com/jasonacox/tinytuya/issues) with screenshots if we need to update these instructions.*
    * Create a Tuya Developer account on [iot.tuya.com](https://iot.tuya.com/). When it asks for the "Account Type", select "Skip this step..." (see [screenshot](https://user-images.githubusercontent.com/836718/213877860-34c39851-5671-4c9f-b4d5-251873f18c77.png)).  
    * Click on "Cloud" icon -> "Create Cloud Project"
      1. Pick the correct Data Center "Region" for your location (check [HERE](https://developer.tuya.com/en/docs/iot/oem-app-data-center-distributed?id=Kafi0ku9l07qb#title-3-Western%20America%20Data%20Center) to find your Region).  This will be used by TinyTuya Wizard ([screenshot](https://user-images.githubusercontent.com/836718/138598647-c9657e49-1a89-4ed6-8105-ceee95d9513f.png)).
      2. Skip the configuration wizard but remember the Authorization Key: *API ID* and *Secret* for below ([screenshot](https://user-images.githubusercontent.com/836718/138598788-f74d2fe8-57fa-439c-8003-18735a44e7e5.png)).
    * Click on "Cloud" icon -> Select your project -> **Devices** -> **Link Tuya App Account** ([see screenshot](https://user-images.githubusercontent.com/836718/155827671-44d5fce4-0119-4d0e-a224-ef3715fafc24.png))
    * Click **Add App Account** ([screenshot](https://user-images.githubusercontent.com/836718/273364035-0fd133b7-4e9e-4a6d-900e-efe63d69f1a0.png)) and it will pop-up a "Link Tuya App Account" dialog, chose "Automatic" and "Read Only Status" (it will still alow commands). Click OK and it will display a QR code. Scan the QR code with the *Smart Life app* on your Phone (see step 1 above) by going to the "Me" tab in the *Smart Life app* and clicking on the QR code button `[..]` in the upper right hand corner of the app. When you scan the QR code, it will link all of the devices registered in your *Smart Life app* into your Tuya IoT project. If the QR code will not scan then make sure to disable any browser theming plug-ins (such as Dark Reader) and try again.
    * **NO DEVICES?** If no devices show up after scanning the QR code, you will need to select a different data center and edit your project (or create a new one) until you see your paired devices from the *Smart Life App* show up. ([screenshot](https://user-images.githubusercontent.com/35581194/148679597-391adecb-a271-453b-90c0-c64cdfad42e4.png)). The data center may not be the most logical. As an example, some in the UK have reported needing to select "Central Europe" instead of "Western Europe".
    * **SERVICE API:** Under "Service API" ensure these APIs are listed: `IoT Core` and `Authorization`. To be sure, click subscribe again on every service.  Very important: **disable popup blockers** otherwise subscribing won't work without providing any indication of a failure. Make sure you authorize your Project to use those APIs:
        - Click "Service API" tab
        - Click "**Go to Authorize**" button
        - Select the API Groups from the dropdown and click `Subscribe` ([screenshot](https://user-images.githubusercontent.com/38729644/128742724-9ed42673-7765-4e21-94c8-76022de8937a.png))
    * **RENEWAL:** The subscription to the `IoT Core` service expires after some time. By default, when you subscribe to it for the first time, it will last for one month. Once expired, the setup wizard won't be able to communicate with the Tuya account anymore, so it needs to be renewed. As of November 12th 2024, it can be renewed for a duration of 1, 3 or 6 months by simply filling in a form with some basic information (e.g. purpose of the project, type of developer).

5. WIZARD - Run Setup Wizard:
    * From your Linux/Mac/Win PC run the TinyTuya Setup **Wizard** to fetch the *Local_Keys* for all of your registered devices:
      ```bash
      python -m tinytuya wizard   # use -nocolor for non-ANSI-color terminals
      ```
    * The **Wizard** will prompt you for the *API ID* key, API *Secret*, API *Region* (cn, us, us-e, eu, eu-w, or in) from your Tuya IoT project as set in Step 3 above.
        * To find those again, go to [iot.tuya.com](https://iot.tuya.com/), choose your project and click `Overview`
            * API Key: Access ID/Client ID
            * API Secret: Access Secret/Client Secret
    * It will also ask for a sample *Device ID*.  You can have the wizard scan for one (enter `scan`), use one from step 2 above or in the Device List on your Tuya IoT project.
    * The **Wizard** will poll the Tuya IoT Cloud Platform and print a JSON list of all your registered devices with the "name", "id" and "key" of your registered device(s). The "key"s in this list are the Devices' *Local_Key* you will use to access your device. 
    * In addition to displaying the list of devices, **Wizard** will create a local file `devices.json` that TinyTuya will use to provide additional details for scan results from `tinytuya.deviceScan()` or when running `python -m tinytuya scan`. The wizard also creates a local file `tuya-raw.json` that contains the entire payload from Tuya Cloud.
    * The **Wizard** will ask if you want to poll all the devices. If you do, it will display the status of all devices on record and create a `snapshot.json` file with these results. Make sure your LAN and firewall permit UDP (6666, 6667 and 7000) and TCP (6668) traffic.

Notes:
* If you ever reset or re-pair your smart devices, the *Local_Key* will be reset and you will need to repeat the steps above.
* The TinyTuya *Wizard* was inspired by the TuyAPI CLI which is an alternative way to fetch the *Local_Keys*: `npm i @tuyapi/cli -g` and run `tuya-cli wizard`  

## Programming with TinyTuya

After importing tinytuya, you create a device handle for the device you want to read or control.  Here is an example for a Tuya smart switch or plug:

```python
import tinytuya

# Connect to Device
d = tinytuya.OutletDevice(
    dev_id='DEVICE_ID_HERE',
    address='IP_ADDRESS_HERE',      # Or set to 'Auto' to auto-discover IP address
    local_key='LOCAL_KEY_HERE', 
    version=3.3)

# Get Status
data = d.status() 
print('set_status() result %r' % data)

# Turn On
d.turn_on()

# Turn Off
d.turn_off()
```

### TinyTuya Module Classes and Functions 
```
Classes

  AESCipher - Cryptography Helpers
  XenonDevice(args...) - Base Class
    Device(args...) - Tuya Class for Devices
      OutletDevice(args...)
      CoverDevice(args...)
      BulbDevice(args...)
        Where args:
          dev_id (str): Device ID e.g. 01234567891234567890
          address (str): Device Network IP Address e.g. 10.0.1.99 or "Auto" to auto-find
          local_key (str): The encryption key
          dev_type (str): Device type for payload options (see below)
          version = 3.1 (float): Tuya Protocol (e.g. 3.1, 3.2, 3.3, 3.4, 3.5)
          persist = False (bool): Keep TCP link open
          cid = None (str): Optional sub device id
          node_id = None (str): Alias for cid
          parent = None (object): Gateway device object this is a child of
          port = TCPPORT (int): The port to connect to device
          connection_timeout = 5 (int): Timeout in seconds
          connection_retry_limit = 5 (int)
          connection_retry_delay = 5 (int)

          Total timeout = (connection_timeout * connection_retry_limit) + 
                          (connection_retry_delay * (connection_retry_limit - 1))
                          Defaults: (5 * 5) + (5 * (5 - 1)) = 45 seconds
                        
  Cloud(apiRegion, apiKey, apiSecret, apiDeviceID, new_sign_algorithm)

TinyTuya Base Functions
    devices = deviceScan()                        # Returns dictionary of devices found on local network
    scan()                                        # Interactive scan of local network
    wizard()                                      # Interactive setup wizard
    set_debug(toggle, color)                      # Activate verbose debugging output
    pack_message(msg, hmac_key)                   # Packs a TuyaMessage(), encrypting or adding a CRC if required 
    unpack_message(data, hmac_key, header, 
                    no_retcode)                   # Unpacks a TuyaMessage() 
    parse_header(data)                            # Unpacks just the header part of a message into a TuyaHeader()
    find_device(dev_id, address)                  # Scans network for Tuya devices with either ID = dev_id or IP = address
    device_info(dev_id)                           # Searches DEVICEFILE (usually devices.json) for device with ID
    assign_dp_mappings(tuyadevices, mappings)     # Adds mappings to all the devices in the tuyadevices list
    decrypt_udp(msg)                              # Decrypts a UDP network broadcast packet

 Device Functions (All Devices)
    json = status()                               # returns json payload
    subdev_query(nowait)                          # query sub-device status (only for gateway devices)
    set_version(version)                          # 3.1 [default], 3.2, 3.3 or 3.4
    set_socketPersistent(False/True)              # False [default] or True
    set_socketNODELAY(False/True)                 # False or True [default]
    set_socketRetryLimit(integer)                 # retry count limit [default 5]
    set_socketRetryDelay(integer)                 # retry delay [default 5]
    set_socketTimeout(timeout)                    # set connection timeout in seconds [default 5]
    set_dpsUsed(dps_to_request)                   # add data points (DPS) to request
    add_dps_to_request(index)                     # add data point (DPS) index set to None
    set_retry(retry=True)                         # retry if response payload is truncated
    set_status(on, switch=1, nowait)              # Set status of switch to 'on' or 'off' (bool)
    set_value(index, value, nowait)               # Set int value of any index.
    set_multiple_values(index_value_dict, nowait) # Set multiple values with a single request
    heartbeat(nowait)                             # Send heartbeat to device
    updatedps(index=[1], nowait)                  # Send updatedps command to device
    turn_on(switch=1, nowait)                     # Turn on device / switch #
    turn_off(switch=1, nowait)                    # Turn off
    set_timer(num_secs, nowait)                   # Set timer for num_secs
    set_sendWait(num_secs)                        # Time to wait after sending commands before pulling response
    detect_available_dps()                        # Return list of DPS available from device
    generate_payload(command, data,...            # Generate TuyaMessage payload for command with data
    send(payload)                                 # Send payload to device (do not wait for response)
    receive()                                     # Receive payload from device

OutletDevice Additional Functions
    set_dimmer(percentage):

BulbDevice Additional Functions
    set_colour(r, g, b, nowait):
    set_hsv(h, s, v, nowait):
    set_white(brightness, colourtemp, nowait):
    set_white_percentage(brightness=100, colourtemp=0, nowait):
    set_brightness(brightness, nowait):
    set_brightness_percentage(brightness=100, nowait):
    set_colourtemp(colourtemp, nowait):
    set_colourtemp_percentage(colourtemp=100, nowait):
    set_scene(scene, nowait):                     # 1=nature, 3=rave, 4=rainbow
    set_mode(mode='white', nowait):               # white, colour, scene, music
    result = brightness():
    result = colourtemp():
    (r, g, b) = colour_rgb():
    (h,s,v) = colour_hsv()
    result = state():

CoverDevice Additional Functions
    open_cover(switch=1):
    close_cover(switch=1):
    stop_cover(switch=1):

Cloud Functions
    setregion(apiRegion)
    cloudrequest(url, action=[POST if post else GET], post={}, query={})
    getdevices(verbose=False)
    getstatus(deviceid)
    getfunctions(deviceid)
    getproperties(deviceid)
    getdps(deviceid)
    sendcommand(deviceid, commands [, uri])
    getconnectstatus(deviceid)
    getdevicelog(deviceid, start=[now - 1 day], end=[now], evtype="1,2,3,4,5,6,7,8,9,10", size=100, params={})
      -> when start or end are negative, they are the number of days before "right now"
          i.e. "start=-1" is 1 day ago, "start=-7" is 7 days ago
          
```

### TinyTuya Error Codes

Starting with v1.2.0 TinyTuya functions will return error details in the JSON data responses instead of raising exceptions.  The format for this response:

```json
{ "Error":"Invalid JSON Payload", "Err":"900", "Payload":"{Tuya Message}" }
```

The "Err" number will be one of these:

* 900 (ERR_JSON) - Invalid JSON Response from Device
* 901 (ERR_CONNECT) - Network Error: Unable to Connect
* 902 (ERR_TIMEOUT) - Timeout Waiting for Device
* 903 (ERR_RANGE) - Specified Value Out of Range
* 904 (ERR_PAYLOAD) - Unexpected Payload from Device
* 905 (ERR_OFFLINE) - Network Error: Device Unreachable
* 906 (ERR_STATE) - Device in Unknown State
* 907 (ERR_FUNCTION) - Function Not Supported by Device
* 908 (ERR_DEVTYPE) - Device22 Detected: Retry Command
* 909 (ERR_CLOUDKEY) - Missing Tuya Cloud Key and Secret
* 910 (ERR_CLOUDRESP) - Invalid JSON Response from Cloud
* 911 (ERR_CLOUDTOKEN) - Unable to Get Cloud Token
* 912 (ERR_PARAMS) - Missing Function Parameters
* 913 (ERR_CLOUD) - Error Response from Tuya Cloud
* 914 (ERR_KEY_OR_VER) - Check device key or version

### Example Usage

See the sample python script [test.py](test.py) for an OutletDevice example or look in the [examples](examples) directory for other scripts.

```python
import tinytuya

"""
OUTLET Device
"""
d = tinytuya.Device('DEVICE_ID_HERE', 'IP_ADDRESS_HERE', 'LOCAL_KEY_HERE', version=3.3)
data = d.status()  

# Show status and state of first controlled switch on device
print('Dictionary %r' % data)
print('State (bool, true is ON) %r' % data['dps']['1'])  

# Toggle switch state
switch_state = data['dps']['1']
data = d.set_status(not switch_state)  # This requires a valid key
if data:
    print('set_status() result %r' % data)

# On a switch that has 4 controllable ports, turn the fourth OFF (1 is the first)
data = d.set_status(False, 4)
if data:
    print('set_status() result %r' % data)
    print('set_status() extra %r' % data[20:-8])

"""
RGB Bulb Device
"""
import time

d = tinytuya.BulbDevice('DEVICE_ID_HERE', 'IP_ADDRESS_HERE', 'LOCAL_KEY_HERE')
d.set_version(3.3)  # IMPORTANT to set this regardless of version
d.set_socketPersistent(True)  # Optional: Keep socket open for multiple commands
data = d.status()

# Show status of first controlled switch on device
print('Dictionary %r' % data)

# Set to RED Color - set_colour(r, g, b):
d.set_colour(255,0,0)  

# Cycle through the Rainbow
rainbow = {"red": [255, 0, 0], "orange": [255, 127, 0], "yellow": [255, 200, 0],
          "green": [0, 255, 0], "blue": [0, 0, 255], "indigo": [46, 43, 95],
          "violet": [139, 0, 255]}
for color in rainbow:
    [r, g, b] = rainbow[color]
    d.set_colour(r, g, b, nowait=True)  # nowait = Go fast don't wait for response
    time.sleep(0.25)

# Brightness: Type A devices range = 25-255 and Type B = 10-1000
d.set_brightness(1000)

# Set to White - set_white(brightness, colourtemp):
#    colourtemp: Type A devices range = 0-255 and Type B = 0-1000
d.set_white(1000,10)

# Set Bulb to Scene Mode
d.set_mode('scene')

# Scene Example: Set Color Rotation Scene
d.set_value(25, '07464602000003e803e800000000464602007803e803e80000000046460200f003e803e800000000464602003d03e803e80000000046460200ae03e803e800000000464602011303e803e800000000')

```
### Example Device Monitor

You can set up a persistent connection to a device and then monitor the state changes with a continual loop. This is helpful for troubleshooting and discovering DPS values.

```python
import tinytuya

d = tinytuya.OutletDevice('DEVICEID', 'DEVICEIP', 'DEVICEKEY', version=3.3, persist=True)

print(" > Send Request for Status < ")
d.status(nowait=True)

print(" > Begin Monitor Loop <")
while(True):
    # See if any data is available
    data = d.receive()
    print('Received Payload: %r' % data)

    # Send keep-alive heartbeat
    if not data:
        print(" > Send Heartbeat Ping < ")
    	d.heartbeat()

    # NOTE If you are not seeing updates, you can force them - uncomment:
    # print(" > Send Request for Status < ")
    # d.status(nowait=True)

    # NOTE Some smart plugs require an UPDATEDPS command to update power data
    # print(" > Send DPS Update Request < ")
    # payload = d.generate_payload(tinytuya.UPDATEDPS)
    # d.send(payload)    

```

### Tuya Cloud Access

You can poll and manage Tuya devices using the `Cloud` class and functions.

_CAUTION: The free Tuya IoT Developer (Trial) account allows a very limited number of Cloud API calls. Be aware of the restrictions before enabling any automation that makes frequent calls._

```python
import tinytuya

# Connect to Tuya Cloud
# c = tinytuya.Cloud()  # uses tinytuya.json 
c = tinytuya.Cloud(
        apiRegion="us", 
        apiKey="xxxxxxxxxxxxxxxxxxxx", 
        apiSecret="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 
        apiDeviceID="xxxxxxxxxxxxxxxxxxID")

# Display list of devices
devices = c.getdevices()
print("Device List: %r" % devices)

# Select a Device ID to Test
id = "xxxxxxxxxxxxxxxxxxID"

# Display Properties of Device
result = c.getproperties(id)
print("Properties of device:\n", result)

# Display Status of Device
result = c.getstatus(id)
print("Status of device:\n", result)

# Send Command - Turn on switch
commands = {
    "commands": [
        {"code": "switch_1", "value": True},
        {"code": "countdown_1", "value": 0},
    ]
}
print("Sending command...")
result = c.sendcommand(id,commands)
print("Results\n:", result)
```

Up to one week of device logs can also be pulled from the Cloud.  By default getdevicelog() will pull 1 day of logs or 5000 log entries, whichever comes first.  The returned timestamps are unixtime*1000, and event_id 7 (data report) will probably be the most useful.

```python
import tinytuya
import json

c = tinytuya.Cloud()
#r = c.getdevicelog( '00112233445566778899', start=-1, end=0, size=0, max_fetches=50 )
#r = c.getdevicelog( '00112233445566778899', start=1669990000, end=1669990300, size=20 )
r = c.getdevicelog( '00112233445566778899' )
print( json.dumps(r, indent=2) )
```

### Encryption Notes

Tuya devices use AES encryption which is not available in the Python standard library. **PyCA/cryptography** is recommended and installed by default. Other options include **PyCryptodome** , **PyCrypto** and **pyaes**.

* Deprecation notice for pyaes: The pyaes library works for Tuya Protocol <= 3.4 but will not work for 3.5 devices. This is because pyaes does not support GCM which is required for v3.5 devices.

### Command Line

TinyTuya provides a built-in command line interface to get Local key, scan and poll devices.

Installation

```bash
# Option-1: pip install tinytuya
python -m tinytuya

# Option-2: pipx install tinytuya
tinytuya 
```

Command Line Usage

```
tinytuya <command> [-debug] [-nocolor] [-h] [-yes] [-no-poll] [-device-file FILE] [-snapshot-file FILE]

  wizard         Launch Setup Wizard to get Tuya Local KEYs.
  scan           Scan local network for Tuya devices.
  devices        Scan all devices listed in devices.json file.
  snapshot       Scan devices listed in snapshot.json file.
  json           Scan devices listed in snapshot.json file [JSON].

  Wizard
      tinytuya wizard [-h] [-debug] [-force [0.0.0.0/24 ...]] [-no-broadcasts] [-nocolor] [-yes] [-no-poll]
                [-device-file FILE] [-raw-response-file FILE] [-snapshot-file FILE] [-credentials-file FILE]
                [-key KEY] [-secret SECRET] [-region {cn,eu,eu-w,in,us,us-e}] [-device DEVICE [DEVICE ...]]
                [-dry-run] [max_time]

        Common Options
        max_time             Maximum time to find Tuya devices [Default: 18]
        -no-broadcasts       Ignore broadcast packets when force scanning
        -nocolor             Disable color text output.
        -debug               Activate debug mode.
        -h, -help            Show usage help for command.
        -yes, -y             Answer "yes" to all questions
        -no-poll, -no        Answer "no" to "Poll?" (overrides -yes)
        -device-file FILE    JSON file to load devices from [Default: devices.json]
        -snapshot-file FILE  JSON file to load/save snapshot from/to [Default: snapshot.json]
        -force [0.0.0.0/24 ...], -f [0.0.0.0/24 ...]
                             Force network scan of device IP addresses [Default: Auto-detects net/mask]
        -no-broadcasts       Ignore broadcast packets when force scanning
        -raw-response-file   JSON file to save the raw server response to [Default: tuya-raw.json]

        Wizard Cloud API Options
        -dry-run             Do not actually connect to the Cloud
        -credentials-file    JSON file to load/save Cloud credentials from/to [Default: tinytuya.json]
        -key KEY             Cloud API Key to use
        -secret SECRET       Cloud API Secret to use
        -region              Cloud API Region to use {cn,eu,eu-w,in,us,us-e}
        -device DEVICE(S)    One or more Device ID(s) to use

  Scan
      tinytuya scan [-h] [-debug] [-force [0.0.0.0/24 ...]] [-no-broadcasts] [-nocolor] [-yes] 
                [-device-file FILE] [-snapshot-file FILE] [max_time]

  Devices
      tinytuya devices [-h] [-debug] [-force [0.0.0.0/24 ...]] [-no-broadcasts] [-nocolor] [-yes] 
                [-no-poll] [-device-file FILE] [-snapshot-file FILE] [max_time]

  Snapshot
      tinytuya snapshot [-h] [-debug] [-nocolor] [-yes] [-no-poll] [-device-file FILE] [-snapshot-file FILE]

  JSON
      tinytuya json [-h] [-debug] [-device-file FILE] [-snapshot-file FILE]

```

### Scan Tool 
The function `tinytuya.scan()` will listen to your local network (UDP 6666 and 6667) and identify Tuya devices broadcasting their Address, Device ID, Product ID and Version and will print that and their stats to stdout.  This can help you get a list of compatible devices on your network. The `tinytuya.deviceScan()` function returns all found devices and their stats (via dictionary result).

You can run the scanner from the command line using these interactive commands:
  ```bash
  # Listen for Tuya Devices and match to devices.json if available
  python -m tinytuya scan

  # The above creates a snapshot.json file with IP addresses for devices
  # You can use this command to get a rapid poll of status of all devices
  python -m tinytuya snapshot

  # The sames thing as above but with a non-interactive JSON response
  python -m tinytuya json

  # List all register devices discovered from Wizard and poll them
  python -m tinytuya devices

  ```

By default, the scan functions will retry 15 times to find new devices. If you are not seeing all your devices, you can increase max_retries by passing an optional arguments (eg. 50 retries):

  ```bash
  # command line
  python -m tinytuya scan 50
  ```

  ```python
  # invoke verbose interactive scan
  tinytuya.scan(50)

  # return payload of devices
  devices = tinytuya.deviceScan(false, 50)
  ```

## Troubleshooting

* Tuya devices only allow one TCP connection at a time.  Make sure you close the TuyaSmart or SmartLife app before using *TinyTuya* to connect.
* Some devices ship with older firmware that may not work with *TinyTuya*. If you're experiencing issues, please try updating the device's firmware in the official app.
* The LOCAL KEY for Tuya devices will change every time a device is removed and re-added to the TuyaSmart app. If you're getting decrypt errors, try getting the key again as it might have changed. 
* Devices running protocol version 3.1 (e.g. below Firmware 1.0.5) do not require a device *Local_Key* to read the status. All devices will require a device *Local_Key* to control the device.
* Some devices with 22 character IDs will require additional setting to poll correctly. TinyTuya will attempt to detect and accomodate for this, but it can be specified directly:
  ```python
  a = tinytuya.OutletDevice('here_is_my_key', '192.168.x.x', 'secret_key_here', 'device22')
  a.set_version(3.3)
  a.set_dpsUsed({"1": None})  # This needs to be a datapoint available on the device
  data =  a.status()
  print(data)
  ```
* Windows 10 Users - TinyTuya `wizard` and `scan` interactive tools use ANSI color. This will work correctly in PowerShell but will show cryptic escape codes when run in Windows `CMD`.  You can fix this by using the `-nocolor` option on tinytuya, or by changing the Windows `CMD` console registry to process ANSI escape codes by doing something like this:
  ```
  reg add HKEY_CURRENT_USER\Console /v VirtualTerminalLevel /t REG_DWORD /d 0x00000001 /f
  ```

## User Contributed Device Modules

In addition to the built-in `OutletDevice`, `BulbDevice` and `CoverDevice` device support, the community is encourage to submit additional device modules which are available here: [Contrib Library](https://github.com/jasonacox/tinytuya/tree/master/tinytuya/Contrib):

```python
# Example usage of community contributed device modules
from tinytuya.Contrib import ThermostatDevice

thermo = ThermostatDevice( 'abcdefghijklmnop123456', '172.28.321.475', '1234567890123abc' )
```

## Tuya Data Points - DPS Table

The Tuya devices send back data points (DPS) also called device function points, in a json string.  The DPS attributes define the state of the device.  Each key in the DPS dictionary refers to key value pair, the key is the DP ID and its value is the dpValue. You can refer to the [Tuya developer platform](https://iot.tuya.com/index/) for definition of function points for the products.

The following table represents several of the standard Tuya DPS values and their properties. It represents data compiled from Tuya documentation and self-discovery. Devices may vary. Feedback or additional data would would be appreciated.  Please submit a Issue or Pull Request if you have additional data that would be helpful for others.

To find Tuya DPS for devices not listed below, you can discover the DPS values using the Tuya IoT platform. See this help here: [Find your Data Point](https://www.zigbee2mqtt.io/advanced/support-new-devices/03_find_tuya_data_points.html#_8-display-device-logs).

DPS Read and Set Example:
```python
# Read Value of DPS 25
data = d.status()  
print("Value of DPS 25 is ", data['dps']['25'])

# Set Value of DPS 25
d.set_value(25, '010e0d0000000000000003e803e8')
```

### Version 3.1 Devices

#### Version 3.1 (and some 3.3) - Plug or Switch Type
| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
|1|Switch|bool|True/False||
|2|Countdown?|integer|0-86400|s|
|4|Current|integer|0-30000|mA|
|5|Power|integer|0-50000|W|
|6|Voltage|integer|0-5000|V|

#### Version 3.1 - Light Type (RGB)
| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
| 1|Switch|bool|True/False||
| 2|Mode|enum|white,colour,scene,music||
| 3|Bright|integer|10-1000*||
| 4|Color Temp|integer|0-1000*||
| 5|Color|hexstring|r:0-255,g:0-255,b:0-255,h:0-360,s:0-255,v:0-255|rgb+hsv|

### Version 3.3 Devices

#### Version 3.3 - Plug, Switch, Power Strip Type
| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
|1|Switch 1|bool|True/False||
|2|Switch 2|bool|True/False||
|3|Switch 3|bool|True/False||
|4|Switch 4|bool|True/False||
|5|Switch 5|bool|True/False||
|6|Switch 6|bool|True/False||
|7|Switch 7/usb|bool|True/False||
|9|Countdown 1|integer|0-86400|s|
|10|Countdown 2|integer|0-86400|s|
|11|Countdown 3|integer|0-86400|s|
|12|Countdown 4|integer|0-86400|s|
|13|Countdown 5|integer|0-86400|s|
|14|Countdown 6|integer|0-86400|s|
|15|Countdown 7|integer|0-86400|s|
|17|Add Electricity|integer|0-50000|kwh|
|18|Current|integer|0-30000|mA|
|19|Power|integer|0-50000|W|
|20|Voltage|integer|0-5000|V|
|21|Test Bit|integer|0-5|n/a|
|22|Voltage coeff.|integer|0-1000000||
|23|Current coeff.|integer|0-1000000||
|24|Power coeff.|integer|0-1000000||
|25|Electricity coeff.|integer|0-1000000||
|26|Fault|fault|ov_cr||
|38|Power-on state setting|enum|off, on, memory||
|39|Overcharge Switch|bool|True/False||
|40|Indicator status setting|enum|none, on, relay, pos||
|41|Child Lock|bool|True/False||
|42|UNKNOWN||||
|43|UNKNOWN||||
|44|UNKNOWN||||

Note: Some 3.3 energy management plugs use the DPS values of the 3.1 plug above.

#### Version 3.3 - Dimmer Switch
| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
| 1|Switch|bool|True/False||
| 2|Brightness|integer|10-1000*||
| 3|Minimum of Brightness|integer|10-1000*||
| 4|Type of light source1|enum|LED,incandescent,halogen||
| 5|Mode|enum|white||

#### Version 3.3 - Light Type (RGB)
| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
| 20|Switch|bool|True/False||
| 21|Mode|enum|white,colour,scene,music||
| 22|Bright|integer|10-1000*||
| 23|Color Temp|integer|0-1000||
| 24|Color|hexstring|h:0-360,s:0-1000,v:0-1000|hsv|
| 25|Scene|string|n/a||
| 26|Left time|integer|0-86400|s|
| 27|Music|string|n/a||
| 28|Debugger|string|n/a||
| 29|Debug|string|n/a||
| 30|Rhythms|n/a|n/a||
| 31|Go To Sleep|n/a|n/a||
| 32|Wake Up|n/a|n/a||
| 33|Power Off Memory|n/a|n/a||
| 34|Do not Disturb|n/a|n/a||
| 41|Remote Control Switch|n/a|n/a||
| 209|Cycle Timing|n/a|n/a||
| 210|Vaction Timing|n/a|n/a||

#### Version 3.3 - Automated Curtain Type
| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
|1|Curtain Switch 1|enum|open, stop, close, continue||
|2|Percent control 1|integer|0-100|%|
|3|Accurate Calibration 1|enum|start, end||
|4|Curtain Switch 2|enum|open, stop, close, continue||
|5|Percent control 2|integer|0-100||
|6|Accurate Calibration 2|enum|start, end||
|8|Motor Steer 1|enum|forward, back||
|9|Motor steer 2|enum|forward, back||
|10|Quick Calibration 1|integer|1-180|s|
|11|Quick Calibration 2|integer|1-180|s|
|12|Motor Mode 1|enum|strong_power, dry_contact||
|13|Motor Mode 2|enum|strong_power, dry_contact||
|14|Light mode|enum|relay, pos, none||

#### Version 3.3 - Fan Switch Type
| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
|1|Fan switch|bool|True/False|n/a|
|2|Fan countdown|integer|0-86400|s|
|3|Fan speed|enum|level_1, level_2, level_3, level_4, level_5||
|4|Fan speed|integer|1-100|%|
|5|Fan light switch|bool|True/False||
|6|Brightness integer|integer|10-1000||
|7|Fan light countdown|integer|0-86400||
|8|Minimum brightness|integer|10-1000||
|9|Maximum brightness|integer|10-1000||
|10|Mode|enum|white||
|11|Power-on state setting|enum|off, on, memory||
|12|Indicator status setting|enum|none, relay, pos||
|13|Backlight switch|bool|True/False||

#### Version 3.3 - Universal IR Controller with optional Temp/Humidity
| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
|101|Current Temperature|integer|0-600|10x Celsius|
|102|Current Humidity|integer|0-100|%|
|201|IR Commands (set only)|JSON*|n/a|n/a|

  ```python
  # The IR Commands JSON has the following format:
  command = {
      "control": "send_ir",
      "head": "",
      "key1": "[[TO_BE_REPLACED]]",
      "type": 0,
      "delay": 300,
  }
  # Sending the IR command:
  payload = d.generate_payload(tinytuya.CONTROL, {"201": json.dumps(command)})
  d.send(payload)
  ```

The `key1` attribute is a base64 string that contains the IR signal. You can extract it using this procedure:

1. Register a new IR device on Tuya Smart / Smart Life app (if not registered already) and map, setup or import your buttons.
2. Tap multiple times on the button you wish to control.
3. Go to [Tuya IoT Platform](https://iot.tuya.com/) and select your app under Cloud > Development section.
4. Go to to the Device tab and select "Debug Device" on the parent device. Browse Device Logs section and retrieve the `key1` attribute that matches your tapping timestamp from step 2 above. Use that `key1` attribute in the payload example above.

You need to repeat these steps for each button (cloud logging is not always sequential).

#### Version 3.3 - Sensor Type

_Important Note:_
Battery-powered Tuya sensors are usually designed to stay in sleep mode until a state change (eg.open or close alert). This means you will not be able to poll these devices except in the brief moment they awake, connect to the WiFi and send their state update payload the the Tuya Cloud. Keep in mind that if you manage to poll the device enough to keep it awake, you will likely quickly drain the battery.

| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
|1|Door Sensor|bool|True/False||
|2|Battery level state|enum|low, middle, high||
|3|Battery level|integer|0-100|%|
|4|Temper alarm|bool|True/False||
|5|Flooding Detection State|enum|alarm, normal||
|6|Luminance detection state|enum|low, middle, high, strong||
|7|Current Luminance|integer|0-100|%|
|8|Current Temperature|integer|400-2000||
|9|Current Humidity|integer|0-100|%|
|10|Shake State|enum|normal, vibration, drop, tilt||
|11|Pressure State|enum|alarm, normal||
|12|PIR state|enum|pir, none||
|13|Smoke Detection State|enum|alarm, normal||
|14|Smoke value|integer|0-1000||
|15|Alarm Volume|enum|low, middle, high, mute||
|16|Alarm Ringtone|enum|1, 2, 3, 4, 5||
|17|Alarm Time|integer|0-60|s|
|18|Auto-Detect|bool|True/False||
|19|Auto-Detect Result|enum|checking, check_success, check_failure, others||
|20|Preheat|bool|True/False||
|21|Fault Alarm|fault|fault, serious_fault, sensor_fault, probe_fault, power_fault|Barrier|
|22|Lifecycle|bool|True/False||
|23|Alarm Switch|bool|True/False||
|24|Silence|bool|True/False||
|25|Gas Detection State|enum|alarm, normal||
|26|Detected Gas|integer|0-1000||
|27|CH4 Detection State|enum|alarm, normal||
|28|CH4 value|integer|0-1000||
|29|Alarm state|enum|alarm_sound, alarm_light, alarm_sound_light, normal||
|30|VOC Detection State|enum|alarm, normal||
|31|VOC value|integer|0-999||
|32|PM2.5 state|enum|alarm, normal||
|33|PM2.5 value|integer|0-999||
|34|CO state|enum|alarm, normal||
|35|CO value|integer|0-1000||
|36|CO2 Detection State|enum|alarm, normal||
|37|CO2 value|integer|0-1000||
|38|Formaldehyde Detection State|enum|alarm, normal||
|39|CH2O value|integer|0-1000||
|40|Master mode|enum|disarmed, arm, home, sos||
|41|Air quality index|enum|level_1, level_2, level_3, level_4, level_5, level_6||

NOTE (*) - The range can vary depending on the device. As an example, for dimmers, it may be 10-1000 or 25-255.

#### Version 3.3 - WiFi Air Quality Detector PM2.5/Formaldehyde/VOC/CO2/Temperature/Humidity

| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
| 2 | PM2.5 value | integer | 0 - 999 | ug/m3 |
| 18 | Current Temperature | integer | 0 - 850 | ˚C (multiplied by 10) |
| 19 | Current Humidity | integer | 0 - 1000 | % (multiplied by 10) |
| 20 | CH2O (Formaldehyde) value | integer | 0 - 1000 | ppm |
| 21 | VOC (Volatile organic compound) value | integer | 0 - 2000 | ppm |
| 22 | CO2 value | integer | 350 - 2000 | ppm |

Example device: https://www.aliexpress.com/item/1005005034880204.html

#### Version 3.3 - Robot Mower Type

| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
| 6    | Battery | integer |  0-100 | % |
| 101  | Machine Status | enum | <ul><li>STANDBY MOWING</li><li>CHARGING</li><li>EMERGENCY</li><li>LOCKED</li><li>PAUSED</li><li>PARK</li><li>CHARGING_WITH_TASK_SUSPEND</li><li>FIXED_MOWING</li></ul> ||
| 102  | Machine error | integer | 0, ? ||
| 103  | Machine warning | enum | <ul><li>MOWER_LEAN</li><li>MOWER_EMERGENCY</li><li>MOWER_UI_LOCKED</li><ul> ||
| 104  | Rain mode | boolean | True/False ||
| 105  | Work time | interger | 1-99 | hours |
| 106  | Machine password | byte str | ? ||
| 107  | Clear machine appointment | boolean | True/False ||
| 108  | Query machine reservation | boolean | True/False ||
| 109  | Query partition parameters | boolean | True/False ||
| 110  | Report machine reservation | byte str |||
| 111  | Error log | byte str |||
| 112  | Work log | byte str |||
| 113  | Partition parameters | byte str |||
| 114  | Work mode | enum | AutoMode/?? ||                                                                                                                           | 115  | Machine control CMD | enum | <ul><li>StartMowing</li><li>StartFixedMowing</li><li>PauseWork</li><li>CancelWork</li><li>StartReturnStation</li><ul> ||

Reference [pymoebot](https://github.com/Whytey/pymoebot) for further definition.

#### Version 3.3 - 24v Thermostat (i.e. PCT513-TY)
| DP ID        | Function Point | Type        | Range       | Units |
| ------------- | ------------- | ------------- | ------------- |------------- |
|2|System Mode|enum|[ 'auto' 'cool' 'heat' 'off' others? ]||
|16|Center of Setpoint, High-Resolution °C|integer|500-3200|°C x 100 in steps of 50|
|17|Center of Setpoint, °F|integer|20-102|°F|
|18*|Cooling Setpoint, Low-Resolution °F|integer|20-102|°F|
|19*|Cooling Setpoint, Low-Resolution °C|integer|500-3200|°C|
|20*|Heating Setpoint, Low-Resolution °F|integer|20-102|°F|
|23|Display Units|enum|[ 'f' 'c' ]||
|24|Current Temperature, High-Resolution °C|integer|500-3200|°C x 100 in steps of 50|
|26*|Heating Setpoint, Low-Resolution °C|integer|5-32|°C|
|27*|Temperature Correction|integer|-10 - +10||
|29|Current Temperature, °F|integer|20-102|°F|
|34|Current Humidity|integer|0-100|%|
|45|Fault Flags|bitmask|[ e1 e2 e3 ]||
|107|System Type|integer-as-string|?|?|
|108*|Cooling Setpoint, High-Resolution °C|integer|500-3200|°C x 100 in steps of 50|
|109*|Heating Setpoint, High-Resolution °C|integer|500-3200|°C x 100 in steps of 50|
|110*|Cooling Setpoint, °F|integer|20-102|°F|
|111*|Heating Setpoint, °F|integer|20-102|°F|
|115|Fan Mode|enum|[ 'auto' 'cycle' 'on' ]||
|116|"at home/away from home"|integer-as-string|?|?|
|118|Schedule Data|base64|binary blob||
|119|Schedule Enabled|bool|True/False||
|120|Hold/Schedule|enum|[ 'permhold' 'temphold' 'followschedule' ]||
|121|Vacation Data|base64|binary blob||
|122|[Sensor Data, list 1](https://github.com/jasonacox/tinytuya/discussions/139)|base64|binary blob||
|123|Minimum Fan Run Time|integer|0-55|minutes per hour|
|125|[Sensor Data, list 2](https://github.com/jasonacox/tinytuya/discussions/139)|base64|binary blob||
|126|[Sensor Data, list 3](https://github.com/jasonacox/tinytuya/discussions/139)|base64|binary blob||
|127|[Sensor Data, list 4](https://github.com/jasonacox/tinytuya/discussions/139)|base64|binary blob||
|128|[Sensor Data, list 5](https://github.com/jasonacox/tinytuya/discussions/139)|base64|binary blob||
|129|System State|enum|[ 'fanon' 'coolfanon' 'alloff' others? ]||
|130|Weather Forcast|?|?|?|

NOTE (*) - Depending on the firmware, either 18/19/20/26/27 or 108/109/110/111/x are used, not both

A user contributed module is available for this device in the [Contrib library](https://github.com/jasonacox/tinytuya/tree/master/tinytuya/Contrib):

```python
from tinytuya.Contrib import ThermostatDevice

thermo = ThermostatDevice( 'abcdefghijklmnop123456', '172.28.321.475', '1234567890123abc' )
```

For info on the Sensor Data lists, see https://github.com/jasonacox/tinytuya/discussions/139

### Tuya References

* Tuya Hardware Development - Protocol: https://developer.tuya.com/en/docs/iot/device-development/embedded-software-development/mcu-development-access/wifi-mcu-sdk-solution/tuya-cloud-universal-serial-port-access-protocol?id=K9hhi0xxtn9cb
* TuyaMCU listing of Tuya DP IDs: https://tasmota.github.io/docs/TuyaMCU/#switches-or-plugspower-strips

## Credits

  * TuyAPI https://github.com/codetheweb/tuyapi by codetheweb and blackrozes.
    Protocol reverse engineering from jepsonrob and clach04.
  * PyTuya https://github.com/clach04/python-tuya by clach04. 
    The origin of this python module (now abandoned). Thanks to nijave for pycryptodome support and testing, Exilit for unittests and docstrings, mike-gracia for improved Python version support, samuscherer for RGB Bulb support, magneticflux for improved Python version support, sean6541 for initial PyPi package and Home Assistant support <https://github.com/sean6541/tuya-homeassistant>, ziirish - for resolving a dependency problem related to version numbers at install time
  * https://github.com/rospogrigio/localtuya-homeassistant by rospogrigio. 
    Updated pytuya to support devices with Device IDs of 22 characters
  * Thanks to [@uzlonewolf](https://github.com/uzlonewolf), our top contributor and resident wizard, for expanding the Outlet/Cover/Bulb/Cloud modules into separate files, introducing Contrib structure for user generated device modules, making enhancements to TuyaMessage logic for multi-payload messages, rewriting the scanner and adding [Tuya Protocol 3.2, 3.4 & 3.5](https://github.com/jasonacox/tinytuya/discussions/260) support to TinyTuya!
  * Finally, thanks to the entire TinyTuya community for the great engagement, contributions and encouragement! See [RELEASE notes](https://github.com/jasonacox/tinytuya/blob/master/RELEASE.md#release-notes) for the ever growing journal of improvements and the incredible list of talent making this project possible.

## Related Projects

  * https://github.com/sean6541/tuyaapi Python API to the web api
  * https://github.com/codetheweb/tuyapi node.js
  * https://github.com/Marcus-L/m4rcus.TuyaCore - .NET
  * https://github.com/SDNick484/rectec_status/ - RecTec pellet smokers control (with Alexa skill)
  * https://github.com/TradeFace/tuyaface - Python Async Tuya API

## TinyTuya Powered Projects

Please feel free to submit a PR or open an issue to add your project.

* https://github.com/mafrosis/tinytuya2mqtt - A bridge between TinyTuya and Home Assistant via MQTT
* https://github.com/Whytey/pymoebot - A Python library intended to monitor and control the MoeBot robotic lawn mowers.
* https://github.com/make-all/tuya-local - Local support for Tuya devices in Home Assistant
* https://github.com/teejo75/mtghs - Provides an HTTP service for Moonraker to control Tuya outlets.
* https://github.com/Xenomes/Domoticz-TinyTUYA-Plugin - Plugin for Domoticz Home Automation


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: RELEASE.md

# RELEASE NOTES

## v1.15.1 - Scanner Fixes

* Fix scanner broadcast attempting to bind to the wrong IP address, introduced in v1.15.0

## v1.15.0 - Scanner Fixes

* Fix force-scanning bug in scanner introduced in last release and add broadcast request feature to help discover Tuya version 3.5 devices by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/511.
* Server p12 updates:
    * Added "Force Scan" button to cause server to run a network scan for devices not broadcasting.
    * Minor updates to UI for a cleaner title and footer to accommodate button.
    * Added logic to allow settings via environmental variables.
    * Add broadcast request to local network for version 3.5 devices. 
    * Fix bug with cloud sync refresh that was losing device mappings.
    * Added "Cloud Sync" button to poll cloud for updated device data.

## v1.14.0 - Command Line Updates

* PyPI 1.14.0 rewrite of main to use argparse and add additional options by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/503
* Add support for `pipx install tinytuya` as raised by @felipecrs in https://github.com/jasonacox/tinytuya/issues/500 allowing for easier CLI use.
* Note possible breaking change: Running `tinytuya` by itself will now produce a "Usage" page instead of running a scan.  Use `tinytuya scan` or `python -m tinytuya scan`.
* Updated docs to explain timeout as raised by @GamerPeggun in https://github.com/jasonacox/tinytuya/issues/501

## v1.13.2 - Contrib Updates

* Add example for XmCosy+ RGBW patio string lights by @bikerglen in https://github.com/jasonacox/tinytuya/pull/445
* Fix case when the number of colors in the colors list is not exactly six by @bikerglen in https://github.com/jasonacox/tinytuya/pull/446
* Adding support for Presence Detector Device by @mrioan in https://github.com/jasonacox/tinytuya/pull/451
* Makes some tweaks to the recently-added Contrib/PresenceDetectorDevice by @mrioan and Deprecates `Contrib/__init__.py` by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/466
* Add a note about QR code scanning with Dark Reader to the README [#463](https://github.com/jasonacox/tinytuya/issues/463) by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/466
* Add option to specify port in XenonDevice class by @unit-404 in https://github.com/jasonacox/tinytuya/pull/468

## v1.13.1 - Cryptography Version

* PyPI 1.13.1
* Require pyca/cryptography>=3.1 or fallback to PyCryptodome
* Add `tools/fake-v35-device.py` script to tools
* Allow pyca/cryptography to GCM decrypt without the tag (makes it match PyCryptodome) by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/424

## v1.13.0 - Crypto Library Update

* PyPI 1.13.0
* Updates AESCipher() to make it a bit easier to add additional crypto libraries. It also adds pyca/cryptography as the default. By @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/423
* Fixes issue with tinytuya.find_device() for v3.1 devices and the infinite loop in Contrib/IRRemoteControlDevice.py (Closes #403).
* Officially removes Python 2.7 support.

## v1.12.11 - Bug Fix for _get_socket()

* PyPI 1.12.11
* Fix local variable collision in `_get_socket()` exception handling for device offline conditions.

## v1.12.10 - Various Updates

* PyPI 1.12.10
* Various updates inspired by recent issues by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/397 - Updates to scanner, added error code and helpful troubleshooting messages, make connection/key errors more descriptive, added socketRetryLimit (`connection_retry_limit`) and socketRetryDelay (`connection_retry_limit`) to Device constructor args.
* [[MQTT Gateway for Server](https://github.com/jasonacox/tinytuya/blob/master/server/mqtt/mqtt_gateway.py)] Fixed endless loop causing 100% cpu usage by @michaelmittermair in https://github.com/jasonacox/tinytuya/pull/390


## v1.12.9 - Import Issue with urllib3

* PyPI 1.12.9
* Add graceful handling of issue where urllib3 v2.0 causes `ImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+` error. See https://github.com/jasonacox/tinytuya/issues/377 & https://github.com/jasonacox/tinytuya/pull/379.
* Fix bug in Cloud getdevices() that can error with older `devices.json` versions as raised in https://github.com/jasonacox/tinytuya/issues/381 & https://github.com/jasonacox/tinytuya/pull/382
* [[Server](https://github.com/jasonacox/tinytuya/tree/master/server)] Mapping for DP IDs by @mschlenstedt in https://github.com/jasonacox/tinytuya/pull/353 and https://github.com/jasonacox/tinytuya/pull/363
* [[MQTT Gateway for Server](https://github.com/jasonacox/tinytuya/blob/master/server/mqtt/mqtt_gateway.py)] by @mschlenstedt in https://github.com/jasonacox/tinytuya/pull/364, https://github.com/jasonacox/tinytuya/pull/367 and https://github.com/jasonacox/tinytuya/pull/366
* Add Contrib support for Inverter Heat Pump such as Fairland IPHR55 by @valentindusollier in https://github.com/jasonacox/tinytuya/pull/368

## v1.12.8 - Device DP Mapping

* PyPI 1.12.8
* [[Server](https://github.com/jasonacox/tinytuya/tree/master/server)] - Use {DeviceName} instead of {DeviceID} alternatively for API commands by @mschlenstedt in https://github.com/jasonacox/tinytuya/pull/352
* Wizard - New Cloud functions to download DP Name mappings by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/356

Example device from UPDATED `devices.json` showing new *"mapping"* data:

```json
    {
        "name": "Smart Plug",
        "id": "01234567890abcdef012",
        "key": "abcdef0123456789",
        "mac": "aa:bb:cc:dd:33:11",
        "uuid": "01234567890abcdef012",
        "category": "cz",
        "product_name": "WP1-Smart Socket",
        "product_id": "iXfg9AQVUPhlfyGw",
        "biz_type": 18,
        "model": "WP1/10A/\u5e26\u8ba1\u91cf/gosund",
        "sub": false,
        "icon": "https://images.tuyaus.com/smart/icon/1472009231_0.png",
        "mapping": {
            "1": {
                "code": "switch",
                "type": "Boolean",
                "values": {}
            },
            "4": {
                "code": "cur_current",
                "type": "Integer",
                "values": {
                    "unit": "mA",
                    "min": 0,
                    "max": 30000,
                    "scale": 0,
                    "step": 1
                }
            },
            "5": {
                "code": "cur_power",
                "type": "Integer",
                "values": {
                    "unit": "W",
                    "min": 0,
                    "max": 50000,
                    "scale": 1,
                    "step": 1
                }
            },
            "6": {
                "code": "cur_voltage",
                "type": "Integer",
                "values": {
                    "unit": "V",
                    "min": 0,
                    "max": 5000,
                    "scale": 1,
                    "step": 1
                }
            },
            "2": {
                "code": "countdown_1",
                "type": "Integer",
                "values": {
                    "unit": "s",
                    "min": 0,
                    "max": 86400,
                    "scale": 0,
                    "step": 1
                }
            }
        },
        "ip": "10.20.30.40",
        "version": "3.1"
    }
```

## v1.12.7 - Status Bug Fix

* PyPI 1.12.7
* Fix bug in `detect_available_dps()` to resolve issue where `status()` call for smartbulbs would randomly cause devices to turn off by @xgustavoh in https://github.com/jasonacox/tinytuya/pull/345

## v1.12.6 - Minor Fixes

* PyPI 1.12.6
* Cloud - Bug Fix KeyError: 'has_more' by @Liborsaf in https://github.com/jasonacox/tinytuya/pull/342
* Add Contrib support for IR+RF devices such as the S11 by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/343

## v1.12.5 - Scanner Update

* PyPI 1.12.5
* Remove requirement for PyCryptodome in scanner (allows pyaes for devices < 3.5) by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/332
* Added AES library details to debug output.
* README update - Add link to Moonraker support project by @teejo75 in https://github.com/jasonacox/tinytuya/pull/335
* Misc minor updates by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/336: Normalize ability/ablilty in scanner https://github.com/jasonacox/tinytuya/issues/333 - Fix examples/getstatus.py - Cloud device list and Content-Type update https://github.com/jasonacox/tinytuya/issues/324 - Rework examples/async_send_receive.py

## v1.12.4 - Wizard Scan for ID

* PyPI 1.12.4
* Adds option allowing wizard to scan for a Device ID by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/331 - Related to Tuya IoT permission denied issue https://github.com/jasonacox/tinytuya/issues/330 and https://github.com/jasonacox/tinytuya/issues/323

## v1.12.3 - Fix Cloud Device List

* PyPI 1.12.3
* Fix fan_run_time typo in Contrib/ThermostatDevice by @elockman in https://github.com/jasonacox/tinytuya/pull/326
* Cloud device list and Content-Type update by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/324 Bug Fix for https://github.com/jasonacox/tinytuya/issues/323

## v1.12.2 - Gateway/Sub-device Update

* PyPI 1.12.2
* Gateway/sub-device updates, payload_dict reworked, and `subdev_query()` added by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/308
* Add [tools/pcap_parse.py](https://github.com/jasonacox/tinytuya/tree/master/tools) by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/311
* [[Server](https://github.com/jasonacox/tinytuya/tree/master/server)] Formatted data into tables and added version information.

## v1.12.1 - Cloud & Wizard Updates

* PyPI 1.12.1
* [[tinytuya.Cloud](https://github.com/jasonacox/tinytuya#tuya-cloud-access)] Added cloud `sendcommand()` parameter for URI by @Syrooo in https://github.com/jasonacox/tinytuya/pull/303
* Wizard and [tinytuya.Cloud](https://github.com/jasonacox/tinytuya#tuya-cloud-access) - Fetch the device list a 2nd time to make sure we have the local key by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/306 - Updated internal `_get_all_devices()` and  `_update_device_list()`

## v1.12.0 - Zigbee Gateway Updates

* PyPI 1.12.0
* Improve detect_available_dps() function by @nyok92 in https://github.com/jasonacox/tinytuya/pull/294
* Tighten up parent device detection in the Wizard by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/296
* Updates for Zigbee Gateway sub-device usage by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/298

## v1.11.0 - Cloud Device Listing

* PyPI 1.11.0
* Simplification and cleanup of math functions in core and IRRemoteControlDevice by @gstein in https://github.com/jasonacox/tinytuya/pull/291
* Rework Cloud device list fetching by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/289 includes new `tuya-raw.json` (backward compatible).

Additional data in tuya-raw.json:

```json
    "file": {
        "name": "tuya-raw.json",
        "description": "Full raw list of Tuya devices.",
        "account": "xxxxxxxxxxxxxxxxxxxx",
        "date": "2023-03-04T19:50:08.879865",
        "tinytuya": "1.11.0"
    }
```

## v1.10.3 - Cloud Updates

* PyPI 1.10.3
* Fix params leak in getdevicelog() as discovered by @klightspeed and @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/219
* Log message formatting by @johnno1962 in https://github.com/jasonacox/tinytuya/pull/285
* Add Cloud IR example, updated docs, and allow an optional initial token to Cloud by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/288


## v1.10.2 - Bug Fix for ThermostatDevice and Misc. Cleanup

* PyPI 1.10.2
* Fix Contrib.ThermostatDevice.SetSetpoint() by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/273
* Added command line -debug flag and code cleanup based on pylint by @jasonacox in https://github.com/jasonacox/tinytuya/pull/276

## v1.10.1 - Bug Fix for BulbDevice and Zigbee Devices

* PyPI 1.10.1
* Fix _process_message() missing parameters discovered via issue https://github.com/jasonacox/tinytuya/issues/266 by @jasonacox in https://github.com/jasonacox/tinytuya/pull/267
* Removed bulb attribute conditional blocking in BulbDevice set_colour(), set_hsv() and set_colourtemp() as some devices do not correctly report capabilities. Conditional provides debug warning message instead by @jasonacox in https://github.com/jasonacox/tinytuya/issues/265

## v1.10.0 - Tuya Protocol v3.5 Device Support / Scanner Rewrite

* PyPI 1.10.0
* Tuya Protocol v3.5 Support by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/256 https://github.com/jasonacox/tinytuya/pull/257 & https://github.com/jasonacox/tinytuya/pull/259
* [[tinytuya.Cloud](https://github.com/jasonacox/tinytuya#tuya-cloud-access)] Updated getdevicelog() to handle fetching more when "has_next" is True by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/236
* [[Server](https://github.com/jasonacox/tinytuya/tree/master/server)] Added delayed-off & help function to server by @cowboy3d in https://github.com/jasonacox/tinytuya/pull/242 & https://github.com/jasonacox/tinytuya/pull/243
* [[Server](https://github.com/jasonacox/tinytuya/tree/master/server)] Added ability to modify device dps using web browser by @cowboy3d in https://github.com/jasonacox/tinytuya/pull/244
* Added nowait parameter to status() and split message parsing into separate function by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/253
* [[Scanner](https://github.com/jasonacox/tinytuya#network-scanner)] Complete rewrite of the scanner for speed improvements and allowing force-scanning of IP ranges by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/252 https://github.com/jasonacox/tinytuya/pull/254 https://github.com/jasonacox/tinytuya/pull/261 & https://github.com/jasonacox/tinytuya/pull/262

```
TinyTuya [1.10.0]

Usage:

    python -m tinytuya <command> [<max_time>] [-nocolor] [-force [192.168.0.0/24 192.168.1.0/24 ...]] [-h]

      wizard         Launch Setup Wizard to get Tuya Local KEYs.
      scan           Scan local network for Tuya devices.
      devices        Scan all devices listed in devices.json file.
      snapshot       Scan devices listed in snapshot.json file.
      json           Scan devices listed in snapshot.json file [JSON].
      <max_time>     Maximum time to find Tuya devices [Default=18]
      -nocolor       Disable color text output.
      -force         Force network scan for device IP addresses.  Auto-detects network range if none provided.
      -no-broadcasts Ignore broadcast packets when force scanning.
      -h             Show usage.
```

## v1.9.1 - Minor Bug Fix for Cloud

* PyPI 1.9.1
* Fix logging for Cloud `_gettoken()` to prevent extraneous output. #229

## v1.9.0 - Zigbee Gateway Support

* PyPI 1.9.0
* Add support for subdevices connected to gateway by @LesTR in https://github.com/jasonacox/tinytuya/pull/222
* Rework Zigbee Gateway handling to support multiple devices with persistent connections by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/226
* Add support for newer IR devices, and several IR format converters by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/228
* Rework Cloud log start/end times, and update documentation by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/229

```python
import tinytuya

# Zigbee Gateway support uses a parent/child model where a parent gateway device is
#  connected and then one or more children are added.

# Configure the parent device
gw = tinytuya.Device( 'eb...4', address=None, local_key='aabbccddeeffgghh', persist=True, version=3.3 )

print( 'GW IP found:', gw.address )

# Configure one or more children.  Every dev_id must be unique!
zigbee1 = tinytuya.OutletDevice( 'eb14...w', cid='0011223344556601', parent=gw )
zigbee2 = tinytuya.OutletDevice( 'eb04...l', cid='0011223344556689', parent=gw )

print(zigbee1.status())
print(zigbee2.status())
```

## v1.8.0 - Expanded Cloud Functions

* PyPI 1.8.0
* Add AtorchTemperatureController by @Poil in https://github.com/jasonacox/tinytuya/pull/213
* Add new Cloud functions to fetch device logs from TuyaCloud (`getdevicelog(id)`), make generic cloud request with custom URL and params (`cloudrequest(url, ...)`) and fetch connection status (`getconnectstatus(id)`) by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/219
* Update README for new Cloud functions, and tighter deviceid error checking by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/220

```python
import tinytuya
import json

c = tinytuya.Cloud()
r = c.getdevicelog( '00112233445566778899' )
print( json.dumps(r, indent=2) )
```

## v1.7.2 - Fix Contrib Devices Bug

* PyPI 1.7.2
* Restore reference to 'self' in __init__() functions by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/207
* Misc updates to find_device(), wizard, and repr(device) by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/196
* Added socketRetryDelay as parameter instead of fixed value = 5. by @erathaowl in https://github.com/jasonacox/tinytuya/pull/199


## v1.7.1 - Auto-IP Detection Enhancement

* PyPI 1.7.1
* Add Climate device module and simple example for portable air conditioners by @fr3dz10 in https://github.com/jasonacox/tinytuya/pull/189 and https://github.com/jasonacox/tinytuya/pull/192
* Constructor and documentation updates by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/188
* Get local key from devices.json if not provided by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/187
* Rework device finding for auto-IP detection, and unpack_message() retcode fix by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/186
* Standardize indentation for code snippets in the README by @TheOnlyWayUp in https://github.com/jasonacox/tinytuya/pull/184

```python
d = tinytuya.OutletDevice( '0123456789abcdef0123' )
```

## v1.7.0 - Tuya Protocol v3.4 Device Support

* PyPI 1.7.0
* Add support for v3.4 protocol Tuya devices by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/179
* API change with `_send_receive()` - now takes care of the packing and encrypting so it can re-encode whenever the socket is closed and reopened, and _get_socket() now takes care of negotiating the session key (v3.4)
* Optimize detect_available_dps() by @pawel-szopinski in https://github.com/jasonacox/tinytuya/pull/176
* Update ThermostatDevice by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/174
* Add Pronto/NEC/Samsung IR code conversion functions to IRRemoteControlDevice by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/173
* Added DoorbellDevice by @JonesMeUp in https://github.com/jasonacox/tinytuya/issues/162 
* Added ability to set version on constructor for more intuitive use:

```python
d = tinytuya.OutletDevice(
    dev_id='xxxxxxxxxxxxxxxxxxxxxxxx',
    address='x.x.x.x',
    local_key='xxxxxxxxxxxxxxxx',
    version=3.4)

print(d.status())
```

## v1.6.6 - Updated Payload Dictionary and Command List

* PyPI 1.6.6
* Added support for v3.2 protocol Tuya devices
* Added SocketDevice by @Felix-Pi in https://github.com/jasonacox/tinytuya/pull/167
* Skip DPS detection for 3.2 protocol devices if it has already been set by @pawel-szopinski in https://github.com/jasonacox/tinytuya/pull/169

```python
# Example usage of community contributed device modules
from tinytuya.Contrib import SocketDevice

socket = SocketDevice('abcdefghijklmnop123456', '172.28.321.475', '1234567890123abc', version=3.3)

print(socket.get_energy_consumption())
print(socket.get_state())
```

## v1.6.5 - Updated Payload Dictionary and Command List

* PyPI 1.6.5
* Reworked payload_dict and realigned the command list to match [Tuya's API](https://github.com/tuya/tuya-iotos-embeded-sdk-wifi-ble-bk7231n/blob/master/sdk/include/lan_protocol.h) by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/166
* Changed socket.send() to socket.sendall() in _send_receive() by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/166
* Created TuyaSmartPlug-example.py by @fajarmnrozaki in https://github.com/jasonacox/tinytuya/pull/163 and https://github.com/jasonacox/tinytuya/pull/165

## v1.6.4 - IRRemoteControlDevice and Read Improvements

* PyPI 1.6.4
* Separates read retries from send retries by @uzlonewolf #158
* IRRemoteControlDevice - New community contributed device module for IR Remote Control devices by @ClusterM in https://github.com/jasonacox/tinytuya/pull/160 - See example: [examples/IRRemoteControlDevice-example.py](https://github.com/jasonacox/tinytuya/blob/master/examples/Contrib/IRRemoteControlDevice-example.py)

```python
# Example usage of community contributed device modules
from tinytuya import Contrib

ir = Contrib.IRRemoteControlDevice( 'abcdefghijklmnop123456', '172.28.321.475', '1234567890123abc' )
```

## v1.6.2 - Cloud, TuyaMessage & ThermostatDevice Improvements

* PyPI 1.6.2
* Add getconnectstatus() function to Cloud class by @Paxy in https://github.com/jasonacox/tinytuya/pull/151
* Improve TuyaMessage Header processing for mulit-payload messages by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/153
* More verbose debug logging on decode error by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/155
* Add schedule editing to [Contrib/ThermostatDevice](https://github.com/jasonacox/tinytuya/blob/master/tinytuya/Contrib/ThermostatDevice.py) and various fixes by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/157

## v1.6.1 - ThermostatDevice - User Contributed Device Module

* PyPI 1.6.1
* Cloud - Fix bug in `getdevices()` to import device mac addresses (same as wizard).
* Break the Outlet/Cover/Bulb/Cloud modules out into separate files by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/142
* Fix logging calls in XenonDevice.detect_available_dps by @pkasprzyk in https://github.com/jasonacox/tinytuya/pull/144
* [TinyTuya API Server](https://github.com/jasonacox/tinytuya/tree/master/server#tinytuya-api-server) - Add Cloud API syncing with auto-retry by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/147
* [TinyTuya API Server](https://github.com/jasonacox/tinytuya/tree/master/server#tinytuya-api-server) - List registered but offline devices via `/offline` and web UI.
* ThermostatDevice - First community contributed device module ThermostatDevice by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/146 - See example: [examples/ThermostatDevice-example.py](https://github.com/jasonacox/tinytuya/blob/master/examples/Contrib/ThermostatDevice-example.py)

```python
# Example usage of community contributed device modules
from tinytuya import Contrib

thermo = Contrib.ThermostatDevice( 'abcdefghijklmnop123456', '172.28.321.475', '1234567890123abc' )
```


## v1.6.0 - Colorama for Terminal Color

* PyPI 1.6.0
* Add [colorama](https://github.com/tartley/colorama) terminal color capability for all platforms including MS Windows and stdout redirects
* Fix to allow setting socket options to existing open sockets by @uzlonewolf in https://github.com/jasonacox/tinytuya/pull/140
* BETA: Started standalone TinyTuya API Server ([see here](https://github.com/jasonacox/tinytuya/tree/master/server#tinytuya-api-server)). No change to core library.

## v1.5.0 - Add 'nowait' Option to Commands

* PyPI 1.5.0
* Added an optional 'nowait' boolean setting (True/False) to functions to allow sending commands without waiting for a device response. (Issue #74)
* Clean up code to address pylint warnings. (PR #135)

```python
# Example use of nowait option
d.turn_on(nowait=True)
d.set_colour(r, g, b, nowait=True)
d.set_value(201, '9AEmAvQBJgL0ASYCQAYmAkAGJgJABiY', nowait=True)  # send IR command
d.set_value(25, '010e0d0000000000000003e803e8', nowait=True)      # set scene
```

## v1.4.0 - Updated Scanner Functions

* PyPI 1.4.0 - Minor Update to APIs (additional arguments and elements)
* Debug - Updated debug output for payloads to formatted hexadecimal (pull request #98)
* Scan - Terminal color fix for 3.1 devices.
* Error Handling added for `set_timer()` function (Issue #87)
* Add wizard capability to pull mac addresses from TuyaPlatform in devices.json (Issue #117)
* Add wizard `-force` option to perform network scan for device IP addresses (Issue #117)
* Separated scan functions into `scanner.py` file.
* NEW: Added command line functions for scanning:
    * `devices` - Display and poll all registered devices for status (using devices.json). This will force a network scan for IP address changes and will create snapshot.json.
    * `snapshot` - Display and poll all devices as listed snapshot.json. This assume IP address are the same as the last snapshot.
    * `json` - Same as snapshot but respond with a JSON payload.

```bash
# Run wizard using brute force scan for IP addresses
python -m tinytuya wizard -force

# New Interactive Command Line Options
python -m tinytuya devices
python -m tinytuya snapshot

# Non-Interactive poll with JSON response
python -m tinytuya json

```

## v1.3.1 - TuyaCloud API Support

* PyPi Version 1.3.1
* Added TuyaCloud token expiration detection and renewal logic (Issue #94)

## v1.3.0 - TuyaCloud API Support

* PyPi Version 1.3.0
* Code format cleanup and readability improvements (pull request #91)
* Upgrade - Add TuyaCloud API support and functions (#87 #95)

```python
import tinytuya

c = tinytuya.Cloud(
        apiRegion="us", 
        apiKey="xxxxxxxxxxxxxxxxxxxx", 
        apiSecret="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 
        apiDeviceID="xxxxxxxxxxxxxxxxxxID")

# Display list of devices
devices = c.getdevices()
print("Device List: %r" % devices)

# Select a Device ID to Test
id = "xxxxxxxxxxxxxxxxxxID"

# Display DPS IDs of Device
result = c.getdps(id)
print("DPS IDs of device:\n", result)

# Display Status of Device
result = c.getstatus(id)
print("Status of device:\n", result)

# Send Command - This example assumes a basic switch
commands = {
	'commands': [{
		'code': 'switch_1',
		'value': True
	}, {
		'code': 'countdown_1',
		'value': 0
	}]
}
print("Sending command...")
result = c.sendcommand(id,commands)
print("Results\n:", result)
```

## v1.2.11 - Updated Scan and Wizard Retry Logic

* PyPi Version 1.2.11
* Added retries logic to `wizard` and `scan` to honor value set by command line or default to a value based on the number of devices (if known):

```bash
# Explicit value set via command line
python3 -m tinytuya wizard 50   # Set retry to 50 
python3 -m tinytuya scan 50     

# Use automatic computed value
python3 -m tinytuya wizard      # Compute a default
python3 -m tinytuya scan        

# Example output
TinyTuya (Tuya device scanner) [1.2.11]

[Loaded devices.json - 32 devices]

Scanning on UDP ports 6666 and 6667 for devices (47 retries)...
```

## v1.2.10 - Wizard Update for New Tuya Regions 

* PyPi Version 1.2.10
* Added ability to disable device auto-detect (default vs device22) via `d.disabledetect=True`.
* Wizard: Added new data center regions for Tuya Cloud: (Issues #66 #75)

Code | Region | Endpoint
-- | -- | --
cn | China Data Center | https://openapi.tuyacn.com
us | Western America Data Center | https://openapi.tuyaus.com
us-e | Eastern America Data Center | https://openapi-ueaz.tuyaus.com
eu | Central Europe Data Center | https://openapi.tuyaeu.com
eu-w | Western Europe Data Center | https://openapi-weaz.tuyaeu.com
in | India Data Center | https://openapi.tuyain.com

## v1.2.9 - Edge Case Device Support

* PyPi Version 1.2.9
* Added Error Handling in class Device(XenonDevice) for conditions where response is None (Issue #68)
* Added edge-case handler in `_decode_payload()` to decode non-string type decrypted payload (Issue #67)

## v1.2.8 - BulbDevice

* PyPi Version 1.2.8
* Added additional error checking for BulbDevice type selection
* Added TinyTuya version logging for debug mode
* Fix bug in scan when color=False (Issue #63)

## v1.2.7 - New Tuya Cloud IoT Setup Wizard

* PyPi Version 1.2.7
* Updated setup `wizard` to support new Tuya Cloud signing method (Issue #57)
* Added Bulb type C and manual setting function `set_bulb_type(type)` (PR #54)
* Wizard creates `tuya-raw.json` to record raw response from Tuya IoT Platform
* Fixed device22 bug on retry - Now returns ERR_DEVTYPE error, status() includes auto-retry (#56)

## v1.2.6 - Improved Error Handling

* PyPi Version 1.2.6
* Added `wizard` handling to capture and display Tuya API server error responses (PR #45)
* Added better error handling for BulbDevice `state()` function to not crash when dps values are missing in response (PR #46)
* Added async examples using `send()` and `receive()`
* Updated scan output to include device Local Key if known (PR #49 #50)
* Fixed print typo in examples/devices.py (PR #51)

## v1.2.5 - Send and Receive Functions

* PyPi Version 1.2.5
* Added raw mode `send()` and `receive()` function to allow direct control of payload transfers. Useful to monitor constant state changes via threads or continuous loops.  This example opens a Tuya device and watches for state changes (e.g. switch going on and off):

```python
import tinytuya

d = tinytuya.OutletDevice('DEVICEID', 'DEVICEIP', 'DEVICEKEY')
d.set_version(3.3)
d.set_socketPersistent(True)

print(" > Send Initial Query for Status < ")
payload = d.generate_payload(tinytuya.DP_QUERY)
d.send(payload)

while(True):
    # See if any data is available
    data = d.receive()
    print('Received Payload: %r' % data)

    # Send a keyalive heartbeat ping
    print(" > Send Heartbeat Ping < ")
    payload = d.generate_payload(tinytuya.HEART_BEAT)
    d.send(payload)
```

## v1.2.4 - DPS Detection and Bug Fixes

* PyPi Version 1.2.4
* Added detect_available_dps() function
* Fixed bug in json_error() function
* Updated instruction for using Tuya iot.tuya.com to run Wizard
* Added option to disable deviceScan() automatic device polling
* Added better error handling processing Tuya messages (responses) Issue #39
* Fixed display bug in Wizard device polling to show correct On/Off state

## v1.2.3 - Dimmer and Brightness Functions

* PyPi Version 1.2.3
* Added `set_dimmer()` to OutletDevice class.
* Added `set_hsv()` to BulbDevice class.
* Updated `set_brightness()` in BulbDevice to handle *white* and *colour* modes. Issue #30
* BulbDevice determines features of device and presents boolean variables `has_colour`, `has_brightness` and `has_colourtemp` to ignore requests that do not exist (returns error).

## v1.2.2 - Bug Fix for Bulb Functions

* PyPi Version 1.2.2
* Fix bug in set_white_percentage(): added missing self. PR #32
* Fixed set_white_percentage: colour temp was incorrectly computed for B type Bulbs. PR #33
* Moved setup **Wizard** out of module init to standalone import to save import load.

Command line mode is still the same:
```python
python3 -m tinytuya wizard
```

Import now requires additional import to run Wizard programmatically:
```python
import tinytuya
import tinytuya.wizard

tinytuya.wizard.wizard()

```

## v1.2.1 - Bug Fix for Command 0x12 UpdateDPS

* PyPi Version 1.2.1
* Fixed header for 0x12 Update DPS Command (see issue #8)

## v1.2.0 - Error Handling and Bug Fixes

* PyPi Version 1.2.0
* Now decrypting all TuyaMessage responses (not just status)
* Fixed `set_colour(r, g, b)` to work with python2
* Fixed `set_debug()` to toggle on debug logging (with color)
* Added handler for `device22` to automatically detect and `set_dpsUsed()` with available DPS values. 
* Added `set_socketTimeout(s)` for adjustable connection timeout setting (defaults to 5s)
* Added `set_sendWait(s)` for adjustable wait time after sending device commands
* Improved and added additional error handling and retry logic
* Instead of Exceptions, tinytuya responds with Error response codes (potential breaking change):

Example

```python
import tinytuya

tinytuya.set_debug(toggle=False, color=True)

d = tinytuya.OutletDevice('<ID>','<IP>','<KEY>')
d.set_version(3.3)
d.status()
```
```
{u'Payload': None, u'Err': u'905', u'Error': u'Network Error: Device Unreachable'}
```


## v1.1.4 - Update DPS (Command 18)

* PyPi Version 1.1.4
* Added `updatedps()` command 18 function to request device to update DPS values (Issue #8)
* Added `set_debug()` function to activate debug logging 
```python
import tinytuya
import time

tinytuya.set_debug(True)

d = tinytuya.OutletDevice('DEVICEID', 'IP', 'LOCALKEY')
d.set_version(3.3)

print(" > Fetch Status < ")
data = d.status()
time.sleep(5)

print(" > Request Update for DPS indexes 18, 19 and 20 < ")
result = d.updatedps([18, 19, 20])

print(" > Fetch Status Again < ")
data2 = d.status()

print("Before %r" % data)
print("After  %r" % data2)
```

## v1.1.3 - Automatic IP Lookup

* PyPi Version 1.1.3
* Updated device read retry logic for minimum response payload (28 characters) (Issue #17)
* Feature added to do automatic IP address lookup via network scan if _None_ or '0.0.0.0' is specified.  Example:
```python
    import tinytuya
    ID = "01234567890123456789"
    IP = None
    KEY = "0123456789012345"
    d = tinytuya.OutletDevice(ID,IP,KEY)
    d.status()
```

## v1.1.2 - Bug Fix or 3.1 Devices

* PyPi Version 1.1.2
* Bug Fix for 3.1 Devices using CONTROL command - updated to hexdigest[8:][:16]
* See Issue: #11


## v1.1.1 - BulbDevice Class Update

* PyPi Version 1.1.1
* Updated BulbDevice Class to support two types of bulbs with different DPS mappings and functions:
        - Type A - Uses DPS index 1-5 and represents color with RGB+HSV
        - Type B - Uses DPS index 20-27 (no index 1)
* Updated Colour Support -  Index (DPS_INDEX_COLOUR) is assumed to be in the format:
         - (Type A) Index: 5 in hex format: rrggbb0hhhssvv 
         - (Type B) Index: 24 in hex format: hhhhssssvvvv 
* New Functions to help abstract Bulb Type:
        - `set_white_percentage(brightness=100, colourtemp=0):`
        - `set_brightness_percentage(brightness=100):`
        - `set_colourtemp_percentage(colourtemp=100):`
        - `set_mode(mode='white'):`       # white, colour, scene, music
* Example Script https://github.com/jasonacox/tinytuya/blob/master/examples/bulb.py 

## v1.1.0 - Setup Wizard

* PyPi Version 1.1.0
* Added TinyTuya Setup Wizard to help users grab device *LOCAL_KEY* from the Tuya Platform.
* Added formatted terminal color output (optionally disabled with `-nocolor`) for interactive **Wizard** and **Scan** functions.

```python
python3 -m tinytuya wizard
```
s
## v1.0.5 - Persistent Socket Connections

* PyPi Version 1.0.5
* Updated cipher json payload to mirror TuyAPI - hexdigest from `[8:][:16]` to `[8:][:24]`
* Added optional persistent socket connection, NODELAY and configurable retry limit (@elfman03) #5 #6 #7
```python
    set_socketPersistent(False/True)   # False [default] or True
    set_socketNODELAY(False/True)      # False or True [default]	    
    set_socketRetryLimit(integer)      # retry count limit [default 5]
```
* Add some "scenes" supported by color bulbs (@elfman03) 
```python
    set_scene(scene):             # 1=nature, 3=rave, 4=rainbow
```

## v1.0.4 - Network Scanner

* PyPi Version 1.0.4
* Added `scan()` function to get a list of Tuya devices on your network along with their device IP, ID and VERSION number (3.1 or 3.3):
```
python3 -m tinytuya
```

## v1.0.3 - Device22 Fix

* PyPi Version 1.0.3
* Removed automatic device22 type selection.  The assumption that 22 character ID meant it needed dev_type device22 was discovered to be incorrect and there are Tuya devices with 22 character ID's that behave similar to default devices.  Device22 type is now available via a dev_type specification on initialization:
```
    OutletDevice(dev_id, address, local_key=None, dev_type='default')
    CoverDevice(dev_id, address, local_key=None, dev_type='default')
    BulbDevice(dev_id, address, local_key=None, dev_type='default')
```
* Added Tuya Command Types framework to definitions and payload dictionary per device type.
* Bug fixes (1.0.2):
    * Update SET to CONTROL command
    * Fixed BulbDevice() `__init__`

## v1.0.0 - Initial Release

* PyPi Version 1.0.0


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: SECURITY.md

# Security Policy

## Supported Versions

Bug fixes and patches will be applied to versions 1.0 and above.

| Version | Supported          |
| ------- | ------------------ |
| 1.0 +   | :white_check_mark: |
| < 1.0   | :x:                |

## Reporting a Vulnerability

Please open an [issue](https://github.com/jasonacox/tinytuya/issues) or a [pull request](https://github.com/jasonacox/tinytuya/pulls) for any vulnerability discovered.


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: docs/README.md

# Helpful Documentation

## Setup Instructions

Below are some helpful tutorials on setting up and using TinyTuya to control devices. Please open an issue or PR to suggest others.

* How to control smart power strips by Python by @yokoyama ([Japanese Tutorial](https://flogics.com/wp/ja/2022/02/control-smart-power-strips-by-python/))
* Smart Tuya Cloud integration with Raspberry PLC with Python by industrialshields (English)  [PDF Instructions](https://www.industrialshields.com/web/content/276669?access_token=1f474610-27d8-4741-bea0-483bfe2abc76&unique=b032e5ee87b9c50009ef98c8b58a2d9c1081779d&download=true) https://www.industrialshields.com/blog/raspberry-pi-for-industry-26/post/home-automation-with-tuya-and-raspberry-pi-plc-307
* Controlling lightbulb using Python and tinytuya library by Patryk Jakubiak - [YouTube Video](https://www.youtube.com/watch?v=d6ZUfLQeKTg)
* Visualizing Local Electric Grid Pollution with a $7 Smart Lightbulb by Ben Bogart - [Tutorial](https://towardsdatascience.com/visualizing-local-electric-grid-pollution-with-a-7-smart-lightbulb-2cf16abe5f4e) 
* “Hacking an IoT Home”: New opportunities for cyber security education combining remote learning with cyber-physical systems by Phil Legg, Thomas Higgs, Pennie Spruhan, Jonathan White and Ian Johnson,
Computer Science Research Centre, University of the West of England, Bristol, UK - [PDF](https://uwe-repository.worktribe.com/OutputFile/7337415)
* HOW TO - Get All Local Tuya Keys (ALL KEYS, SIMPLE, NO SOLDERING) by Mark Watt Tech - [YouTube Video](https://www.youtube.com/watch?v=YKvGYXw-_cE)

=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: docs/TinyTuya-diagram.jpg

���� JFIF      �� C 		
 $.' ",#(7),01444'9=82<.342�� C			2!!22222222222222222222222222222222222222222222222222�� ��" ��           	
�� �   } !1AQa"q2���#B��R��$3br�	
%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz���������������������������������������������������������������������������        	
�� �  w !1AQaq"2�B����	#3R�br�
$4�%�&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz��������������������������������������������������������������������������   ? ��(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
+���ƥam}i�-r[k��hd�,��`
��FAy�� �'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW9� 	>�� Bv�� l��"��I������e� ���\��$���	������ �?�'��N�?��� $PGEs���?�'k����� �(� ��Q� �;\� ��_��@��O�� Н���/�H��}G���s����E ttW+}�;�6�����Z�V��4�I�Y����8� zs]U r�� ����� 襭���?��� � �.�� E-oPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEQ������1�v�ǖc�Tu$�k15?�|�z��=.5IL9�(g�e t4V�<Y(̚��	��Zc�?���Pt�[�Ǫ���	l������ � ܢ����� !�k8�[�v�E��,�2�vE��w��֚Kjr]Fm����q��� :�� igJ�X�t�mj���UA��ɷ�5��q��q�i��X۾ۇ_Yds?�LݻVΟ�}Km�zU�r��1�4���r�~��2���§�4�c�����ق����L���ZF��I]OUa�k��z$�4���L�<��N>C���|��`E jQ\�γ�xM�?�ٹ��o���I�W=��c��Va�׼@דˢX7+o�t��� �� �PO�@�@W�ֱ�.'�$Y�(��g�W����4�ޟjL� :������K��oqp?�����77�Zٶ;6}��o����T^�{�ĐM�z20#�5f��/÷e].Y����ʹ���eI�Mg�m�xpb�]oN_�(qU���{��:**�����Q��̲� ʲ� �lv�T QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE���'�$� �]���j꫕����� �.�� E5uT���I� �� �k� ������ �O�7� `�_���@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@V��ηˤ��w�H���b8��+v^���r 5��ml-����(!A��W
�=��V"����HԵ5=&�!_Q$�C�wU�Z��}��u}EN��w� �Q}���ެk��TK�	�SG�m���Qr��?��_�����蒏*�]Mɝ{T�� ��������n��C�� �n|g��h�G�5���`����L�� X���]�ej~�uY��XL7ьE{n|���8��NA� T�<2�WS�������
�����On��t��[�-����D�7��O�d��a�E�Z� QE Wg�>_�]Ah`���$C%ۂL�>�*�yK�y �kE QE QE b��=�����W�v(�Y�ea��G�j�e�q[TQ@Q@Q@~�o� ֻ�l6iڌ��C��3p�M�ޤ���F�AK��Rj�m`���{9L�x��Ǿ����e�"0��k�@1��rQ��gր:+/J�l�o28�Ȯa Om:�#�ҟ��=��J (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� ������ �.�� E5uU����I� �?�u� ���� �|� $� ���� �K[Ճ��'�� �]���Zޠ�(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��)	�&�2<C�6�a�#��u���̕�{�O`	�W�=�ǡ��6�Ͻ��ۻ�i�=O� � �j?�>  c�-.�Ϸ�YIDo�VQ� �ƀ
(��
(��
+3����i��IdkY���C�a�����m��G⿊|?q�i�tQ5��*������>���Ǣ���)��K'��x#9o<B����.q�����&���u�,^$F8���J	1�g'o9OP��\E���/����h��[�!P<e�g#��q���ӧ5���K�����^�NmUX�a�Y�"vȀdݿ� =.��>'�����uMRŶݪ�P�3������I�Wk�Z���VZ������c���p�|���zr@�=9�b����Iuo��ս���n�u�eM�V��ܜd�q�OY��V��߄�T�t�Z;�ƻX̅[�\p9��8�P��	~(ZJ|.�dn-|I3D����J�`�H�:U���Px�W��͠��L��%癒Tm�َ��9�@��><��⟅Z������w�F����Y��W�Ld�����׷��w�z�� �� �EPEPEP.����u���O�j�����FJ� �����S� [A��S��.b�=����3�.A�� �� �G\����~5���b�"kY�c,`�g��辔�QH@4ٷ�$��,�N�# ph��4K:�dA+�uB�1P@$A�s������W�4��2�>�K�מx��G�ɶ_�Un����B�qmq7�8���chC�,�̌Wr��Ic���00����4�C��B�dPyR@ ��Rיˣj�{�llo���o����H� Uh�X�px��kX�^ ��K�yn^�h��I%��~C�9�|�pH>[�܀vPOռW8x�@��)�+�4�7_���.���E���\}�A�d�c�'��+�mteL�� h�V��@���H3��tݵ�w��E����8��#�O��E��>�n>�b�]/ͳ{���1)����D�o7�,s��$z������-��#�Y\y��Z����2�_)I>�'� ܦ�Y�"	]K���� z���Z�{_�+��t�zd�^n�������M�� V��X
�:�M����}����$�&� Ҷ&2� ������,�H�G�`1�|d~t<�DѬ�"4��66	��8���t�m��\�4_Elc��$�FP�cXH �p@<da�Z&�uYnl��N)� �mS���v 9Br}N99 ���u}kd3s:G�4�� uFY��#'�W,�Cu���5��[�ְL�Ռ�#�0��8 ��j����W���^B*M�W,$�d's1C	�X�q�� ���Ȣ�|),���>��9�����Jҏ�)�9�s� ׮����o��x׿ّ��l�R����M�nU�� �m� �=ݽ�����i>w�_�~�#'�h�����;�w��r6��kͮ�5�]ٟ:��}�ڄ6���8�����)e|e�7�0�Y����K�����PcKqo2�~��ˎ��@�A5����x��_��?3m^=��(4-j�M�P����6gQ�]�I$��� ���8# c�S�F���V�~� u�H�[�쑥�wwpg!y�r���TW�'_��b�-N+� ��3]��e������F0�o�~��k��(���;��!+H�Zp%W_�y�[v�@����q�w�\��OB����8��\����:����-�%ݸ�e�DA�)����iit��<�� Yd�0IG*OБ��@�E QE QE QE QE QE QE QE���'�$� �]���j꫕����� �.�� E5uT���I� �� �k� ������ �O�7� `�_���@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@2S���X���0�V�l/56P쥶���݇\ 	x@ލ���w�9�.����X��@�$��]�<�� &������wWg\��]Ĳ��66ֶ6b9�
L��#��?'���: (�� (�� +����u=7⯊<Cp�F(�ܫ�UPr;t5��@4�
񾖾2�4�]6m3^�y��[���Sf2X���sQx�E�@�����������mG�U�'s����^�YZ���Mz{i�m.��Kl�&x���3��(μ?��fo��V�WF�_���vb���i#��O�&��_�> ��~�ǆ�&.M�Kos�i� 2�c�e�#�Z�� 
(����w�o�;�it�,�d��[�@�y��� &��>J���R��p�O)q� r �~kب�>Լ�����qLn�4ky"������1B���'�\���|y�Mo����/t�Ny%��y�=��6���X t�L��{���cG����o}�ۖ��)��Y˰v�=9�V����S�ƿ���+;kmcE{����Kly'j�OL��J(�.����̞6�O��yW���A&�q���=��t��J���dP"6FB�j� QE QE QE W'�v�����:�+���?��u��Z�����,dta��l��� �oxv�\��A���;h�կҲuXh�J�	s!�<�K��$�f�L�`>���t����U��KW��i���ڥ�Ă`�P�~e1� lme'$0@�>.Ѵ�����!;a�X��P��[$��lgr�Ŗ3\-��]B�H���#�9dEuB�2C���;��� �#Nݰ�aϞLJ���m��m���b$�Ga�)��/$�Ԯ&�k�n#��C1"��|d�>U�,^8Ҧ���!�0�j'�͕� ��t�� ��� ��ByG�(c�H���DE�K��ꓞ�s�B��������ǧ��)��g�F l���\}�����o�ũ\K%��3�����dCs�vv�q�d�� G�������^4[q26���c}0s�������{�q�\���Y��p�.�wf`1�q�f���>��X%�T���*��'�WPDP�ORq�b����}�̳\�:��H��>SI:Nq��#vx$� t�/Ѥ��<��)�X7ț6�G\C��!� ��x���]�Ć���;9���ڬ��Y��ک�x��M����ٝ���8b�FB�ڤJ�G<�Բx~�ɻ��+�+��K�ʀ�:�����O�y ׺��D����Hb3�Q��H `�$�=I���=1w�Ex�);@��HQ�:`,��y�1�����w����aqt�d�ل{H�|x!Hp�;O*	�ó�L�^}�w �$�y�LE1Th���n�a� R���d��x����d���XI�ZI�7FH̃h���QYx��[?:���2��JV+"i#�����#������<s[��A,>SD˱�<q�{�S�Q�H<s���PO�����;���f-�\�{���$��N�q���>ƀ4��}���2�Ŀb��2I��6��g����]��Y���ai��9єeY[r���e?�/�d_x��{뵻�����'�Y���T3�e\'��7P�V�R2���;xUW�+����S�nA��������<�2�}��\����3�u<Vb����mx�D�%��H0'���9b��dU�s�����sq2�X�ڪ�ہR�J7m�A��HxNT��n'X'YUcT�y~ce��769q8�@�,I1�{ߵ	�&���� rq鵁ϸx��O�mo��	��a$���;E4v�Uʆn��`�Vn|3ڔ���V��/�%�a�<���H�
����W��m��0����l"�9�����U,v�� � w�&�X�J�x��M
���dp��;���dd�h�ƒ!�Y�$�&f2[��&"�VR{u���[!�3��&�B��R��H�Y�9(�'$�)�>���0<�K]6A\� �I��v'��4 �<[��{�F��D��m�����S��Q܁L� ��MˣCz��D��>cy��dr�9��5׆-.�w��M����c!�� �8�F}sߵQӼ	��	4w3�C
#�5��r�"Ϙ�=M G���O���KI�n���s��#tć�F�u����|B����D����;'l��qUf��G�X�U[�Z�[�C�{l��<w&"��%�IJ��q���#s��,�å݊��Σ�l�w\w%�I=� �袊 (�� (�� (�� (�� (�� (�� (�� ������ �.�� E5uU����I� �?�u� ���� �|� $� ���� �K[Ճ��'�� �]���Zޠ�(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��(��<E������F%���x���\�A�7��d֜��ko-�ĩ1!y$v
��d�O@swsE���Ë�-�y�U��+���y����h,z�!�f����W,>i�?y��`; jԢ� (�� (�� (�� (�� (�I,q2H���㌓�z} QE QUcԬ%�k8�m��s��K���4j��.!�y I�i����˞��J (���QK1
�d�p ����\D��"Ir��?B)� QE QE QE����_������E����Us�"^��~�`OG�xwN���hK�e���b#�e?��f�h�_������^����5���C�@�l�+r��R,�y�E�����g�!���[֗�������+��$��) �pGG�@�E QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE���'�$� �]���j꫕����� �.�� E5uT���I� �� �k� ������ �O�7� `�_���@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@U-GX�t��MB�`�%p�EX�
 �Es� �_�q��7S)�q|~����� �R� ek�����F厙 S�2I���@WZB�\�1/�y*��5�� 	��1ƞnuF�t�w���`�Z����<�"��y�;\��HI�+h`�@�~"�� �OEn����B?�1	?,�_�x�ndմ�a��lB?�M(�����@?���}��?띜#����{P~&�f���Q-��C�ַ��[U�-����Y6��y�6�B%�S�eR�FLa�0�ҹ+/i��4�^����m��y�;N�7`��p~�	ֽZ�jVI{j�:�VFA�` ��"���K׮|�7VI�44���������AنH�k���,�;D�������VX\:��P�(��
(��
(��
��n�y��Xŧ�~ۨ�Ee�)d��Ir�U����o�n��Z��x��ic)*M�6�!�NU��=�����-v�=.b������msF'`d���$`��=9���\ڍվ�e?خ����]>i��Å>m��RLq�k�OY4�j��u��wot�s4a��I�0� $� ''��u����O���Y��Үfy�����F}�ټ�܅,F{ �׼]��~$�����I��h����5����\�!%�1�s�5��:_��!����mb�5��m��mw
X�ʒ�Xc`g9��O��ڜ���mRE�^��"yS y(Y2 k�j>��$���WS����7�|2'�. S�!d ���M��4�������)n$C��`���@$�ڹ{_�������0Ү#��Gp"��`.�q=?*�۫[�>[�[Ic1I����Wk�{B��������:�Q-��uy��&0���~��v�ğ�����~��y�kk����f�Us������D�/�l�M&�wk��X��#Z�69'r�z�\���E���A{v'��ކ(n�ǖ5ڻ0�ry銧�|5�4]^�R�Rյ9��1X��r$[U#` s�2s� r��5��T�Ĺ���:���|�<ͽ3�kZ��5�c��v�&�m��v�\�s;�3�Ā��� @?N�����)��,Ω�&�%���K�C&rJ����x'�5���5ҵ�n�T���_�"����ˎ�@��0ON8#���>� �*�� �p?�WkY~Э|3��=�I���B��\��� ���@6I(�F����$�zɧQ@��V�W��F�w�Y�Z6����c�\�mSÖ��?o����UF���;,��E�o���&���qs.��B�ڴ�c�<�͈�J�*x=A TQE QY~!֡���=���:�!�4ҷ�ܜ}Oj �� �N���$�a����;v��	H�7��р2c�F���z�g��j��oAZHo�Tv�&�2.NN �V|!�Ka���q%Ԭ�\Hߕ�g?��?�t�����'����vY!�|~>H?���#^O��wo��c�wmoQ@>_�m�[�P�h��?��i�;I���Z�K÷Ѩ�-�-�~K�?��ߣ4����G��0Z���#���9��a��+R���~��P����rx��}Fz�>{^t}b��"y>��l� {+- oQ\� ��G������6���a���;j����J��6��yw�e�.�2� �7��P�Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@>8� ��O��覮��_�?�'����SWU@��� ��o��v��)kz�|� $� ���� �K[� QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE`��U���4+V�nP�wG�o�yy�U�Ҁ7�
oZI3�i0O�ܡ��f���HE>�;��F<7>������)� ���{��?�d���[���)$Q �"(UQ� �@_�� �9�u4�`?����ϏF���S�W���ZL�5��-�p�2$���?��*( ��( ��( ��( ��( ����1�j �,c�O���"��X��|?糶vB}�,��h�Ʒn|#�]N��C�}�퉂C�x�'�� �Kmj��,����~P����ut��t��W[�k�!���v�#�2�=��E QE U]F��b����cd�P�g#?)��d~5j� ��Sע]SռBf�Ю�Xc��Zh�d'9����S�]���b���c5��H��[�������Q�³�Ś|����.$��'�I!X�A� �?֩���:���x���l��6{i�W}���d%�p1�{z���y�.���ʯb�ᡌ���Ib�( �ҍ'��jz��l����^F�^2v�R�ï=+��ǆ���Ri��E-���tې��.|���(`_���;V׆�!{�����m4�8�ڴ�N���iT�@=@�\�~�ħK����E�����F+ʷ��Nz� ��� �d}*��]Jh��{l�t�2A�FT��Ê��?ͯ꺔��8`���0�J%2#�^��jŖ��_x��W���}��C��'��m��YWh�p�=O&�3|8�&���ow�5��K�Hb�5��Ē�~_��=*k��&�4�mr�G�����Y��Ŵ��ڶ4M}7X��%�6�Q�K���Qq��=3�*c�I�x�HԮb������)!�7����#�������VSخ�i�Eo���F� T���2+�x��� �L�5�K��{Im���_4 @��9݂�(m�sަּ>/l��m=-����m��ػc}� S\��[��������[j��Fk���h�m�evÅ��$q�� 6� Ǻ�ƛ"�鷖���t� ���� σ&9�&�U��\�_�i��]S��M�!��������1�KU�o%�ٓ_�N����˷ �F0H>����I���K�� a�z�j2?�'����{v��@}��� h\|B�����{-L�i�.nV�1���s�9ppO~)�|D���jͣ�I-�	��6�t0��);���x��x��n<#{/���5g����nF%����L:�H�՝G�7ww^+�&�cL�� ����0%�����= t�J�B����u�;��4���۵��kl�����$ 8�4 V7�������jj�,g��� |P��ʟc��V�OIԡ�4�]F��b@��I�Ѓ�G������,��5y�i���X5)(7�M��͐�	��[Sn|{�_��@���.�/� ��]��gր:�WV��,�Q�H-Ӎ��bz*��1�&��T��n�������g�6m�0x2?o0�?������ޡ�&��]�x�����Q��=ɮ��� @� ���0�t��E QE QE QE SQ���Z�g�`�	P6��=���@� �.����.��D:YjE�O�����ڝ�!�d���e�.�V���C���������d�Eq�4i$N6�:�zz��t�z�I���żc��rK�7�� _���&�Xx��O�-��u&���V\u18�\{�w�6��� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� ������ �.�� E5uU����I� �?�u� ���� �|� $� ���� �K[Ճ��'�� �]���Zޠ�(��(��(��(��(��(��(��(��(��(��(��(��(��5]v�Jx���s}0�6V�t�{�_Vbw5�&�{����(���e�d]ѩD+� -���?� �i�Z-���}�]���f�,���y>à� ����k����+S�K���#������х�Cu��!�� ��8a�mH�P������@Q@Q@Q@Q@Q@Q@2E���(������a���jm��BzUBʟ]���һ��|K�&�j0����)�;^'�S؊��x��ݶ>,Am"���"���� �ɽs�����������.-g�x\e$��+b85- T+wl�oh���.��8.��W�5 QE QE ��"��|Ac�iZE���մ�%��6�"��o�w�N��W�K���I�F���>�^����!��UK!���F�Z�]^�j��隍�����"H�.���]�� �ҥ��Ue�G��I��-nwN��C�߮09��Gz���/���M���7/����Zk����ۤb\�G�8�=F�UԮ�=L�v��X��c��PI$Q(pNC�>�� vw~/ӆ�i}�Mo�C>��h'#I"�$��7ggڧ_�A�K{�^X�B�R�+�eb��x���W�9��/S����b*����SҊ�2����$̹�a��'ҍ?K��mV�W�Ү�m�ՃE
�?>�tr�� ��� ?�h�mn��#���+�yWtr��Ǩ#�\]��5-R���J�`��X����=��aT(�#m���J�<:�4eg�SJ�%�E�R2���-�6w3�O5�h~����V��Z��X���p��/n��Z,!d`y��� v����ޥ�����QӞ14I0�
��VW��<� �V�fh����2XE i�̚Y�yd�����,x��Zt QMIE��.J�Ny~N��(��+��$h���#U�L3�[XO!�'���碚 ���Zޡ��퇎��V���b%?B��=�u���C�PU}N�L�`��GE������( ��( ��( ��( ��( ��( ��( ���}��h֗���@ܔ�r2:�Gb9f� ��j��??X�G����{��G�����[v���f�v7	<���AA<��Xz��"�>��L�z�s*�>M�;J�����{����kq�O-�н�� }��Pz2����;@ՠ�(��(��(��(��(��(��(��(��(��(��(��(��?�'����SWU\��?�����w_�)���W�� �O�7� `�_���X>� ����� 襭� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�������廻�!��K�#� �WV�6��]L����I
�w&��ow�Ӿ�&�Џܵl����^��O�`|��;+��E�jм6Q�{:A��,û�U�O�Ӥ��pđD�h�(�P: ;
uPEPEPEPEPEPEPEPEP���L@�Q�hQ@$��c�i��{I���i+@��P�k;V��{mgV�D!�w���&v8�ʞ��5��#Y�
 ��U�y���:|l�0[�%EY"���}�z��!ϭt��k^�^����Ie��K���_�<2�C�<Զ?��(�62>�
��sգ� �p?�h��������K�Y�I"p�����h ��( ����{{������ќ܉6H�8c� �y���x���� ��K�F��D-�~H��62�u��E QE QE Vo�5���S�w���� �G<"vb�ZU�����%� ��շ�Zl���t��d`��X� �@>
��t[-.=N1��fhnG�,���#l19��¸����[yS��*�ȁ��d�a���P�A�mof�%`(Ҫ�����E���o��!����g����8�[֜��s� �f��Zu���M�5��3�����hK� �j���^�·R���(��3�s�p��n�g��M8I<�$�S��=��t�����mZ�[ ] �  �Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@�����H${k�rZ��/�����S�O��:���6��Ė��K�	�.�dD�����N�g��DŪ�#�3��e��\I��)�<H9�4(�mV��Yt�M-Z�"�	2tǟ�=�U9�;4 QE QE QE QE QE QE QE QE QE QE QE���'�$� �]���j꫕����� �.�� E5uT���I� �� �k� ������ �O�7� `�_���@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@̨������N �YF�*��U�R4{w�a��a�w���.�p�S>"՛B����l>���Z2���g� g�� (
�  � ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��(0EP��`�rօ�O�h���L��O��ZK)������A�S�[��ŹQ�^٣��M���QOP(�����M�����Φ��8�8�Y��w���� ȆJ����������q{2O�\\�2�ʵ�P���?*� S�O�iq��Nm5pDs�*z���!�>�`�k��#(a�3@���[ɣӵ�Ɨ���F�����?C��7��]mr�����8)��Dq�GPA��\�z&����&�s�mn ��@�Q� zU��;�F���_jzF�w�e١�Ks��_�Ƨ�������uk�{w�x�H��d�d�Y�(����kY.�."���e�ª�RO�)5�jXa���n�r��c�s�S��A�	�����˝Jt;���C� E>�@j^$��[Oi�7ߐRI�� yU?�8?��[�&��gı�(UU 
�i��j�*��@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Z���1\ZJ�jv�d�����ѽQ�?�I��ɫ�y�SAq��m�塕~�_P{��֍s�ڝR_�� E� �b�����'���::(9�PEPEPEPEPEPEPEPEPEPEP�?�����w_�)���W��O�I� `�����P+��'�� �]���Zެ� �?������R�� QE QE QE QE QE QE QE QE QE QE ��j���O<1�n��XIǙ3�"�2rO`	�ZUϨ�����F�j��$�V2��4���k��q���i�2\N�iX���I<v�B�( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( �*QKE r� ��[߇�!K��*XM2��a�K��єt=��]+��f��C�i��+HA��ϴOV$�'�T�>�����SV�Q� �a�z(� �PEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPMtIch�P��+�Pi�P?�{����Y��٘佫g�>�p���z�+���K�/\^	��tGxf!rݓ�oa�ֺ
 (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� ������ �.�� E5uU����I� �?�u� ���� �|� $� ���� �K[Ճ��'�� �]���Zޠ�(��(��(��(��(��(��(��(��(��(��"C�#DR�ǰMbxB'� �n��e+q�����w�?�U� ���'e�v�1W���!CJDc�j�DX�cE
������( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��(���'Y��{Z�?����kz�|cχ?�ݤ���k�kz�
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��
(��)��|z��{�Jp�P<E�U���j�j�ӯ��h̣�d�~�:��;>�ڝʁ���?) oQE QE QE QE QE QE QE QE QE QE���'�$� �]���j꫕����� �.�� E5uT���I� �� �k� ������ �O�7� `�_���@Q@Q@��hX��j�V�6��zn���As<�Ƨ";yR�d�0(N2x5�^� ǫ�+/����C��� �W5 7w�?����o�F�w�?����o�F��� �wx���:��� �j7x���:��� �jꨠWw�?����o�F�w�?����o�F��� �wx���:��� �j7x���:��� �jꨠWw�?����o�F�w�?����o�F��� �wx���:��� �j7x���:��� �jꨠWw�?����o�F�w�?����o�F��� �5m?�Z���m?C�	����%l��I1� ��{f���x�t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ��n��t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ��n��t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ��n��t/�M� ���Q@���'B� �����F��'B� �����]U�难���ޓ�YZ[\Aoµ��N��4���hA#����
MsR� �O�� �M������_�M��v-__ԵJ#L�d����%֠�3��9	
���$�cS���t/�M� ���� �ϊ?�.?��޺� �wx���:��� �j7x���:��� �jꨠWw�?����o�F�w�?����o�F��� �wx���:��� �j7x���:��� �jꨠWw�?����o�F�w�?����o�F��� �wx���:��� �j7x���:��� �jꨠWw�?����o�F�w�?����o�F��� �wx���:��� �j7x���:��� �jꨠWw�?����o�F�w�?����o�F��� �wx���:��� �j7x���:��� �jꨠ#V��e��%�i�[nm�7RVϕ2I���vc=�ޮ��x�t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ��n��t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ��n��t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ��n��t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ��n��t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ��i�Ƥ��֑�YZ[�Coµ��N��4���hA#���W?������ �۪ ��&���}R�u(t�3M����[4�Z����(�$*�����tR�o�ax'�>�Q� aq� ��� ��4� �N�� �i����4� �N�� �i����(���O��_�6�� ����O��_�6�� �����9]�4� �N�� �i����4� �N�� �i����(���O��_�6�� ����O��_�6�� �����9]�4� �N�� �i����4� �N�� �i����(���O��_�6�� ����O��_�6�� �����9P�4� �N�� �i���Xi�2����]?C�����r����1� �� ��x��]�����t/�M� ��n��t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ��n��t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ��n��t/�M� ���Q@���'B� �����F��'B� �����]U����t/�M� ���W����l�X-��.D,���r���u���� ����� �� I-����( ��( ��(��O�I� `�����W+��'�$� �]���j���?��� � �.�� E-oV�� ��o��v��)kz�
(��
(��+�� ǫ�+/����C��� �W5j^� ǫ�+/����C��� �W5 uQE QE QE r��,�N����h�å�K�>�#fr��D�N�
�ԯ'�Z�����b���w���Z4�DA��';��A%��ׂj�׆��MCX}S�����Lg��Kiv*3ǂd*�7B;�*������u=������K���u���0�b���(� �ŭ��u:��a�vK+�q�#>�ۂ>l�<Ճ㛋O�z����iK�7�s��	6��7d`���g��^��V����4������;+ "�1�66�X1�y8��ԭ�5[�{�/H���H=2������-�z)<� �|9�^�&au�[���W6w�u���T��c���!�Y�O|P���ڽ敦Z�� o���O.i�`�C�#�����!>������h�6����h�b�������5���x�����SM���6�f�̊�"s�����z@펣�����U��t���5o�K�h^=Ħ�r�)��z�Ąm�z��[c�7���� ������:qQ����X�5�����vmc���ⶅ���篹�ű�a�8�|5ay�XKa��F;�t�ٕ�Eb�{~n��NI�y|g���#�8��kD�í���(kGR �v��A-����� �ȸӭ��"�K}cS]"�Ɩ�`
��>w�<�߯\:��Ʊ$�2��T�o�CH��7����mw�*����[�-GO�F��4ȴ���[q(�	P�1���
گčcR��7��d�K��iZ�#i�V���/�g8l�U��-O�>)��$�6��k��,H9#(s�=�_|;���3i��W�LY��b�o4�G�8ד����'���w^���I��[j��r���G��8�� P���K�oi�R���ץ�$�"E�aY�0K�� ˓������Z%ơs��Ri��Vz�"�\[#��]F*�����𮋧i�PI{�\5ȗP�Et���H��� �j���>���W�/~�]t�>;h�\�v�ʹ�AbO� ������*�����4�����ɑd~V4;N�ws�c����4}AЮ��NM&+�kՌ�Py~g'�g9�Q�?�4Ǉe�c�T�w�������(�4��4�OM�<7�Z[jP�Q�Ku�)U Ì��?!�	��rZâ���z鵭R7�i��-��S!���9s�Һ������ ����g���vb�>��pG �;�5�����wϪY�ƛ�;�6�|Jğ�s����s]w�|9'�4c<�r\<�4�gg�{�8� '$�� Q@Q@Q@l��T/��g� �n����S}+���J����l� �m�tr� �o� `��>|Q� aq� �����%����G�����[�[@Q@Q@Q@Q@Q@wX�i����O`+���[���O�_J�6����<���$[~E`:�8����O��2�)V���t_��K�KҟY�����12�\F���BN� �H�t��x�X��^x쎣qqb&����ɉq��JU�s�;���\r�M�6�s��Ol��b�7��٘+�>\�ک��8���AM'Q:n��#�n�D��w������i�}cO�"ӣ���Uo.'����{����%I8�G'�`���n4�=(\i1[_�2��y|�@�;��X���砮�F��Դ��n��r̯H2�8e=A��Wk�]KM� ������SOq�\�n�e��hYv����c��o�b���K�.<��0�9��RI
?��@#6���x�j�%�3Z�)g�q!�Y��9�@�z�|u{g�� j�z��?�^�)��8-�w0\8�e���k����Ƈ�-2��U������GB��おO�T�:w��+#W��SH�?���b�C��PrN���@�\O���K�I�n�(m�^CpU�ˆ��q�u9�gC�_��I��N��֋�n	E�^�Q,��b� ��	%���'�-b���n�m&��v��H&�9rx���sV�<	�+_E��z͍��zLZw�sn�$�z�����4�������I�t�e��k��krb�3²�g##��i�˩x�N����KUѵ{i�� jM�Iĥ����>��o�����4;]7Y�j�~�ڜ�W���y�Gn�[_��;�.���f-N�g�����ɊpC��$�G���-+��Z����h�m�j�d��7h��I�� $rjğ��:���C��g�� ef	�i&, �m�FH8�k3��	n�MGO���e�l.�?�Dm{8�UF�\7c�k��5���>+�XCd�Ym?=�+"I�� �G� S� ���@��/uԚ=*;6���a��F̱ �NO<V���5(㻟Ğ�ѭ �k�Y��l����_��5uO�CY��]�*���-D^Z�4+�=��ǥ:��~&� ���W�#���Ok���ƬHǚ����q@����k:]���6��K�L/0(݇U �J�ϥzy��>_h��qy'���N��Y��qpq�����`;��O9�� (�� (�� (�� (�� (�� +���J����l� �m�vu�O� %B���6�6�:I?շҰ�� ^(� ��� �Kjݓ�[}+�������$����(��(��sX��4K�V�9��3#*�z(���q�,��c�n�.�i����%Žݥ���`�Q���A���� �x��׺LҴ+s�*��`r��� {W7�xc�"�5-WX��f���(�"u�����7x�
:d�h޿��GFk������$����S���m��*2q��s��Յ���A<��lZ�%��ڗI3�#ʶ����Pj����uk���e]F4E���2�d{
��1�C�	9�$�՛D�4�}Q��ӡ�{}JкG".�666H�A�"�.�~9���m��]&&���/Z��l1#�O���*r8�y��mL���5Ym���jn�L\.�+���.�4�-.t�^���-Z-f����ޡ^A ����"��EM+�z$ӽ�[�-��/Y@\�OoJ �xo�~6��^+��z��y���}�� �*��`s��߭��e������$��#��\�$S-�J��.Y��-���pᯊ�4��1�x�+���=�na��Y���x�zVƩ�MN�[�������6�xӥ�4�q9�;�dg=��@!�⵴�Ze��3Aڡ�u�P��a��O�F?J�R��g�� �G3i�Ii��Ge�(���u�F>]��'����?�@5��� �:��;��_��r�0`��Gמ��B�
����"������|c�$�,X�)������ �>(��뉩h�d�4����;ԝ&��VE1�{�3�/�� �~�y���k�^�;{�{�%��T�q�0Tt 烊ݳ�i����t��Υbl�M/KKx��3��@$gt��%���xÚ��o�-��y#,���S�� �D�j�|}�(�G�j�V�$��C�O�n ������bͿ�+y��u��׿b�R�Z-�0����,��CM�>�y�?_�n��.���+k[o*4w.NrN1�
��>O�_�m��^}�M6���3�$��1��2;c� m��P����Ksy�<W�ص6bm�}��N�d�� Ua��t�x��T�҄X��]�[�6$�q�|�n�>����c־"��%�X��#���O�D�n�Ӎ�s�T��ñ���ė�wj,��9,�"��2��y ����S�d�Y�敦Mf��_	���w~�hY+�>�GB������Ew��������]đ��A$c��v�� Z�H�W�"���"��-�d�[[8Lf�Y6n��y�;�9�����T�M���:k�$��������0;J�r��׽ z�Q@Q@qz?���+� �����޻J���<W� _��%� uQE QE QE `���I� �?�u� �����|q� $� ğ��� �M]U r�� ����� 襭���?��� � �.�� E-oPEPEP{����e�>� �H�B� � J�K����e�>� �H�B� � J���(��(��(��(��(��(��(��ø񟅭.e���.��1I"��%d`pA�=�?�N�� C^�� ��� �(���� �ס� ���*��N�� C^�� ��� �(���� �ס� ���*��N�� C^�� ��� �(���� �ס� ���*��N�� C^�� ��� �(���� �ס� ���*��N�� C^�� ��� �(���� �ס� ���*��N�� C^�� ��� �(���� �ס� ���*� ��x�-�Ia�C�$l]H� �#� IEP/������ �۪��� T�J�%� ��}� `�?�u]���@>� ���\�%�u��x�>|Q� aq� �����EPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEPEP\d� �T/�g� �n���2�*��	�� ѷT�I����������G�����[V����X^� ���\�%� u�Q\-���E�涾ѭ�����8�ӥ���3�	a:�HL�h���ϵ������
f� �>���h�)�� �h���ϵ������
f� �>���h�)�� �h���ϵ������
f� �>���h�)�� �h���ϵ������
f� �>���h�)�� �h���ϵ������
f� �>���h�)�� �h�����\�}��o����ۮM��칆�E$�� ����u�lUߵ������
f� � ��3�~0� ���� ����&��������
f� � ��3�~0� ���� ����&��������
f� � ��3�~0� ���� ����&��������
f� � ��3�~0� ���� ����&��������
f� � ��3�~0� ���� ����&��������
f� � ��3�~0� ���� ����&�xoV���OM�f�������kl�� �i��G�<��GS@=qz?���+� �����޻J���<W� _��%� uQE QE QE `���I� �?�u� �����|q� $� ğ��� �M]U r�� ����� 襭���?��� � �.�� E-oPEPEP{����e�>� �H�B� � J�K����e�>� �H�B� � J���(��+��@ѵ_x�}GI���u�d��I/�-�`x�'�="��i��gm<�O���6(�ȶ��Â<�L� �]� R�KP�Q^G� ���� ����-w�I� �-@�Ey�Z���� �Z�j�-�t�GK�4���zsCskm��u*�:{u�=R�(��(�ÿ��{� a]G� K&�j����x�� �WQ� �ɩ�:����V��c��^W���]���;w��g��6(�����
���� �h� ��� �*h�.�� ��h�����
���� �h� ��� �*h�.�� ��h�����
���� �h� ��� �*h�.�� ��h�����
���� �h� ��� �*h�.�� ��h�����
���� �kž�晢�y��J���R��5��q���p�2	C@�7�?�xk��V��)j����O<5� `�_���QE��� %B���6�6�9�7ҹ��_�&�� F�WG/���P�� �����Io]mr^� ���\�%�u� QEs�]���[M6�K]1�_Dؒ�'���H9�B� �|K^I��v�j��gE ��k!�S��z)�F���?6������iH�+���P��o��h4�*�h���;��-���'�MYkA+?�#ʆU�4l\` H��9�{q@¾b>����yq%���w�`�T���x7�xcOBe�w.�����\�����Ӆ� 2rqޖ�9��ƌ2t���=Ć m��U�;ylJ� 5!Oi?2K�l:���܁���n}��Z�4��tV(w.Fp}G�&�Kv��C+��ȮK��I�bx �� �`P]+]��<ā�;�q��Ά9��M�yǡ�5�X���k��9{b��K��-wv8$2�*r���h����R�:�G�n�ϗ��y��<��z���H�Q@Q@G=�6��\\K0ƥ�I*�I'�*GP�Ҭ&���Eo�62}  rI8 I 
����A��⍖�p~��N����D�vi;��l���M� &]sSֿ�_�D�=5�e���q<�ܔ�&�>��/�<I}0c����P��ʒ=����_�����v�[:��ҏ��pb���>·�ZC#�<����6:d�Mz�&�J1�!r�l���q��.j*�����⑒�J��e��ٵ��L��Β;���l����|gt��?�K���5��{���j�����V�n����K�13wp���z,Z�Q,��/3�Gt� m��>g� �� ���I!<Ib��gQ�c%��?4_�!�x��4�[�&�2�7b2��Q�J�Xu�˺�!�����?�㞀ן��-J��OrO�����̯��^KY۹���"�0d`
���=E:�y��;^h���^K\�Iϖ;���{���?{�����l����&��C�"����'��( ��( ��( ��( ���{�Yi�	��ൈ�A$�RǠ�=O� X���H ��K@Q@q�� �P�� �M�����θ�� �^� �&�� F�PI'���V�?�����Im[��o�ax#�>�Q� aq� ����W����� ���� ��Wy\�����º���M@u{W��N[&��+��d�h�WH�UTD�� -Td��I���?��r�V�6�џ��*]��)X~�+�(��� �8� ���G����'�\��+Ҩ�5����� D�� +���?��r�J��<��o�����A�m�@� �q� ��?½*� �_����N?��Q�������W � 
��(˞��چ���{�9���Z��R�gl�,`,����=�r�T�
Z�Yx/R��cds]�F��r�V#��5��@k�������W � 
?�� �8� ���^�E y�����'�\��(����� D�� +��zU��?��r��o�����A��TP�� m�@� �q� ��?����N?��W�Q@k�������W � 
�|a�5X�/��8Fie���%w�9�6 8��zG���&���� ��/-|Gh��?�r7� ��^�\Ϩ����oucr-�`�̍������c��>� ��[� �m�������3x���Q� ��Z����:���l�m� u���� �:x����� �Kz�+��� �t�_��� ����QE QE QE���'�$� �]���j꫕����� �.�� E5uT���I� �� �k� ������ �O�7� `�_���@Q@Q@���������E!� a� �+��/��������E!� a� �+��:�(��
��� �f�W���� �;j�+��� ���_��� H��O���,�����,����&�o�.}kN�PfT�t�)f�Ѱ���`c����'��/� a-C� K&�{S� ��� �ӥ�>�=�5hZ=���z֝c;�����"f\�����3�Zu�>5� Y���� �� �j�?�Iτ��ѿ�}�z�yF�� $��_����>ހ=^�(��(�ÿ��{� a]G� K&��� ��[� �m�����>� ���
�?�Y5^����:���l�m� u�QE QE W+i�x�W����"��!-mkpK<y�̠�MÐ67d�Ŭi��E���r�7V*�q�U���J �EP\׎� �YO�	i� �Yt��x��E�� ���� ���T�� �y��Z� 襨jo�<������R�AEP/������ �۪��� T�J�%� ��}� `�?�u]���@>� ���\�%�u��x�>|Q� aq� ����3R�@P2I�@��<���>���{��o��ᠶ�0gr
��#����am���� �F��÷|c�����	��A�y>һ��!_o݅$y�ֵ��.W�H&IF`�4����r0:q@A��ZF<��\�<ԔQ@Q@Q@M	�~IZܤ�$����<G�'<�N��M�����#Zj��f�iq�q�Q�O��=z������|��R��%��r6���s���:>���A}4~`!���*������*�s�C�+�w�#�mR�B;	����16=wZ� ����=��v�q%��b�ֹ���3}��
�� 	/��O�K��h��f�\����9E� h9������^�d��$)��6�� ������}1��7���� �L�ؤ� ���������<��k�M^�̄L��N�J��A��UU�G׿莇�����S���/���;���
���\�������slO�k3 쟘~��U�y�.j����??�z�h�_e���������Xճ?�{����U�_����z?��>����嘎#L~'� �k��/A�O�R9�����kv�1�O���?]���.��W~߅�w~D��yNv�'[��ޟ�̿��x�>]U�k�k{�<0�Y���5��ޙ.V��#���j�8|S�Y-�X� �Db�����t ᇧ���V��+;��=?�~G���:P�N��6謟j3j���@���ѱI1��N=�Z��QE QE QE W����y�i�e���o���*��I��q�ё��l���T���-$d�������2�=0���Z�"����X�"(�T ?
 ͋E}1��7��9�:�2پ�� T���|[}a���[��[�<4��Z<y����ꞧ~�f�%�#J�K�����A�X���Q��v:����� ���y��a�N:j�X��E��Y�o�^0���c�Q�ʏ�G��$��\d� �T/�g� �n���2�*��	�� ѷT�I����������G�����[V����X^� ���\�%� u���w�<o�+�� �d��W����� ���� ��PkK������g���7)`�@,��� Q� g#�i�x������zۢK$,|�1���sqٕ��8��7�?�Q� aU� �;j<%�  ���
�?�Y5 '�$��	������ �?� �� �O�� ���� $V��� 	�� B~�� ���"��H5?�����e� ��E `� �A�� П�� ��/�H��O���o�� Y�EoQ@?�j�'����� �(� ��S� �?[� ��_��[�P�$��	������ �?� �� �O�� ���� $V��� 	�� B~�� ���"��H5?�����e� ��E `� �A�� П�� ��/�H��O���o�� Y�EoQ@?�j�'����� �(� ��S� �?[� ��_��[�P�$��	������ �?� �� �O�� ���� $V��� 	�� B~�� ���"���յ�j�=��{k�klo��[p R���v����c\���X�o��k��v�6�2�� �f�W���� �;j����u���� �ۺ�g� #7���%���U���� �6�� F��]\^�� #��� ��/�$��Ҹ��GO� ��_�Io@EQ@Q@Q@>8� ��O��覮��_�?�'����SWU@��� ��o��v��)kz�|� $� ���� �K[� QE QE^��=_�Y��R��� ҹ�R��=_�Y��R��� ҹ����( ���Fo�J?�#���{?��U� a(� �ڀ4�	� "�� �KP� �ɫ:� Ú�����-8������f{�YQa�>���D~�q�=+G���,�����,��Z +��g�5�N�Z�̋Nx5]!4�{����`g���Nba�}ڜ�~ �7׺h����h��̘���b<��>F��t�]�z��g�Ď�������(e��-הi� �N|%���� ������4� �'>� F� �����QE QE p~� ���
�?�Y5^����:���l�m�Q���x�� �WQ� �ɪ����y�� �c� �n����( ��(�ӿ�!�4��+]^U�m/~�A���.
��dx��t��h��<�|���K�y���v�`Y��iQ@Q@s^;� �e?�%�� �d5��5��S��Z��C@	Sx�I熿�k� �����	� $��_�
�� �K@Q@l��T/��g� �n����S}+���J����l� �m�tr� �o� `��>|Q� aq� �����9d������e��FèiH�H�XV�� �����IoW|g� "�g��l}>�L�����b�Aj��'ٸFNx�Gn�������͏;��o]����� �U� (�� (�� (�� *��BHA3���'8U �����H��^�?;O��Ȃ}�2��#|�����<; ��/�/����QX��������d?����� �&��u[�TD�����
������r��<׌=Dq�J��t��q�������}w�@h�~3^����������Fv ��+��H�#W��[�c��2䖶C�l���;��r�������5'<.�h���6�/�9�Wq����/,���q���c�W=�[y�	�|���S<%}���:��/�#c��)�u��c��$��ߊ��"��iբ��]~k�G�O��O�O�jڛ�D���Yv������3_��jm���no�;�wZTg�����O���>��Yټ���G�� ``W/��}���S�������}(:�.�O��T�)-���#1��c�NI5��.f0]�Hڬ���+�$($� �Z��uԵ�N+q�x#@d��N}vF��ȸ������(��'$���4t��7��Gd8Cq�A$aO����]s�<��[#��u�?]�?Њ�+��
(��
(��
(�/jSi��f�o�m-O�d~7�F��)�+Y��u�CZ'0!66^�Z7������C^�����Z�r�W��kt�E34KV!N��s��Ҿ����O����]��ƃ�@��-w�����/�su��;#07`��<ץ���ak�J���k[�ԉ��Y;�|C�;j.f��s�G2.�`O�Cv����.����3e�/��:� �ߜ��T�>��Ǧم���e��U\�If d��Y��'�C��wN��_��3�ߋ��^p�YJ
ɷe�v)h�5(���a\d� �T/�g� �n���2�*��	�� ѷT�I����������G�����[V����X^� ���\�%� u���w�<o�+�� �d��W����� ���� ��P������_�#���_��� ���� ��Q�����G��W� H�����.��+�� �d��EPEPEPEPEPEPEPEPEPX�o��k��v�6�+M� ����.�� F��]����*� ���GmV�=� #η� `��wUl� �f�W���� �;j����u���� �ۺ 뫋�� �t�_��� ����W�� ����� �� I-����( ��( ��(��O�I� `�����W+��'�$� �]���j���?��� � �.�� E-oV�� ��o��v��)kz�
(��
(��+�� ǫ�+/����C��� �W5j^� ǫ�+/����C��� �W5 uQE ��� ����	G� �v��W�K{�����U���9�{}2�tt�,	�ѣ��:��	|%��i�,�z��4�K��+���^G�n�#*H# ��5�� 	߃� �k�� �c� X�Z� φ�� �;��5G�$V������� �P7�>�����mc��ﺱ�V�`��-��B����W�>E
�)ЕT`�B ��b�Ek� >���?���Z� φ�� �;��5@���?���� 0� �U�i�|$��o�o[�Z� φ�� �;��5T�Dj�ckk��&S�YI��&�5
�1;�P�9'� zMQ@Q@�����º���MW�=� #η� `��wT|;� 7�����j����u���� �ۺ 먢� (���wQ�����/J����Z��I-ի����P�,�����'����������Z�	�� 䪉u�kz5��}�][_�=����$.��YC38��z �k5��ϗ�E�)�%`�P��+*��?�����@�b�(��\y���|w� "��KO� ��k��k��,����� �,����'����*�� E-CSx�I熿�k� ���:
(��8��_�&�� F�WG/���W9/������ �۪��� T�J ��?�|������ I-�O�ֲ�xKT��w\-�K
�ȟ:��+3�� ������$����(�a�tT��(�b������2pq�9��]RJ�q��9�w§�?�����d͸����bǲ�� �~��m�ZK� -`S���,)1����fn�r=h�Q@Q@Q@V�A5�����Jʍ��Ys�q���$�v�Vj�l�w&Ukya��B.������^�����c��x�麐zGls� }���]s�A���6�����N�=����=��O�e] �x��W����ޛiO�̌�� "yC񮆳��0k:%ޟ�yO4���rQǺ��⽋	t�AG�U�s�G̿Ϳ*��L�X���+��x��,�F����O�����M���=�ť����
H�U��AE}�C����?��YJx�����v�ΐ ��ֹ����0w!��]��Yc�(�Z�η�T|�����0�U���g�|�7u�u^k��6�QЭ����}�^G�V<7��#c�Կ����|;��_�L$�]���?�,~��N%��u!�?�W��#C���;]~?�~+�`�aP�7�Z�����>�f���O�q��,�ܓZ�蹼`�Q|���םx��&赝��ø�?a����������~���'Qr����x��&쵝�b�p�?�� ����~���}�0#�S�PGUA��b?
��>��T� ����<�z��_E7���PG�X�(c�c�Q�������բ�Ύ&�O����w~����O�k^!�(��m�X�U?��?
�k7@���ZX��dѦ�� ���-#�,X�5�^��EPEP\f�7���J�}{�FO��� ����˸l,���p�AK#�U'��xz)�I[��+w|�y:����� ��(�K���SY��F�����
-�n�M���e<�@�犿��N�K۽+P�\Mn�4w;B�#r������  �:�/�9|5��*���a$�\ۙ>л���#���9��V������Os*����T �Q���$�k�r��$��x�z�s	ԩ5�����,[����[b3m�������X��c{��j�<i$z�����$7����� �@}�����d(�� +���J����l� �m�vu�O� %B���6�6�:I?շҰ�� ^(� ��� �Kjݓ�[}+�������$����?� Ǎ���u�,�����;� 7�����j ��o�x��«� �v�xK�A_����j<� �(� ��� ��� �E���u�,��7h�� (�� (�� (�� (�� (�� (�� (�� (�� +M� ����.�� F���c��P5����ۺ ˳� ���_��� H��ׇ��y�� �c� �nꭟ���*� ���GmV�=� #η� `��w@uqz?���+� �����޻J���<W� _��%� uQE QE QE `���I� �?�u� �����|q� $� ğ��� �M]U r�� ����� 襭���?��� � �.�� E-oPEPEP{����e�>� �H�B� � J�K����e�>� �H�B� � J���(�����x�UҬ�iK�	<bM^@�YC�lFp}MZ� ���?� �� �q/� #P]Er?�����?�%� �j?�!�O� 4�K� ���Q\��$>)� ��� �����H|S� @� � �5 u�W#� 	���� ��_�F��� �G� �Ŀ��@u�� �C�� h� �8�� ��gÚ��抷��%��|�IJdP�J�1U�%3�u�Z(��8?� Ǎ���u�,��x{�G�o���?�6��w�<o�+�� �d�{���<���� ѷt�QE W3�� ���� �.� � F�WM\Ϋ� #��� `�� �i@Ջ����O�
I� �w5�X����� ����Gs@Ua�-��h�2�� ���9��ӽn�U����x� Ѣ�.��Is4���l s���NՅ��S��Z��C]-s^;� �e?�%�� �d4 �7�?�xk��V��)j����O<5� `�_���QE��� %B���6�6�9�7ҹ��_�&�� F�WG/���P�� �����Io]mr^� ���\�%�u����-���G�j6!��}���g׀�OFQؚ��:�ͧ+�,�uKwK�ds��AWM\<Q;ŚΟ�GpSP�văl��б� �����% r�%Ѣ��@}F����}���?�;��z�a� �(o�N�� C^�� ���?�;��z�a� �(o�N�� C^�� ���?�;��z�a� �(�>;𤙷��zL~lo���o���8f9<�|�qϽmK�Zf�5���wO����%��I>�y8',�^瞀�n��Qh���<åZ�zy�樟����X��}���b;xG��3�Vh��
(��9v������n.a�J�$H/�G�la&\�8Xv�o�9�y7��ڶ��}����+�C� �!�}�n� ^�� �-$������^�Ŗ�Y�;����2� ���Gso�x�P�ád��bja�*�� �ά2���I������� �J��� ���}��r��d��e� �6����ubj�δyeM}����:ޝ�_�w��V�D$��Ur8�I��+�-|a���G�+�����s���]��KB9�h֫�۷S���X|�x�eӢ������nKY���GG�J�?���k�F��m���� �}-Ep��iR�,Y��8��rB�����<>��������r�� h�|�=����s�z��g��ڼz�N�h��b�r�3��M��*������j��K�.��0DΨ:�rp?�<;����{6�`�D���.ߋ��Ӎ8����f.�.��Uݿ��Ӣ�*�`��( ��(��Ğv�i��]N� q� L�2I�F_��_���}�{u���-���lUU��c��ʎ��Z��O��P�(,����O�����U�^]�Zjz|by��{r�L��S��`Tu� �zV8�QR���+ha�ucFN����h�*��R�N����y��<��^9H+�[ �r�1Z�GPZ"���p!����
)_���]R�֭/ol����c*,ΦId*Tp���1<���1]v�ۼc�^�cӠ[8���I� ��3Y�^tS��#�x��RīH�  `EWQ�QE �O� %B���6�6�:�'� ��{� `�?�u@$����X^� ���\�%�n�����������G�����[PY\�����º���M]�p~� ���
�?�Y5 i�7�?�Q� aU� �;j<%�  ���
�?�Y5� ���U�ړP�����ڮ��鳹���0Y�br�D;�샯$|��EEku��WV�$�J��U�� Դ QE QE QE QE QE QE QE QE V>�� %Z� �]�����5}\�m-!�V�s�mj�Ws�(�o�$kC���k���֥tC]\���gj��\�/�'$�@9�?��U� a(� �ڭx{�G�o���?�6��� ����	G� �v�k���<���� ѷt�W�� ����� �� I-봮/G� ����� ��[�QEPEPEP�?�����w_�)���W��O�I� `�����P+��'�� �]���Zެ� �?������R�� QE QE W�� �W�V_������/� ��jԽ� �W�V_������/� ��j �(�� ��� ȍ�� ��襩-����Kj�v�<�	��U�7h��V��=@��� "7�� �m� ���|#}i��:{���-m�ԯ��<�s{0c����?�k�'����� �(�f�� B~�� ��"�?�;��z�a� �ŏ�<9��%���*��L���9�2p��x����[� �?X� ��_��G�5������ e� ��V^��MF�[}SZӬfeޱ�]$LW$d � ��@��5������ e� �}�[� �?X� ��_��[��?���� 0� �U��j�v�l�:^�k}�C-��*� eI�{�7��Ū�Vz���xÌ0VP�8�V�	� "�� �KP� �ɫ���#x�����)ks���,�����,��:Z(��8?� Ǎ���u�,��x{�G�o���?�6��w�<o�+�� �d�{���<���� ѷt�QE W3�� ���� �.� � F�WM\Ϋ� #��� `�� �i@Ջ����O�
I� �w5�X����� ����Gs@Uc����H��n]��G�lV=�1Oz�4i"�����4z��SE:�D�s��3�W;��S��Z��C]P��4�I�@�+�����)� a-?� K!���	� $��_�
�� �KP��� �y��Z� 襠��(�6_�*��	�� ѷU�������K� %B���6�6�9�7Ҁ0|� >(� ��� �Kz�k��?�|������ I-뭠�?��]KE��
��)��3��*�?�F������χo��`��	��	(߃?� f�T����4�K�]�|K!C�I��#� QE QE ��3�U$���xxxj2�Y�IZ���+�F��F?
���ՄZTd�uI��<�l����]�"Ɗ��Q@
�`�@��( ��( �\��#��OL�kx��18x�(�Wꦻ��ȿ��ggv8�S�6���ŗ��(e� � [��( ��( ��(/P��CZ�t��-�ڦ��?����]�r>���&��#�[*i�p<���A���� (�� (�� (���h���y�$Q�wv�I4�^���\�9�M�[p}$���)	�j+���w���T��� yo2��x�l��4�}"K�A��S��p�<ϸ���ؿ��������M+T����v_�ݲ�w�C�����>��/5�g��ƛ�ݴ��2�gk�M/��c��mB���3(���°<0� f�ȒR�i���\�[`�c�y�͸�8�k��\C�+&R�]��OUi��A�o��^�%�+Z��QEPQ@q�� �P�� �M�����θ�� �^� �&�� F�PI'���V�?�����Im[��o�ax#�>�Q� aq� ����W����� ���� ��Wy\�����º���M@~� ���U�ں��� �(� ��� ��u4���0�S˦kZ���d���@�=X	b}�� 	�$�� �cQ� ��\� �V_��]��1�� ��߫/�G���G��s��Y�=ttP9� ƣ� C��� ~�����F5�u���e� ����@��#��:����� �z?���q�?�՗� #�GE pZ����\h����a��鷓|6g
 �L�@9�k��5�����^�m��e�JK�/b�ohP�T�A�ǽv�2� ��� �U���ϋ��K���a� ������G��s��Y�=��j?�8����� �룢�9��F5�u���e� ���1�� ��߫/�G��� �?���q�?�՗� #�� ƣ� C��� ~����:(�� �cQ� ��\� �V_��G�#��:����� �z���#A�Iy�3�^^��^]28u~UUU��9'�$��E p��3x���Q� ��Z����:���l�m�U�� ���_��� H��ׇ��y�� �c� �n���/G� ����� ��[�i\^�� #��� ��/�$����(��(��(��?�'����SWU\��?�����w_�)���W�� �O�7� `�_���X>� ����� 襭� (�� (�� �{� �������)�_� �\թ{� �������)�_� �\��QE��� ��� ��� �KRi�mޫ��K{�Mr{�Y�(��jm)R�X��#8=j?� ȍ�� ��襭�Ȳ� ��?��j f��C� �����Q.��;�oF��,t�[k��v��$��0KP�e9�]m W/����>)��4�]:��+{v[�ׁ��y�#lN"Q�Һ�(������8�� �j׆t�Fɵ{�R;X���+Y�UEE72!'1ӽoQ@}����?� `�o����O�_��Z���MX~� ��� ��� �K[�� �e� �%��d���E��w�<o�+�� �d�{���<���� ѷuGÿ��{� a]G� K&��� ��[� �m�������(���oi��������]"���kv
�K��H%��+R� ��	�?羷� ����;R�xCI��-���BY혼&�S��Q��Is��g�n�@eY��� ���+V�[M���Dۜ���͸���8��*�w� "��KO� ��kz�)∭�Ǟ��m�p=0+��,����� �,����'����*�� E-CSx�I熿�k� ���:
(��8��_�&�� F�WG/���W9/������ �۪��� T�J ��?�|������ I-뭮K�� ������$����
(��8]:/��cY�Oɹ��)�� ����jU��/���;�}>c����� ��X��(��)�4gv
�2I� TҢ����y�J����?�Q?)k��o��0���eR�j���g�W��q�~�PEPEP\� �m$����ź��e��GVh������*�(�@�Gso�x�@�ád��4����2��������eU5�@Q@Cyu���s��`��s�2ASVN��Ο���.�9�2\�&}��_�������K��w2����,�dq�#�nQE QE QE ���c6�o�!��0��� 7L~�O���+���[�jͽ��϶=�f�-����� �Q�32ĎT�K(8>���zޢ5��4���Ʌ$�y�2�m����䓞���������Λ�Z��d�(�#9RN#�pr>�ʱ�%]��������*~���o�(omm�t'~�:ڜu�ZS� ~�� Wx P  ��
/�/]ޞ`���,~�i6���A� �0�º�B�(��(���� �^� �&�� F�Wg\d� �T/�g� �n����[}+�������$���?շҰ�� ^(� ��� �Kj �+����x�� �WQ� �ɫ��ÿ��{� a]G� K&�?� ���?�*��Gm]Mr�� ���U�ں� (�� (�� (�� (�� �e� �� ����q������ GG]������� �o�#��3�����c������(�� (�� (�� (�� (�� ��� �f�W���� �;j����u���� �ۺ�g� #7���%���U���� �6�� F��]\^�� #��� ��/�$��Ҹ��GO� ��_�Io@EQ@Q@Q@>8� ��O��覮��_�?�'����SWU@��� ��o��v��)kz�|� $� ���� �K[� QE QE^��=_�Y��R��� ҹ�R��=_�Y��R��� ҹ����(ϼ� "7�� �m� ���<	� "�� �KP� �ɫ���#x�����)ks���,�����,��:Z(��
+̼I�Zx�Q���b�ӷ���Ԯ"H��� �#���Ǒ�y�M��(�>�o���� �m���Z��'��/� a-C� K&�?� ȍ�� ��襭�Ȳ� ��?��j �h�� ��;� 7�����j����u���� �ۺ������ ���� ��U���� �6�� F��]EPEPEr�}� ���>Z�m&���|�k{�i%��<�3�)#N3��օ�cH����%�$3DpI#v��<dnF��Ƞ(��
�w� "��KO� ��k��k��,����� �,����'����*�� E-CSx�I熿�k� ���:
(��8��_�&�� F�WG/���W9/������ �۪��� T�J ��?�|������ I-뭮K�� ������$����
(��)j�U��`�w�<��W9Z7�2�e!��:�+�,�m�k{�7������f���Mq�`
�,�FA�����
��/M�ﴋ)��_Ka$��R�g�T���mq�8�����1.녷ӗ�oj� ����"[)��/���� 畖�x�?;�� �k���w�?��^�O>d��ԟ)3��� 	1���xn�>�3����� s��Ҽ���_^������� }l��ի����i����#O3?����DxL2 �D��d1��9� ���{����Wy���v'���� �5M��j�="{[o,�;]˨ޟ)�0ȠyFNO�c?s�v��c�Q*(T =)�Q@Q@Q@Q@o��t��[�隵�y�v�%�b��,�K�Tw?7���?s &�!�w������_��� ���f��ȧ�5+�D�9�,n͹�]��w�$�85����0��&9ݪ���{� ����=ޛ�~��/L�_;���󹎩di7=<q�M� `�od��y-t��'H����6� ��o�=�Ks�ƞw��t�3��Z ɲ�-a��Z��w�hs� }�x���~63\�wֺ�w~t�h/���H�`�y��w29�9$V_�=���x�� ?���<� �c����jV�T�j1]Ƣ�ͪ��	���6Hb�|��� Q@Q@Q@>%՟E�n.�P�M�mc?�3��>��Ϡ��=+OM/K��G/�&F�#uf>�O���� l��D�6z0��{�_��6����/�M�iwB�� W������U�=	�����-g÷z�Դ���^5�d�"�����
��y�#��e�� �3g��:�ȹ�1�T{Q2UrI$��9$�a]r$�����8�� �ЃY�C���k(��w�?�S��n�Dk����e{���S���N�A�}.]'���\��I���3���p=���(�̂�(��(���� �^� �&�� F�Wg\d� �T/�g� �n����[}+�������$���?շҰ�� ^(� ��� �Kj �+����x�� �WQ� �ɫ��ÿ��{� a]G� K&�?� ���?�*��Gm]Mr�� ���U�ں� (�� (�� (�� (�� �e� �� ����q������ GG]������� �o�#��3�����c������(�� (�� (�� (�� (�� ��� �f�W���� �;j����u���� �ۺ�g� #7���%���U���� �6�� F��]\^�� #��� ��/�$��Ҹ��GO� ��_�Io@EQ@Q@Q@>8� ��O��覮��_�?�'����SWU@��� ��o��v��)kz�|� $� ���� �K[� QE QE^��=_�Y��R��� ҹ�R��=_�Y��R��� ҹ����(ϼ� "7�� �m� ���<	� "�� �KP� �ɫ���#x�����)j_x��DҦ���UK��/\����T����C$eH*��{�yEs_����X� �%�� ����y��$�� �T�k� � ��� m���zEy֣7�5[�ٮ��JM��}G��s|�>h�B����9��?�;�?瞱� �K��5@-��w��=c� ���j��N�O������ �P��F�� ��m��R��?�Y�	j�Y5c�R	m���<o�i�$��ᕄj � �ǁ?�Y�	j�Y5 t�QE p~� ���
�?�Y5^����:���l�m�Q���x�� �WQ� �ɪ����y�� �c� �n����( ��(����M�Y� dir�f�2V���ͷ���l�A�;� ����ip��T3��d��bK3��1$���E QE �x��E�� ���� ���K\׎� �YO�	i� �Y %M�O�'�� �U���Z���'����*�� E- tQE q�� �P�� �M������_�M��r_�*��	�� ѷU�����������G�����[�[\��� �����Io]m QE G<�[[�q4�Q!wy*���I= ��#�t�i�:��>�c=�R���]]�dWk2(� `q^�讌����
��Ey���4	kCO}&�X^�Z��ۦ����ܡ=FW� �L���v��-�}��P�R�!�֛� 	� �������Y�V�>���� ǫ�UU*(U ��<���	\� ��������"�u� ��� �����E�J�����O$�m�X�.�S�PRHˆ?6>Z��m���.�[¥��a�O�z���6����A��c��
Z�?��By�� ���X�� %Q@Q@Q@Q@o���Yҭ��O|m�dI_R��#�4!��/�h�S�˜��6Z5���x؏��V�o�IW�»��V���|bK{W��o6�[���?k� 0�� �<=&�s����|63#�-�5V�U��v=�����*�y�Ņ�?��Ŀ��%'�'~�� ��[���Da���=?J�j(���)s�>l� �_�0����Z��h��v�M8�Os$ֱ����D������< �v�3Z�����B�eh�Դ��[X�I�������E5�X��i�YY�"��q����@(�� (�� ++�:��4yn�1-��9Ǜ3p���$� �ի\~���x�=V`Ԭ���of�y2��a�n�dc�S u$�3I�� �t���C4ę'��e��gs�bO�J�[ϥ��R�R�sKs,��p&FbU�������j��u��[K�-��p�ױ�]��9���H�a�t�4I"�8u~��z*�y[=,�2�__�B)�mN��X�6����Zls<��� ub
�����A�u����w���7�L��bLb8����� �X��ym� ���4U���u��A�q��d���
��Hǖ)U��Z��k]�e��EUQ@Q@q�� �P�� �M�����θ�� �^� �&�� F�PI'���V�?�����Im[��o�ax#�>�Q� aq� ����W����� ���� ��Wy\�����º���M@~� ���U�ں��� �(� ��� ��u4 QE QE QE QE�x��?�/� aV� �;��>.� �/�?�����?���� �*��Gs\g���%����� ����QE QE QE QE QE��� ����	G� �v�k���<���� ѷuV��Fo�J?�#��^� ��[� �m���������GO� ��_�Io]�qz?���+� �����ހ:�(��
(��
(��0|q� $� ğ��� �M]Ur�8� ��O��覮��9_� �?������R��`��I� �� �k� ���� ��( ��(���z�Ҳ�Ȥ?�!� �sV���z�Ҳ�Ȥ?�!� �sPQEP�xS�~��v�oq�*)���I#��5da�' �ڶ?�2���?�E� �W��@}� 	����d�� �:/�*��L�-� C&�� ���U�4P��e�o�4��� ���/�ɣ� �t_�Uz���x[��M� �� �� �����2h� �� ^�E y��&^� ��G� ������}4W�"K����"0eu7sAA溊( ��(����x�� �WQ� �ɩA�t��j:u���WV�@�qx�24o3dm���zt�l��4����W*u��h'���%Ē)�V��:�V~٭� П���/�H�_�����?�%� �j?�!�O� 4�K� ��W���	���� �� �>٭� П���/�H�_�����?�%� �j?�!�O� 4�K� ��W���	���� �� �>٭� П���/�H�_�����?�%� �j?�!�O� 4�K� ��W���	���� �� �>٭� П���/�H�_�����?�%� �j?�!�O� 4�K� ��W���	���� �� �>٭� П���/�H�_�����?�%� �j�����\����Jҭa�]��,z���X�IH
`PIَ��K��o���c�� ��El�� �O�?���� $P�M�O�'�� �U���Z��f�� B~�� ��"�	��i��������]>fM��u�U�G�zP�Q@l��T/��g� �n����S}+���J����l� �m�tr� �o� `��>|Q� aq� �����%����G�����[�[@Q@U�t�MV�[+�D���rA�9� A�TP;� N�� =���^� ��?�	�?羷� ����;]��thna��Bv�đ�֧sp��F�$����$py�E QE QE QE QE V-��4�B�K�V�+�B��P��I��XD���O8 v��(�� �'H� ����/�������[� ���� ��� ��t-?E�͒M�NA�[��'��0y���d��Ң� (�� (�� (�� ����P�{k�hnm��E4aվ��\��[o�B�.t�H$� H�� ��G�2�ꨠ�F�D�0,�<����iV>� � v�:(��(��(��(���� �^� �&�� F�Wg\d� �T/�g� �n����[}+�������$���?շҰ�� ^(� ��� �Kj �+����x�� �WQ� �ɫ��Px �-�Z��Y��k�n<��ՕGi�-��z�@/<5��Ou{�i�7���h�큁�FO 
���з�� �_�Ml�u� Cv�� ~�� ���Cn��n�?�ݟ� #�?�!�� �oG� ����?���z?� �� ����!�_�7k����� ��� �6����s���� �= c� ��o����� ����з�� �_�Ml�u� Cv�� ~�� ���Cn��n�?�ݟ� #�?�!�� �oG� ����?���z?� �� ����!�_�7k����� ��� �6����s���� �= c� ��o����� ����з�� �_�Ml�u� Cv�� ~�� ���Cn��n�?�ݟ� #�-{�h�V����"��f�����-��T2�������k{mͻ�|S tl����L��Os5��x�\g���	�h6�FL�?+��֧� �6����s���� �= c� ��o����� ����з�� �_�Ml�u� Cv�� ~�� ���Cn��n�?�ݟ� #�?�!�� �oG� ����?���z?� �� ����!�_�7k����� ��� �6����s���� �= c� ��o����� ����з�� �_�Ml�u� Cv�� ~�� ���Cn��n�?�ݟ� #�?�!�� �oG� ����?���z?� �� ����!�_�7k����� ��� �6����s���� �= c� ��o����� ����з�� �_�Ml�u� Cv�� ~�� ���Cn��n�?�ݟ� #�m���N�������K��g
 ��x{�G�o���?�6�� �6����s���� �=^�<6�-���jw��Q�=ЈmH˕ F�:��sڀ6��� �t�_��� ����W�� ����� �� I-����( ��( ��(��O�I� `�����W+��'�$� �]���j���?��� � �.�� E-oV�� ��o��v��)kz�
(��
(��+�� ǫ�+/����C��� �W5j^� ǫ�+/����C��� �W5 uQE QE QE QE QE QE QE QE QE QE QE QE QE QE QE q�� �P�� �M������_�M��r_�*��	�� ѷU�����������G�����[�[\��� �����Io]m QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE �O� %B���6�6�:�'� ��{� `�?�u@$����X^� ���\�%�n�����������G�����[PYEPEPEPEPEPEPEPEPEPEPEPEPEP\^�� #��� ��/�$��Ҹ��GO� ��_�Io@EQ@Q@Q@>8� ��O��覮��_�?�'����SWU@��� ��o��v��)kz�|� $� ���� �K[� QE QE^��=_�Y��R��� ҹ�R��=_�Y��R��� ҹ����(�ռKs�����-$��H_iy�ܪR>\o+�v`G�J�B�������[���/�'a��}�ʧ
p\�H��H��4]6��;�(d��n�Yr~S����FzET	�~@C�� ��`�ŰGq�$zH� c�'��ս�pɃ���cj[�����a��ޢ;�9�\�����cfg���?�B�M��Wi`�n�8����Z%�;O�[H^F�� � ��@��6�D�gx���l�ܘIcPAvdv��.}8�@����5�����{�1=d(�Q�1��jOk�Zv�md'W�H����5f ��cߵE��N�Y=�],VR�D�j�$���%9�+���GH��eE����G��b�#�{���9q㋛�Bhl�� 2�J��>�H�#��O/np1�8�ں]�_�_J��dk��"�FN�����֤]I]@_��l.�Ic �۟�ߗ=q�Jς��t�3S���70�j���!C=ps�L� ���<6��Wb��R9��h��H��mpC����X�ޠ���vV�#%��ַ#�*$��?) ����hb9�]�I���p��=0�7��xcC3eZ�e�$�`�_�Ѳr: �O	%�m(�ZĪˀJ۴��U�?Z�g���VK![+�����W�?*I�"DSϒɸdI�7m��q��,,�61��C�<�3� �{�`�����%�����9��^AN1��Yq�1�(t+ɧ�T��̍c|�	VVD�%�/���|A�'������Kg���S��~����#�����(t�?L���i����c7I$��<�ȩ�?���,�:|I3#��yfPU[>�I�8�@��Σ5��V�]���>��R�,���OfI>�t�&�s�B�"������y.Y1���@=$�2k=L�0=��4C�k8��:)$��S�c+H���Q[	�̔����19ª>�PU߉�m�+�K(������g3)�o+��G��NO��3�� 	��q�B�Y�k.�i��E1��e�8r��UoN>��M
��⾻�����& ���z�H�Ey�i�K���� ��J�V�}2 S'�5=-ݤ�;{{���J���~�����ҳ5_jg�$�d2Xl�!8`�]y%������Z�C��e��v�y%�M����T{d�}X���6��%f{�%����wD�u�����PEǋ��d����q��W�r�H<��9c�t�q֯�{]��.e�����Agoz�L�A�_09Q�1�nEh[hZU������dO�!��Ϯ틟\
%�v}=ⴗ�H��Cgj�͏���{ėZ]��ZY�:i�?o�2�c&2\O��v����r7>!���{�B[���{q�u����hU1���y��w�h��[�����!$x�x;q�FFpx�X4;��b��Y���_��sߝ��
 �g=喽a��ܵ��tוݻKF���p��1ַ�|5n�w<�%-�Y�U`����U2��m�EP/������ �۪��� T�J�%� ��}� `�?�u]���@>� ���\�%�u��x�>|Q� aq� �����EPb�m7H����73D�HCm�s�~��Onk�4�k�yȳKh�o����HϙB;�����#��\�Z�YMf�j����M��X�/=��=��ƆФM��2 � ɟ���]���z
 ��Z����)m>^��\�,����I&Y2���;G8&���;�m�i�ie���ڬ�W�f�U,�Bg
	>���4hv�zm���n��P@|�-�F}*����4�\���{Q�)�#��L2�{m��L�@��߉n&���m�zb˺,�I*�(?!�� r��n�ڋ����5�#�ZGp����U����lCZ=�()9������ԱæhE��� 2p�&8�Q����kG�� �#�qR�E��]����:c�l�qڬ��n��m������`2]8���0	�J�zֺxc�����f���B�.1� �G�<V�zu�/�m4M#!
��.GԒM E�jK�hZ~������;�9*Cc=��O�o�����v�u+d��Ars���=�|�)��x������m&��=J�����m�+m\z��ȩa��n�Ze�4�3b1�6����l��5��}���L��Oq����E�# @#&t?�:V���f���p���{W���ʕ��}�PO�4\�i��Ȍ���Y'M��� G��1��U����3K�����+[��W�9�v',qӞ��F��}@^�[_G�>�$n���o$j�F;���oz�/j�J���v��[Z���&�)r@C�Q/��nj��S]_i��7��3�r� c� ߎ�f��Ix�mm���8,���,j�	�U@��(4-J]WL3�B���[ȑ�e�� ����X�,�#I����[=�ō��1��,�s.�m&&q���}�똝��w�,����f,͜�I$�O��ֳ� h]�Z����w���d/���h���6��ڃ�nf��Wn�s!?(傕�l��Wo�^M5ίg3���$=Y4�����QMԴ�.����;$��)��P6��>�Fߡ"������~���\�n������
��GS@�����5��.�BX��Vb_3m��v�7d�X7�T�5��gv)k#�Z�wIU9e��F�� �{WS����&��PI<�Lc岻C`����8�T��|2�3�mmc��������9=���n�{_���4y/!�g�d�5��`b�*rpq��+���������m�[�s{���M.@* R�G'��]*��S���]��1����ANs؀
���>Lﲁ�#HC 9fR�~�I��<�(�!��C�O������&|��;����*x��w���!�K����L�+�<�(Td��,T���gDKF�]2�B�$*��`��A�V�J������cd�n� E� 99 t!_�@N{��/�j�kym��#o+�6��@I��GJ�׵�+I�����LD3�3 N %�	8 ��
�x~0>k��^���0�弙?�>�U��X%4�m�kD	 � �b#;P%/�)�i�ixm��r���Ǚ${|���ȓn�GC������1*�xb����sK����[Y"�즂0L,�H-���@���ry��J��M�+/=�ɀ�7�� �<�p bj�3�I�nັ	en�VR_3m��v�7d�X7�S/|[���ikq�Z�۲1o,����bYR2���q�����4�!5Xd���]Vdg�i6�Flt�V��8�N_hKm�uҭ�-�@`�h �����Ҁ0����fLq[F,�в��E3���Wo;O<�#��������W�=��i+G(
��ydU9���#޺�4���ki��c�UU�yK���z���d��F�my�L�����l�N:�Z e����$�K�i'��G<m!������w�mVO�2�=���<�-��ǒ������aZ7�[Iq<�8�R�Ǡ�%����� �@�'1��;� �=�Z +���J����l� �m�vu�O� %B���6�6�:I?շҰ�� ^(� ��� �Kjݓ�[}+�������$�����A���:Y���7R�6 � �[j�́�kR���Z�6����"����9z{�����{�,��X۴qs���H���O�Fݻ���I���S�Ť+���%���D��x~��9����3�I#iv�R1���?&���<���5�iV����c�]�g�p9�ހ25�^X�]�Z��so:D�7��1y��F��p8ɪ�����H���I�Ŧ�E4)�I�n��ʲ��}#���Et!�4�`��Å�6�=s�>�S.<3g2]C�-n���P�3��2|���1�P�_SM#C��6�-m�r���T�{t�~oj���:4�u����D���A$�w;3�v�9#<t�i��Gu�.��Tp
�a�1�+*���$�gYE6�_j1��#�5�z�#�h� a�¸yLp�#[�k�A,���DB2�W ��*9#WJ�5���0Ekq5�0�LY�o)L�� �<�Ǎ7��!�-�ڟ�*�#� *�ʌz��4�+;[u�#me"J|���̀q˳cܵ G�jw6w6v0C-�㺩�B��T�$�I< �{V2x��Bf]>����c)[��&�c ���A��FN8 �>�/�1k�a��<�����>������7q閩<!V6X��m\��8�fO���5��ZYg;�W,�4����v,|�rYzrCf�Ʀlo."�b��z|�s	�um��R�������#5�ɢis[Mn��)��D����w� �����(YMf�$[�gD\n�����,��M T�����P�s\=�M���߯�*����8�6�Z5}f��QK[ie�]��3��"�)��x���C+���������8�����?A�b����"�!}Z��eW�eL����2:sҀ9kojIo��V�ݛ#yu3O>�ܥĨ��R	���0:�!�^?��K�.4ݖ�E#۫�W��P�' 1e� ��?�tZ�:}�񇐂cy�2=���r*c���g�m6ե�Ye-;�6A��׽ V���s����kym�Ww�",��r��1�����Wz��:��0�۵���\�,��?�1��GR7��[q�a���6�ZP dl 	$�1�ǥ8hvs\Cy���X���)�����=#���c��k�:���+�h��p3���r�En8 7�5���r�M���ƶ� m�W2@�H��(�)e���Trz��[�{G���+}6�8�P�2�c���w��NM-Ǉ�nn4�i>΂8�F0�0B� �����5-CP��0�mo6�5�I���)bA .��x-�Z���_[��I,�$��VQ�\��e� ��}�QlaQ���h�}�-�� ���?�L�������3Ip�vi�W��P � �EP\^�� #��� ��/�$��Ҹ��GO� ��_�Io@EQ@Q@Q@>8� ��O��覮��_�?�'����SWU@��� ��o��v��)kz�|� $� ���� �K[� QE QE^��=_�Y��R��� ҹ�R��=_�Y��R��� ҹ����( �k�z}�ah��\K�Ͻ� ��l`7�tܹ#�j�h�6���O&�i=�O�h��(�!�cA4E�]ܰ�?+n�{�C�i���i����][�I!�t9?7x=Gֺ��KKi\���;쀚 ����L����C�޻<W
�A-ݼ����� V$�0Gq��-�[��h�u��]�%��rJ�ڿ��c���c��+��   �E y���Zi-⻆�==��i�yXU�p���� ~o���:�� ��u����~ ���~�I��17Σ�w4��w���=��~T����]�2�[�F��0��`\�C)`�=T0���#6���мSö�#�>��&rX��(J��N^@�J� �<<ֺ������\΂i�y��+�͜`��A�7������q7:kA-��K��K���XC������:q�Km�X#���,�Ԋ��*�  P���w�s�k,0	�X��6�1������'9��ot� jQo[+�hR��Y�o,���V@/9a�/~�Ҩ�@��Gԭ�Z�EA�\yF���(�{)!������u;kg��M���:��x������a��u������4�a�Xz0�l"i��A�:�]�����L���!.�K�N%�`6���&�w�j�n����[����H��pңF�7� ld+���J�$Eu=�dP-��j�V2Z+j�0y�����C`<�?:�0��푇�x_V�4;=J�qgv�q�>Pɑ��܁&ߩ�(!�>TQǞ�Ԕ��~�#��!�;���XGu�%�Y	�'vO�pq�q�)'�o��4�s̋1�$��Ҧ~?r^F��FMzM��7�57��7��=.��B�#	���,������'5cEI����~�j�����H����d���i�4V,C�M :�(��(�6_�*��	�� ѷU�������K� %B���6�6�9�7Ҁ0|� >(� ��� �Kz�k��?�|������ I-뭠�m_J�_���i�M�8I�q��<��R�������#�sE ye�����V����a��Y ��x�̎	��;I�����-v�-SF���/���M����VI0.�A% r1���t$d`��c�����o0�ʀ �4��7��-LX43-��_(xf;v�G�����g��ĭ�X]j0;LZ;K����8�˯I@=T�㜏F��8K����7���ķ�2y[�(��ndG8ۏ�=�O������K|NtV��yK��ym6X��
C�]�5�I�����&�9� �$z��5��<p�� ���\�P�@�GZ�A�:�_�oot��J���.Y%�&T����)�H�E p.�w���^��G"���^t�"}�<�4`��
B� ��8���E�[����'b�����#1��0����UH���uRF��I]OUa�M��3�Ey�@� y���]V�}>_C$��<r��p�Hx?�Q��-�"��@�$���0L�мdJ�+\��C�r�q�y ��(��4�cN��}An����Ů#�n$�4�H��(�䌅�j��ۓ��b����w���dK|��z|����=q�2��V � ��UTa@$�;�M qZƙ�?����	�I@%�Ǖ� �!�.	�B������׿�������k&���$w�2�+nm��c�vGqǫQ@ω�mu�jZn�wmwyq$PCr�����d��~��Y�����F[��m%��q!\�d��ݎk�KKh�<v�#��5 y�-�Yj"�]\K�$l���|bTd߹��	!Xy?/��v���63;K������0��r���.;�W���2��52(�r9�O�>����`��M[�mJk�вIq�.'�_$���O(�t<���=�6Uh5��r##*�f��;ԖL��IPæ[��;��|B�Εr�3,�	/�?� !V��n�FyV=���鍶��H�{�>�g��1��RT9 n�u#%}����h�YQC�������S�l��.V_1�@�0Q�!t�2GG��[�~'�^���'��`c�H�ı��"�&�XI���o=��h�_³��>���	m�.���$N��?{�<����Y��^Hn�Z}�޼�I5�_K�sp�#A���۳�y��$�����o���	��   �6�@�e�y�,H��5��(�(�[ev1�F˸r��K=_O�#��ү�L-���zZ��_hR��3���(�2��z��ݩY\\��o����Cc���r�w���H�Sx�Nu���\��Y�VPἕ����ʻv���z���᫫F���+��=B7����[��&n��du'�CX�e���#�n��[�m<A�Ky��ğhe��3p�bpH�`z�7b�ٴl�6�zP&���&���=����c��� �����v�UPaT�p- �O� %B���6�6�:�'� ��{� `�?�u@$����X^� ���\�%�n�����������G�����[PYEPEPEPEP^a'�u�#��M.��>	ϝ*���G*��O�>���<z}�݆�g��F��������Cm°cL1 ���H��S�<zD��v�e;�����Mઁ#����� =C(e*�x ��Ko��b�Ltޠ�9�{��I{oo5�rya�����>f�7�$;���2�D��d�������a=�q{x��;�E,q� ����"@�������@c��w�4多�x0��ٮ�Gw �h�C �G�s�ՋI�O����Ŕ4���J�)p���B�Π��z�iU�:�� ��ʱ�T���mJg����G�us����EUE
� ����(��(��(��(����GO� ��_�Io]�qz?���+� �����ހ:�(��
(��
(��0|q� $� ğ��� �M]Ur�8� ��O��覮��9_� �?������R��`��I� �� �k� ���� ��( ��(�/n�w��Z���5e&��cy�\L�6��L����#~:��������%E r�����k�?� #�� 	����V�� ��� �=ue��������@��&�&� �Z�� �� ���k�o��?�l� ��]_�b���pP)� 	����V�� ��� �=�����k�?� #�W�X��(�,_���k�o��?�l� ��G�&�&� �Z�� �� �����/�
>�� r������k�?� #�� 	����V�� ��� �=ue��������@��&�&� �Z�� �� ���k�o��?�l� ��]_�b���pP)� 	����V�� ��� �=�����k�?� #�W�X��(�,_��^�A����o
�l2G˪�Wp��Xt�
�|k�o��?�l� ��Z^-��'�}�-��	�%K����V�����EsW�dY�u# �1� 	����V�� ��� �=�����k�?� #�W�X��(�,_���k�o��?�l� ��G�&�&� �Z�� �� �����/�
>�� r������k�?� #�� 	����V�� ��� �=ue��������@��&�&� �Z�� �� ���k�o��?�l� ��]_�b���pP)� 	����V�� ��� �=�����k�?� #�W�X��(�,_���k�o��?�l� ��G�&�&� �Z�� �� �����/�
>�� r������k�?� #�� 	����V�� ��� �=ue�����E��@�����x��Z�lm����[$Pܴ���V,ID�|�1�Һ�c#څ��)��[�k��uqi���A}x.U�xYseJ��u�9�z�� 	����V�� ��� �=u�lrTo�b��S�_Эa� �g� �z?�5�7�
��6�G���pQ�X��(�� �����+X��� ���M|M� B����� ���,_�}�/�
 �?�5�7�
��6�G��_Эa� �g� �z����e����9O�M|M� B����� ��� �����+X��� �������G�b��S�_Эa� �g� �z?�5�7�
��6�G���pQ�X��(�� �����+X��� ���M|M� B����� ���,_�}�/�
 �?�5�7�
��6�G��_Эa� �g� �z����e����9O�M|M� B����� ��� �����+X��� �������G�b��S�_Эa� �g� �z?�5�7�
��6�G���pQ�X��(�� �����+X��� ���M|M� B����� ���,_�}�/�
 �?�5�7�
��6�G��_Эa� �g� �z����e����9O�M|M� B����� ��� �����+X��� �������G�b��S�_Эa� �g� �z?�5�7�
��6�G���pQ�X��(�� �����+X��� ���M|M� B����� ���,_�}�/�
 �?�5�7�
��6�G��_Эa� �g� �z����e����9O�M|M� B����� ��� �����+X��� �������G�b��S�_Эa� �g� �z?�5�7�
��6�G���pQ�X��(�� �����+X��� ���M|M� B����� ���,_�}�/�
 �?�5�7�
��6�G��_Эa� �g� �z����e����9O�M|M� B����� ��to�]O�7Z֣cod$���"��� V�bJ&3恌��}�/�
zĉ�@ �2�{W���KW�=�����W���e��Q�*"a�<�=빨���4��k�o��?�l� ��G�&�&� �Z�� �� �����/�
>�� r������k�?� #�� 	����V�� ��� �=ue��������@��&�&� �Z�� �� ���k�o��?�l� ��]_�b���pP)� 	����V�� ��� �=�����k�?� #�W�X��(�,_���k�o��?�l� ��G�&�&� �Z�� �� �����/�
>�� r������k�?� #�� 	����V�� ��� �=ue��������@�񯉿�V�� ��� �=R����js�Ck�{)��7�M�� ��{��we����ᧄl�[OR�����N�F� Iuc�$uV�Q�0����H��M|M� B����� ��� �����+X��� �������G�b��S�_Эa� �g� �z?�5�7�
��6�G���pQ�X��(�� �����+X��� ���M|M� B����� ���,_�}�/�
 �?�5�7�
��6�G��_Эa� �g� �z����e����9O�M|M� B����� ��� �����+X��� �������G�b��S�_Эa� �g� �z?�5�7�
��6�G���pQ�X��(�� �����+X��� ����:�������[Kr�a��,1G���O���޺O�E��R**}ъ uQ@Q@Q@>8� ��O��覮��_�?�'����SWU@��� ��o��v��)kz�|� $� ���� �K[� QE QE QE QE QE QE QE QE QE QE u��?�S�(.�	K�ˈ�͓	�~O�f�
��R��6�"�����y�m��`wd?8� ���~��	���9��d�E��!����I@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@�������*�4�1��V�Q�1Q�ӴM;�#A����ͭ�q3x��O�y��?�x�Qy�ty79�5�8_q9?�0: (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� ������ �.�� E5uU����I� �?�u� ���� �|� $� ���� �K[Ճ��'�� �]���Zޠ�(��(��(��(��(��(��(��(��(��(��(�b3� ���N4�?r���c��lO����
㧨緆��K{��XeR�F�*�x ��Ȯf�k�K$�����k�Ǻ��z���dr(��(��(��(��(��(��(��(��(��(��(��:V-���9�]������\&7�5�#�FFA9hj���>����?�E� �Q� 	���f�� �:/�*�:*+�� ���?�3h� �� G�'�� ��G� ���� 訮w��� �ͣ� �t_�U�xG��m� �� ������O�#� C6�� ���T�}������ ������>����?�E� �Q� 	���f�� �:/�*�:*+�� ���?�3h� �� G�'�� ��G� ���� 訮w��� �ͣ� �t_�U�xG��m� �� ������O�#� C6�� ���T�}������ ������>����?�E� �Q� 	���f�� �:/�*�:*+�� ���?�3h� �� G�'�� ��G� ���� 訮w��� �ͣ� �t_�Uh�z���y��z��3�Ӭ�3�gi8��@4QE QE QE QE QE QE QE QE QE QE QE ��jW|Z6��jwK�Ɍ�X��+^�;��lK��-b�X��.�k�|�|���!��~�$�Ѵuҡ����ܷ�ut�W�8 p��{�:n�m�����)Xa\�,ǩb{�I$�$��E QE QE QE QE QE QE QE QE QE QE���'�$� �]���j꫕����� �.�� E5uT���I� �� �k� ������ �O�7� `�_���@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@Q@#�KG"����2=A�P5�;� �dR�h��`e��������G�[z~�g�٭ݍ�M7/b:� ���*�b�YoR�����n�ts㠖>�~v"�6���[���q��9���[Nؓ����zg�o�EPEPEPEPEPEPEAy{i�ZIw}u��x�4�E���$
�� ���_�4��0�� ���+��	�Ӣ��/�*��N<%� CN�� ���� ޢ��8��:'�"� �� ���_�4��0�� ����"c�X>r�^(c��\�%�$�7𑉀�F�N?�!� X��-f�����TG�_D����.��eXg�J ��+xV��;{��O+�8��fv'  $�ڷ( ��( ��( ��( ��( ��( ��( ��( ��( ��jz������	s囫��~1�n#8���;��� �ס� ���*�:
�r���t:M����h� �w�� ��?��� �W'7��2~#]�iݴ�XĿm�aa-�#;��I�ր=��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z�Ȳ�W�u+����������`��ݰ2p���	�z (�� (�� (�� (�� (�� (�� (����������x෌nye`��ܚ ���-nf�m+E�.�0�͟&��)��1�0���SĿ-����'�ۮۋ�� L��ݩ���(�kN�l��5���a�I8�'�1<���hK��!6��"^_�2�]���FxQ�����ź��T���%�$�<f�Ő�/���$h�lg*YA���J�kJ]������77����P�o�ϧ�ب����{��#V�e�5.-�92�.e���F�}�:_���<Lu]F�K����J[`��\e����@�T��ln5;�6����U���0�*O�W��UԮ<A�*�����h��n�2�Ł�@�v��I���n����j6�k%��Cs2�����3@�Ey����g�q�Rx�MD_�-�l�R1s&��� ��CX:���z���ZƷq��_����`e��|����as�ր=��]j�67���7)������@��*�u��K�t�/j����s���H�����?M�����5{�l�7��n���u+،���*�$�1�z �*(��
(��
(��
(��
(��
(��
(��0|q� $� ğ��� �M]Ur�8� ��O��覮��9_� �?������R��`��I� �� �k� ���� ��( ��( ��( ��( ��( ��( ��( ���o�:�:�z3x'R�|�4����rу���+��U�{����!$�2�9;�9��N1@h���^D����ʁ�K'��ca�1���$մ�n"��P�I� �L�����(�����_�ks���j�h@-��?�V&���e���/W����ZK+�"HUwJ�8�Ҋ����?����`�-%R��=���Q��l�-�Dgk�2��>�� �ET��4��d�����H���2�_����|e�X��V��w%�ѵ&	U�����J 訪��X��[�sv�&�J�`��4��i�|lR�կ���L������]��ossC ��ȡ����X?�z���x~�Z��6������G���vQZ�i�_5�_[5���e2��5C@�V��Iu�g���$|̠e��W' ������ծR�R�]*��Ԇ�d?��A�?���[�խ����]��q��X{���O�Gn�ߛ@�$�A� .wy���;���G�M tW?� 	Ο��L��u���͹�ʍ��e޶,���+e������$2S�� �EPEPEPEP~��[B��W�$�� rA�7��®hZ��t+GfƸ�]�����O�9�IX�?b�u���/`��|�� ȫ7�(��f����KM�<ȝ3����,^/�&���J;�mui������䍻�����J�g�#��ڄv1j,�Nm�ime�7�6	B��F3�p�&��ɦx3����AԖ���M�gd�I��,[x�����xD�8xsQ�y5v�mBa�_i�w�ݸ���ހ;����h�Yt�o�h�M����"Y���M�Ͻuu�O�۝Z��CZ�ԭ����n�NM����N��$�}��* ��4���w�q-���H:��U��l��L���4��h� 眫��~�\�� ��Q�+������UG]����EEPE����G�����BYa�ɀ�ے9#� 먮I���=j��{�t�Y�kb�лs�5��zէ�t[mZ���-ʖ��M��H�v�P�Q@纷�蚥֝{%��k+C&�bWr����/h�5���pE�Q'�	��g�^��:J(��
(��
(��9��Ga��ٗ!�?��� $���� �1]Cwk���	�h�C�J�~F�|%u4�V�N^�����Vx�����
� �!@�QE QE QE `x��G���p!{�9��X�w�(e� �V�3Gqs���C���j� ��=Er��N�����M��(?��a�� �M� oQE QE QE QE QEW����m����h��HG�h�!!A$�$��� �!�Ծ]J��O���f��27��p�)G�[P"O_6��슾U�� �0I�o��O���ö��R��wl���̘;��@��jKOy�Q��w?�W���M�[��gH��,����(�8�QaUF �R�EP&H���Q�u*�� �A�T�EҮ���g�l�P6�<
b��p��m����m/O��/1�$��! ��8�K{m�� ��L����s��+��Auq�Gc,�����]��s� u�������A��D���xl�� ]���n튓J𮕥�R�Æ�+�b�w���Kd�k�վ!x��v^$�Ԡ�'մ�x.��q��"���g����ߋ�s���[t!5����$�*�3����9�.:9 �kL��:~�ihJ�&��*:A�P�xoB�nZ��EӮn����I�\x�ĺ��g�A�����${�w��va��뜜`���<I�]xN�P��N�̱�W�"h�����w'� ��hw�pY���|��� �a��#� t��T��6��إ���ish��Ы�ぅ#��w�mf_�v�˥�i��ܖ��[ϲ,gn��	!�ʢ��'��M�����u��� H���+��zs��@�q�������G�������FH��`~$Z.�D�i�q�dib)���y��	�GZ�o���!�M�i�h�e�i���|����6v�H��#5o[�����,����lv������ib�,�x2Fw���=2x�\����n-��$@��۔�3�{�z��
(��
(��
(��
(��
(��
(��0|q� $� ğ��� �M]Ur�8� ��O��覮��9_� �?������R��`��I� �� �k� ���� ��( ��( ��( ��( ��( ��( ��(�����U��N�i�K�ɍ\�!Ktڼ���W��Z�W@����$v���C��=���(żS�ݏ��xN�3������yk&q�m�s�Y���ST��46��.D��G��Zf�E�����f #j zy�d��a�]k��xԮ�Y'y�	�
��=�.��/�Zx���ŵ��F�7�s���4��Q�������6�72��b��F���=�H�go�n�AѼU�򕽛\����+��d�{c��<;≦�F�"�����dp:gk q��[�⶞	���ǋ^�J{���,RI�i 2�(��v���c�z�����j^�}�gk��ݭͱ����"��z��ҽ���+King}�ĆGlg
I�ڢӵM[N��,fZ� �)��O| ��������UՄ�hw6��Ik(���ʅ�Ka���;���� %��5�2b���ؘԶ�I||��N� g��j(��!�&�q�麧���I�$��&� ,�����\6����M7U��6�z|7saq���+}%�bB��k������{q^�c�XjWwֶwY�eܨR<��q��J�@��ږ��k!a�^N����éi 5�3�-����I��>���׋l�D��fէ�	�����ď-Q�	
8�F��
(���E�4�ۖ��;[^7[�9	OՐ��Fȭz(�>$�� ��T�Ԣ"�b���y��~q��G�$��j��k��ۧڢ�<��>�+~� ̰���?�c�ZO(��<��+���:��i��l�t�[��+&?1Y���i�se6�b{[�Q�qO�v�7����0� ǯ��Xv[�h%��D?��E��:]跃��ym��C���+�KĐ�Ǉ!���ur	?�G�%_�}�Zݱ�>�����Xz����F���#��N��I�FO��(� ���� 	~�� >������q�%������|5�T�ԑU��]>E��$ga`�<���4�ST�a�4��J�w�i��FI
	 {�F�|���e�"2-�	0V*C`�u��E��:��3�Gyn�3��P�FG�9�i<y�K���5�RE]Q%�̐�RG�<����c�I�o,:u���R�s,��6��c1��<ৌ��6�q�Nj+���2���t��a��8"o$�$g���`}�КzxCP�RMu$�m[�s\Y[�Q$Q�UOPq��rKq� {��l��-���Ii̑\�q�y`���+#6�#�ے3�f@$�{W>���M�͋�����x��p����0Oް�N0���v��{h�Vf�@X�s�@W;�o��'];��� �����!����Vj�e֟r3�-�u����+·��>����Uhgq�䍌n�ز�=��� +Ɵ�"�����?�)�r��vj�U�p\Cw�!C�
�T���<����k�;�qo#E4Ze���pU�JA��e��.|�������x�\\����A`xl�׮�Ӵ�� �+o%����-��pd�&�����8������n�M{��~�Z"�v���dv� rL:݇��w�c���ݝΌ�0Oy>���%T2�$����o�]Y����)�so≵���gI�#��؞�yﵫ֮<3ce⛿F���B����6R�����T����z��s�7�Ƒ�����bB� y����� M��BxNPIU�d���'z�����:�<ki{<�����q�(^�O�]7��!�x�I�N��Hb�[�6��( u���^/�N��(,��{�[�)|�k�9|�bn:���P5ޱ�|]�_�m�{�xF��RR	��� t9?��f����<7�/��7V�!�R{]Jh�"T�\��%YN{�5��_�t�j��l�V�u&�h�Y�����* ��+��s�k����!���>��)gkr1&[G#�8� �ڀ2�u�\�x�_w�|Sq6�o���#�m�X!?�Ã���GlF�o��k�4]KP�ͻ��HFb�8��g_�*�o��KQ��k�� �v�^\7��{�3����<5��_x~�E��y-���v�,[� I�@�QE ��� ��H5�q:�y���h����E\Ѵh��� [��%���,�=�l�R(����]�a4���]*�(���W>��q��E y֟�S���5]cB���tif����5�h�UJ.A, 9��o��monu�
}���ob�+�*�w�!�6��})�+q�h��@ŭ��$K�BB�x=H*�0xo���������<Ri�YE��"��|�wr=�M EᯈW����iږ�����^ZIm|.>P��ȻT��{��w��xO��G�t�D�Ӭ���8n.�+��@bO\3] �ܯ�w����:����yМ�ő����j�|j�N�5E� [������(�h��{� kQX?�i���kl?�v?�b��JQ��h�ܟ���� �b�7����NO��O�SKm� ��ߥk�T� �m2��q�30� ��X?�� oQX?`�=���r��O�����#�?����C?��u]^� �IvbS�XB)�@�oJ� ���mmK}՚UR�@NO�Y� �=�N��_g��٢��i#�CU�;B�4�N���[3}�Vo�c'����M��֣k��z�a�/���m� ��X��Ɠer�f��^�W�4��Y���\jע��E QE QE�x���O�nm�.�յ������v�US�w�������<6�ml��m/���晿�����ӊ�h�E~����?�n����wW7-$� �.{V���.5K�E�_�]�g�C�b�;z�����
��ۻK�t�Ik�fźL�s��sޛk�]��D��9���k@�g�w�S]%��|2�4ۋ`�P+��g��K�h��$�U< s�z�<��4�� eKﷁ����g>��]5�j��=��_�?ۣM@������\tvA�a���jMK�։��,�6�\D��Cov��r�0��u�1]mEko�#�$��@��(��
(��
(��
(��
(��
(��
(��0|q� $� ğ��� �M]Ur�8� ��O��覮��9_� �?������R��`��I� �� �k� ���� ��( ��( ��( ��( ��( ��( ��( ��( �;��&>�E�A7����\��q�v�z%E=���*\AʬD��z �V�/5�x�T��m��-�]�aD�ہ|���\���-Wĳ趺��C�h/2��ܑM�l���~rU{}k�Uё�2��dY��ZEg$zd�uǖ��ɘK�1��z �_ռ_��\]����o��Mz�З�aP�9�5WK��-|����Ή�����<?f�ca��.�k�<-�;o�V�w����K�ˉ�<�Ԑ8��Z�iZuŢZOak-�x�¬��E#�<^/^^�_C��5=I����;K�~,R��!�����>�9ɪ�o��+�xb�T�ݾ�>�umy��vU� �Hf88$�N2{�ƛawp\�[MD�%eB:`�H�^�%���aj�J�I"hT�����	��=�L�6��k}%�RQԏ��P���}{��M�m�-�w}��w�w��w``g�T� QE QE QE QE QE QE Q�(�5�����;)㵶�+�jh�^x�	7�İ��9��EX����ռ}bҭ�� ]�%��� �b�:TE�5�*(
�: ;Vg�uW��/�걪��v�L��*�3�٭Z����9�.�Ym獢�6����4�W'���yl�՚�y-$���(��ZH���
��r�S�ĺ�Mi�E6�%��\,ʶ��yƑ���|�D������5ӯ�t��<׷�"U����b6��7m�I�Rz��-8B��7�v'k���߾geI8�B�1�*�p(����o�}3�ڄz���i%��!�w$�7`UU� ��g5�F�����` .����̵���b�i�7_����'��q9����Z� VO�ut�]�� nʈm�� �BF?�Z֮wT� �����4s���8��8A��v��@�N���Y��c��bRz�ь�s֟>�kkwii4ʓݳ,z�UK>�Vk��T�A�OI4�b��,� ��w4��\����k�����}���紛c;�H��W9'����}R��U��Ϭ]� e� mMf��˶YQ-ċ�9��˸|�f3����yo�`����e[��v�3��cv>��y�����MOֵ}ZD��!��
�\��˒s�ݪ�Ԯ�MS�s^\��#}^)�HYEU��7|���@�6�ao��is]F��H�,p�*��}3REk5�Ōs+\�*<ю�����v��\/��?��:u�S�k�t{��;���x6����	뙓ź������-c�G�ez���+�eIfc�nF4�70Y��qs4p���H�UG�&���Ω� � ���ˉ㴏O��C.����s&3�ñ=W�hx�S�t��� �����#���G��B@��wpd�� ]�ը�.���"���MN��D��F��H��DQ@p���d�_��  i�7����������1Y��͙���y$��ܫw<��r(�-��n�n���^kG΃�1P����_j�l)5��o*B����*�Đ+�b��Ҽw�X�sq�ڥ�7:��3<�d�F��UX����q�k����  ���Ltj��~�����գ�{v�0(����w��'���;�yRXeP�ȌYH� ����COɫ��4f�ݵ�׋#8"�) �c��v^�Þ��x�i�����s��9� j�;�?��KF�+qq���� L`!� Y#�MtU���1�.��c��N�>���G�F*될�����ZN���E���6�Т����o�vw �O �CT�M2�W�6�!��Y�b����t ������uf��F�mbK���Y�-��1F�2I�y+o�W |ƫ���N�3�[�H�c��u=ͭ�?}�Ef�9r�����0+�� �B�D�./R�g{�|�~���+q�
��cU��|�Io�j��[}�U�v_�C�vHz�,�<�����&ԏ��yp�xԠ�WH��o�;��J]�0v��kЫ	�%�5���ak��kE��d��+�
��q��� +��S}�}#F���M0� �0����j߮��{S���MR�V%�G����������њ(�4QE QE QE QE QE QE QE QE Q^m��jV7ڕާ{�٪�3�jV����F�)�!�Rv ��+���$��j��$v�[XʑLZ�l���=�0Pë��6ό/���!lz��o7�Ϛ]�"�M�ۖ\��Ӑ���f�&��]�6��m��j��.I�DU�|� �W#�=z��Z=Ė��P$3r�&�N9��0zq�sր&��( ��( ��( ��( ��( ��( ��( ��(��O�I� `�����W+��'�$� �]���j���?��� � �.�� E-oV�� ��o��v��)kz�
(��
(��
(��
(��
*��[M�i����HvN3� O�xg����q�c��Fq�A� ��cMJ�4��H	D,`:�w�E��&�#@@�� �8�r >�(��b����7�`J瑑ژn��I���߳f�v��Ǯ�q�� ME2Y����D�$gv (�$���E�4F_(H�M����J }Sh�T��A#�Q�p;�#��L�h��̚D�2�`I�>��O��dsE,"h�G���VH��K}h��uݳ�s���}�h�C�b�L�e@�a�8$v��@���N���$P�IF���>�
(�,���ȦD �ʃ�#�p* }ǚ(�4yZC�������S� ��( ��( ��( ����^�-����d?��qX�(���F��W6��d��g�1��"i]Y�P�T;s������:�aoeok���,Q���
� ���Tw�]�KmssA*��)2�� �A��/�Mt����� �E{� ƨ� ��I� �}o� W��j�8�4m&-��t�++[T��X��b�X��P0P�=C��*[h4�<I��s�xau+�m�M��-�;@?.��b�u�hF���a����<��ͻ}1��x��of�m��mj����e?��q@4_c����[hM�l��6�+�O;���~�z환�ۛ���k�����\��)���'�O�d0�����Ϫ�?
|=��uy�O���跍��i�\2�z�@5s�� N�U�"����E��ćq� ]*��⵺Үm�{Md�S��ld���Dv�C�<a@\�$����N��L�ml-�l�,1�EP �Tf��N��F��Z}��!܋s
�����Q@c�ZӤӆ���{aj�[7����9��_D�e҆�&�d�p�1��c�_��2��փseog>���klsj����a
����:<6�:dd�T�o�F�Ϯ*����-ц3p�cYJ��I�=pH£:u�Is!��/t�nĹ�@��� $s�Vh��O�S�Y����΂+dD�<��<e��@�X�Dm��a1ī���ȸ/���Q@�F���� �$�l�O�>��)��6c}�m��6�����O��g�Qª�6ʀ0	�z��E U�M��;�沶�.�7
�)� �6 �AR�m�k�ʊ�� `NT�{��KE E��+Cq�̐���q�S�O��h��(k�����Sy���#]���'�xLm@��w�4Q�4�ߔ��ߋ?�dx��Gu�[�m}-���M���Kq�܊Dj�fM����՟�L�����?�E{� �h���� �L�����?�E{� �j��]5���T��o7�$�q�g� }�� t�W=� 	��� >��������?��� ���� �PCEs���?��� ���� �Q� 	��� >������ m�]Cce=��l��Y�Td��V�m�����].ۻ��w �J���~�Us[��%�z-���~�<q�4�]���L����W�V�PEPEPEPEA{j��r[4��`��sه"�.Y4[-{Z��U�:f�-�V�߹FO�@ �7�P�Q\ޭ���J�ݬ|�,㴖y��m�i$��1�7y��5��d��r���GW�d�W����e��$��@�	%I8�Q^[�x���_�V�=��{%��r��X�8�9���q�:�wR�T��.�湘�Zm�6�Y!�Y��2����E��;��$7��[\�Ci�����\Ues傥wp#$t�J||�C��[}>d�X�7��Kxԡm�2���Hd�G89�ފ�|k4ZV�v�io�̛U_$�l*�H[��<Sm<oy���6���3.���Ou��\,hB�|��p=x ��=���q#�ih, ��)�|�&D�#�l;�/s�@�q�'��3k���3��i����doyeg`<+�ؐ`�;�n|ipn�MKS���w����C!s���1'!X��Y��(�x�t�%��ZB�����\���ɀ+�����l|u.� ���m��d��>�~϶4Wi�	`C�nrH=3@�xJ��f���8.dInm-�T�fP���\�Pv2�jf�ŋ[Iy�I���~a�5dY ��r����X��2�/屴���[�z��ޕHM����9-�z}C��c���zF��Mf.�#��1�@� E`������� ��,ᾶ�/�mit�v�^b�1H۳��q;pX��1[�v���a7\X��0,rI� ����ѵHu��S�#��d� yr9�+.]R�V�������������ˑ��\�Ԯ�u's.zPEEqK�M^im����P�M�g�!��>f_DMГ�j[?j��cg�۶����G-�X�K�1�����8�zr�Q^s����N�ޒof�M��OY[i3�0�
��1��h��Uծ|1�j�}�����[y��_�y��#M�(�ۆ98���4��\6�s�]]��x5+�C�Z#ڤL4�Y������W���++�waorWi�%�o�@8�	�*��w61jWSi��ek{���^igޠ6a#�[$����Q�����ZlvF�-R��v��2�&H��^y��F;�=���]�M�%���\-��ż4�2�m% 1<��J�x��K���Z�R��9.���s�ء��T+x�#9�@;:+���W��z��޷gA�,�oovd��i�$��l����V߆|X���ݓ���oK�Y��ebF7R�c�� -Q@Q@>8� ��O��覮��_�?�'����SWU@��� ��o��v��)kz�|� $� ���� �K[� QE QE QE QE2)��1�D�+b�}��[S��X�ȱ����\F���D�r�q�(8?��no�l���,u��mr���Xb/�g�ۖS�,��rz�Wgu������ɊKX��Рa,r${cR�֠�<3��R�5����SFЫ��@>z�㓟� gx}?�/./5�u>�wqgox�W̍�6b�@\�� S�ojZu������/<r���GW^}2���e�z[i�[Eohch�QF������J���;KX��]�D�4�
 ���5iƗ}� 	C%���2i�T%bEyj�w�$���8����r�$�Ȳ,ͦN�Z�3T���&0 ����J�� ���]]Z��Hgk�&�4��6�YI�t��Ҧ���t�au�F�4�bN������
K�CL�5{u���.o4�I��.StXg ���020;U� �\x�\�����4�Y%�ᶫ6i(
HW �F}��k=2�.ѭ�.s�ܩEq!^6��=J}��a�@`������)J��z (������\�\2����m�Xc ��x�T�Vk�+�ֳ�X�����-�dDx����71�08�k���`�4�{e��k`1ڪI�h2jmq&��5��{H�!��g8;y�{P3i�j6�P��mfn/n���AT�dEU���@@�bG_��-�U��ޗ��rf���6�����hw�
����<ץ&��ǩ���m�߰�]JGN[�Kg�i�h����`��aT�����I?Z ��|W�_�Tҝ?S�ͥ��"�G(���E`7g��d�߆RmK��ۯt��ma������y�_�m��:g5�5��&�m�Nm%>S�y��c�֧].�=)��{hm��6�Ej�����w=�5-:�Y��-�/I�)�Q�ןL��?ꍯiw_^ͧ��Y�6+x��A�F����G�����1���F�b��0���UGr} �P�Z"��4�<\J�Sp��ۨm�d���?�������<:���P3��M{"U�Wܤ.�@q ���E��e���ۈ�'�SoϿv����^�c��P\Msa�i����,�B��:�?CVK��([U���*1��c����ڀ<�F��|+��]N�Q��J���ȑ�Δ��,�c�_@ ��9�Oo �5&-�^�B�� (+��� ��a\� w�Լ/i��[9.���m��VVR���IV��E�*m���q���@]�又"�4�R}:�kK�JV�8��c27WR ̭�:`{�/�% ��[R]G�O�hj&) A��`�]�6�&$�';z��ַ���1��ąFंW>��ǰ��k�Z[��Ak6И��V(�2��U�W��J ��}oW�����m~�[A/�."�u���"/�*�]���H����O@�5��5)��f�M�7.��aW2�xX�v�>e�=��B�,-���Ҭm�� ]6�'��<z�H�</c�4��Xܟ%�c�c��~R:6�=s@>��U��kFI%ѯD��,���^�e|�		������"+����!��U��*�����������QA=N_Jm*�G�����6P����E+� \�3��ր4����`��K�i��Y"p��B85- QE QE QE QE QE G?���V�?������� Im�~�-��#B�>��C����by�<F=>y����.C"���3�(��K�_�� ��P� �M�� ��_�� ��P� �M�� �����e�_�~5��� �?�e�_�~5��� � �h�K�_�� ��P� �M�� ��_�� ��P� �M�� �����e�_�~5��� �?�e�_�~5��� � �h�K�_�� ��P� �M�� ��_�� ��P� �M�� �����e�_�~5��� �?�e�_�~5��� � �h�K�_�� ��P� �M�� ��_�� ��P� �M�� �����e�_�~5��� �?�e�_�~5��� � �h�K�_�� ��P� �M�� ��_�� ��P� �M�� �����e�_�~5��� �?�e�_�~5��� � �k���J����l� �m�M� /�� ����� �Vf��[k�=��l��g��$��X2�%�0ERpys@�Q@Q@Q@Q@Q@Q@b����t�WOs1�S����+69R��K�kzd�e���ww�����K#w,N��x�c�x�hl���O��K�m.>٨��6���n� ���9 ���ia�M]kW���ZJ��"A���(F�8��KoC��ۦ�wo{�����gg�$H���>�V���������}��k�� �x���3�23��T��F��y�e��'����K�#����p_o rH^H�� l�x+K�XW}��ݮ���\�i7d�8����|��cif�y෴��"Y2eI�ZB�,J�#MT��ŭ��sgak}kx-.Π#�L�$WWsn�P��s�3LӼmw�Gg��[�7�ZD��(�H#,a-��q�	�1��~O"x�5�b餉a�I.Zmت	�3'$��bx:$3N���5fI��^%��R�
���ǂ��z�k�Ӽmu�xoLk�t��β�� i�m "W\ U��gڴ[S�ĺ��mg~�f�����:�͍X�HI�@�	�ʞ8�����Xg��u[�YV[��=�_{��2�9@�����wa6�7M�����'a��Yr�(7�2��-�W�%��:��;̺Ƨ~�,OspѤQGK!-���� 9ߞ9����(��[��:�tb�\��f� ŝ��L~��@.[�l-�MR��Ae�ٳ�QnV5�	ܤ��F�*����2xt���"�,v:�13I�$�h��=~��sXz��e�t�%ӒKu�4�$�e�L�
1�:� ��S�?j׭e5��å�n;/����I���m�������� 5�	�o6yu�5�.�Z5���*��a���9�[�P���MH_�3Κ���m�6��R�H mێ<Ӽ7��T�'Rդ�Ya؝�3�y���G�4}WW��4�ZM=�&��n-T<z1�*�c§J�w$�uk5���@������?3O_Z[�`�ub��i��M��\��܄pY�@d��V��MZ�-�}�ŧC�[X�й"RE�i'ɷ	�}���-��x.�h����Mz�Q��&�pb��=�Xx�8� :m;G]�QZJ��Y��6���?7�q���� :�����..E���wl�wm��� �RÅPv�� k&��_h�m�Z�t�� ��&�(Fq�3�>�=�T5���B=2�M-������tc�dx
w0bI^�
 �a�Ōآ�����P�,9�_7p<}��>��ֻx:�d�__Y]	�%�D�ș�ȇr�+��#�Ҵ�\ki�ϫ�%���ږ$�@��2J�Z��l����"���f�5IbȬ�Ǫ�_ƀH�m4m&�M�$6�Uc��I<��jMSJ�մ� �N]"�b��d��W^�2�>Ճa��薷�U�k�+J��[���r�o���������5��}�D��yo/$������4�4���`UV' 䎃4���R�V��g���K���`u	u����RA�8�[I��/&k�kyDb;E�`�3����� ��7�#֑uI4��mFxvG;:�kX�ml�;o�3^�@�xZ�k�F{����W�p`�q��}�*<%�mƭ��r�1�Ǒ<�t�ݪF�^rs�`jPx��V�j�U�qgn�<̡U�#�T�(�$g um�Vzn����w4���[�+|�	D �1���<a���uz�i'sH�g&�ǅ�A.�ib���Q��};��o�����!��E+N `�UI8 nb[���gyo�Y�yi2Mo2�D9��EbR��.�Ӵ��l����y��K��!\��r�88�2� �S5���:����]��(���݊�`��sԚ�<;s�ו��3^�yK���1�6p���8-�2s��2�<e�^�k$Z-���t��(���1��c����@�����*�ީ�[K���[7���\�,�dn���)�?2� �@EQ@Q@>8� ��O��覮��_�?�'����SWU@��� ��o��v��)kz�|� $� ���� �K[� QE QE QE W�����Z�z ��+�u���� �I�HS0ۀ\� '�l�{T�'N��Xu+[ȕ�*\B� }@ �a�x�\x!}dؕ�ӵ�A �Q+�m�2���߀G9u���kvr^M�����E���1�;Kvw	(ۅ*x<��c�����(V!+�tO�}�UY��L�M����/n���&G�OJ �Χ��k^]^Y �o�~¶�kh�K�~���a�y�֫�jzi�Yk-?U��KsQ0Eie<�#>N~V��R���K����,�$�¬N�px,Gs���iWi���o�:b4q���Jl ��h��7 ����M,A5[&�5�V�H�w��GnW�s�E��Kh��a��5�.rU@���*?�4���>�m�ͨ�Wc)��ǥ> �.o�q=ʢH�r;�#��
 �uYt� �N��˦��5���E��I���ԁ���<g،�/\׵{�5��PY�\8��<ޘnLjrT�]FN�u�u�����sS���`��+X����²#��H=ǖ?:Ҋ��G���8��(�O�A�� y��.����V��������qt�f(�F�n҃�he�ž��U5{�GI��S��v����V�/���@(q�`zMzE���X]�ug�Y��O��X`Ty9��@��k��ťkM"��ʬ���w���p9>�������:�����I���U��MrciO�8<p*����z%��&������Y#�m)�M�;N0s�����@Ѭm䷴�l-�JIV��z� �{RG��+��G���d��n1�߭ y�����J�ג'���7q@��lw���g��*�S��O˪�#�����M"[[j��B�[%���T�n�����x#��6�d�Od�v���o�Ļ''+��I�5hzK�I�6�do� �&����zq@�����O�+ˆi!��jR�Pe�+��� ��9�Y�v���mvp0�n��s�����z)�ԵF{���޲��X@�&v �s�$�*�6Auz���B,��!���'��
 �5���$�}v����� �t��B3�mt�L���K�kŰOyh�r��/O�ie�������/���6���O9�=*{h.��A�\,� ��V��t�Nxg��,���S��'~	s@\گ�nO��#�b�^Dv��"��Ls!RI��i�2y��E��,��wR^Iy�
I��TG�F <#d�!�V���ci"\#���s��4`�x�{�=�W��4�>��L���$�Q"�T+���8�Z ����b=/AՎ�n�֡����	nD.c���Bų�ƥ�K�]4�/Z�&����4�1�Q�"p!� VUA�=vphzE���V�]�W �������N}��Y�Fв[B��! 1��U}ʼA�@�GY�^դc!G�6������r~oLW'�x{I��m3Ox�E�đH3�E,��8��ר�Ev1����1����eP� �=� ��j:6���k�i֗�#�1q
ɴ�dP�y��|5�mM�=:M6/=n%;���r̸$��n���?���:�`6���,��E#�/g���@�1]�X�;����/%��2c��� g��*-;I�t�Z2���7m̖�`�R ���ˮY��<:��9W���\�$1��󎖳t=%�{�K�s<��q4�wb��s�2zV� QE QE QE QE QE !5�q���>�PMi�@����� pQ� ���l�@����� pQ� ���l�@����� pQ� ���l�@����� pQ� ���l�@����� pQ� ���l�@����� pQ� ���l�@����� pQ� ���l�@����� pQ� ���l�@����� pQ� ���l�@����� pQ� ���l�@����� pU�M:+O� ��PEPEPEPEPEPEP=�]�Y�����[e��y��Q""Ew�ːA�F<i��m����4�׈Ѵ�J�7�B��^�c 
�h�*��h���o�i�w�y%����,�c�2�����s��ؾ����ߟu���r���6�}�A95�E s?��Z��=GP�Q����h�Y�#n�1�T `�RE��;X�6z��mu�ȷi"4�L��S�H ���GWOE gi-�����[�7mi��9b�'�$�[�>�x�Hԭ`G����
Ud1�op}=�n� �<U�^�I��XA+�l���{��d�;w��Cz9GG�<+��0j��Ս���옿���ˀYrx�@k���9�<�[i�1�)��\��EuQ��c�u�M���oz�-���^���IB'ݼ��݂�%wc$��J(��mqu)mr��Ḩ�"�,����\�� ��|gsxҋ�B+v�����D&tu}ܩnJ�F�rN3�Km�K{K�CPKD�k����dbI<.�e��[nOJߢ�0��η:	C�	����F��>\�f=y$�;�X���o��k�igr�� ��]�S��FWnG#��(�
�6�6�5����R�S� ������x���I���#� r�� ��<)m�^�r��֭qk�;��uQ<@�
�RF�*A��Q?���F1�w۠x���|/
V\��H �O��@z&����sss%����[���UI� pl
�gmq���\��<��F9�b����?�\��3��"oN6sK4 K�,$G�ë�8eA��*���|+}�X��=�&�s�@��������E R��x�Y�>��dh#�;�FR��q�T�k:���3\���0�L�6qH�)�]�f�w��
�r5�E `��솕ic��g;�[]F����X�2�H!�`�0j�I��e�i�m����{�I4�!A� r۸ ��t�PEPEP�?�����w_�)���W��O�I� `�����P+��'�� �]���Zެ� �?������R�� QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE Q^s�-HA�MQof�	�����UҞM���og
{�^���=���O�����Ku���[Mt��j��̎�����0���x54�1cas��Kr��������1��
�H$����{Er�0�-�ե�F�[-&繑�0���(R	U�V ��q�;�K�B69t[�o=��+)�C:G�T�v��t�]Er�����H�4Ӫ��f�Y2�f6�~l���浧�4c�IykoVPO<�-�n��xYT��,L����tOK���e����f�P%��2\��ll�����*X�� 69 ���(��(��(��(��(��(��(��?�'����SWU\��?�����w_�)���W�� �O�7� `�_���X>� ����� 襭� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (�� (��i��L����١F�Z��$�=H�+�����W��k���z̲]]���[����� �u��Q\�2���+�Aoj���i3d�'�6����׍�sֳ5/�76l��X�d��g��BM"�����$� d�@wEy���.��M̓^K��sP�27��9[�eV@}�Y�W��4��k�JS1���la��ˎ�#*�8;@A��NGNhԨ��Fپz��nK�k5ɹci����Dd��Ta�	�5Ke����շ�$�Q��<��Q��9b������ ��}$mm`�E���2+�,�*�?�W88��s��k�}")���$�Zf�+.�*�ϳaC�{'� u�F*�j�UV��wP�	B�\�:���W)i���X��!�6�^�$�u����h��!a��A�`��uŎ�o�ʈ��K�K�Y-�"�neVەE��y��lm��l/���Yd��B`IH/�B�Y q��0*I�!��A����WY�Cp�w6� 1Xg$��
Ƚ����cE����l?Q���I[y%[  9����o,'��4�����;땸��\oVa�� �9 t�{ $>V�uH����G�+{u��U�<1���K�>R	I�K���]N�k����e�����A,��O˸gh�� �Y��8��5�th^�L�n�{®VH����A*�#8�Y��}���=27��n��q9�"l�
���U'�'�@4��lE��|��u/�3����rzu�z�<��(7�w����Cmu"�D���r�����t��'��'�f�SD��Oq�w�ͱ�2�R�P�p6�###� 4�<3�T�6��\;[h��dͺ� -���1�Z�E؊��`c'��&ok�5���O��q���S����/O�����'�u;��sh�am��A-ѹ1ʎ�"� �W\�é�N@=��5??W������f.5�_�2��횵}>����5�'I�[F�+�����8 `u� :�+���D������{�]�$�-��	��U�
�V�Ԑs��wwS}��i���џnq��%��&��u��%ޟ��M�Bn��ƠB$P��G��p�{��Q��˙��u?!F]���?7.X���`�/ 0rx��h�V�V�%���r��h���V�F�#rP#� 0�8� �'�m&m.��qD�D��Dw��`�&F��p3��_Ey�>6��[P�SH�}bKx���"`���6�o9nI~��u�����o5����$�в�����p:���(��
(��0|q� $� ğ��� �M]Ur�8� ��O��覮��9_� �?������R��`��I� �� �k� ���� ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��( ��j��ٚ=�� ��}��I�nۻj����+�O� 5"$��K�TK�!�mܒ3���!�H���uSD��$/��)S��#�/�m[H�, ���m$ �����M���ܥNT�r�氭�!�MA����,V�yf��3E��!F`�%6�#��J�S�S/�,�|�t�;�f�"�Gh�?ˎ��u<���W�RϢ����=��񺻻�����b�=�֦���MN���_Z����]�nȫ2(`2J�^���z��56��h�B���\Y���(���7*�1^s��'�σ�8?lYm��+d��_y���,b2��ב���@�~ү�/,��؀;� a䀪T�� `������#��Ms8��	�+��P�IlR�}܂ ��XM�=cM׵�5X��amcf��6���e���p
�T{S.�i&���Imn���\�mjt�Qn��)*
6�G^�����l[�]oV[ř�7�j�� �C�����F5X��t���Ե+X/��E»����@%��T)� �6��xb;�Vk׼��2�ٱc#3R0]���V�� -3뜋��z��O�[E���`���-$�J������<�(Z��t��[E}�[Y^li�`�DTV�B�^7`�ֲ�
j���ER��>���^!�:�o/n���gfN�r���r̒[[H!����{K�$(�d#�(	��R�g94ˏI>���2�M[���l������r�=�4�m�K{K�CPKD�k����dbI<.�e��[nOJ�e��?n��Wr�eqh��!-��Ք�y^T��Eb�j^#�ot�t�t�����-���Y�<� �0˸7u<��Sc��6�-�����\�$��1�J����E Q��V�[�;P�,&�'��-�7̮�F�~�1 F�T:߂��ү#�/o�n%�͛*L�
�H��,~`CNI��f��?%��e]_R�w�7��h�(��%|��?|� ?�>�G��&�&����N��P�mBy��±]HF-�ʣ�����G���y�����c��la>^8�w�����Cyz��sq`��D�����*	�8��Ź��cK'������s}y�+H��G�P�(~�(9_RF�:V�i�^�i��wY�	f(��a�Ԝ )/88�ߚ ٰ���k�qr�	nH��h@G��}��q��>�h$�k�D��?5Dv�j��L.��0��U�SP����i������(ա��Er������ O�`{�>#��:7�Xì�N�Op�ZWF�(�I��[i<����ÖSK<��fm?�=���_����|ǟҳo|ay����[\�w0�"�b�Vl�!�����5j�Gդ�LZ�z����FZ�q���9g�� �>������%���c��J��[[}H�i��%\p7�1'� �Q�ɍ	�**�Ι֩c�H�&��#i� 9�ڸ;� �_�Z��-g�V�\�s�ޙ�*�)m���l�m��Vͤ�mk�3�V[��I�V6P?���@ ����Ԓ�]]��W/w�:����8wuf8,T�hY�M��w�/p�e!9m��@�;)8�\���"C��v�U�QWkqי,xR�J�@\�=	��5]#Z�^�Q��;X�#�=�,��m�������P��V���q����O�A�k{�<�/

�ee`v)�z�F)�x;O�Z���H���i(�P� i�\	9 ��}8�3O�u���6�W�Ϋ�Y�C���V���,
��aV �c�x5��&���.��&�V�ᥒb4�@1�r1�cހ|i,,�z��w"�ko4�({`�JmP2s'$�)�����-����ΗQgA::)U� +0��͐sX�� v�ƭ}?����u��%��@��2���f���3��"Z������:~���`�
>V^����x�OJ ׏�6�DZ=KR[߶5��y�fY62�6�_�T�@01z�E���VF�H�Yny7��p~� 1c c zh_�ŧi�W��Cm�&N���W1s�oOћS���^S����ɒDA��Ã�a���\���%�ͭ��k=ł!�D�#,�!"-�v���=���y4~*�t�dy#C{c��!td�����:@�QE `���I� �?�u� �����|q� $� ğ��� �M]U r�� ����� 襭���Zx#@�����i��$R_D��#PA�<b�� �8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� �z��� ���_�4��0�� ����	�Ӣ��/�*�7���N<%� CN�� ����?�8��:'�"� ���i.���J� ���'s!�5��-'��Ϫ^��J�b�ZYT�tʱ�F~dS��NђE_� ���_�4��0�� ����	�Ӣ��/�*�*��i����ck�n���Y���ƲG��򢪁��y�i�_�l�4M���y4�vv��<�#���2C�5?�'� ��D� ��_�U�xK���� �TS�=:[V����/mŬ�pGq*��'X!U� 71c��i���)�K�CQ��[O���v��u*#E��@Ϯxş�N<%� CN�� ����?�8��:'�"� �M/Ñi��������WQG�]��2�pT�{{��+�]*MK�w�vQ�.d@�n�Au!��܁�j���	�Ӣ��/�*��N<%� CN�� ���� �yc�����F�1,A�h����GqX��s5ܗ���yss(n&���9x�6*�*͞���Nl� �q�/�tO�E� �Q� 	Ǆ��i�?�a� @�M3P���/���{�:�0�*����y9�'�����b'����B��Y6�s���� ���_�4��0�� ����	�Ӣ��/�*��xB�L�,�ƣ��^Hn$VHcleF�G,I�j�[\K�Y��G"O6 x� ��ǜ�����xK���� �T�q�/�tO�E� �P�[D�U���n�l��Ky76�w�`.YH8zڹ��<����4�J������M�J�1�i�B�!���##�5�� 	Ǆ��i�?�a� G�'� ��D� ��_�U W��E��+c��ifm��4J��ǒN���c��˵�z���l��粆Ym��bI!l<cI�#�sY?�xK���� �T�q�/�tO�E� �P�����e%�F$����	$�+��Aa�"Ldt�_մ�5�2k�u�]��d����� 	Ǆ��i�?�a� G�'� ��D� ��_�U ov����4W�w%����I��%� |�Q�Oj_�N<%� CN�� ����?�8��:'�"� �����y����+�f��$���up D
+���<bĞ��RK�ﯦ�;�w���
Js��~9'n�����N<%� CN�� ����?�8��:'�"� �4�
C�I��jR[Z�Gii$��@�3`p7���Z�m���U����\�G
��7Y�Mf�q�/�tO�E� �Q� 	Ǆ��i�?�a� @�<1o�^Cr��׆�6��n�V���\($���68�&�'��#M*�{�B�l�0��;t���N<%� CN�� ����?�8��:'�"� �_G������P��ݠ������"���2ň��G�����D`�4�L!�(�v���;����h� �q�/�tO�E� �Q� 	Ǆ��i�?�a� @���1��f7�`�%iw���p�np3�Ր��h7:��v��q�&�?r�"Hp�91�Knl�g��	�Ӣ��/�*��N<%� CN�� ���� 5/
[jW����]Ʊ^Em"�ܪ� �RG��RG���6X��OU�
�:�m���Ǹ�}˻��ڃ��	�Ӣ��/�*��N<%� CN�� ���� ޢ��8��:'�"� �� ���_�4��0�� ����O�I� `�����W�x��>��F�oo�="i��n8������� d�x�z- QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE QE ��

=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: docs/TinyTuya-diagram.png

�PNG

   IHDR  �  �   _w�  � IDATx^��U��uT�QT�Y` A#�,:���"bd���9�̎�1*b��3�'�I7�Q�����z��U�>������}���������������$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$I�$������B!�B�re������(B�����'�B!�B�-x����)��B!�BQN�mS���̆B!�B!D9��M�n�2
!�B!���65�y�l(�B!�B�x����)��B!�BQN�mS���̆B!��<����A�۷�~�F��B��o���<e6B!Dy�&����������_�������?s��Y�m|��2���g��)�|K�B��o���<e6B!D��I̡ݿ����?��?����/���s�ӟ�d��o��V�1ϱ��϶n��p6�l���F���G����_�j������X�o��m������B��o���<e6B!D���^L!����}�������A��n���kx#��ԩ���СC�ڵk�ׯ_8餓�7��}�]{^�gj�����i��nʿ����SO�ɓ'��C�ھ��a�����>��<��0z��p�uׅg�y&|��W��kb�S3��B��c�}�^e6B!D���s�Y��Mi�R���~����[o��oX~���:��<��p��׆�{.|������0��|�Ix��ù�h�o��6��3�����E�1���d�>bH�h4�����O<1���3,��Ra�7�rH���K���������/���{��6f�3�믿~Xz��N;��9�['6�n���G!���65�y�l(�B���8u���b��֦cW��F���1�����;�%�K�wʔ)f�y��3f�N8�^wРAf\���?��v�ɾğ'���>������d�M�h���a����[�o��&<��9&����k���;/��7���"#,���65�y�l(�BT;��k<-�F҄g͚��>�P�?���fJ}lm:v�MqC�pl,�T~��GaȐ!a�V�sL���OS��$�}1՘����[4����������}���лw��*���c�Z��4{�l�$c��:�(3رNͺB�� o���<e6B!��<���e�����-����=z�6mڄW\���u�ի��"�;vm۶k��V�۷o8���ôi���~��¸UO'�/B�Q_�������p�5ׄ�V[-v�af�ZB�}�]��K�sq泰/���x<s�LKO&U��;�m[J߳�>۾�;��,c��;�B!��mjv��P!��&��zjslz���ژT��r�-6�|sK�����-����ߦ�+��s�Z��<|�pS�kQ���/o��v��E�<J��e]��p�6��Hlk�� ���[[j3��0�Dw1�|V��ĉ���X1&���tB����q��hpzN!�(?���SfC!��Z�S�=�J��c�=f��)��{XEd_S	SL�4�y�=��S0giJ���%�w�M7�*��k�bZt��ꪖ�͸ۗ_~�:
���TT�=�䓶�g�u��a�	B��o���<e6B!*�8�녤0���>}��Ν;[�,F��E�
�뭷��
��L$���tA�c*1w��-�5*}�V�/�K��1#%���y��[[�Y�b�-�^{�e�}��t|�!D���M�n�2
!����߸H�[o�e�h�W���bR��C��6��Ҋ1�6L8��x�3ɧ�zj�YI�ꫯ���w�uW�TI���|p�y�c�e�����ۦf7O��B�J���zԗH�ԩS�J+�d�Z;�-X� �x�Q��1U�?��3l<.Ea�;u��x�����?����Я_?���	V:�B�7x����)��B���ŝ��r������5Ԩ����%��Cq$
I��⋩Gju���i�_��Vd�.a�w�e\N����m�2c�)��c�UZ!��mjv��P!�hJR��Ֆ�����Cjr�/�u}]7���b7�^H�t��6��Ҟ������.�����K�7�|3}�$t뭷ZEk�p��sc��׶��I7�snqN��B��o���<e6B!K��u��E�H;ŌR|�i}f͚y���_��*
;>��M9�tA��6Dp�HT<�n�!v�˺l��K/ټ��:�6��1"]\⻦`
��^{��~3g1)�'�/�u�!�(M���SfC!�bQHM/�4�ZÊq���|��a�ȑ6�Ϛk��Xb	�pb��>�w�ޡW�^�v�mg�0���]v�eCϞ=mj�aÆ�������M�ϥ�Qf̱�_��ڵk�袋RT�b�W\qE3f��s�9�d�%7Dcǎ�}�Ya<���BQ^�mS���̆B!DCp��^��bH?���p�-����[��}��6^��O�j�~����,V�&���n��\Ia�СC�޽�1ދ�m0ۘa7�H�IQEy����˖�H/f��R�~����E<EǼ�6獢�BQ^�mS���̆B!D1��ף�

]w�ua���/�|�v�m-�ʔ3�%��%���;��[�"ĤR������m١��nZ���O�6-],5�0�����t|:PB��o���<e6B!�"���6��G���>�"i�/O�<�U���ۤI��j�Zk�F�e�}�]w�0w��t��ք	�xK�/��d<��s6ﲢ�BQ^�mS���̆B!D��e�-ŧ0�����رc4hPx�WRo�j���m�2v��N������l�����y�9�s�!Di��M�n�2
!�)n~�ytI/&�ڮ];K�TEJ+&�bZ�_}�?~��$���ߦtb�8��N#ÁL���x��B���mS���̆B!D�8�Sp�=�Xg�L-+}��a�=�l��M{#I�8�۶mk����y衇����t�ܧ�N a!�(=���SfC!�Ҩ/&���!Cª���O������~�S�zΜ9��Rk��Ww�}��=z�nݺ��N;�R����d�����ۦf7O��B���2�b*-3O/�����g;�#n~�ߤOKU�.]�X����oXG	�P3���'����2�BQZ�mS���̆B!�7���g��:u��؂"�P�bN�'���*c�I�OE� ��W[m�0p�����/g��!D끷M�n�2
!��^b�K��믿>��E�n���HR�i���uv�̛7/\|��a�W�G�����S4X!Z�mjv��P!Du�F~1��<�5��y��$5�����0`����V[�Y�f���~d�����ۦf7O��BT'>�F<c�}�ٰ�*�XA I������%�\bE�~�_X��2�B���mS���̆B!��^�
���{�u�YGcc%�����Yt�u�Y-�`!�hy���SfC!�Յ���F�;�\�|p�Η$����	�:u�L�B�x����)��B�����R�����ꪫº����۴�/IRz���-<mڴL:t��BѴ�mS���̆B!��W|����z뭰�k�W_}5m�K�T�f̘a�`ҢN��z�(
,���65�y�l(��:��g�����62$���?M���$5@�&M
�l�M���~g�
^�y���y�ۦf7O��BTq�3s�>��c6��uI�]T��i���Yg�e�%�v*4�.�'�x"|��g��u������2�Ë/�>�����sυ�>�(�|c���7d�;:1���@v��?n���'��<����^�S��SOe�YT����{F�|c��{��ym2%��hx����)��B��ǣ��gR��7��M8������-/I�"�C���Xk�Bo��f�e0hР2��K�/*t����t��>�u���[f��{��׿�ufy���n���b8�#�|`�s�1��:�����g϶��������Ϭ�(�~������ym:L�u�y�С���>�?���:B4�mjv��P!D�G����K/��W^��������Z�(���t���HE�ԩ���mZ���>����������k<ג���~0�¨Q������o�)����<�Hx���'�|bX,�\����~��b�믿~�Xt��N�,Ƙ���>�8
xy��q�,��e�L<��3�e�����j�|�AD����Y�R��7�h���.��0y���c�h}�K:0L@��G�9���;��R�YƵ�}����<f�`�g`��7�ܪws�Dk������ļ���v|86�������y睖M�|��Գocƌ�|�9�#��d��/��r��
�9CW6�h#�ͽ��ka�M6���C�r��X�u�>^y�;f|F"��q^�{���s�ӧO����x�=J�s�Gq
��}��Wv^r]��c���O�y��
��{o;'�1��	�(,�_֫̆B!*�8�K$��2��,�3�׊��R��[.��N����{sѨ��h���0x��\rI�tU��Xǎ�|�af[��D�N;�43f�Z��H�!��=�ܰ�z��oC���K�	&�����a�6��X�}�|�t`�N>��0b�3"�;�	�}�hs�aj�l����?>l��Vfn1@={���z�E���~{3��G�޽��GD#�k�x�|=���o��*�s�1ǄSN9%t���ޟ�u8�s�9a��׷�e��]v�p�嗛�ه�v��:�0�t�p��4���?u�Qᢋ.
ݺu���裏�g��0~,��a��W_mǚ��kcxy=��x��>�@׮]3�+���9v�ذ����b9:��)e9f�s�D}1��O-:$�H��1�w��ӱF��Ѷ�;�c�k�^����{�9s�}&��3ǉc�{�!��щr�A�{�}o����0 v�a��}�{���l�0��8G��=r�H3����Xރ�UfC!��M��QK<���,>�u���9�k��j<�t5�(�D��gL˙g�iQ���+l��օ�ӯ_��62��-Ұa�̌a41�1���R`��t�If��������W\q�Z�o׮��%2x�	'��� �=��ˏ;�8�2��Ȱ����w���fͲ�9w��b�0V�Z�#"��M������A:{|] �ڣG��b��9�ǘ=0f�߅/ǈ�\��naٵ�^k���?��"�,�e�],��w����`�3�8��gj8:�0ny����L=�(�v�mW#b`"��2��J+�d�<淏�X���	�s�y?������;=�>�f�WXa�Bt�g?���Dm�H��7�l��.�@��}g�2F�c��`9�����O��5����s����r�Αx�a�=�^e6BQ�ĕ�i��$M�(
�{*I�A�s@�'s��9s��xΗ�@D4yL�4�x�Fa,o�a�I���]�=�P���[̌I,���
�/�����>�1�aB�~���iU�y=ٱhD�}>�"ݖ�I�V8_"��;�#���T��:��#�1_`�="���ں��a}["��gt"z�D��G�(��-��®��`�!s�7Q�ZD9���2E�s�I�tÚ��� �y�t�F�u,~���;�������!�b^n����/��m����+�P��g��X��s�x}: x�Ǟ����ݰ�0�!� x�7� �ۥs,�|D_Y��5�0�|_Nԕ�ߩ\N�~�?y���3�����6��hw��t�q&〿|�7�tS8��k�&����Ų�T�2
!��\h�Ҁ��IC�(�vDQ*Mu`"2�c�b�r���&�i���������<�ѨC��Ϸ�I�J$�.}��w�e}�y�aKT���U��d����K�ؗ7���%�Z{���9���"�r��0q�6)�q�]��H'��[,�N��D����`��s՗����\� 3Ε���!b�f������1"w����A�y��ql��\>��0���qeL1)��c�X���3`�S��1JSccH��}"���ӧ[j�/'s��9��߃mC�����q�`b�9�����9H�L)��"����V`����e~��>��1��^ m<N�������j�0�l�?ޗߡ�Qt7�|���u���U7�tv�r7����2øq��3a��n��p߾}--��%��#�|�,�0���,c?���q�q�� �eq��e�=�^e6BQ�x�3��4�h���Nt���T���0��5�~ ���4A���h�e4LkF��#S�����!��1��%�\�I��rC0C�rؘl�$pd�k
#�9� bd�.���.|?D��8f�1e���y%`��'z��%=��P`�
�P�/VD�$�76���c�0�s�(��e|(cU��5�|3Ɣ.��6R�)6�D}0挔���3�y�}����昲/�uQZ7�:t�}��e1���yL�1q+��C��":Y�c��tb`�x�S����ѩ�{^y��!Az2�1)��`��ͧ�!�|�^z��J>?��Y�ka�9�D�=�L$#N��0�9�8������ �=9W��tn��D�9Ntb�&������]y*sm���w��A:4�1|���� �9���Ų�T�2
!��\0�4L<���4�4@+MMe�9n��\�h@�Az2b$=�.��k�8�M3f�(�א"]y��/#��E#}�e���4�]1�4fY��RKY��Ez���pMa�0,�Ac1�ZS�q'����E�+�#�I$��V �֋N��O�<�j1�C����4������
4�Mޏ}�e�$��O�C�u��!f������ơA����������aD1�<�	�3�q���f�m�?cP�:���1f��1�7��H��	s<����c�~�����2n�#�D���o�¾i�t��Ɋ?�;�C���̾?G�9=ޘZ����s��|�O��W����W�f�IW�\�����s�\7����A$��G���TQ�'^��m� `��8c�9�1���=2i�N�bXx�W��BT&>��F>+DW0w�6�5�FDrYF���￷+^XF�^�h b >���k�M��կ
��*Vy��,�1�s�έ���Z��4LQC07�Ņ�&��C��0�/��5�1���!�ҥ��,��]l"�-�1t�9�11L���QI���1 Ꚏ�-50�>U���&�߼G�c���DǉW�4�{�5�	���۝�/D},�ի̆B!*�x��W���d%�XL:��� _`�8��h�WϦOD�j��<�R��T�ڄa���Hs,/�+� 3&�Ǥ>��Ӵ=���T�Xn�c��)v�ȍ��pVT�%�s7f0Y�Ѥ�R9�_�H'V"�����)|f>;Ǡ��[��Dn��zt�.�-a��n�7'r��=��&�x�i!����z��P!DeBc�F7�o��!#�P�*� ����8��� c�7�r���1�q��*ˉ�3�a��d���DT�tj�c������ӮG��By�(�)ҕ���|}�����|�(���� gY-&��+�c9I/%e�)�CBQ����z��P!DeBc�1r��"���9�k�D�e�1��s��8&�<6��b5,ǤRx���B��N��X��t��A���D_7~�ؾ�m��s[�F�<L�#_F���Xe�|�<��S��eL����c�X`*�#W������)��������7��BXB!j��T�2
!��L� c� QJ��V��2���J���܊��9�� -mӦM�y�.��y��*�T��QȆ�˾���Q��j4�CV���tF�q�`�R25�0�բ0Ux}]�'���g��gb>U�������񈾜ʿb/�2�Yѹ��畠�V]0��[�&\�/cv��������q��Og]�|c���MGĲ�rsC�{��^ͱ��@Q�r, ����c2%(����1��ރ�UfC!��IZ��\��r�!i[�"T�F��s���SHuN0"Z��2�H*O���`Q}�b�2�馛f^0�Dwc�`�T%^J_����t�`��K�&2�r?�z�/��tB���7�o�90�#��.oi�R�oc0Y���ϔ;>�NS��H'N�,�ڸ�.�d��O�y�i}Z2:��V9AǤ�7�N^$��γN�t!bޏ�UfC!���`"�>���̷X�b
>�i�.��2��'UZi�ϟ?�R�ن
���˽03��K�y3OK5g��=���&��bľ1�ŰH9��2s���EA ��|�X<&5#۷o_+�Ŕ8y"Ś���^qR�y]"Y�0��az�Ӥ��1���O+����5�D�0RLwDd��$�1WL���?,ø1�������M�6�$���v��|D�};�a:%����-͟�8�H�8ޗH'�7��(�`s�bV)�ư�� �y�}�-����}�]ێ��&XF� _�sy�7�7m������qS��L���28�9�9.Q�s�)�� ��^�����o��>SP�e�W`�\_�h<f���|���@����wޱe�cZ$���}�g�}d�yl�1�>Uǔe�|����)Q�����s=`[��)�(�ƔJ\9N�c&���8�8����iޘ��1����OEo^�L7��8 c����b�?"����z��P!D��S ��NØ����%�~a�|�+��4�%�}��7�"��lh
4EטG:���]f9��RG1M̥��Xa�?�p3�{��N��'?���d� E�`l��w�7�s����}1O�m���/Dd?`�Yg�����L�C�q�p�=x_���>����`��8��a�{��a��yc�-�Sd6���83g��#�}c�7�8�,ǀ�r��/5�2t�P��hذa�اr��Y�s��
�t*`��g�.�O�U�Od�������?�f�N��ݻ���1Ǉk6�t���L$F�j�\�9&���v�i�́�}ٖ���3��d��1�r������3�"�~���g϶c���q�9ѩS'�ƈ}\m��l_X��Ǳf�WYe��p^�9�����`����Zdް>ߋ�I�&�q���[lQ�S^�օ�sjv��P!De��uh����GD���"4P��E�S�C��F
�R\�>L����<Ƅa�01��&�F�ͧ3cL�.
�yԏ/�a^�;pX�A��wt�`t0��_N
7�N����x�0�!_�]�v��0��}���2<��\�0ED}N��!C��ɍ��0��#�t �~�OT�(z��,��F��Ͼ�>��&��t\`�8�5"�D�}�G�eF3�'L?�+�W���6��e������A����۲�|טx:3}9����2�ǰ3�ŗ����c�9G}9��<�������e�S�⍿<f.g�8�	t��%
�q�a�V���;��e|~�/�s\��q2�x�1���*��B��&6�DWh�Ѱ��G��'��aL)����}�f��&�K��D��Q�8 �����TUL�?&3�������`�Nl��\s�¶lù����/ǀx�*�#�__�!��Ü�������V�B��c\'���DB�F�?|n�˧c�1PuC���E��W����n�1˾�@�ql��4��0n�e(�I'�d��:D?���2���Dl�}u�������'����xY�&r���&ڎ��ӧ9ޘW�(���Q��?�;#̔x��s����x �y���ǌ}���N�3�Hߦ����_��:�(��o���g�}�!t��˄�Yx��W��B�'��q���4��JÍFQ
z��J1u8�R�H_�y"R��IR�"j�	��a1=tN�g���'QF��bnؖ�W���a�h�?f�ǆb����"�O0��M��F�F�H4��H��q����>�k��J�C��=zta;���8��0��x�p
�MRl����K����i���x�1�nN��3���y�� {�%��<�;�:�����xi
k���yd|t���� �eRʉ�Q�u��1��`3���#��Iif9�!����tv�y�|S`L�G�9_HC�>T��q��y�)�t���~>;� ^&D�65�y�l(���p�K�86�DWhp�0!���y�����$IM/�+Q0�!�h"&�XL)�Q��d0�1K�cL!�5{��q��X�mH']��m_R��R^#��P�}0����Ф�2���\��(nj�I;��1�t$�����]�D����E�k|,H�&�֋}�����}����t�1�,����~`r��:�l�M����cH�}f�o�y��7��v�<3eY�O|�ҤQ�y�4_:HV�Xl��tPU�θc^�kzm��f�=��=}�(7��ȸ\R��w�O��M�rS`R��F�iǇcJ�sm�N!�o�/ǜ}�y:,x��X���o'^&D�65�y�l(��|�S�1�D��h0���Q��D�T5I��^��;���G��U~��`���K)U�c���a\��ALF��� c���u���߃�3^���0���e�o�x�t}�}���^qٗ���>F��������c��{챇��k���,� y�x1��?���@��+\�O+^��a�h2�S�EJz�Ϭ����&��x{��e�0�������>�şg�����{s�}l.1���� �9�� � �m��_�Y>;�i�:�TK싏U�ޓ��o�1�����u���>+��1�w�F�<���SfC!��O���A��S�h��X�hX��i+IR���2�-�����l�H@���X*�lH
(�����tyKB���Ϙ`/F�q%����V�{Im&��ZT0�>Q1P��a1&؋rar�����^�Hx<u�y�mS���̆B!J�4�=�KԀ�"�^(��\��ܹs��)IR�
�J�)�MƏ��p�ۮ�ǌ��#t�@A�tY�`6�~�U����7}.��9V>���``�P���������D��X����"o���<e6BQ����A@���2
�0���7�$���r�����ͳ�$��2��,��8���SfC!��Ij~�$Q%����ӓ$�4D�T�Νmx������`��dm�<�2�B�4�mS���̆B!J���R���;�y#��D���sj3�������R��i|�0���B�t�mS���̆B!J/x��b0�_�=KR��~�b=L�C�7SQȊ�D�)�Ul5h!�u��M�n�2
!�(-|�#�L#�4�J�QI�JC�_R����q����]ǌc�1�Y2�B�x���SfC!����>�X�����<��na��i�Z��VT{�g8p`��1�iǎm�E�-�"�mjv��P!D��>3�$Ů(z�����jI�ZA���|�)�=����mʲ�?��:�4X!�65�y�l(��t �K�XR��;r��p��G��iI�ZI�]vY��{��u��e�u�V�����!�Ń�M�n�2
!�(<�K�X���%u�yD%I*oQ�9�����k�B���ۦf7O��B��e��O>�$L�:5���/mGK�T���̸a�ڑ�����!�Ł�M�n�2
!�(H��@c?��ð�^{�[o�5mGK�T��S���CL����-���65�y�l(����ӟ)�3{�����[Y�����+�{�1��{��a	!Ģ��M�n�2
!�h}h{�+R$�M�6�pô�,IRk�}�cǎ����
i�2�B�h�mS���̆B!Z�R�
�T��0aB8������$Ie�ɓ'�8�F5h�B�Eo���<e6B����̘@�2F�g?�Y?~|�~�$��u�}��]v�%���{,��o���<e6BѺ���"�w�	Gu�E�$I�=���a�-�o����CB�F��M�n�2
!�h]�y�F�[o��>��p�嗧�gI��Xdw������`:����׿�5s}B��65�y�l(�����oB۶mm�/�a���Kks�1aҤIi�YjB=���+�H���ϟ�O�n��t~>�·T_|q7n�u���f̘a����OI�ۚk��|��B%觟~:t�AV�C�^#�B䃷M�n�2
!�hY0�1\���)R�Zk�p�駛5jT�~��Pg�uV�ڵk�����W_�M6��o�50`@�3gNa]L�gΜ�B���<��Cӧ����ol���sN�ҥKh׮]Xj��B�^�j\��B��,�W֫̆B!�R?����裏�)S��SN9%8Ц6j߾}��8mڴ���,�L�b�-���Ԅ*<o޼��F�w���[������[l1[~ꩧ֗.o���a��7�-�\X|��3��С�����o�p�i������M�$��f�u�^e6B���x1�}^{�����6�8�p���������v���ѣ��)p��k�m����=���Ýw�i��X?"<D��u;u�VYe�н{�p�gZ�XR%���瞳��'�?���<� ��>u�TK�%�� ��s�.�]v�MgӐ�S�r�-��O?���st�`����SXV�f^Y��{�'̝;���O<�D����k|��>�Ȗ=��њ�ֹ��K�%�\>��3�&��>��c��C�1#ܳgϰ�K�w����~��_�;�î�{l�y�C�n��{Xr�%�2�4x�����s���0��/�>����uN!����ϭU�����t�(����I���(�8"5��#�<�`����p�7>�`xꩧ��bv�y=�4�<� 3��C����_�bff֬Y⯴h����{��^zi�{�S:'n��V{>5�|�<�zT�^g�u��C=d����vN�Y��M�#J{�M7�|���w_������Sv�g�ݠƐZ����a_X�gtYd�;�PXv�]w���ù�g���몫��1�|7���ᤓN
+��B����^�&�׊�?���v�y�����3ïM]t�]�~�ӟ����;l����!�y�4s~�m@DZ㎅���{U��l(���F"n"�ֱcǰ�J+��}���O>ٌ
��_��W���xc����=�,Eq0寽��5�i,K�&������3��`��O~�[�0"���Gy�n����_0��=�'�l�Y)F���1��N�:�6�0�>~��y�1`QD�A"���-�xx���e,0� ���?�����~=�� 7�綾^
W^y����m��e���a��9�4l�S!J�M=n��l(����W^y�LѿΝ;�UW]�"n&L0�B񡴁���^"~Dc�K%����
c�y����w���o��M#�>���b��v�o��=&Z�}�jW}�牢glC�r1J�nj�I�vq>��⊶���e�`�73F�蹋,�� 7^tJp�I�'�����]��Z�^Z�!���ꫯ�����R�����W!�(�7-��u*��BT�Gƹ�;�"����_?w�q��o�2iï���@$����޳ϳ뮻ZtZj�hğq���R�q�����R�9�0�.�g������'�pB��O�~>�V[me�x��SvNĆ���VSU8V�~�l���k�� ch\DY�����BL,o-�Xd~-9�Ss����g|/�(�.%�^^s�56=)��N�F�6�R�������Ne6B�r�F����J��#������~�E��1�N�""����ś��D$�b@�~����?����QO2�GrN��|b b�����TU�ГJOd���c-��Lg�h-���瞅�R�ũk������Bn��l.�c��믿�S�-��e�@�ǒ�Pia�r�� �������B
��\?��NsBZ4�4dDp�1, �L��t������Tp�u(��B��"���.Q�L��w��7[�p�hk�}jJ0�4��8�7�|3<��3y� �M*^G�`,�-cZ�����X�#�h-��9[��f{L�<�&cye;���=�'R�}:�ѣG[j�/'��r:x\�ƈ�xРA�m)���gϞm�Ȋ�q�1�� 3���W��������T]R��@T��7���Mq�W_}բ������>�4鵫��Cb����c��,*����?���>!Ds½�n=�l(��
�-U�Ǐ�i>h�A�0�0m�5�~�D�h���@&��_6c��J�T�~��_���t0-���c*�� 3�H��ADl����0b�3�ܣ��83����|m�H,]c\���ql�S��"J�2��T����cÊ�fٲ�.kY(����m�J؞���؅id����c���[ҟg̘a����H�{o�}��]c�E7~'tL����ZdP��-�M��{g��l(���BR����J���<~�a�6���}K��&���C��LO�4&D�����0D���z�bL��T_��b�0�����;A��˔5�z뮻��3�����\�뭷^a; �4M}O0"��(�oG%g���_XN'����L����&����@,7�b�]�,L�a�j|�R��������3��UJ&1�F.
t�1f�s�C�6��� �������,�Wի̆Bњ�h����8��첋5�HMX�B����G�1��f�#)�D3Ju_�Y:^T�]�/���G}��u�J�]�`��C�<��|]"-�mُ���m�͛�>U�Ε���R�����ϊ���KQ�]��O�6�"���}�os�?7鵴!PT��kd�)��^{�P�a!DS��M�n�2
!DKC�4@ƍ��qȔw�y�5�҆TCH߫�QL
.ǂF$QR(�~�i�ڑ�I���J�TM��aԨQa�6_|�E�t�k����H()�dt������X��m�ЙB5~7Ìk�zOG_�BQ,x����)��B�4����if�^{mK]:t���$0m0C��D�
M���I�B?��SV��iI�&5Z�����MQ�R�M�3�̘����>�Ư�ҟCz]���|W��c��m���!�h9���SfC!�h.h�P��)L�K�q���QT��W2D�h2v����3'cV�b�)n�~����-IU'����ҷ��NT��4���za��F�F��?/
�5�>(������Q0r�H�g��+�y�mS���̆BєШ�p����K��F�z��O}��]m�	&Z��`ҡ1�DR6�|s+|t��Z����.m�KRՈ�����5�5Eed~��=���f+1�[�5�.��p��[����+��hq��B��mS���̆B���;e��3u�UV���nJ9u����Y��)���u(<�����@�Kb�K�Pi�^x�-g��b��D�8��j-az�R�*���[����H����5���p�Շ`�4�0}=!��ۦf7O��bQ���T$���B5V.4��FMm��)�p<���̏L�U�.���TRcƌ1�\�>W,���Ӕ�lܸq5���r����-�x�m��O5�Hs�S�H4�^{�5����eHC�D�"��ǌy�>��f��k��F���h�$^7W����И;��s�Dm��&yd,W�x����D�x*4E����'�RI!1�nC���@�N�9^�?�6����Ǝkl�,��ɓ'����s�f�c^l�#�E ��a(\|�C����1����{��.fڧ��t��׷���G��!!Ts���������Pd�����w��'�o!}-!Du��M�n�2
!D�<������ ř��i#�6�����0�Gyd���8�x�-��,�Lc��q�ÇO�*6�L��}x�=��� �]��4��TZb�%�r:�0a��K�:蠃,-�Eq��VZɆ.�[�D�A@fJK��f� 8�2a� ��Ϙp:��������G}N;�����+�o�z��!���UfC!����_lU���r�p�M7YC.m�䑾�X4|0$"�7�|�EY^M�袋,���j���Xl��LV�� 35L,��ݻ�����`����=��h��c�I�%c�9�5���_:
�{�9�f�wN!'/|Un����$�9��]w];���Eׅ�2�W&^7W��"�Y�fYԉ1��v�5��H�����_�Di���[I�� 4�����)Uw�~�o߾�V����ml4�!RU`)�={�#F���s!5����,R��z�Y���3ΰ�-Uc0:�sl�6J0)��V��T@�[���ؗ_~y��b_���c��3+ί���^s�M7��:�(�<�:�Sl�!�@89�Gq���{챶�1��@
�q<�@kM��M���İҞ��r^������?��!�J}^t�{L
�L�6-l�����A�h��:�^�x�\e6B�F?������E���]Ky��%��4�{��w�.]�X��jSmCH���N�'m:+ME٥�^ڎ+f���S��1��/~a)��X֦� ���f�0�#��/��w�i'���j��;��������� s~�Y����)N���z��yRq1��e>Z�m�����^x����RO' ��1�4r�1x�O�>�}��Va�N�7�u HE�P&����'���Ss�̱���ǉ4r�$����i������{�֪�MMz����g�{���}�ܿ8���!*�/5�n-�l(���a ���T��q����hz�<���"R�7n��(��K��EfS� ��W\Qx1��(gm�����n�U��EGE�6m�p���x0���ÊbL�%�P��
�C� �C��h��Dy�p���q�.7�I�a�w�u���L�.C$x��q�a���5E�>L{S�)��=zt�Kd܋^i�oӓއ򠃇�8Fx���2�BT(�+kZ�|e6BT/�*z�1��;oo�:�y��W�PҠf�_���_��ūB�j�1&K.���Eİ�����7�h��ϓ6]�bLZ0��Tt&���c��*�q3M���ưx��a��Wm۶-<_�&�K$<6Ј�f
!𩧞Z�y�I�
�y�VX!Z#X�<�dhi��Lt�)Dd�c��=�������� 7���|������~�~a�}���k!��5�n�2
!��O?�Ԧ��80��9eӆCJ����ӟ1>����V�e��Zpa<�߹f�o׮]m,()�C7z>��͑��e�.F��q�����K�F�1����8M�N`^�cCb"���r�͟Z�������u���[�4���u�Y5�� S�ȅ&;V)`İ�ƤA�&N��Ɛ�u�]6~��<�0٘c�ߖ'�_������o�1�#,De������WfC!D�@�1���I
)�k����g����W�F�����jSm����.��߹FL�ØWƵ�3��SH'P,ҥ�T�X�&��1��r1�3G�Qs`"�t��\�߲��0c�yO�bş����Gn��tqQ��S�Nv<�x�ݐ>?s�L;v|���Ӟe~[����Bg���k�!d}hl����N�e6BT>�CI�W�/)���J_C�<4ΈT��Lj%f��[�U�`���8�1p<&�76�T3�2&�E.Ҍw�a3,D��������
M�)6�|?`"���g�}�"2��X�i��;Ｐ�+"�b�T��)�0'.�0`��;�^�zٱ�j6c\� �).w�xm>s���ǘ)�0LF#Ӏ���W_}Վǜ���W2��Kz?K!e�k�(\�n/�(�W&^7W���ٓN:�
���Lq��!����h��U��f|j)����W_]�7ǆ�,�8L�m����b��K�X���M}Ķ�.��B�Y�h����i�=�4��"���5(~��D'S*~��C�PR]�g�'�x"}�����Z���b����n�9�:�"e�N0�Et��ծ9�/���u8�^pQT��r,�)�҅� ;��d���x���'
�ѡ�Xf�+2/H�']�cJԗ,:R������S���#���С�x}�Q~���B�҆{UltkSfC!D�AQ�_"U4��J��u�0�l�f��D�
c��)�R��JgG*�=c�I��ܹ�E���XQR�1��;S!���XR��K�v��[ڤ���;:JA�W��B��o���<e6BTD �K��IH�Ko�)�k�� .�E�L
洛�����!u�Te�y�:Eg� Qm
���r�---��hT�?���w��O�~�a���;{����{��X|R��x��!�����/���?1Ě�J��o���<e6BT�!v���q��7��t{QZ�`:5(b&5LLSD*0fF�^Q��q૭����f<42��L���}���m�,R��ڈ{�/�d�x�+�������0�1�\36�l�����g�B�x����)�����1c���$�A?����ۋ��S�il��f'�|JI�&"|La��i�����XQ+R�1�D{)nE'"c����8�YƷ�I�1� 3@i�B�.x����)���<a�I����F�޼S��Ei���E��}��g��n$I*N�1S͙h���%���K/��^�,�K�����#�YƷ�I�1����h���
!Z�mjv��PQ^0��I����sϵ��M[Ʒ2�i�(�C4��i�J啤��i�����^��!�Kq9�c�*7�D{1>t>)չzH�1�+�D����:H�m���65�y�l(�(H��޽{4h�5�қ��oeA��8r"�����i�\��$��ƌ`�Ό����e�mң��bz��zq+��#��:��ƍ�BjW^y��!J �mjv��PQ�0}�1�D/���oeB��8�(�]��θE�1��G���2��s'O���^�.��+�T����cǎ�?QFރt܆j�������K�|���z�/�Ц��F������ӑ��ehƗ,~g|����^��j�ÙO�BY�̧�
!Z����z��PQ��cZ#ҝ�;�<�;Wq%h��1�{�g8�������Dr|�]wٔ9�駟^X^�b����[�.���P�f�����?v�ذ�⋇���*y��ǈ�(zE�_:��K��Oc$�+R�{��y½�h�ԩS3�	!Z�u5�n-�l(�(Mh�m��6�w���˜ހe|�:AH����h� D����(0�{���`ƅ�"�H"]��a,L��0��̚5+���5֍����c޼y5�᷏yM�'Vm8���c�=;�.�xa|�^{mGϴFD����dzE]�����36�aIt^��
!��u5�n�2
!J�Dj�Y�2eJ�+�[]�iП}��U�}��gÉ'��v�j�Դ�� �뮅��=��p��G�x�L�:��J;��={��۷7C�w��J�&ŝ��V]uU���k���{.UC����o��&�U��ЁDGJt,������#��:�vO9�йsg�C:�N�|p���tkQfC!D����/�M6��
���No�2��G<�ȣ�4�v�a.5��0�Ӎ�BL�#*� �:�9��1�^Ĭ.�5����F���;,���c��1�\7��^3��Ǐ/,�QA}�V�>��E�I���%EECH��1\��f3̹�n+�hz���F�6e6B�>D!�>���*�Xc9����V7q����&���X]�t	�w\���ڊ`-���?�ia�b0��bM�6-,��fZk3�|�mڴ���.R�� �;wna��6��kq��4�J�A��w_��plH5g\�ҟŢ�ޗ:�H�&Ӄ��t;!DӲ��V�2
!Z��$��ܤ7T_�Q`Ɓ2%�P�b:�[o�5���fl��Q^,��E�b0cnc1�(���� 3������֦�p\���t�U��.۵kgt�=Ӊy�3����&D�����.��:���!�N�tp��|n��l(�h=n��F�;q���T�W�x�D��q�A���O�	f�)�(�#5Ny)�y� y�5�m��50E�b=��S�%�[��#��)��BZ��j3�yc��ID��]w�0|����s�Y' ��ӟ5�W4��ڡV��9��kB4��b�[�2
!Z�xp�ơ���8e|E
ƇF��B��I� �1�D+1[M�1cF���X|�	'�0��)۶m��tg/z��9昰������`��]}��Ä	
������3g��d��ŴU {�'��ԯ���2)|��w&Ģ�޻:\��޿;�����{]�[�2
!Z"��R��4��)�+j�S�9o0[�Ȓ.K���T/'�t��9��s&I��X��c��zD���md�ol�I���kҤI�����h�ܣ�0b���K/N=��0y�d{]�_���Ί��Tݾ���m�/����Izw�fS�,~��vB�E�{]ltkSfC!D���|���MR�WC�	&<{�lK�{衇µ�^���kf��c����x1G�q���'��ƢC���9���Eiƞ2V��㏷F0QH)Η^z��O�gޓH���2D���|�y�@ے�0y<f�k5��:�.���_�*����6n���hn�{����+������m���65�y�l(�h~�9x�`������(�+Bj�I��XQ�h�q�w�}9$Ew�e��BkW_}uaZ�E�Md���qz�T�����P���TXq��ȑ#-�3�5���Ê��� ��;t�1����t!D��ۦf7O�����o��_}�������e~Ţ�`"~4�I�%ՓF?��_��6�+�֘*i�6�1���$m�ym1D��Dđk�H��g����^{Y$�+
W�8�6�h�tqI�H;i�C��s�<��>�Q��W�W��=ޡ��ad����o���<e6B4�?��D�bz����M0{�[�:���Ծ��[6�#�XU�s>bfO;�43�o���Zn���b�-f��<^~����¼�]�v�����^Q�~ذa���I{3fLx�G,���O?��~t�h�_���|�Ӓ�����6B�⠭���<e6B4g�u���@Qz��M�W��qO#�Hůh��&"L��U��a��O�n��p�-�X����/�8\~��.}�QGY�)U��,�T������@�3)ژ_�u�{2"������~����"���#��:�a,�6B���ۦf7O��M)���e�%�tқ���hj0�q4�����gK����,�TP�c�12D������~؊�`�I��c�w�m���[Z�%�:���/[�
ԭ)�c�S����o�>��-s�˴3�+J���PA~�u�	�qf!D��mS���̆B���^\��AT�x�t!��8�F��:�`��D�1Ì�%=��LɃ)&]�1����Sј��U��SDX)�V*�\�ۡC�0b��f���/��?���_Q����iҺt�b��t!D��mS���̆B����)�g�}v��&�+Z7�D�1 d%`He�f�$1f�)b0ƤLc�)x�<^Q��[oݺu�rH�E�
�(L�E:<�m���j��c})�v�7X�s`ӉC��4�̯(eҶ�Ű�j���3gf�B䃷M�n�2
!E�+IU���&�+ZO�����a�
c�c�)D�?�9�c�I}��'&��CM}�T�;vl�u�]����o�8��p�cZ�����]g�-������᪫��4}���d2�yC8�cL��_��J�F ���w�����B�,x����)���q0/*�sS���d|E��a"�&UډͱW�&"Lt�M��k�����Ν�z��4g�k�c��L����B���t�0V�s�)Ź���χ�O?ݮ�ݻw�vX��k´iӬ�Sq^���x_������W2���I�����CQ���5�ۦf7O���7�k��֊�̞=;s������LC\Q��S��n����ի�ma,f���}0ORVDZ)�v�M7Y��;��ƄS�J��c��;Z�4U�+�I&*˹QL�,L+�O�-�G��f���2�������'_�/�1RD�|��B��S����������B�"i�<���R�����mS���̆B�����b�����gn^2��\q�	&�F�tl�IG%M���;v��Z9k���VPI��y�����o*�Sh�1�Q���s�=f��[�J�b��d�MB�Νmni"�k��f�ݻ�Uk���F�BV�]�c\�ȑ#-�������I�����2֗t}4�5Jy�L�~ *��1�B��65�y�l(�hܘF�m�6
�7-�_Q	`$���&���D�0&g�q�Ϳ��|�����[�L�E���<��зo_��)2E#����b9 �"B�p����SЇ�����J�����N��f�:�0��]��b��>��r�Q����:.Ɨi�0�����U�WT
i;���������/���E��t�'ڼ�4�қ�̯�$RLZ+&�
�D�P`r���c�
���(WϞ=5�y����}bN1�P2]���+���vg͚e�1^�u�3o<�4����?�;�>�1���u������{��L����j���4��0�&�����BT;x����)���8��r�)f~i��7)�_Q��&����2�I":G���D��TV�u妣�>:{������o�y�>I=&���Gd `@)��SiaJ1�t�P1�J�G�1�>�t
�y��0�l��Le����}��_Ou�|t�+�+*��]t42��t}!��mjv��PQ?܀H���)����$�+*7�D�0"d?Py���q�D������۷����5��E���3���E!*
[�Ũbl1��P"�^)��9X�1�c���˹A�#h"���9:S0�'a{^�׋M�G{e|E���/`ܸq�a�{���
�65�y�l(��n<x�p�sӞ����D0�"p�4I��w�	%�XP�"���ޡ]�v6eR9��ňQ���LL�S���UT}&��7�03�w���c�J˧���!�q�y�H1f��v|ϳ�l��n�ezE���5�iȘ���F����65�y�l(��n8Lñ�z�����f��/D%�`��D�#L��#U��v�7XDx�5ְ�qL��)-X����4(�Z���V�k��3S_Mb�.�~'O�l�x�.�В��1���P?����K�}{���entY�o��BTi���àA�l�t]!��mjv��P�7��S���ݻ[�+���Q�)�S�����01���j� R��0i�#F��9^�3v�w�e�U9�1�DR�`M�#�8"\}���Ƥc����t�j�+����X�1>�����%2���w��)�iuc\,2�B䓶=�D�v�mù瞫���z���SfC!D>�i�������+D��&��2�i����S$#L�hR�� |�]w�뮻.2$l���n̜�\�0ϙ3'�fM"�no��0x�`�����9�t<q����3����C1��X�J�n�ɩ��j�~IW��cyIO&J�����eH� t8�Y�u5]W�jo���<e6Bd����+[��Ɠ�+D5��`RX�IZ4�Ӎ0f��+��0��ސͼ��H3?���-E�m۶�q��c�ںi���㏩w������zD��Wvذai��h.����.��L/s��Ʌ9'�i| #δ<⣎:ʶ%������5ʦ,��s��Kg�g^���I�"tV1lA�#�jo���<e6BԄ�>����E��N�������{D�H��&�����7D�g��%��%�!>��,Bܯ_?�w���:��-�����m�N�����Z*�i���x�t�bf�"\C�5Ë!�pc���bt��c�hD���G�l�A_v�e�:r%iҤIv�8>�_�>;o:0Hm�,&�Y�2�m�lP����t]!�����SfC!Ŀ��ޣG�p�Wfn4�B���F��h#Lt��n�
c4I�%ӂ(fCL�ӉQ����S���e*_q���/���	�5�\n��f[��1��j���;Ƶ}��1��yj1�o���j��1��#�gϞm�%�=��m���3���~�l3�(Ǔ�G�W�W�� m�Pπ!�zBTx����)��������.���#Gfn02�BO\(#�8RLQ
:�b3����[�2��9���b<��b�IG�-��&��1&��1�Dw1��jҮ1�T4&���&��Kd�
ǌs�)x|^[���5����E�ӧO�ر��c.Gq<��S���+��� �Ij~��,D鑶M���v�Y���*���ۦf7O���wCaC}�&]_Q?qE`i>-��a"�L��e�)���+�Ҙ2L+�Z,�bR�S���0Ϥ3c��SM%c^��&E���b���������>�ϱ��1̼��?ne�g��M7��ޣ�磲5i���������1�2�B�i�;��p�L����ۦf7O���v�y�.�XC��%]_�pR3�aO�vC�o�M1�s������̓�XX��.����������9g��ؖH5F��%Qe"ΤX3�1c��M
u)����F:t}����/Qs��t�8Vw:d~�(Ҷ
����o9]W�Jo���<e6���AZ$=�D��J�����f���A��Ŵb�IK��b���9`=�w�����(ojz���罘��sY&e��)E�;x��w7#ܻwo3ȥ >/��v���|�^x���&���p�_�
�����
Q��m:�;�8�_DՀ�M�n�2
Q��Hf�*)�7�t]!D����1v���������f�.ÛG��9�/Lt��l���Sfl0ƒ��L�Ĕ$뮻n�8q�˖Ԃ�3�<ci��;�hŻ����3f̰�/~Dʉ��Y�1�s��
Q����Uݺu�ajǈj o���<e6�Z��p�G�c�9F�W�#NKNr麍5s�qJ4�`R�I�f�/Y#D}1��I'���j���2�X�ڈ#l<ss�K4����4g�&��6��:(F�3c})�E�tm��|>����J�z���T��p�t]!*�mjv��P�j����ݻ[CP�W�G^4��%FC��%�JD�
Ԍ�%��x�SO=5���a�W�۷�l��u�M�2�Ґ�ϟ�z�Z5o�<3�Du)h����m�L/�����3_�/i�c,3Ql��|�<Q9�&x���v�Q�FT:x����)���QzH��8�u��M�����SM�*�D_�������S����aÆ�}��'l���6��K,a�t�Z�θ�6�,���˦4�p�C�.]�J+�d���_<t�����x��6Ɨ����.K�&��4Gq�2_�/iۤ;���Q_OyN?��|��1���cJ8�kD%��M�n�2
Qmp3�c�=1cd~�EG�1�n��MA)��2�1Qa�	c�I�&M�q�b��aZ��K�&]�H�СCÙg�N9�K����;�"�W]u��C�6w�}�^"͘l���%��P��ŐSݙ�o��U�W��#m�p��c�q��BT
x����)���7�D`h��
!B<�#�>�c�1��O�	c�+�1%*��/�Y%BL�cL�f��D|1��/�e�%��3�نm���Z�^�J�饪3�^�[0�s��X�W�� 5����_��?]W�J��gjv��P�j� ���G�T�W���Ŷ�i�t2N��0�a�)QY1��D���1>��c-ŹM�66�S;s�L������j�.�bxIo�dsM���/-ۣ��\�2�BTqۆ�m�=�zBTx����)���7���[�a�K��+�Œv3�!ŘRyC�Y�QJ��ڣG���������fl1��Y��l���sǦ7��8�W!De��oƍg�`�uD%���Y�2
Qp�'}p��ֲ��̯�9HͰ��{��G�1����K-���3���0;<�D��e{7�>�L��8\+�Xc�I�6��4�?�UfC!��뭷�M"�+�h	�4��;<����c���gylvex�u�u�������۫�#*��SfC!*.�\pA0`�̯�UqC/[l��
פ�0��m'���w�vl��FVA^�QI�mS���̆BT2\詊J��� !J�͙3�`��_�'!DS�y�&����g����ۦf7O���d��>ܐ�B�
yX�'!DS_[��j+��\�Q)�mS���̆BT*\ਗ਼ڱcG�������O�ҫ����" �� 6����ij�.��o�"V���{L!�5&�(��&
1�Â
��>�s.������nof�y_��������s�ٙ���H$rE�x$X$�K��2u�T�ݻ��Qjo�ͮ#�H�V!�2�.��"i\�D"�c~�%F�D�rI�<��;��/�,�F�
����]FB�(�B`_�h���Ż7�a)�\��K�`��H$�T�lw�y'|��oD��-7�6��"Q��>h� 9r�F��o'�D�R� ��|�H$*�t���Զ�j+z���%戼�-7�6��"Qڄ��駟R�fͤ�W$9+�jժ��̷�D�R(�0z�h:�s$戼�-7�6��"Qڄ�~�u��)���Q��ۉD"Q%4�x6O�H$*�t���_�J�Z�����wD^ޖ�]FB�(MB GC�}��4{�l1�"��Y��T�N�ꫯ$V�D��*�)��~���?,qG��m�ٵa$��$���z��Q��ۉD"Q���Ӧ�n*=1"���
��x�:��$�-7�6��"QZ��:��I�� �D"���S����_����*�HTv���_�7e,^�Xb��[��r�k�H(�E��15o�<כ"A]$�*��֭K�V��x%�ʮ`���g�Icǎ��#�V����0�Di�-��B�(���D"��!>a΂ڵkK��D�IǛ3f�>��#�G��m�ٵa$�� �����s�H����6�Z��%����7+W��ƍ�?��O�?"/o�ͮ#�H�!p/]�T��W�?�D"�����S�$f�D�Ĥ�t衇�C=$�G��m�ٵa$�� ��n��N:餍;�N$�\b���G�ٳ��,�H��t̙0a�x��D^
ޖ�]FB��w�}���ԩS%��D"/�8��O�^E"qK$%%s>��Cjժ�� �����f׆�P$�]�_}�5i҄����K�D�Kǩɓ'�	'� qK$%*s�m��F=�!1H��m�ٵa$�|��9s�s��t��H$�"�n��&>|��-�H��t�9�c����$�N����0�D>K�q�������)����U�F��+��Bb�H$J\:��x�4l�0�C"�o�ͮ#�H�t�>��#�PB	�"���X5t�P��r�]"�(i���k����.qH��m�ٵa$�|��mڴ�ŋK��D^H�*̾��J��DIJǝ/���6l�{�$�N$rU����0�D>���O?��M���o�H�t�:�Ch�̙�D"Q�
��:v�H,�8$�J����0�D�J�?��2tG$y%����C�����/�HT�؃ױ͚5K��+��r�k�H(�*�'M�$��D^Iǫ�ݻ�ܹs%~�D��H�L$*��|�-7�6��"���A���=Z��H$�F:^a���+�K$UD:�\��4b��E"�o�ͮ#�H�t�>���e�H�t�j۶-}���D"QE�cϔ)S�#��X$�J����0�D�J��ڋ^~�e	�"���xռys5���/�HT	�؃W!���[b��+��r�k�H(�*�w�uW�3g�m�H�t�jԨ�X�Bb�H$��t,z뭷�k׮Җy%x[nvm	Ӥ������W_��իE)γ���_�ۊ�%}�q��%�"�_��ק��_�DΨ��U�_����ޣ����9�X�^�>ޖ�]FB�lЮZ�J�����+W���t
�¹nӦ}���e|[Q:����_~I���b{��qBb���W�z��/���%��t�D�D��_y;�1Zb�?ұgѢE����Ν�?��]\�\�i�-7�6���'A������z����iٲe�t�RQʄ�
�C6������s.�=��y]�|9}��g�0�`��?_���H|���#DU0~թS'�Y◨R�u�1�13n|E,FLFlF�F����t�������F4��&�G~���]}35ε���r�k�H�p�C�߿���ԢE]�j�M6Q�M7�T=;״iS�l��Կ���k�V������P�w;�y�4�#�!1BT)!.!>��լY35��3b��/Q%��X���؉��b/b0b1b2b3�>���U���7�;�x��:�$�%\�����|m���c��H賂��w��Ū AH7��?��5�7��h�w=�Q�裏$F� �1rɒ%*f"v��IB�Őg��?�X� T}��f�K\���M�p�����g��_�A�]�p�_A�p�c�;�����2����B��Cb� B8��������z���2��8$�
B�������E�Ƶ�6J�p�����g�;��K�g�Ν+�W� \����g^<��&z'>��C���� � F"V"f�Q6a��1�1Y� T\���S����y�&�>7#���ßq����_A�p���曪��/��Q"�I��?���#A�9g�ձ��e����x����PAp������Pܼ
k�I8���H�и��)��:����_A�p��	��&&t��d� � F��OR7;Cm�U`�`�b�f���P9p�͞=[ݼ�s�a7��$s��b$�Y� ��<�����N�� T��ћ���1�%��b���?H�A�b$n�a��6b����ʂ�O߼�7z#M�1|n(FB�4����`A�p������b�AJb$0bf\�X,X*�?1�v��>K� T'��� � ��H1������ �1�,1��P��:,�Pz#� ���l�H�� Bu��\� B�A�,���O�#��,�	�s1�� �1R� ��?1�v��>K�|��7�l�2��@\��PSp��A(=��b�������� ��� �1�,1�&���*��￟�J�p�x�T�~}]A�N�:t衇��6˂�'��}����w0 �U4�ׯ�|�>���ܲ=��3�W-�O�>�裏R��;�C����|��Kp��n�:u���^�*Q6�l3#>@�۷���?����k�$��N:I}ǯ�k���g�Q���f����v�mF>�wܑ.��rU�K͊+r����	ί�<��c�p���۷o_#�<��#|S'����6mJt��_����V�A<�Fp�b��	}�`W����i�������ێv�yg�]���ܰaC��nP�q�W�c�a~{����Pkl8�������_R"� �Kp����|��U�j޼y.>�v�i<I$�6�Z=z�P�oJ��� �W�\1��>�,խ[W�Q�FԽ{wjҤI�zD;�5lX����'�1b�� �a$�Yb�M\1�x������zn9�ծ���m��ִv��@�h�>�h������b�9rdn�������Z�j�F�PYp.� W���ӧo�|�رj9F� BM0L���H�M7�T�+�;!���ހeݲeK�����^��9��=�k֬a)+�6�ӦM�-[�t)���~jy�-r�"���`;FB�U���o��K/����bu�;v�ϵ�S�RϞ=i�M6Q�:wiP�'�p�
FX�!t�'O�����G�
i��J�}p��Ѫ!w�W�{�7Բ�]���Æ��t͚5S�~����E�g�Go�4��V�=�C�Q�l�0�A�u^�A��p����Y�_�~�w�~p~V�Z�K�gw�r�ð�����m��F��-��2w����<H���{����Wp�@\���ru~�������	�իW.���N4eʔ�z�w<���;�M�4)�zaX��4n�X�.w�u����:��v����X_���o��\y����o��f�5]t�Z����斡7��.Pe��ԩ��= y�ׯ���`cp�j9�e���`͓O>I�ﾻ�^����ޛ�z��z��뮻.�����7�xc����9�&�6������������v���S��X^�^=u���5(�0C�����[�pa���x@���% ��կ~��|��^�}��G�Pܸ���ꫯ�u��0�:���ۈ8��w��+b-��`iPO���'�L�\r�j�͆6�� �f���.�Gu�(�SN9�>��s���)7k֬�r�g����6�A�r=�h󡭉���c���9��/��j���l�H質� #�guƌ�E0F`���o��_~Y}�ꪫ�Sv�a���'P@Óq�,Z�H5ĐF7���s`Ʊ�������/V�an���s��m��
�z�8e Ïe�ǋ�祗^*� c��@�@7�w�m7���y�p���{��}�-�y��m4n8`�w�}�U�;x��ӋX#��q|8�`�3��� ���V�Z����A�+4ڸ�2|�����0��#�P�/�k��14��}�Ɇ4zDJ�z� ##�B��G<�&O��5����En�'�|��Ah��0��=��_��1�=( �~��s�A�h��3L(��&>�w�}j�o~���q�X��,޶!�3g��݄@��ҥ��?�6&?ڐ�|c�8��l��B�����ckݺ�2�hӼ��۴�^{Q۶m�������������+3c��E�p�f8~�����0j��>��/̑���4�����a�q�w�c��2���0�('��/��:�@�mf�b/��4�ٳg�L1�9hs���'�����l{"OX�/��w�Q�n��2�g�����}�&�6ǸѨ����_|�ޕ �b��	}V5�%K��c���SO=U��r����G���{Om��"�80�w���Nev���;a a��\���?X�ڵS��l�wAA!C�5�X�t�C�tO�СC�2m�o���Y�8�!��?��sj7�ht�3~�p� �h4���ѻ�m�㠇��7N-�H;8N1���煏9���U�,7�h|^x�m����xF�:�ݳ��F�$XF�'ԫ�nx�i��	�`mD �n�����������D<B��M;�4p�<�p�� kË5�w!N�Q�c���g�ϟ��A9aʓ�h	��Z0~7q�98������>��0��a�b�|�@����o�5����ކn���(жA��k��,�0��׻�i���m0z�	̪ng�3F-;ꨣ�gm���'�X�{m�`�w���3�T�a��Y��p�=����e�C�|��Ϻ'ǡc7��M�ǭo�!>{�*^�v>k���2�d�	�Y�#�ϪF��"8��� � \�0y��@&�A�W_}���!qh���+=����@���{�`hwٰ��y�`�hcY�XU�F`�4~�x��.�b��#�.}���A��� ��:��(;���F}��`]~hX���F�M�o�c������!�8/8�6�������7���ψ[h���ކ�ם���tmM0F}�#ot��g�u��K��������H�Ԣ�����zU��g=a!7�ƭ?�͍��SO��0zߐբo�
��R-ײ�1n�`�cG�%Q��n����*�$�1ÐZ����D���u�z;�н�<ϸV�H�y��e�k���̙���؄|����pCh�X��� �0ެ�u0���z�<ާ���m F��3z�ю�馛��`��f���8}[���`Y����g1�v��>�0�����r���!��C�a hh�am�����  � IDAT��yR�|z0\:�� ��W�\j�w=\hs�5�,j�q�R��&4�1����2h8����СC.z�e�x��8n�u�1�[C�0؄���Ti�)8=�>8�6��yG�q#T�@��k�6� <��Tx,��3�q�s����m�N�&m���V��E`�� ��0<�3�֌u�/� �Fk��pF̓������ވ�,�7�l����/(>�I�<8/�b�1oz{��#R�~A�/L���5�0@��m��t=��������l|�_�|a�N<�S�m9z_x>�X�k�v����6���0�us�`m�q ƙP��o=��[�7�4� �^c9���>���@�� �1��j4��n:RA0�	n��l	����4h�a�^xA}�9X�r��?����s������`���cn�t0�C}�.]�5"���f�񼞆`�S�g�4�Sp��nPCA#f��s��^�N��ø����.+��n`#n �S� �\4ʃ�4��&C}���z���'��j �.8=��1 �=0i:.���6z�;4܃q�4ttoA�zaA���:4���1X��,��0z��6 8,�ö�0�E/�1C�þ5�-����O�&��[oͭ��Z���YH��U��k#�G�a��{�|U��A�M� ��1IzS�X��5�mF{����E9M�0A}�~L-�z�T_w�D�dA���Q�����G��~��Åq��G�����cN�<�q���Jm�1��f�q��a�����ur���ϼ���K:�h��7�zΕ`/?�%F�a�;��)b�Tڋ�G�pb��	}V5`\�������φq��z8�>\m�@�����A����1j}�}@x�0w�"����^�{��Mc²��CѰC��6	�����e�{���Y��P��ꉣ�F/��8bĈ����=L?:Ϩ8z�Az���8����`�9���^�>���a}�uwsq�WO���w�q�N�vP�Ϭ�ܡq�!�� cR���Z@�DC� M��ͨ�5z5�ևa��!�n�>��C�3��F"�]���&�B#\�[?�0���Np6f�����e��c.n������pn����9�iB�XO���F���
7?q�N�����M�pn�� �f��ܹss��9������3����!Na�(�#ׂod�o��vY��0��<J��H?r��X�'zBN�^�} �I�0gI�|׻�E�aه^�}X�G�i���9� #V�3���|���X�6�b�?�58S4~+�d�Pp4 �1�Q��mF{J���C������z�2��O�	�Y�#�ϪF��[�0��7�X�m�c���^K�	CP�3��aZ��D�
�~�+j}6�ה�.�`4�tP���`��6�� 4��>a�y����jl�$'����~�]P��YF}��wp��zFĠ�w(�О�pU�QM38V1��:4�0�(�1@�1�`�E�$4v�p��E��DV �=:n���~�G�z�&����j ��7δ���2��i�_������U`�`�y/5��� j!�`�� h4�؃����0b��z���Bܔ����d�=pn�� �z�Mi�1�,G[m&4���y���Y�H1��kÉ�߇v�A��E03�g�Y��0P��¯!�/���ٛ��>x�$���c[A��~�?��	�u_�|!����.
����o���@�0н�A�3AO2��r���nW��-؎��gU����	�`$�,�$�h��Z�=
��������s��!D//����ы�>4�0��tڰg�P�ۊ�-�Ͼi`:��!����]Zl���;���C�ѳ?����U x�'س�a�;e���([|n�f5�2|z]��ܡ�:>�	ä�(���\�g���B���6�%֍Ҵ��\p�@�B��׹��0$׈�E������+�8gWE�-��j�zz
x|��D���xB��h|?nJ���)��G%`@��_ 7��Z�w��a��=��</0�xL&�YB<��^v|�<�C|��
����� ��s�������@,��P��euU����b��Ihs�U��4�F}��aQ�G=F�B{�l�g��a�����C{+xMF���n��_�\�o����{�a�~���خwF��vb`��������Y<^�-���uѠN!�c?(=d����>�X�����rÌ��y;����s�7�c�/��l�H質� B5��\� B�A��&,iן`;FB�%X�\�b�AJb�`A�\b��	}�`A�Np��A(=��b��?p���c$�Yb��:�u.X�� F����'؎��g���׹`A�҃)X�ן`;FB�%X�\�b�AJb�`A�\b��	}�`A�Np��A(=��b��?p���c$�Yb��:�u.X�� F����'؎��g���׹`A�҃)X�ן`;FB�%X�\�b�AJb�`A�\b��	}�`A�Np��A(=��b��?p���c$�Yb��:�u.X�� F����'؎��g���׹`A�҃)X�ן`;FB�%X�\�b�AJb�`A�\b��	}�`A�Np��A(=���0�-Z�ЍYQ�W���LTy�:(�l�H�� Bu��\� B�A���F�?�P�����TM�!1�v��>K� T'��� � ��H1�闔����5$؎��g���׹`A�҃)8���vS5��� �1�,1��G˖-ue9&������ � ��H1�闔����5$؎��g��>p~y���$�=�0��0q�D�������>}�P���6�l3u|�j��-�ر#t�A4l�03f͘1��{�=��B�@�{.���s��2��v8�8�8�8�����b��/)o7U�kH�#��\}���`!rCI^{�W5`�7�s�=��t�B͚5���ڋ�J7�t=��S��oҲe˔���[�n����e87/���2R�]vw�qԩS'jҤ�2���?��b�?���.��ի�y1bu��M�s߾}iȐ!4nܸ�s��2��v8�8�8�8������P#� �_R�n��א`;FB�%������B䆒�����`�<@P�=���r-X��oZ#Pf�<��=���sO5����΢�{����;����L)���!�Bcǎ���~�֭[�7/������A(��b��/)o7U�kH�#��\}���`!rCI^{�W�0��I'�����GM3g�LԈ��;a��w�}i��7��/�\��Β%Kh���꽍x =��C���_������
��� ��H1�闔����5$؎��g��>p~y���$�=�+-��W_U=yx��Ri�.]��?E�0�L���ԥ�R�֭骫�R���Π��.�N	B� F�j��7o�����/n��4����e̅�i� �1�,1���/"7�䵇}�n��x��ݻ7������#�8��5k�;�v����'���O�f`N<�D�b�-��c.�:���:���:&�������R�62"�B����6��X��4�)�l�H�� W8�<X��P����^�b�y��TN�2��.L�����K��v[�3z''M���<{�l���r����7��5�\�z�G��ʺ���ĄT�Z�Re�'�*�o�͘Et��D�%��V��m��rj�ə���#�ł����q���Ys��o_Ψ[�c�k�s��H0&��(��M$��{�1�q�魷�R����:^(H+؎��g��>p~y���$�=��G����6�|-�W(�aE��e���?hVa��̙����O�'�|�����&��С͝;��N%�x
=��z(}���|u(���h�x�.�%j�-��7Y�M�f��o]G���1��Oc���?�hQ�����Ρ�	B#}0�S�N�#�<�ȗHTI����g�U7J1G�i�u�P�V�#��r� ���H�p<����`a�<'T:�,y�ڄm���� �Z���=�X�ѣ-Z�����N�<9�ǁxW*0|9iV�\Xf��r�-�+�\�]*��nuڴi|��o�������l]Ín�����F�}�3��]��_r��uuuuQ��>��r�"�D.�����n��fUO��ㅂ�b��	}��y��g�P���e�R�}��2Ǿ|1����:m���t��ڵk���؂C��	�l�ΝU������ׯ_��I�28�h��v��A��'�}Q�psGhk[�_����}g>G������:���:)a F�`���u3��K$�����
5�F�^xA��b�x� �`;FB�%8�P���e�R�}��2Ǿ|0����M�6�ݺq�;c�N^��J�F�����b�+���v�a�����S���iذa���Z�.р��������7������/�7��7}�͏�V^PQ'Q7�b�qm?�/��R�;�17�6��s���:^(H+؎��g�NF.��&nٺ�g�q�̱/��7�@�m�]AC��+��ŏ�����b+J��V[y��$�����o���ڈu?]�'Q�lU��m�ZL���כ~��w�է;����0P'Q7QG����l��ϗHT)����Z�7�QO��ㅂ�b��	}��d�B�j▭Ky���r� �_���9�5|6NO.�z]?��@�"��}��7�*/X�p�2���?_�o�Mԩ6��Oj��ڂ��S��i�o[�ս_�N�,�?,uuuuV4��>�F��>ϗHT)��h�6�i�u�P�V�#����\(SMܲu)Ͼ�b�c_�`Lx��>����?������<��ު����/� ΋O���z͚5��ڈk��ˠ�1����-!nj��A�7B��ץ	~��:����E#}0��k׶�K$���֭Kk֬�`�B���:^(H+؎��g�NF.��&nٺ�g�q�̱/0���ٳg�Q�$D�qL#�>���h�uS�AO(�=�����ω4B���d��q�	qS[��gd~�ַY]��P��*�,�  �H�� �\�� '+s&FB��v��<a���:W@^x�lr)Ͼ�b�c_�`�� �(Ǚ=����_�.{�i��}�m��F]�vU��ePg�����_�W���;D;�<�t$Y�g\-˪��m��6�&~я~�3�uuuX(�]v5hЀ�>����v�H�<,rMz�y89��a"1�,��#,�.�9,�\.��w\,s��%����ڵS?8��ܹsՌ��<x�2�.�W�C��g��n���Ye�5�p-'nl���D淅���nO_>�5�.�0�Ps�~�=��C��ϗ��ߟfΜ����#}0�2��5t�A2t��1gb`$�Yb�KKX�]�sX�\ʳ�X�ؗ+x����/��v�{�ዽ'�1�g�v�ygz���*'���$Pa�:Z�{�-�_���b;��S��6��2�-�_��]~�uuuZ(�y��Q۶m�7���GĪ;���֍3&�h�J���� �\0n(�{��+s&FB�%����ۥ<��˥<���e�}�`�׮]�zy�E>�.]�{L�.����~�7�|s�&�z��Ԍ�}�_���D��B=+@w��r��?�۸����(M�rw��2�4�P8��=u�҅&N�h�H���~�N<�Djڴ)4ȹ�ш�>`Lކ�v�/��R���ԩS� #�',��
Ҋ�c$�Yb�KKX�]�sX�\ʳ�X�ؗx�ȑt��G��UET/zZ����̫v�cݭ[75Y���_�\u�@O�G�7�q�d�=��G�?9��:��-ε�^K|�m�+�.��R5�^{����h�H�ԩS騣�2�%UR����*�X�zZl/�l�H�� ���|���<r��g�q�̱�J`�"�iӆV�X�W����N:)�y�4�a�>� _UpG��C�s����m�U��v�/���8���Mq�cV��	���uu\��L�V��y��1��&L�@�{�V�
�x㍑7��	b�x���j$&�y�*��ӧӎ;�Hs��Q����:^(H+؎��g�.-a�v)�ay�r)Ͼ�b�c_�4�0�0u�&M�6�E=����c��Ŋw�yG�r�Z���J4�1$�����@ԭh1Y�f�V7�q�F��M��_T�^{�}
uu��o�
&U�����X�0<���Wã�:묊�F��� ���Oʹ��x+��*)����^�~�r^���M� �`;FB�%����ۥ<��˥<���e�}U� ��>���ʰ^@�!�C�s�2�d������zѽ�5ˠ~�{�b5��eV��=K�7��}݆�+���Q�Q�Qׅh0�n�-�cc1
��#I�F��� I[W䧢�(��\��G��b��	}VZp�-�	U��B)�;��'�I�G.���;.�9�U)����(�7<�z�W����e˖�|U4p޾��k�J�j;��f���ԯ"u*Ylf��C��F�mBl3����0C�с�@G�����۷����bM��Gcb2����><1R�HT���(��\��G��b��	}VZ0��PA�8i8�|GX��M��<r��g�q�̱�J�[o���=�X�x#�4m�4��*�����^�^x!]v�e|q"�z���36�_���Bwe�"�:V��!n1ch5q��׉�o)Xk�z0�z��S(�u�y!Lx�g��,*����G�o��v<%1R�HT���(��\��G��b��	}��p����|�I�ay�r)Ͼ�b�c_�0��	C4_�o���m�1�^`�('	^?�gQ8�%�^�g��A+RK�[�������;��o)Xoer��ق��l����K/�ǫ���.#&�Z�\s���>�f�����)X$*NQu��i�|�@Z1�v��>Kp8�|GX��M��<r��g�q�̱�J�;�9��8Ǐ?�(�G0x�`���$�{Þ��p����;�VԳ"� q��5�n��}d~KA�:��3�ߞ���@�G�L�ln��ݍxXj=��3�����ʕ+yJb�`��8E�Q^���i� �1�,1���a���6)����R��� �5,�;wV3V��уn��v�������b�c_�0�h�a�(b�V!����o�؍\[�uFC��n-�4���uf��"n7#�q�����R���1���lJ��>�3�<꾰1�!�K�.j�lK)4f�nQ��$@�,��:��4W��Q �`;FB�%8�b�#,�q�&EX�\�s��O?�v�}w���8�(�cǎ�U1.�b�c_I����S�"�[�����YеkWU����'���ŊO.4|`N�j�A]+P���}G����k��:2�%���꾌y�Y-��}�:�<�>��g�N�J����K�Q�F�q��w_6#� �D�)���:͕/}H+؎��g�����w��I�G.��y���i�v�>��F:^����.�9����կ~����x����F1հa���p�QG�<�+�oax��tvu�����̣�|���鵌y�?��[P����� F���Y�6 �%b�`��8E�Q^���i� �1�,1���a���6)����R�5��<y2_����#�8�/�8.�9�����7[�j�bMxo��C�]�j�����W���7k�L����At�����=Ym�A}+Pӈ��<������w��[_f�4��w)�@��9K�]��3k�,5,���R�p'}�1R�HT���(��\��G��b��	}��p����|�I�ay�r)���.Y��/΁FF������b�c_I��_]=��LT��s��ڵk�"EϞ=�9,'x&�����h�?��eP�
�9ĭga@s��쯜���b�<@��f�Na��� l(�;�ӈ��&�j׮]軫�b�`��8E�Q^���i� �1�,1���a���6)����R�5���
���[51�k�X��W�=0�z��L�81��.��r����⒂�����T#��Y�^�3�s�+q��x�i�K�x�X�<c�E��ޔ���L�7�E^~�euC��yԚ7��l�{ k�'���qԷo�����1R�HT���(��\��G��b��	}��p����|�I�ay�r)Ϛ�`��`��p�̱�$��{��Ba���K/Ѿ������C�9�-�?����\�$���-h�"nvm���2��Θf�zL���>��\�N�~�h���F��x�y����d��ٺ0 ��v��t���F)�>L��w��,3M'b�`��8E�Q^���i� �1�,1���a���6)����R�5Q� �}�١�e���2Ǿ�2�~ظq㼽�x~�����ʵ&�������'��/R�3�w�	�4��7���s�LK�3����w���+������o�A[o���=<�sխ�:{��d��@}X���Ծ}�x:.�,��͓O>�w���b�E��UGy��ʗ>
�l�H�� �S�w��;Nڤ�#�Ky���������J54\��2Ǿ�2�������/���x��P>�:P�(�r�F�^{��+��0<_���h3S��yT��ٵ�=Bf�H����y@y�p���Q����p#�+�0�� ����#�.(��Z���?�H�u�]wQ�^���1R�HT���(��\��G��b��	}VZp�-�	U��B)�;��'�I�G.��D�H�;w.�y�Զm[U�]��2Ǿ�2�?�08�/b��a�1�|���裏��%CH�+��x�Q���pS�G���y�q�k���̔��(cH��1�%��k�D5��'���R�j��L�B��dփ��)ի�(�3��-R�Wz����1R�HT���(��\��G��b��	}VZp�˷Ky�#�Ky��7�|�j� ��:uR�!H���e�}%e�G�-����������J��$\z�4v�X�X�Hm����Enh�VV�����'nv��d��Ժ��f���7ס0p-���F�=�\>|����S�RÆ��z�ԤIw�-O�u뭷R�>}��1R�HT���(��\��G��b��	}����o���G.���;.�9���Ɛ���/�1mڴ���	�L�>��;�8��$��ڶg(�~f����c�45�z��%QC↗�Mf�H}�1 �~��l�Z�5Qm�g��̙c�>��u�6"��� ���;��b�³�;��SE{b�`��8E�Q^���i� �1�,1��%,�.�9,�\.��w\,s�+)��{��o������e˖���O������[o��ʷ�Q�����Ŵ�Y���K3��	���-i�7���&2S��Y=�1 �VH6p-�뜹�u�]�n�����éN���uA�3jذ�u5�g��7���b�E��UGy��ʗ>
�l�H�� ���|���<r��g�q�̱��0zd�\�P��y�N�+ʷ�㎪^r�����
U�76!�v��jJ�����L�W2f�ѧ���r�3W�MLR���Oq/(ĘN���ڵ�3?S@�Җ[��.��H��뮻ҬY���1R�HT���(��\��G��b��	}����o���G.���;.�9����ea=�B�@��|��g����+T#3Ac�Gu�ZCܚZԜ���m�շd�
�wY=�13^�~\2�l��ʌ3�w��F̳	�SN9���mJ���I�A-ZN�m֘��9�4����O]�t������'b�`��8E�Q^���i� �1�,1��%,�.�9,�\.��w\,s�+)ܤI��a\}��N4Z}��-x_-� ����7�^��A=��W��S�Z7���=�*��̘.P�^��l��J߾}i	F�˧��_�p>f���[h����6A�`�kF�BA�,��:��4W��Q �`;FB�U�x���ԭ[7�[�.m��6t��g�d��|�"ϥ",�\.��w\,s�+)\�N5{w��X�O�3�(W�o9=o�}���	��&��]IܞZ�9q���䧭biM��wd����Wd����E0�z�kx�+�{�1�v�m��� F���ST�u�+_�(�V�#�ϪF���;�cű/X�@5�۴i��8ׄ�|�4ϥ$,�\.��w\,s�+)�|��g;h�o���|��������R>�Ӭ&1�W�vˠ.Fho���!nz�3�*���13Z���*���I6�y�\�i��K�xWJz�t����]W�H1�"Qq����Ns�KҊ�c$�Y�h��wﮎsժUiҤI5��3,�5�s)	�#�Ky���J� G=����֭㋅��y����g�y�噚���db�o�շ�]�hK�7��ϟ�����˘��c���Z�Q�s���G���ǻR	��-[��5k���W�H1�"Qq����Ns�KҊ�c$�Y�h�6l��� /_��5j�7/��|�4ϥ$,�\.��w\,s�+),�@��r�(ܹsg�y{�6�����g���3��O�Ң��M��ێm�W�f����Y3��d�Q�s�7�|3u�QF�+�N;�4=z4�uEA�,��:��4W��Q �`;FB�U��S�N��o�T���|��wM�\J����R�}��2Ǿ�2�Q�����ߪW!�(�;e1�b��j��E����M�UY��l������%S;��W�d[��_3squBV<ӟ}L6�y�\�Қ6m��J%�e��ͭ��W�H1�"Qq����Ns�KҊ�c$�Y�h�/��r:���72��`�C���s���",�5�s)	�#�Ky���J� }�������9���zz����b�'^~�e2d_�@��|���'�HS��_�CmHyƠ>�o�{g6x�Ph�i��W��ɶ��3cqtRV<ÛeB9ϙK V��3�s���_��1v�H1�"Qq����Ns�KҊ�c$�Y�h�ѓҺuk�Z��K���#۷o_��h��]�<���<r���$)�,�.�9������k���/΁�W�\�1@��k�'b�o~��x{��\K��7cz�(]���n�����jO���wؖV�#cf*�f�1�>|��r�3�8�T��qNm��?^�h�g�M>!vm��*�k F���ST�u�+_�(�V�#�ϪFp����S���ի���5�9a�.E�KEX�\�sR�����9���+�.�^}�U�4/.�9���~��i���|�PP�(�r0}�t:�����G�7��a�8�/�z�Go�
�q㋿FY�`��Г3CQ:5c5�п�oMa��+��W���7�t�u�QæMi�=�]�(o��nФ	>\5<��6a������];b�`��8E�Q^���i� �1��j5��",�.�9,�\.�9I`p�����0���e�}%e��͛G=z��������{��d�\Q�� ��ڵ+_��Y��hQ�p|CVu2��!k�&����/���lihY��L�N˄�_h��7|�y�\a�ر��	�qbh�֭)�m`fK�g-[Fm��{�bOǅ�gΜ�����b�E��UGy��ʗ>
�l�H�� ���|���<r���$���X��WR�믿�ƍ�7�|�W�8��T^��A�a������*U�(WlS�nf���7�`EV�P����[��Q�;���_�hG��WX��H볚�13�Ogd�_�Ev�[�s�
x�#x��v9�xʌ����[G[�:�H�SO=E�ڵs��ሑb�E��UGy��ʗ>
�l�H�� ���|���<r���$lƈ�`���{�ɜ��Dta����'ʵ�q�j�+;���l�2�̧1Y�͠~Z�,��]�����_�=o�r#}�13�Oge"�kQI��J3w�\�~���aTA��M)�mTfK˪M���AÆ�p�B#���Y}�7w���b�E��UGy��ʗ>
�l�H�� ���|���<r���$lƈR`L�s�e���B@y�\�L�0��o�*2݋E�gL�O�eP?C�����ԅ���$�p��ՏYMɘӠL�L]��Q���M�U�A�ѥ�^j�7��G�Z���3ah��]��X<=�Wad⒫ F���ST�u�+_�(�V�#���� �X7�ߚ^��y���ɥ<'�`3F�� �����c8c�a����'���s�<Q��dѢEj�|+K(r�ֻ�O�i\V�2���f|�O�9���:[��H�8���X�W�!���d�Y%Y�f�2�s��1��Y��τ�6;�HS�L1�C�F��SN9��:b�`��8E�Q^���i� �1�,��r�L5q�֥<'�`3F�� �ܶj�JŚ0�N�|�/�ZPVa���:�g�@v��E+��t/!Z�1}e�̠�Zt��?�q|�e����ꡌ�c��db��څN�U
\��￿۴ƍG[~8?+k6i�Z��;��GG@�,��:��4W��Q �`;FB�%8�P���e�R��D�#Ja���~����?��洂rDy&�M7�Dg�}6_���dq0᚟1��M��4�z��*����f�q|�e���fdX&����q�QF��R��>j�<�mZ0�5�6˗�3�A�xӢo_�袋���#�<�nȸb�`��8E�Q^���i� �1�,1��ȅ2��-[��$b��Q*�w�v���:�����_|��h�Bo5�>����d�5/c�L�͠�Z��Y�F� �Ͳ�ҷYMΘ;��U�%v�o�����#I��J ����Q�0�3»��Y�����w���S�����O;�/^l��0[<�� F���ST�u�+_�(�V�#����\(SMܲu!�-[��f��w�`3F�� ��ݻ��a0
��w_����׿V3��@����AO�4�/��m������2���%��2��Lw_���Y���"������f̝q��)��B�؋¨�9K���3��s;b�jԨ��Ё:��Eu�ק�vم��^c{-�.��z�j�k�@�,��:��4W��Q �`;FB�%8�P���e�B���U�V�H��`3F�� �q�t�1���q�W��jf��٪�m��P�I���;�`�1�Wڶ�
բ ��1}'�a�U����ʪ�/-[(�_V�2掂:/�:ˎåz���Q�s�4]�vUC�y\�ӦMSi�&�

3h�y�|�N�)X$*NQu��i�|�@Z1�v��>Kp2r�L5q�օ<#���B�C�#Ji�1��V[mڻ)����l����=��C|��e�jQ�^Ϙ�3�۲j�A}h+�k��MA|�e�?f̝u~�`���%GS�<gI�cl۶m���R�_�2�6b�`��8E�Q^���i� �1�,Wp)����B�����]�A��-T��`3F�� �[o���=�X�� ͆!��ǃ�vPn(�J����F��s���A�A}eZ¿fϬ~��=�	�*�{�R�FdU7c�Y~}�C]�ݧ0*yΒ���/�!C�1�T�>}��{��)X$*NQu��i�|�@Z1�v��>�U,��_,lr� ���B�C�#Jm�al��r��^�޽{�ҥK��T3|���^.�ʭ�7����'���[V��B�(Pʘ~TkBV�2���Ͽ�i�['���;�^|)ׅ���/z���ݓ��,	��'�|҈i��	'�@7�x#߭� F���ST�u�+_�(�V�#��\}���`a�� y���Pzb��Qj`����wF贛�B@9��B�gB�Qкuk�������6+T��>�?dL_�ulu6�3�W�'m�{�/�V�/�Lq�7�O�ޓ�p圕���~[�p��Y���	&�B���H1�"Qq����Ns�KҊ�c$�Yb���_,lr� ���B�C�#�a�׭[G}��	�Y��������@9��Pn���+�T=r����H��	�}����Y5ɠ����<�ޤ��C��,�K���	|q|��g��w���q霕LN��<��Jcƌ�_��|�N�)X$*NQu��i�|�@Z1�v��>Kp���˃�M.���BU�q�6cD90���6m�Њ+����1c�5�/N���֭�]���R�|PNQCƓ��o�U�c>��s|���j�PM
L��2�O�NȠ��<�t_�x
��O-_]�զ�/����ʞ�P���r����ӬY��xV*��ۗfΜ�w�4��b�E��UGy��ʗ>
�l�H�� W8�<X��B=@��-T��`3F�� ��#G��G�Ϡ֬Y>�6%���@���\�i³�h�[����
U�@���1��Y5ˠ���G���'m���/�e���2E����3�v�\ʇ��|��Ԯ];#��_w4~�x�:u��̷	�͛7�!���b�E��UGy��ʗ>
�l�H�� W8�<X��B=@��-T�7��&�oPXV.�9��F��{�A7�|3_e%���GV�^��\P>.�رcU�\�Ջ�j��K�Z���Y50������@0�[�/���%#��,�E�~��������Y�������O7b��7nژ��%m}�ִe�-�A�j�4�|{.�4h߭� F���ST�u�+_�(�V�#��\}���`a�� y���Pz� ?���e�}�`�����i�-�P��g�L|0���;|q����"����#��/��������*+T��bfc�zWV-3��Yu
n~� ˿�1�50��f��'&S>\?g�f�=��|Јe�d�֍��uչ��-�P���W�^*��tAu��YI�@�,��:��4W��Q �`;FB�%�������&���m�*�8����`�r�PJ����IˤB��u�P��lI\cx��{��~fYVY���q�cV/d6���eP��z�C���`�E,ᨌ���9q|�k�	��s�s��9+8�M�6Uày,��ӟj���΋�.C-�oAC�5�i=��3�<���*��b�E��UGy��ʗ>
�l�H�� W8�<X��B=@��-T�7����2Ǿ\2� CG7n���(�m�ن�Sl���F��Y-[��E�Z���qB{�n㺔�w�[ߟ�>��f�6���aÆ��_�w��b�E��UGy��ʗ>
�l�H�� W8�<X��B=@��-T��`3F$e�A�=���o7ʦ�Gq/"�8���馛n2�^�B�=��y����;O���4e�ڴ������Rc��ж�nK,���H0z�m���DI饗^R�0����(�V�#��\}���`a�� y���Pzb������;���eS��3<�/"�@�`�xޫQ�Y1q�D^D�e��vSÔy9@0��74/�kީ�2�<=^{ԱcG�Ko@��� #ϭ[�,��`~Q��=�_�:Ҋ�c$�Yb���_,lr� ���B�C�#�4��K�f�T�x�T�09V�&MT���|"���I������� f���.Z��(Ú�5���9��-�P����E³��G����H0,���_P�:��l�H�� W8�<X��B=@��-T��`3F$i��A?��CF�T�|��9�ê~4�kϞ=yѤ�ŋ�.��b�CP�����	�������t�/5�A�m�]��]1�W���T\�JU��@Z1�v��>+i����E�jѢ/���}�`a��4�7�����lƈ���W_��ݢ� �?kd􇪾❷�9sh���3�!(ċ�}{�W��7��Y�hL����:���s~�(#}6�@L�(	b~A)��l�H賒6��n^QE���➃r�#�7�����lƈ�0~xڶmk�O�ȗ����z]�m� ÆF+b/��P&xww�F����i��[Ц�7�!C��x·�.��1bߥW F�n���`Q9U������l�H�� ��r�?�{ʝ�8 ���B�C�#�6��C���SOeT?~�7ß5�<�t����E�z0JaڴiFy؄�&����ٙ��W�^�k�5#�`���`Q9T����A�V�#����Y� �9(w>�<pC[�
=1�f����������7ʨt�Ay3�Y��p�ƱT�PO/��b^$����ˣ&�7o��\k�ڵ|w^����J�b�/(W� �`;FB�%�=���A�sP�|�y���Pzb��Q	��.]�e�v�6�YS�à�v�J�g��E�j֭[��*��<j���K�&���4` &XT
����r�q��b��	}�`�T��q�A����BU�q�6cD%0حZ�R���fa1ރ�#�8�s��7W���x���[�nFy�Tg�qM�0���;#�f���`QMTS��]ǑV�#����Y� �9(w>�<pC[�
=1�f�����z*]y�F9�Y>�T�0h�O��j��[o-�L�x�̵� F�� WӦM���D���&��{x���6ł�b��	}�`�T��q�A����BU�q�6cD�0&�۷�QNi��ß5�8�_�~���O�H=�z���ˣ&B��JLCo:bdZ��3q�[ʼt�-�bAZ1�v��>K�{*g���������m�*�8� �1�R�믿V�
��J�|����/Y5àQ/Q?QO�	LP���R_������y	b�������KG�2/�l�H�\4�����(?^.lWN��|�6�;q@��-T��`3FT� *���U���gM5�F����E1���ʨ����$�Z) F�N?q�[ʼt�-�bAZ1�v��>�E\��W�?N��G�nhU��!،�4����n��*m�}�����A����ɓy��s�=W����GP.�I�&�}�ݧ���ۄx�	�`}1Rp��[�R�#n�Ҋ�c$�Yb��Ņ㏓�$���BU�qp�k��e��b�c_>��+W*C�}��J��0�YSàQ1����z���3���N8({�֣}�mB���95kV���I��?͙3���;#� ����-e^:�y� �`;FB�%8Y\8�8yH"q@��-T�G�!���b�c_>`���Л��+M:�����y��i���1�I��� �ژ?>�o��(7=6߼�xc�l�1b��-�d�w�ly�y#k��v�ŋ��zb�������KG�2/�l�H�� '��'I�#�7��������X�ؗ/xܸqt��'��e����A�r�)��j��.�!C���CӦ�裏j�6�A�[��،�d��Z�h��'����h�>�)8��-o)���̋i� �1�,1�������C����m�*�8� �1��xɒ%ԦM�3��,J��gM��A�n���^V:t��3ge2e��ԩ9q�ԧ�f�Q�z��?��3ԣG����1Rp��[�R�#n�Ҋ�c$�Yb��Ņ㏓�$���BU�q�6cD�0�i�����7�,J��gM��A�v�҅r�A�>����M�:��woD��ru��Dm��C���ohĈ?��c#� ����-e^:�y� �`;FB�%8Y\8�8yH"q@��-T��`3F�`�G�EÇ7��w�m��&�à1��ѣ�!���.���j��^�F��^^nz��i�&�������'�|2�GA��~▷�y�[�ł�b��	}��dq����!�|�y���Pzb���~뭷h�w4��wa��a��7���H�0�N�:��XM�_��ڶm��)���:�_Ёnxޗ_��2Դ�f����~��ԬY3�� b�������KG�2/�l�H�� '��'I�#�7�����l�0�x��W^1��g�q��&�àQ���rKU����������
�a�}Z��o��9h~�3ܯ�ft���|0U�j#F�N?q�[ʼt�-�bAZ1�v��>�ܲe�\)TH[��'�����6�$N��G�nhU��!،.`��#G�4��W�u���ոq�T��C��O?]� �˃�}�.��5kÛ�����QGe���v��:�ݠA��n���H1��'nyK����e^,H+؎��g�b������}_ʱ�b�����C��CM�AԹC�#\1�8{챇Qn�*�ß5iݧO���_�����d4
yy��/�G3f\M��v�~�h�={��MP�l���#� ����-e^:�y� �`;FB�%8�r���/%q�D>�P�^x����0� �1���xӦM�7�0��G�y��&MàQ�P�P���ӧ+��ˣT�5ku�ؑ��k#� ����-e^:�y� �`;FB�%8�r���/%q�D>\E�#\1���c�UC%y����֤i��1c���燘z0;3���G�t�y�G�b�������KG�2/�l�H�� �S�}{��$N�ȇ��6c�K��GU=���|S5֤e�!���_5c�^o��ͥ���oOo��6ߵ� F�N?q�[ʼt�-�bAZ1�v��>�ܢE�\)TH[5�gذ[���˅m�I�<$�Wl��0��r6ȓ����Ϛ�z��aШo�w���5�\�z�yy�Jx��v�m�w�=��b��O��2/q˼X�V�#���� ��?N�ȇ��6c�K��~4q�D��|Q�֤a�=�ܣL|���Y<�ˣT:�s�׿�5߭� F�N?q�[ʼt�-�bAZ1�v��>Kp��p�q�D>\E�#\3�&L(k�T�UMß5�z��àO<�DU�	�`^�^�Ԯ];z�����1Rp��[�R�#n�Ҋ�c$�Yb��Ņ㏓�$��*b���F�jժ-Z��(CTMß5>� ����FY� Գ�7�\ջj�SN����b�穻u��w�
#� ����-e^:�y� �`;FB�%8Y\8�8yH"�"،�`�뮻Ҕ)S�2t]�6�Y��0�S��n���)լ^�ZM~5w�\�<J��Ҹq���Sb�������KG�2/�l�H�� '��'I��U� �1�E|�UWѐ!C�2t]��_��NU��0��Ç��VM�|�ͪ��(�K�7o��aA��~▷�y�[�ł�b��	}��dq����!�|�����饗^R���W^yE]0�A���<i^\,s��g�p�B�С�Q����?k|��`Qߪ��v�I�S^\h7L�6�n{��)�;;��wީ�BZA��~▷�y�[�ł�b��	}��dq����!�|��?��L/L��/��%6�e��b�c_>`��6����?o��������A��������CI5h�E�\B�zƱԤA��a:�w��t�G�գ�?GMp��u�A�"i1Rp��[�R�#n�Ҋ�c$�Yb��Ņ㏓�$�QM�X�ؗ�xĈt饗�說y���C�j4^уzVM�p�	4j�(�,�:猣���k����X�۟�����iS:�́F�9s���k֬�N��b��O��2/q˼X�V�#���,.�<$��j��2Ǿ|7��������(GW���>����0��x��a�={�T��Z@{ �_����FYh�EMԦ��Mp��u��i!�T<x0�u�@��~▷�y�[�ł�b��	}��dq����!�|T.�9��Ɛu�$�G���k������A����ԢEUϪ������=�X�,�z������������6�B;찃�]:� F�N?q�[ʼt�-�bAZ1�v��>Kp��p�q�D>�	���� ����k�5��5����e�7ި�W� �߶m[zꩧ����_�G��6MoPXͥgi�O�N�;w�N��b��O��2/q˼X�V�#���,.�<$��j��2Ǿ�`�g̘�ŐZ��3��ƌݨ_�fsƐo^\�Ǝ��{�1LoP�!�z�mFړO>9����)8��-o)���̋i� �1�,1�������C��&\,s�+y�3��S�T�~}�b�-�}��j�ܭ��Z�źZ�j���j��A9T���jՊ��n;�ԩ�z���eu���mӬY3U���=�ܓn��v#.q��5nPO=�ˍ/�Yvy�Գ��t���We�b�
��ԁ�#8��-o)���̋i� �1�,1�������C��&\,s�+�\ &���{�ƏO^x�z6�w��Ԯ];U�w�=����:��=�\���h����Z��>�Z��*���9����s�!��z�
=g�zhU��y���&��K6:�Lګs�:&C{�P�.v����t�I|שuMp��[�R�#n�Ҋ�c$�Yb��Ņ㏓�$�QM�X����g�<�����)B	B ���� J�f�R�0H�@ �H�"M*U$ҥ�Ћr�̕b��W��G)��o��YY3{�9���g��>��$g���5�|�{W�� �ҹ��?�p��N;���^�G�6˞VEA�gtHt"�.��R��6�į�<X�L=�mR3r���s6���s��֛�m��Ln��gv���Ω� ���QP%�����4�YӼ� �p:�L	��ߟ%݈G�P�4�]U��P©1bDB(1*�����Z(e嬳���}��8�B��<넸��G}���]' ������f$����jw�g���;�=����{ �_1ռ.��J WY�[i���yoAX	�t$����E�?K��:��iλ�$��֕�����v��~zG���g�lށ(C��n�vK�����i��fK�Y��-L�/D5�x�1c��Q�4F����c��=ʓtB��u6R��Ț�J���5�{�J �#�̔ �.���Y�Ѝx�	ELs�U%�(+�����ۉ%ҁ�dĒ�KF0�dD�*4�,����_��eO�i�uϯw�y�o�F�ۣ���#���q$�ʚp��5����!k���� NG"`�)�]���ġ���漫J�X5cV���$)!��X��b)ot2�� K�����o��Ey�c�q��O��J��(\}dMo�y~Ț�a%�ӑXfJ wE��,q�F<�"�9着 n&����]��/K�s�_�(��=(��|��[l��|'Al��"���ÿ�(���G��V�燬i�[V8��ef]����F�ȵN�ߟ%݈G�P�4�]U���>��mbi�vp�zh�Ēm�ĳyGڱ;�)}���㠂k�_g�}����ܤI�r�/��㽖gL�F���ƍ��ʓ?�я܆n����K WY�[i���yoAX	�t$��u��#�b׭��������nģN(b��	�7�x�����/�
&�tp�g~�8��:$t�'�裏���/�Ǝ��Cy���7�|s��ʃ�&\}dMo�y~Ț�a%�ӑXfJ K 7c���[����n�=�tC��qd�Gn�����ELs�U5��P���;eO�� �3��7�x�n�UVIؠ<9a�������u�Q��Ț�J���5�{�J �#�̔ Z����nģ7@�"|�?�x�?�н��n�ԩ�������U41�yWp,�tp�g��YX�s�W[m5w�&lP�$��^GPf%�����4�YӼ� �p:�L	��ح��������nģ79r�;����\t�En�m��/�;��漫JX� �:�p�w��[�=��	������oǯ�����G��V�燬i�[V8��e��g��{����xd�C7��,���>ǹ��y�ECӜwUI ���A� �XM�ClB�\?n�;����uW^����i�}���u�Q�kʚp��5����!k���� NG"`�)�����{cv:Y�Ѝx������_�r�/�;��漫J���f�*�tp�����9��뮻��	�<�L��@��~���}lGמa�����ǜ{��ܨ���Na&�c�=�;"uu�Q��Ț�J���5�{�J �#�̔ ���zo��1;�,q�F<z�e�]ֽ����pt�Zj��r���iλ�*�����ϕ���͎��=:�9��_�{)��^{�_�z�!����aÆ�.� a{��﹧�l�@�&u<�+s����`�@.�G���k��յeV��Ț�J���5�{�J �#�̔ � n�Nǣ7`� Nr3��>��vW�4�]U��Ε�X��mo���])+��Wo���,�C�]�U��[n��}��o��`�,��7(�)��c�yfw�{$��L����J�AY� �>����<?dM�ނ���H,3%�%������ؼ�Q�w�y'�ɍ?�-��B��(��漫j8빲&��z�o5������<�m�D;V�$v�_q��O~��1^s�5n���7�>朳��z�Dx�&�t:��G	��#kz+��C�4�-+��D�2S���j�?K��ނ���\sM7y�d����=�������w~)�EDӜwUM �P(���:�ݺu!�g�:�7�z�رc}��6'$��W���:�w�2���8<���xq\wPf%�����4�YӼ� �p:�L	��ح��������nģ�������hqdC���>�����iλ�$�ӎA�P2��W9r�c|tR6�� uC��x�q�_U<�Qv:o��Ƅ�	�p�s��(�k���ߏ��O8�BC��FJ WY�[i���yoAX	�t$�����[7f��%݈G�P�4�]U��:)K��2R9b���C��1Huɯ�N:�m��v	{��w��m:�~��K�>ȃ�3q,i�1uO<�D��Z��&\}dMo�y~Ț�a%�ӑXfJ �n�7�ޘ��G�8t#uBӜwUI ��z݌K��N�W]���A�����Cۛ4Rǿ���n�g�;?���i&������p��n�����kʣp��5����!k���� NG"`�)�����{cv:Y�Ѝx�	ELs�U%��K6�u3��0�P�}LM:t���o����W��M�%���i�_lhEq�ʲ�ݢ�.��%��΃l�W%0c���c[ӊ8~ﲋ�{� ����n��gw[\o������obi|����%	��#kz+��C�4�-+��D�2SX�;�:��iλ�$�9�f��;�j����|�嗽�%^B:�+��E;HɅ^G���8q��+G.�5YH�_}����3���|���=�s����ǯ�5����G��V�燬i�[V8��ef]����F�ȵN�ߟ%݈G�P�4�]U���6�`�X�t���7.��E� m��f>��4�6�g Wo����>a��ɓ�=���A��K/�Q�5����G��V�燬i�[V8��ef]p�ߟ%݈G�P�4�]U��>|�pw衇&N7����Zcڴi~��}�ݗH�n�w�RpN������mL��k�����0=����G��V�燬i�[V8��e�pwQ����nģN(b��	`@c��c�=��N7�{y���*�$�p6���4y'���[�h�K-����ꪫ�J��͓����w�y�H�0=����G��V�燬i�[V8��e�pwQ����nģN(b��*
`0e�?-sҤI	��I�>�����a�}�q#G�L�i���{�wW	�e�2�_�Ӡ�8���$�M_���3�8#~��$�났�4�YӼ� �p:�L	��ߟ%݈G�P�4�]U��ͧ�c3�X�t��g�%�ЦW�e���k��&���"�❼��`#+��bD�i�EMl{zJ6)#��{����� �����<?dM�ނ���H,3�(�9�����}�s���}�Ϗߙ�NǣN(b��*`��FlF��M���U>x���Z\�B��y�w�.�Y��?�q7�|�?��vh��w�g$�6(��߻�;~��)����G��V�燬i�[V8��efp����Y�����漫��[�biӫ�p�	'�-��"��y�w�:��~�Yg��_ޟ{|�1�����=j�Q�F�#Fď`#%�����4�YӼ� �p:�L	�ⱓ���A��Q'1�yW�0���X��*_�����L�1c�$�:/�l����F���o??*���|����?nyn0��-�����%�9��E�l\�}b>��7&u+#�����8&���� NG"`�)\<v2�A�<�t<�"�9廙 �y��s��U��.tr)�9P�gx��w�����9ڃ���~����'|�e�Y��r�-qp!嬨X̏J�b��uH8��e�p����Y�����漫.X��`C��?�-���n�UWu'�t��m���QZhl�p���.&�Z�$�ӑXfJ ��L�5:�:��iλ$�Ah��>���{�~����݁�	큍� �>���d_�p:�L	�ⱓ����	�G�2N�4ro���$�A�6R��Tz�}�C��H,3%���N�?P�����KX!`#%��O�w1��:$��D�2S�x�d��Aq����$�A�6R��Tz�}�C��H,3�-�5��=I�N�w��B,ɛn�wI � �l�p���.&�Z�$�ӑXfv[ ��76b1�ͺǻ$�A�6R��Tz�}�C��H,3%���76b1�ͺǻ$�A�6R��Tz�}�C��H,3%���76b1�ͺǻ$�A�6�?����͙��g�1qM�Rz�K �#�̔ ���Xx��`7�� A������ ��?	�t$�����/��f��]�� �),��O8��e�p�����˾L��)x�� B��FJ B�@�� NG"`�),��\X!`#%��|��I �#�̔ �z�z.,��?����P>P�$�ӑXfJ B=A=� A��H	`A(���H,3%�����K � �l�� ��?	�t$����POP�%�A�6RX��p:�L	`A�'���� �),��O8��e�� ��s	`A����� ���'��D�2SX�	�� B��FJ B�@�� NG"`�),��\X!`#%��|��I �#�̔ �z�z.,��?����P>P�$�ӑXfJ B=A=� A��H	`A(���H,3%�����K � �l�� ��?	�t$����POP�%�A�6RX��p:�L	`A�'���� �),��O8��e�� ��s	`A����� ���'��D�2SX�	�� B��FJ B�@�� NG"`�),��\X!`#%��|��I �#�̔ �z�z.,��?����P>P�$�ӑXfJ B=A=� A��H	`A(���H,3�(�����RY�I�|�n��f��{�[n�%����m����rO3<��S���w���o�+�����G}�>����r�'⡇r/����<yr�s*��f�iw�M7��/��ױ���'��{���������s�<�o�	�y�p���rO3�@N�:�=���瞋NE_��	���>O�_�W��7L�8�]t�E����;v������u��I�&��^z�ׯ�ѭ��Fg�m�7���?�^}����>�[��S�p���믿>��x�F] ��g�%ڳހ6�o��x�G�k	Dմi��}���EUo�|�w�˥v��w��>9�y��'��D�2�h��?��?~||y:s�1���E|9�>�lw�w��t�A�y�8";�c|9�Zk���t��m��&��L�������zk�����7�;�C|K_��W�c\$���>N4����
�G��H�A�k�ᮺ�*w���x� &�qv0�|C{�y���k�흸f ��[o��r&P��f_I�m�ݶ����.�x�V$�9��.��7�-�p��'7lh7AZy啽�=�|\-�{���}^c��y���SO�/w�]v�;ꨣ����_����F�ߛo��v�i���>��3��6�h�뮻�Yg������w�;O`#�,�w�m7���
_��}y�x>�DG:�j��� ���"���w��lXu�U;���_�#o�}������x����O8��ef
`
խ���j��[o�����@��ӟ��=���oz�6�`w�����n#����/��cl�U�i2���_�������<����g��2 *��w��w{a	���j������ӓ�h ���9��[ �����E]����_� �f��g���T�w�y��>�`��̀�λ&L���.��X'�~��і)S����g���O�V����)�����p$�`���k�MG	l�
a��DY`d��	��n@���|�:l��o������'��S�=�P/*(�o���tA����o������U�|e�l���>����Β���������;İ�&�<;���k�u��rJ�o:�g̀�]n��|8�U8��(	q�:�e����Rߩ� �5����W��y|�3;c׿���7����+�g���;�k�����u�F���F�IW��Qv���,�0��:hv����#F���o���r����|��{��{�FXF���6�Ne;u�m�MבFZ�x㍍�r�!��볕�4<��������b�fv0"�=;E���M��r�=���.���0�v�x.�����[���O�V�.7�#�͔ʣ���Җ0̀m�<��I�`�-�'�Y�3�Kk���6����E���5L;:�(sv�����N�	ldQ0�������
+��}�2�{���'eb�y���yL�5��oʴ�����s��ߗ^z�t>H3P?(a���`�q�1�����I[���������}%����;|6���뮻n:������`GN:���}��w+��"Ĩg<��z����w���c�v �o�]���찞ᗑߖ攅�7Ɵ������ 6�t!���7����|L�6����?	�t$���%�)�����Q��cB#�a�y��w��G�p2!E0P�WZi%���,�������;�7�����;��������{1��q���GF�7���0�����x.�䒾r�� tyרQ�|��8}�;�qK,�D��Y88[l�����_ޏdcdg�m6����?�����y,��7?�я������ŉ�hH3�]����=l�0ox��������1��̀��]8b84�,�L�7҃����b�-�򕯸�;�x��n�5����曷�ݤAā��"��`�t��6󽀌��.����N%�m{�p|�����h��Gy��?�7�pC��^{�4^q�}�{��vd�;C0�K:o����\���o�Ɣѿ�Q��h��N�z^���	�>v��/��g�ݝ~�龃ǁ|��R�h����
7�\s�/��׋�C�<���:u�g�/S�e�J��F%�g{�� �����Bg�z�E�'ĕ:�����6c'[�Y�>��}�tby&#����_�S�C�Ho��Ay�&�-�� � �@�>��[�P�{Z	�$����t�n���:��ӊo�>�3z`S��i�
�Il銽�q�f������o�/���s�q���Yj��|�= �i� ��[��@�҅���t<� f�yNۃ]���M�ހp�=l�t�UV����m�v��$>�!�5�,��Y+a����=�}"�,?���wbO�w�C��� �6�v��oK/����o%-(+��<�|�,��;xgQ��,� �y�;�rO�������#?(�p��;�u���\�VR.�Y�'~e�gS(�{��X�.�������cK�	��=�c_�v�2�-��ccq��:����o�|�,l���E'߁}�ۗ]vY_�H�a����>�~��?���E�b+�ο44�M��`��g��&�)Wč����{�+�|҅<��a���I[l)��hv;h�	�/���:���H��P����m�'?�A�`oI[�ߛt	��������H,3�K �,R�1�Tt3j8�6�M�bl��f�ئ@�	`�F��@��T0��	*�Ҧ��� �I�15f���o�q��?��6�(���,*�bփ���}��Ke3g��%~�c�L 3r�JCK��������<�p��❔�f�F��tP ;ҿC�d=��/7��8�4� ��h�g���^��L�k&�g�i�F<p�K#���R�X�SL�CA����C�A#	pni�y�_k���U�tZq�^�P������֦L�hӈ3�@�.��B�z3��F`PH's��c����G�n�I�5�s�=w���XY"�|O+P�L�h3�û��D �!��i��
A�Zu
�!h�Q�0u�F�d`�ְ�⋷\^��I' �p��o<�<�#�O�x�5��Y���n��"�4�2����s3��[G�t��aL"]�����4��g6�r@�S~qn�:ߊ�Ix�]�{�N�T�N�9���N� �'��R~�C��h��#)�8�f��&��;C\։K�2`��c���@g*6��>a�)���YL�젍R"��Ч����H�s�9����l3��C>�sQ�m�=b7��.�Q�2��,��v۲��� ������ �~�h)�.̘h+��#:�H�j����$u�w���G�"ޏ��?��'�w��k�u�[���mh�#�ӀN^�m��,��7l�i�����½�&� ��f�"r���҆K��6|r�6�4��X�>���;�{��"��׋}f�o�OP�$�ӑXf�� T2���F*B�Q�ǒ
EO�4���`�0�TBz�1^��W3�3F�0�4�o*;�6���k�w+� &��y��t9��z�xN
�ǲ`�'�3d��fT`�a�C`��}��L #M ����6�L/'��4Rq�!!y �mM5+�5�)�ih&���	`ĆG74��	�r��^'�(��� �a����N4���yU0-�K6�o��	`g�zEO8#p�����O0�4�R؜y晧q���Vh&��3��`@؈3hUo�q���8@`�ƑAX f���� #��6�8.&��z�p�5�}aGP�_'F��i&��wq=�>���4��t`{K���4�kd�5� �)�LO&?v[L���z{
ADy��b�¸`c���#MY��V�}e��F��~:���Clw;p~�a򄲇艧�2�	;��0��@;�m��%��鸡c ��O}��/*��E�<�;��1�0������'e��ֺ� fď���#�2I�2AF��0R���a`�<��`�À2k�.`�����Llux?�_��D����#�o�<��G�@"�y6 ��0.�%�:��#��?�ը8����&��3�F��	�3�Zg�<"�N\�(�#���w&���p���Z����f0C��#��}���r`��Y06�a�΄¿?@�� NG"`��_�k"�#BA��!�c��D�([�(@��P@`���1#�À3�Q�@�H3P�Z� S�1�4�ߤ��w-�������~T�V��P�08%6e�[z���1 B�0S��u{60�Q���Q���Q�V0L#�U�Ø :�3�Hh'��vsZ�7N��'�4��ӛ�P ���#kXBA;��p8zFiJ�7�L��.y�ྃ�8G�%��́��Q���Q����aS�&���b60m�usy�0�ά��:L��*�	`Ibdh%�u����m|?�6��'�t��Z�� 6�ʽ�*��	�0��p�0�K����L ���%O�m�G9��Zl!�$�iN�ƙ���ci@ ���&�y���KS�62d�6�<'�����w숍^�ۆ4�.Q�>�6�X�c���k-`��5�3���ig�B�Fv�#L)�L#L�t�ʸ�0B-t���#i�]ĈF�ۃQ6��ױ�8:���8��*}�����)7�]�m�~"�l�/m!���Y��.~ߛ҆ri�6�ڌ�ئ�n�}-���xO0����2E�F�����H� ����S�=A���h�C�c��ld���.�kt�6~^�R�Hc��a=��Q��q)S�||\��m�L�:�"�p�L`���b+����cl16�t���|�]�Ah�){���[#��'��ܦH,3�K � #X{G��q�h�n�).�C�4@H�|Y*F �DO2�&Μ���1C`�`H1�<�֨0�_�8�o��� �|8]��O�!ﰑH⃱fMD3�}L��y8�6��ѡ���a�i�0�O#Ĩ
Ɯ��h���M �)�ĳ��MC���!`�m-!�d�: ��q���烵|k_0 �, ��k��6�o��c�N8Jf���F�F��ߔ[S	�"�q��+���4�L�7��;�W��lUn:�yU0�ǈ��`�Oݧ���D9f��^j�$�ܢ`gh���<[@���MFKp"�o6��Fi����(�ib��4�^Q�#�-L��D,"���5��Љ"^&�(�i�I1b��-�e�-�y�(�c���^Sgm�O3��� qv�焠�!8��=@a1m����C���Qfy�F3!�	`@Z�n8�<ϖ�`��t~Ү�`��6�c͞�'�
~�q��a�����S��v�4�gć:�`��1qOme�v��H?�<��_��r���^�҅�-j&��E�M�1������e��~!�c'��FA ����m���v��ۉ�AĘ��Q(/�c�#��<B �/�O=�G��G�-���o7�FyK����` ����z�_�֙Cy�q��N�dO0�ߓ�
m� �p��R�Á��p�����.وf(��#��f��Ю�F�:�Hl	=ē�b�I}��!z�;|�;����d�A�p��<�zK��=����D��G����C�oK[D���A������`��68E`�j+:�p:�����JF%E8����v�C��;���]�0��;�1*���։�z�q^lD�����n�N�ɺ��ak��O���c�(ji@�<���FҦq��G�i��՜>����[�Fq�Qc���	�#�X �-���;y�N�a�y&�A,��azГl�}��V�h�yG�.�c����&�svP��r\ ��<�A�K`�����0O<��6i���h��)�1|yn=��s0�6���J�p t��kߺ�yU0��� y�(�hu���{�VP��r�=�5����8�|F<Y�ڴ1�J����C����y�I#o�@���"2Ùaym�-��Fl�d*�ȇSQ�i6���@PŠ^b(�8����3�u�}��"������9�?[�O�Gqp�mZ#�/m�2�y�;�ݝ-�isl�m v#^+;`�ea��N��-��<?|߇X �i�m�#�u�~[�	��i �C�: hK�Fo���pj*y�����\�#x!h�(ԭ�A%��GZ/lq��8id���s��]��!D�7�tE��pt�(�FA :���}�O�S��=����o+o�g�:@����Wʩ��9u�fdqO�O!�����������ٰÑ��vr���i���ĳCbP>)k�Q�5���4����|2��/lHӰ���S�N'���I;��ۊ��g������k'v�0����,�ǳ�Ҁ�D=���l"�����������r��G���Mg��Ҭ�����O8��ef
�� �c&<��lƒ�l�r�4 �#f���`t�L~��4L�y�F"N�۳���Q�;腵�/�'/���H�
�M�S�hPXcj���A�4��U��Ny�S@>�s.qXZm�� L��M�����4f:MX2j��g���C�' �8)�5l�u���j��'�~a���  � IDAT���N�� u�oĞ`��1{N�K�̢��N��
c�[@��� ��D�iڈbY�`�	�L٤�Z�V��m�p��ނ|��1��n����\���~P����_qz���=��:K�h�C��j�r'A�� NG"`�Y7Lc���Qmu\Q_`#�1�M�	z�cz���;z7�4���wO�(3�u1�)��`4&�?�mg	Q�s���w�s	ཱྀ�x�%b�՚�<a�1m�}O�]�,"��鳝����i#�=���B#}��R���J��[�#���T��fTČ�jv6�M���:`fS0ۆ���-���>q6Zg_���,yM�h72�i00��1���0{ ���nvJ4�O8��ef�� ��z.,��?��u��PVP�$�ӑXfJ B=A=� A��H	`A(���H,3�&�YGAC�
�� ��&O��(qa�s��lX��숏ހ��l-jO�Q`1S�m}V��7Uh�O6ᰣ	�6[b�7�L��E��*����N���Po@�`�N@=�{�f_��N�c� �-m�,�໬��o_�,�h� �[�]�Íib��1�:����K��tɼ�7��/���`S�<��c^u
��T��l�p1@�w{�m�`�O�%�l��k:�p:�̪	`��o�3�FL���{��:p.�]V� G�����[����l'Cvb�S��Զ;W9���_�?��
Q��]�����
�|��� �#<g�/`wO;3��U�<}�VvVfo���B�د,u�M�l{���y	��Y�i`��,gG��l��l��;ڨ���ێ����蟾�r��i6~���r|N^�����u��;ڕ��N)\p�PxZG����؀��;�W�?	�t$��e�J��d8���y���)Φ���-�c |q9�6�`�(~C3�AoNg��=�8����8�ak{F�8C��Y��p�)Q�(K�P���e�) q�m�F,�'��F�v꣱G��l:�8c�L��#h��&���pw���;���g[�ٗ�q	h�9��0"�x~`�Uҏ���!8&��Qٍ�(��<�8e8:�#�����3��	i�9��7i���=�f[l>�Q8��s6�AX��&}���t>�s	��
`�B���fa�#җ#���s6%G����:��lv�7��ı9v,R(��c�p \x�RX7�ll�3��l�B9�sf��M��H;R"��c|x_8�I��Q>�ncw�8�,��Fc露|y� g���h���5�J�rv+�A�FO�q�����Pg��Ҕ���4;����5���gb�g�I��^s�5W�#!`�%/mGu�����ff��+��<#�0e�:�=�^02I:q�%�O9�_l����x<�2`�v���n�c4id�8�m�Qo�?gF��V��/�M�rD��u���(0��"lx���5���p(�)S��4<"'��v���FZf7��%��3|?� �[tn�u�rb�KRvh8�	��e�H
lv�n�&��H	��",���'6����:f�r�)��wh�y6���l��^� 6�3��N�zx�vȎs3{n�_B��>`{�9:�e�'�h=�O8��ef�0�6����D�h����㎾Q�u�]}�<ǎГ�Aj�ˏ�sF#N�j����Zk-o|�[q��#�{�`�׾�5�N��~���:N�6�l�'-�!pLp~��F�����3-9�����1�8v88�ΨŨ����A�4����L � �|,mp<9 �#E8#hP�Q���4醣M~�z�8p��d�=�Q����8�����9��2�,�:��3m�����9t�P���7-���)±BH0��C�hӨQ���y,��w*iD��$��;q�9c����C:|��aÆ5�.��E�t"��җ�ҡA9���1���+��qߺ��r�r��Ϲ��)�߼�K�r��%�w�G�zB�b�e
X� 8���	e[B�xW<���j{C��:O�){���
+���Iݡ<7����B"�e�lqĮP�c�����������-���I��Aܒ�8�tH�>��\DgZ��c�=�r1�/�1�G� �M@tS�VZi%/y��s��Ci@ 8ЇŶ���Y���ByA�C��#V�׽����6�l��c)�}�r�7r4yIXҌ���V[Yᛘ�@��-�le���"��xa7)W|?m�[���OױI�j3�I���8��o�.�$�E\hG��a��j5ݘrǷ�6�;�o�q�(���n��{M S��t4".����e2d�owiG�XA�RO�kҀ����U�2m2��6�	�w�7��7��>��I:RNf�}v�����@�x����<��� �.������R�� |;�=e��+��-�)��:İs���0�*��Lj`8�2�}�s��i>$����f�7��=z��A����`IM���B~��I �#��,� �Ozyi@(�8
8��	��k7'�FB�Sp���Gpڽ8N�玿q,��S�o84!����a�0�8�T4$�<σ8�6ڊ�m%2q�p�x�i�&����(#�� �`��u���$���l��]�F�h:� �0a�I?*{>=�4*8^��h@lt
�	'	��ǰ��6YǑ#��k�p�p��s���^ ��:�F��!3�;�ӝ�IY�a�{�g��U S�q(6�H�#�,���A+��8�~���s�1�{�$�ܘ �� ����	`ʟ��R��"�	���l���+N�охP#_����lDv��;�e�AYG�1Rh���0��_���v�����=��th��3�"���O|���������|"��fa[���t$�]��0�ݎ����[�o���<��$�l�7v��qD�w:�h�x�G��de�)��J�,�~������M���l�0Ϛc�9|�qBXl~�� ��@���n���/t8� �O:/�چV8�k���mi`e�t#�|�<��Ӱ�����γ����iEX��s�g:|Z��y )�]Pw���f��B�~`c��-�c|F�}�'ЉC{��'�@��.��
�I�EhS�{���J��a/�;����NN��:��\�#$A�� NG"`�Yt��(0�AOq��^���x�E �T4z�q��q5��3'�Ic� F �x4��z�Ӏ�D���a酴i;���l'����7(!q������h�m&�1� ��Q�0.����4b�P8=4����)]|���� ���A�"�	gӘ�	�P �Ӳq�(���ރ �u5�!�L4VLa�a��aq>���A�����sӲ�@=/� �ı��!�,P�q�<���"�)o��(W�w8C�	�8�l( ��L1LǓq�#���
5�`�Z�A�h�-�n�]���1+�QHF=��첋��ro��F��0S�0�=�9�K�Qưc(����7�ا)#%t�ak��#l�
`D��C:�N��� �n�#<�
� � 7��n�zCX�ƌ3�8]�!߉s��%�F��P1͗|eFߏH%>�x� �<��?:��[�#v(����� &?��*�u,��<� �}� ��>��m�	�p�D�8���0�K�H�ٖ�/��Y'��e�e��mr�FJ wtbG�۴�6�a���P޹�:�z|A:ț�
��z��i`��:ǰ��t�ٲ�f��6綾^��S6Pa`FOܡ#��p:�̢`DB`�h�i(�U�'�z�p\iD[�Μ�P ��4pn-�߶�U(���é��¸5��F#X��t?*ܦr�3n��тV�q�H2���������+&���4'����`��Y8<�Q�͆�j�f��Ǧ�1r�4H��p��aLZǽ�1h����\�:���y`�:���#���A��kq�q���yQ0�"6��D�*��6O�9k��mĈ�d�oA2BhS9ϦL� FHP^��5��[�J9J���x�埵���7Z�v��|"�8P\#o�m�ӏ�aT�>K�P̥	`:
��{�>F5�6}�@��5wi �m�5��V1B��
����q�L"'�,#��8�a�L cw� ��J S�-/�0��Zg����օ7�ĉ�k뱱Aė08�!x^ܞ�@`Y^b�%�|�NZAy�|C R���!6�x����j���֩g����}�n�F�k'���&�������?6��)���U �qǆ�Υ��L-o%p� 6R�� �i�B�r���?�&��C�}0�$̦�y�j#?D6�`��t�b?m}<��i؀����=^��cq%n�c
`:~�}UBE����H,3�.���hR�,Y/��G#gӯhX�io�.�e��=��v�;Y�a=�� �igd3<�æ
�8`lC�db�1���hF0�'��ɲ�{�*F�
8��O)B��!Tm��	`�-�N�����"�{�z�3̡#�I�Q���'%"'�o%_��� ta"~���I�p|m�rp"�oF�qr�Q�[ ��<Svm$��X ����%�Cq���U SXI9���LF���Lu�Q��g�8���L9�#m�!�<������`�-u�p�}�vI�\Q�^i���q/�'�"%��5�|7uG�r��c��r�u���W�m�(��Rбe���	`�%>��M��R�q�(?�NѬ%�(3��!��R�x.z�i��4b�5v�)ƀt�GBB ��;�D��ҧ� &�����l�z3L��ֈ�f�k�I�+�d;~S�HO��M��{�?�O[b�����=6�:%���Qj���[��m��[���m�d�,�v[}j�u�6���]���<�6�����LF\I:H�F��I��N:�7�i�(�|�7� �}��X9Bl��ɼ#���	`#%��:�)3�+ʈurQ�(ˤ5�{�χ=@���a����V���AK���Y�,~���H<�ͪ(��5tf/hc� ��#��p�DF�m/
�3��I �#��,� 4`�ŀ��X�xp��mke�x�� ��E�d���/�G�e�w�Z.@�nH�A�ac���M;Ǎw�\[���H^l�X�YJ�cx�/qę��/m��
n�iɨ;icke��m�f`�u�8O���NI�����7�pZ"��x���ZY^��M�����m��򜸆N�uf �j��|'yd;8[�m`�b�SDPϋ*��N�zX��;;c9��s(�<����;�C��<e��e=����7u(�ĕ��f+�;6E��IJ��v0E�::C�ٰf ����a&�l����o�{�� 6���x]:�,�y��W��֙��c�>��M�Z���V�>��I~���Q~�t4[�{�?e����%��´�~���
ӓ�q� ��H��d��ˈT(���k���<#�$��M�,}�)�1i�nI��̰��m�fِf�y7PF��;b��ɀt�Ya��ϱ�ϞE�@ؐO����s�&w
�H	���F�]�P�(_V��<�|�߆ �L��Y���:l&���Pvú�'	�f/(�a�cE��,lS�΀�'��D�2��7`$�����J�0[s��p}\x�E_����`�u�0��6��F ��!ϊ��ZKٟ`t����4���y�pO�S��Z��N7�PFHo@:�uf6 �fc�y�I�,�<#�6�nIJV���і�d{.��2#��YF~� �Y8戸p����%,]��"�
�i@\6k�;l�p9`8u1��Nw��`v�M�fvR��@����H,3�*��΋���hI^`��0�8+���p4���!���w�s?�Fة���I:!	i5j�ߠ�WI Ǹ�������>�jm|_��F���v�D�D���o���h#�=#ͬ�G�� ��0b�(R8J�'�q�p��l�V�#�!��&��FJ �����k�����t ��tӦ��?	�t$��U�� ���JX�(�FJ B�@�� NG"`�),��\X!`#%��|��I �#�̔ �z�z.,��?����P>P�$�ӑXfJ B=A=� A��H	`A(���H,3%�����K � �l�� ��?	�t$����POP�%�A�6RX��p:�L	`A�'���� �),��O8��e�� ��s	`A����� ���'��D�2SX�	�9��3�<#,��#���S�J B�@�� NG"`�i��W_uS�L� ���z>i�$���f�8s8u�� ́��V�Dg��`:#%��A�C �!%<=�L���z�z�����{ν���m0�܃>(!���Hle�Q�P ��M�}-7�����P"P��C����n��7:�)�Lsn��P��8h� K���a�܌3��f�yf7`� 7�L3���/��=#V���ɓ'�^x�M�6ͽ��[�F�k4 448h��(�͉���o~�Em+'�06[��c�ɾ���K�N�R��2K���T��G��#�<�vp�J����"��D c��}|���C��_��M�0�]{����+�tcǎ+�+����-7n�8p��������/V��Ǐw7�p���;����~ڽ��+�7�h+�i^|�E��O�x��z�����'~�(�b݈-�&N�8�Ϧ�Vb3�͜h�a{���b��a����jlv��X4���袋�?�u��OU�W�_��������Dz��}�lVw�D�m,vӐXfZ�#��FX�?���x�}�����o���X-�@S�!y<���{Cm��=#���)N�}����=������y,�x���S��9ho����+�Q`F)h$��_~T^DQ�3���Bl"���l%�˰��:���`l16ی��Vc�e_�K��{�j����b�����˟*>���{ｾ�����37���7�)���MC"`�I�2�z Y���SOy'�)<Ly|衇�
�<%o���^ziw�5���+ϫI��Ÿ3򋣅s����f�`#�(ñ��T6BE�6��mā�V2���Ć�v5��6�M�6c����l���2����!C��i�G}��[�W|Z�i��.��6s�Uݭ
Ѷ��MC"`�I��;ION�C��G�S�j�|�L{'��\sM?u����8�XnZ~3%ǌui8\8g�z8m�l#t�Qv����EQ���ۈ��V2��l�7��6�M�6c��ղ��f���P��:��l���$}#���C�c;ߨ*���b7��e'�k"g'���x3���`�z$o!�<b�����q-�W,?��6�N�&����ț��^��F��(N�оb#{k_M�}��-.�vu��6jl�Ĳ2���ao}����r���U a�0��դ�1<��ݨQ���5��vclb�F��(�����y�}5+�ZZ>1rh����msI�c9�[ߨ
��ܶE"`�f�XmZ��t�Mn���*5c\��2~�(��8=c����s�b���w�qx��w�}���򴜌�dՉ���nE��4#��g/�p�h��(��(��4���ù�˯!��?�)J,Ѷ��MC"�(����^`��ԩSe�EQEQ3��(v|^i����� �D�m,vӐ(�e�h������d�EQEQ��|��.������Ӊ_�Sb����nE��4#=n�8��V[�`��(��(f��P�v�;�S$~��m��4$�b�i����wÓ�EQEQlM�8�w	�b鈶��nE��{+�[o=w����x��(��(���O����/H ��#�6�iH�23��^z��r�-e�EQEQ��D�:�?�'�E%�6�iHŲ���o���g����ˀ��(��(� �ҹ��v�a	`��D��b7���Xv�F�C�O<�DpQEQ�&4�i���~�įXF�mc���D@Q,;C��C�E]�o��'��(��(~�;���+n��v�����XJ�mc���D@Q�C��[�L`QEQ�&�G:ꨣ�~��7��'�E&�6�iH�*04޿�կ4
,��(���B|�iӦ����o�%�+��h�X�!P��P ��7�\���(��(��N?�t���;k�W,5Ѷ��MC"�(V����/�Yd��o$�EQEQ�#���Zh!��#�H ��&�6�iHŪ0�}��ݷ��muQEQ�����4z�h��n�I���'�6�iH�*14��n8���ɓ''�EQEQ��~��߹���_|QX,=Ѷ��MC"�(V��Ag���/�.��(�b��/��V[��N;M�W�Ѷ��MC"�(V��Q��?���.��ByQEQkI|�n��-�����_�
D��b7���XE�"����[�O�2%q�(��(�b��/�ꫯ�\�����+C�m,vӐ(�Udh��1cܚk���z�Ľ�(��(�U%~�v�m�?�p�_�RD��b7���XU�"�u/�|(�/��(�b��s�嗻�W^���o� +E�m,vӐ(�Ufh����?�s�&N���OEQE�J���:u�?����+G�m,vӐ(�Uf<
�ڗ!C�������{EQEQ�BF|W_}uw��J���$�6�iHŪ3����r˹�^{-q�(��(�bى����{�w�1����bY����nE����A�6�tS����{EQEQ�J���.��w�O�6M�W�,Ѷ��MC"�(ց� F�n��&n���W� ��(�b%�O3i�$���ɓ%~�Jm��4$�b]���_ݭ����c�M�+��(��X&��<���n�Eq�^{m���Ųm��4$�b�7����:+q�(��(�bY��o�M�N=�Ԅ��+�U �6�iHź1n�}�Y��⋻K.�$q�(��(�b�����m������F�ω�Ūm��4$�b7S�Lq.��;vl�^QEQŢ?�pl������.�+ֆh�X�!P��X �'�x�-����.H�/��(��X4�}��nذa~o�_�ND��b7���XW���w�sK,��;�s���(��(��-��]q����ǄO�/�U#�6�iH�:3n, k��Yfw��''��*�5d&�e'e9.ߢX%⯜��n�%�t/��b���*m��4$�b�7�^r+���;蠃�3�Ū�`�����r�������������~GQQ,)��]�@�����be��2f���b������I�0���XU�mc���D@Q�E�k���6�h#���[�7�x#F�@Dbወ`ٟ��'D�+������/�baI�����,ewڴi^���D���N;͏�J��u'�6�iHE�ƍ�y9r��\�)FqQ,;��_Dk��w^kPD��<x�����;.��bU�_r�Ǻ�_޽��	�%�_��O�~[$������x�'���{�DQ,+L{F(0z��w�	A(3(ÈD0S��Ȍ˾(���F�r�������)�Xb�#���D@Q�gܨǍ��~7~��DQ,#m�������zJX(=(�����h��U vz��vr묳���_���O��E�.��GZ7���(&7.�Gyį�����8�(��`F�X7�Z��zHX(=(���y����v	`��di
������~Q�����ME"�(��#��[l��[���n�q8Q,�l���)S��_���B�A�4i������5�AX,#�~�i���K�ѣG��c$�_�F�}�uS�(�bk��5:�w�[d�E�=�ܓ#�e k#���]t�����\X(=(ÿ�կ���K �e$��СC݅^��A$~E�b�#���D@Q�3nx�'Nt-���Քh�l�O>���>	`���3�a�ԩ~z��X6�y�^��q�	�C�W?#�>Һ�HE1���n�[n�����৑��D��4�fAO<���{%��҃2� f#,	`�LdӶ#F�5�X�=��3	���1c�w��ݦ���;��-^��]y�>�?�x�7�Z��GZ7���(fg��<���|���.��D8Q,"%��*�2,,�����������ߜ0�1L�VZ��T}�щ�w�+����-�ܒ����j��|<�����ob��i�o�D@Q{θQ2N�<٭��*n뭷v�?�|"�(��BA� �D�Y�����O��������s�5��e��Ci\c���nPX�6��P�6C"�(��c�8Y�������D�(� �ʰ�XN�6͏�.��r��؟H�17�tS_���6�1�w��ww��vZ��������G?����M��{�Y�~�M7���G�o����gZ6���Y0���W���;K�n���~Ǐ:�3�&�l�߽�;�|��;'p���n���r+���?���nk�.\�ϡ�m�D@Q{ϸ�
�裏�aÆ��|�+~7�8�(�7%��*�2,,�յ�2˸=��ӯ��}�v�ט&��<�km�Q�ڥ�^����.�o9���~ָg����8G�e��gwp뮻�[v�e�oL���`�"�O9��,���x�_�>餓�������>�9��
�'.�S�e|+����^�0�>��kI ׇ��e@"�(�}g�h9gc�Ԧs�9��8�(�%��*�2,,��]Ff���ꪄ���{+�ٰ��w�uW�7G���ꫯ����o�{��+��ԣ�z�����=�N 3r�P�m��#������sg�yf/`<�,�������9���`��O�;>��c��|��}�o���-\�ϟH��HE1ƍWH�7���Vr�jV���BA� �H�&�_�´�.�=�0� f�N�� f4Bt���r��_�G�?묳a8�⢋.r#G�l� CDh�N �?���`���%��������F�4bwԨQ�K_���i��|�k����.\~Z&�"P��7b11�/��_w�٫qxQ�&%��*�2,,���SO=��FW=��� �`��.����0��%�!�Zj)?:K{�o�I4h��u�Y�:]F]��O�����_~��}������׾���7�>���vJ���o��΄��:ʭ��:��뮻��#\�������(�ϸAɦ�v��$���4-Z�/J UeXX,
9�u�l�����>��V���}���!�����'N��8~��L�~�k���5�/s4b�k������?�:t�{������_���u�Es�1�_r�%�w-���~�8�����*���Ç�k��#��_�(�bg7n1�
Ŵ�W\��|�͉�b9��"���%٤'Ez�l�Μ{���d���#�������C��4�Z[��^�����s�1��/��S�袋6�$kl�7�p���d����� 2d���!YO�=W�a�}�ݷ1�z�m�i�ɞû��F�ַ�~�������G���3��1��3$���O�d[$���Y�]Lֱг�ZzG��b��Q4�u�S�;6�,-�r�����j�c}_|q��3l�v?/�9��I}
��y�~�d|F�9��:���;�c�=tf2�k�Y��c~c�*����Y�q< #����0#�adq�_��U�>aoNf���9Ŷ���ѓ�;�Y��'L����X-R�����(v�q��4zo���{�g�}6����g��Ju���'=�ʍ󂅵��M�Kv1f��s}���D[����B��m6Zk<�����{��A|�M��J|�V�x/b8��=����ꓲ��4$���=�`L��;�<�C=Te�������9��wc�����������?	BS��8?��4�f
��!m�w��?-��O��3n߻-~�����0������7�{D��D��b7���(v�qc��;��Ҙ�=�q�XL����Vu�>����=���� ��ʍ��6��G֫^x�n�t����{���y���Ń>؋�
���XR�c���D@Q��q��F��$2R�FK���O��3u��x��ܰa��˂�*7��V�6E,>o��6�{����~��_'��qxQ�N�m,vӐ(�b�2n$�8u�Tv0G'!�5"\,���~����ދ��\�������L��5��֑��?���t�6	��裏�[z�?����Z-A�
��O�$K^8�)�+b1��_��o����K���:f^������nEQ,�F3�O?��?���Cq�?�|�9b�p����t�3���,\�m�����:��WYe7iҤFvˌ��l��������=�S��?���� ��ʍ�ٹ�bq�٭���-���~�O�u�0~�(���S_�-EQ,�4��8"���)S�$�#v�����/�msAO�QG�ƍ�������l���?��߃ ��	~��m����o������'�tK-�T|YZB���u����76E,�q��;�S�9�?Z��1�gt��ӟ�����E�X'��L�t� P�b2nP�H�ǔh�F���/~��s��'dȐ!�>���>�'����o���:\;��S��`v�6o~��<��J+����'�{��(l8�b�"�)��W�]?����_���D3~F��9����~C:69������*������??�X~Z�"P�b3n`��Yy�"�&i�5�tW\q���?K�,������c���� f�4��9��9���{��wf���Q�Fŗ�%Tn��w�uW¦��'KYX��B�3�8÷�q�3~F'y�E�f����5�X��$>�l����Zk-?5;SUJ ��C�@"�(��`�঑�~�����7����y��S?K��������y��_�F���Y0���կ~����x�W�#Py��_��%l�%Y�r��駟��wlS�����w_�җܲ�.�w�9nc�?��dLF{�ݗ_~y�:Ӵ�k.��ðQ"�T?��S���W�c�Υ�'��`vS|��Yh��N'���p=��߸3�������w��]���>�����6���>���/M 3R����s���1/V���2m�(�b�7���裏�=��ӯ���Yb�d=#��浻��im���޻q�<��xA� ��ᚭM�G��o�q]w�u��#=A��Gޱ�"�+b�����u��,���gWg� nO�?�d��N\����/0�o�G����D�c��%�X��2�,�c�q3�4������\s�O��f�V��ؼn�g���������d����_��|�o��ȦlO����/޸g��7o,@�����K�7����0 ��g�w֌�
��|n�D@�>�@�^�o���D�n��'���g��&N�د� �A\���o�$�bd��1nFzu��ƌ3�;�<���yb>d=#NH�`d�)nLq��9��nSGc���z��k8F ^�	0r�Z4A�	Tn>Y�����A�� �����3ⶳ�gu�|���tnǿ�D�r/��,3�(E�N4������� ����ė]v��t�M�Sv��gFv	c"�򓟸��ڪ�x���?���m�y��V��S�D��/�3��nx��>޼w�9���l�t�:�Ɨ��K|��{M #�i�´�t��o�1�>b5�ih�D@�>7LH#(��h#�}LÉ�t�Gq���)�����S�w���=Y�7έx�w�^YF��u����}�w���s����G��g��;&8r �$��� f���GL�oG�����?���/p��8���n(B��o�p�	��K�12��¯@(}���D���l��y�A�m������-$�ʨ,�>��c����=�6 ��i�f��|��_��n��&��	`�{	�o�]���j�1���,Ǚ<y��?S���w1�L �뮍��1�55#��;��)�\C 3p@��H6B��Vӷ�j�S_�-����3�F	�z�Zښ�n�0����/���\Ǹ�a������D �ƺY����=����s�%�)����Hm'���o}�;ALYcڤ�5S��b��|�ՙg�9ݵN�5�8>�f:X]jŵ�^�߿��+����$V_}�D�HGE��妿��GlrlSľ߆D6�B0]z饙�22���O�P�ԇ�7�C����q"�J�=t�q����������[��l�A#�M;fT��M ?��#�o�������F�m���_�S����첋�x�:Ӯ����ݾ�d{"�k6�K�/�;]��0{ЦeC� Ɵy�F�Z�4��"P�'͠1֮=��~
Z(��i�ƅ����ȑӭ�`�묝�oF�p��5�x�C=�o���h8���}��t����{�{��|�MOf'����0��K2Su��G�Q�bF��7�bZ6=�?L�����7�|�����-���olƃ�X~�f�m�\И�L��>��U���=a܀�"y��R��m��&~�mh!���i��co�pxp���t�׷�~���gt������g�����:�����rS`;�D�m��32�x�W��|�����QT���b��"�NPl��a;��+S�ŷ�7�;c�]a���Mx|)�6l�R���Y��4�6�kx���k�	0��e�S���*~?����&��aϰ�n���W8���t��aGm ��d�]����ʀD@��L�P�!���k��߶��g�,��������K������l���� c�1�lܰ�4z�l���/D�=��ӍkHs*s&>m����'�5"�κI�d}	S�m��	`�uںz�m]Ө��Ɓ��7T���<������ߋ.���]��m=��n|��6N��2n�[�񫮺�w ��Y��k󈞓�<h��
�#8>E�9y�	���P�r���`vGlS���3�e��Ç�6-�n�0~f�Hg��X�������{���a6=�f�с��b��k��=��L���L�&��p؈ol������>�'��1q`���ө�����\�Z$�+�z����Q���C /��r�oz�!������ �I�l�l0"�?�A�>�LĶm�`00�J/(G��P��Let�sQ����l��ߖ4��3l��	`{�hY+�����������oS�X��ߌNs?k���o���L�nǸ�oE�H��l A��+S�:�*��?药3�t��0��UF�ݸ�4r�!Fp���8c
�>����`�9��xcF��7�D�V�p�"	q�'��_����߬+�w��Ya��7vP[�@�Y�����;.R������d�M�_�[�i�~:�Y��k�?��dv�ٴ�t��7�q���7���vO70���)L؉�Nv���r����\1j�0�<Y����|�7��x�X-~Z��"P�'�
`��r�0Ӡg�uVo�1d�
��,Zz��h������9n �4̚[�9�y��7FDML� {��ć뜏g�yט�h��%e}B�֡��,ƒ�������	`�P�զ
��2-���0��o�q���S����c�~�Ќ�vd-��:�x1�xI�7'8c�ݺ{B�/�	�5��I�{欅Ć�M�cyCۥ�N;lU�V���j��u� 6���!���u. ��:!�M�E*7��%�vpDYlW��HG(!���tT�~��W;��-\`e�K1��)�_��$�T,�����߱�#c�͌:����{Ǝ�Y��o�o;c����,3޸fp!���#�����mh;u#\����Z�Y'��ٿL}ft�Y��=�Nă�4l4��}��Oۯ�H��V8��3!ibH��q¡�w�6�g�i.��"�Q�u�@���� ct�No!� F��=�0�C��z��[�1��Y��F�O���f6m;���`�� ��GFn�xq�F�}�Bښ^�����/�(׍la��Z'p��hGzՙ��7����a�(�|?�����8=��^|�;�,H�fG'�h��<��M,M`}~�/2�J�Ćٽ��8d\C�R���~��X���y``�~��,G!�\gt0��zK�${* d�����]n�#�4ROC��Ǵ��:3��p��U�Ne��T��^�>��=9��?W����v�-�z2M 3u�k���j�=k\�m�`;Is�����5���7�=L86�X�� f�c������F^�=�8�8U��N����w'��U����h"eVI%�(�"\�JRQ��!��U	I%C�(4�B��dȔH�"���5��^�{��_�}����s���|����~>k���a���9��ߟiG��e˵vy�.p|#���,�\}hOe����.(�C���a��6�0�hҘ�>��몰������ݒ�d�]w-�j���#�j���/7x�,p��+b�(�jK�9�������^��.mD|�|��>n�"V�{��e!Yԏ�D@2	W�X�!,���s���e\���u���h#�q���k1x��'�.�5KA��nX��9��}v<0綾,��Ӗe���CX��˛�\`���L�F�$�1	+`�=���'��Ǌ>yF�L,O�`'(]q ��W`��H���͵uܨ?����G��A`o�%#�`�����@�%sS�F����;��k2D@�7�1�b�'s�Fx]o�?p(�#^%�a������ю)Ob �s�Ē�9�:9wr�D�->��[h3A�) X��ܭ�#!��q��=�l۸����r.���YȜ�b'��V@m�����ϲ�����x�e�x*��q�إ����"s��P߳HH!F��������2sc�Q��3�_��f�F��=���Ș�d��{�~X�}�b�7�{D���X�"g䐐����X�(	|����E��.�fu��Rcq랋_����3��O$�V|�f�N���D�#fW����b�\��ڵـ0������Ũ�4I�P��o���(P֓���T(}�p!\�i�Y�#Q�$$�(+�}���c`��A
�
�QDع�#��,��A�� 6�r�H� 1A�R@;��	���zb��r�r?�`�/���dC��B�������>$RD&O�b�U�;+jl�˽�˳�Yn����;�*e!X?XK�CP`����?P*D�}�(����❊���P�!o�.��Pƅ諂�R�9����p.0Y�v����k�q��N(M��,���A�C�a�P",��#�M�}��n�|��k�U!�-�N�m�-��$��+��3J�`"�Q3P
�ه4���@y���ńA����ۀ۱�am�C\{�����}��660���a�- V�>\��m��3�aU�h��L\^���,����i�~{��2�S�,D�d@L�A8���w��l'�� ���N�=
-�xJ�}��4_���P�>��4�ٕW�,� �6��QX�h(�"� �?J�#���m���t��%����>?��?���>�Y�3��j(�PV.Y�v�G��������������d�wh���|�ϬN�K9��S����/�H����s%��+�{3J�`"1p���9sk+kb����\x����>����v�F���S2L:([��˹��^�K�p����"���ɒ�H�<A�"���=r'�Av���4 ����p1D}YC%�ZU�20�����*b:�� Gb+.�1��^*-f���4�ż�֋��xV��ϑ��"��n�0��%��(���B�X�SC�1*��$�RZ|�0%�')�\�~���c��a�hϙH$�V��3J�`"1��jG�z�$�����d�0ȓ��ۡ�:ʰ�%F���!z,��y�2���4�Wxx炰VA��_�a���w	a����ֆb!Fx�N���E���ϱoܕ%+� sیm��5�LG�e���Prx'�G|㷕��	H�UK�i2�z�kD���$�n7}8b�#��p�n�Hk�������41� S�H,&��Y ���0���'�\�lm�?��M$�+�i3J�`"1W�|q��Lh.s��i�MČ�4�LdD?f�/^���%S��/��Xd�:�j��ey���qa��ܪ�WK�&�ZK����^��ՙt�M�BL�/�/[�D3��ǆ��DгZU��;l^�>��v�#�{kd׮E\���N��Y!J�(whmx:q����X�7�� �,�'�xb!D�Pf��@�[a%f�c"�H���1�W�i՜�����`��^����s$sF���ү��~�@?cJ"�]�)*�]m�;�L�\��ۢ�C"�H��oތ�)�H$+��f>�Vw饗�&���)�,ZHwjq��@|���b�������-�L��n����H�D=</6�|�����k�)ђi�$�;��J���;2�r'55�U�^�P�5�48�b	R��񨫣ț�|��?j��V�阴�Q�Y�ʏ�-ew��#�\�yi�g�sÍ�b)މUE�={ʪk���ӯ,6����y5�/("(�d�杣�% E�8�.��I$�>����(���D"���z�I�d�~�{�[2iˢk��z,֏�9a�3x��:�a��F]b2n���q!�xe^A�X\X|��1�b��#J���o~s��P ��p�]H��l��B���Qd׾��;	�g���(��r6�4r����[����8���i�����u<ޣ:��}&w��^���3��| �?�D?`z4��5�T�T�W�<�q"�c��m��Db6X�͝Q:�Db����^Y5�qŬ��PYw�Yg�ʅO�W�^o�Q�g{�Q�f��dH)���l׻��[;�]V"��{�Ѯ^-$2	�?�3y�t�����X]dun7�!+uCa��=`�{
�+Y%�Jh�9J@s<�j#���QR0ȳp衇����e�3}e��mߟH$����ތ�)�H,&�U��Ր�딹*���>���n'��ַ��,���
ځ�b��2K��@�ڮ�P�|d��\`�)���q��խ���.G���|un�	sSgIc�_���h��Z��_�����nf#����}��h�l 2���^b�)�`�!��9�S�q3���[l��z"�H�+���S0�XL��݉�B�sYYj��kx.0�c�|���	sS:7�v[b�\-���ͅ�;w�)�7��,\��9mSRf���n��6��k�2��:�H$+�\3J�`"��lοX'�7Q�[���K����α��t�����v}@2��hD|���'^�h`��/������1ֽ��/^p𤋸���4��z�ro7<QXp��f����Dbe|
�!����b�� C�iy�g�e1��u��e�������N�[V�>l� �g��2��vqSb�b;����t�@9gL��f��L<9hl�� ���H���#n���.T�T;���)X�d�^�B�%��bf�NY�d\�F<��靸�rY�lN��V�=_lqn�L���7+m��H$K+��3J�`"���̲�J@��׿~H8-��K�b����]j.S�%���?2�؄%V��-���^�C�4b2-�B�>��G��9R%@��~Z&�J�\ǰ.	��v�7W	�A��.��c�9��8���G(}Ģ���j�^|���m�|�+�G�q1׬kD���AI�X�����E��nd9�~l����]����_�S����E�y�{ݫ$�2��&L\��M\u�;��λ��[����q��v����o�m?�H$��c��S0�XL��������5`���=�K�yP-��Z��w�S�[,!�eS��9�e���g�e.��T�G0^����E�=��.˲��1��Y�8�@Zl.b�慈�a���	��7�˕y9cPoj�m�٦�����1������l��_�z���y�g�������B���;���+���,����<��/�͏Miģ~��8|O��R��1����׿.��$��i�9�25�b	�6�b�������Dbu�
N1�t
&�� ���2��lML��|�m��pYk�y�e�%ъ�-�e���<��!�����Bvi�ò/{�����KX��Eͺ$��� 4�[l�Eik�V6id:���k��"%�\�	�,+zl�=a��Z�Q8��l��5a��?��nJI)�h7�������= �Mg�u�peR�'����}�(�l�l��6m1)�h���r��k�D"�X1v�Q:��Ĩ�]tQI�Œu�1�.��Ἒa�f�Mz�6v�aew�8FK�i�-K�� �q)C��J,��c��[�&�lR�Y��ȱuI��P�.��x#,D�ɩ-R�P� �\��隴}������.��l�%�Be��vDY�j9�#=�.���<�9�ꔔie���xEI"Ń��E��W�m��Ҙ��;��^{h��h�۽oޝ�O>yxL��,X~��\~���m��M����;�K"�H$�	c� ��I�`"�����esZ�rɫ�U{�GYg@�0��Ƕ� ��l�ad�%X�ub��Y�/�JL���g?����e!˲E,Y�81�8��C۱�DL�6�����,s�\���'���{1�$�U{s�j�!,��Q8-�x�xx�U(����*�h���?߮.�$!g�A+�ZN1���U�"�*���o6r�UW�������?�,�8��Ë�U;�̷����H�:���C!����{@1�]�����v�qǕ�(�|s�p���iq����v��=Yq�Gۧ$�D��_#�3I�`"�����\,�ܖ��!�����_�0����)�h	�*�9�X�%��߀Ef�?���Ž�:�3�`qN�r�(��(�81�8iGom.by	��I'�T����N����nv��D" �1D|�A~�a��J#D�u���H��^U���ҡ����f	��^_1[�	�[���y��n��/����~V���淮	�����|�͇������Z^��W����s=��Xމ��x�r����w�}�{_i�|�2A���ZS��q	�]{%�D���`F�L$b��9�ζ��,T2Պ���g>S�Y���|i��z�jd:�qf!���qi�������;F
��ʚ��ܳY�CyǷOÜH�0��8˷����-=DFh���g�{gO���Im��h�!��o�2-�S��54d07�Z�J�Y)�V��� �i�v
̷�����y�B�M-�;��pY,>���.���8�w�=�\%�
�|>��ϕg�3(��b���o��#f=H$�D?|��0��)�HL
>��O��nZ���&K�'�q�X_�Wt1��mܚY�$u;蠃J� ψ8����1]�l������7��4��$@�%�95�6�BgZ3�Z�DJ��y�%⓴(y���}cm�*9BfC�(�O=B��R�6�S��s<O�����}!_�ed��B<3��eק�~5���F��h\��;�{���v�i�2�̖ ����!i7�xGXR���RHVi��Y��PfJ&�]�p a�PPxr�w�(a7,��|�;����I��Eۧ�j��Db������Bi%dF�0�qÌK��Db.����tGH�`"���
+�K���'�Xj�no =.1P�x��}�d��)D	�������6񋒼L�M�E��b�a*����3�� ����!]bS]�x� �ȣ`�*�I��H �����n�xH!�F�o�"H�%��҄d"�rȼ-�0���w߽�k�NA�Ř;�9�<�2B�8	�d(6U��L<��>�w);JJ��,�R���(��`K���N�E�nZq��){?�9�BeęK0WϟM�%�/	���"����u��!9���>%�XL��LƓC��G�E7���/����\���(����R�8+n��:�v{"��������6>t9	���_��v��e&���{E-,��'b�o��S��a�0��nA��5�\S>����w��l�c�WE��,R`�K�(�n��Z��H���q}L�3��P��"��3���IKXx�^{���g�Y�`�א �⿝�r`�i��p,Ɩ�R��bh!��v3��j�1m��H,&$��������S���_�0�k�<��0vk�]{����婒81�FMa�#�S0�H$�+cm�[���V���L��Kh-,��sܿY��5O',�r����\c�l	0��eQ�	���O��4J���m0k����5ѕ����N��üV�p�F��DhA��\��<JfC��g��A~�B�ͤ�{����6�>%�Xl��/��C��t����˔g�d�'�0 +�i�b��}�ߪ�<Q����O+,'��!"m�����O�;Z:�D"1^����\�΂�r�]��D�7�x�]���|�$��ɽ�OW��\��$#�g�}��	0�-Wh�:V� ��퇐�l�wJZl�%_�\���K�'�Xb�L�C��"��l��v�E� �q�@�q��Z3J�p���d�f�E�i��m��H,6~��rjVW��>,����v�$���B2[���W?lY��/�_����<ܖ#�K`^-��<1hG�����S0�H$�F���e�D�Z�9<�� ��UhD-���'�����Q,
���e�eU�=D2C��Y��o}�,υ �p�f�̒b�6��l�͒� ;��po��ܕY^�D ��~��߇e\m���(�2�<�W�Q��	�8��$�>��Ӈ��J"���`���O�sV]m�7�p�8����^�*�`,q9����L���O�@'
ߨ�玔N�D"�H��7��V�Hd��'.��i�Lk1�����-D�u�]��b|�XdL�"�/�lЬ�!eA}��\T]y啃M7ݴXc%'�=��4�5�u�	z��p���N��Ċu��K=�'��"��p���y�x,���L�C"9���H�*�z�)J��u�U��"�� ���[c��l<�v3��k���>�X���}�N���ʬ��'S�!�5v�y�/��$�^xᅥ��O��KN��ئ�L�X(|�*�;R:�D"1>H
$�o\əZD�]P�\�k�GaDɔ;H���:��'~4Ⰲ�C�o��\� [ܜ��SN)I��d��uFcٟYlG(ū"�\�e�68C Ymc��xv���'�%R����O~��QWC�W�	���3B,� uq��^�yXYL�Tү��&��G�$^&���+21u�D[���Y�_{!�sQ",����L� 	��}J"�ؠ䢘kݐb�"�$��)�(Tc�>�B���0�#�����I�Ŋ�ߌ�)�H$���-��Q��qR'�������vCW^�S%qZ�Xx�d(�.wZs��8�+�B��2Ž�N���oB(	FY�Cb��q��g_�f)����Y7�Xlpu���bQL�p&�v��(Wy�P4�L[�]���K������<����2�I� �{����S"1�����I�`"�H$�n�-�8��r�%�[e��闈�Lmi������X�Yg�)d��8\r"���j���V���[�fm��H�,P�J���_@XYm�o�>r%Dl0wh��M�d��7���}MwdʷX������2O|��ۿmܫ%l�H�m�%�}�)�H$��m��"�/�1����g�Xɠ:�#�HI%��D;�H5�m�s[o�u�:%eZ�v3萇D"�H�c����I�`"�H$�S<��hC�1��Y'	:��#Kv�n��y�]���p�;�X/nӵ�l�����t#qSJ�le��ﭾ���%�Dbf�d�O:�D"�p�b��>�iǶcIHZ+�DX��	�k��_6�d��z���+vKB�:&���B�9�G¤���H�����K��OI$����m[��'���D"�X8�NqQ^,���#����\��?���I���N*�R��7�����Ya�	Z��!6�PJ�\$����6����)�D"���mKv��S0�H$K�b�V[mՙ�y}�88������1U�œeM�����=����m�&N��7�����b^�H�r��Ƿ�SR��l7��w���$�Dbf�-��N�D"�H,b�XQ������mo�Zd�dA�g�}��ԧ�l��K/zы�4������QGU�"��}��~))�$�͠������J"�H$�nے�>�L$�����X��*g�}v�s8%e.���ӓ�}�r�P�����xFg�q�<�q�u�u�����/�.���ζI�9{]����m�ox��5ϰ�)Ԩ^'���"�SLՖ(ž��ow�/��S�yܶ%�}�)�H$��Ac=��rY����w��SR��l7��wHV��)��]�G<�%�A,���\���o_�t�IS�K$���A��^�)7	�U]V�v�rƳ�����^����Q@>_��W�v���~v�^�{�󞃗��%E�GQ�<�S~8���{��Wg�B��K�ٮ�TxF��N�D"�H�?��ϋ�9x�����/�3т���V��7�p��6��M����W�#X��'u�/����,��z�������Ȏ9ԍ�k�]z�%�B{mX��UW]��f�u�!~��t�y�]tQ�1���~���|���^��SևK�ИX7]�@�����q��,��\sM��>k3K��_<�.����r޾Ѐ���'%�c,���(������૯��[95�[o�)�]�z�`�-�.kWk��V�o{�Qp_�9��j�ҽ��;蠃:ؽtM���7÷���Ү�m����K{��G�]�:,�5{1�]m�n�t
&�Db��i�ӟގm�����	OxB�:%eZ�v3(����s�N��\�G�%��)�H��,B��hC�������{��
14����t��(p�u�<��� �FΔp��������g�t���nw��`�-�l�馅 ��|p�7l��v�����m��fHvې)Dʵ�y�e� �p�[ݪ��(��8��o^ʻ'o��㮿��圎Q����U�*3�����a�C��z�����u�{��)�� �7�xcq�v�$`�(p�e����w�}��ܼ�w��]�e1����,~?��O�4�^e�q�{6�l�rn$ܱ)�L�g�u�]�|w��7ny�[�����SN)�Ʊ��<�C�bk]�׾��e;��{�l��� s�ga�����Xh����Y"̷��-
��V]���\�����O/��u���=��R��S<���-�,���ݯ�5n�q^����{��Fxw�m��]b�;���on뾔�-N����)�H$��c�w�y���v�ȓ����i��֮NI�V��J�!K{ۧ,W̕ �<���C�k��?+בGYHr`+�rȔe������}���O.�;��>�E��(��H#���G�D��#.����� ɼ�Mn2����"J�����$Z}Md�2����$q,�?��
j1D��򕯔ed?��ǔ����Ǉ�A�c_񮈫������M���tL�����3�!���(���_�rx�Q�,@��g�e�]��v����=��Ζ�g.���|Z���Q`�b�E���%��'��z�G>�%Ƹ-��Ծ�U�U/��s�=�l��
˵X�Ap����]R��m�|aY��%�B��G���e�v�A�=3�.�3���zL,eh�����S0�H$����u�����/%e.b�ֶ����>w�効`�����ծ��%�H�{챥"j[`䡶����i_XYDV�� J�����o>��A�!�,���HJ��uCx�����łj:� z��3^�>���\���!y���/yٮ?B�i_���:�� �8���iBD��2�rY�:9�~��7�<#P�쫯�E�׵pޛ���Sܱ��GܗP`��Zv�b_�T��~����fY��t�� SxP������>h�O{�ӆ���&�l2�Y�@��&��*,���B���a�8�g�Mk��6��xO�'��u�]�e�2V��3J�`b�аĐ|��_r�!�e�zӑ�&�˨Sm׷Ј5�v�|q�1�N=����@�߇B�Q��A�j�����B[�C��B��v�}��x���������;��=M�cI��?��)jb�+���S��׾���Ү���Q�:��+_�������ӗE310ca�1���_�җ��$%e�Ef!'��4X�%L,-̆ ����|�q��N}���>�z1�j!����r�~m��"�ډ� �5�+s��X�'r��<rۍ9�}#���[ĎK�2H2+%�\� B�=���7ʹc,�k������%,�k��Ɣ9���l��q���7�p��8 ��ϭ��&�q/�,�Ջ{�:_�}��<cf�#e�ƜA��R��l�w+��m�L!�.�	�kT�"؞�%�ܧ�:���öl��>��������_M�Y������;���)�G��U����&su`��\��:|�#�g�b��Q:����FGS'N!4p�s���2-X�f����X�J�~��R��j�\�y�7��m�x����5�HB���,�^�:\��|�{��Y߂��ֈ��1��G���shE},<˶l�	�<���|�6�n'h�t�������+Vb�8eum8	�䡏 #�m�����"���Hd<g�WV� ��*�)���'�G�:�i��Nb��4�k�:묡u�E���и��{e�t|��;1�\����"Q���Kt�$^
L��*��H
E	 ;ql3i�����Z)u�]��_+�O�a&�?Rn��p�����r ܘc���6�Zʥ�~�� �ڂ��S�س���Ճ��1s[��)U,3F���{v\M��3�W+FN8��g�1�y睇�#`үm�_�h��B`c��h�qW_*�ܙ�S01?� ����PF�#�I�Z-Z��/e=�szY��A�#�:��$� � ��|�c���@^�S'�����:���:R�s��0u�b"�uV�ƊLQ0\���1A��{:�W�d>����sN��خ���<�8���]'�בG��L<�����u6G\����%�>� ����'�<�`Fd����u�]�%�&��rV��R�,��� ���a{M�L
sǶ\`���\�2�Y0�3��/k�Ue���#�2
k	����3B��"��`�����7�}�Ur,.ƈ����o�Dp,����R`�v�~��c_d��w�{5wj����{d�4��l0룄K��91�1V8��GF���ƻ�r��ͅ ;'�;�L�1�{4h���m̨mI:&V:��Q�Ӗ ����]�����#f[{�n����<
���A{�>����G�PcM������W"Bm��p���-{��+ct˔2��@]h+8��)�����cY|	+��A 5D�<b0�H4G��3Pk�FA����/�B��A�����=B�e��h�AXh����X���������:fY������������y1]�@$) �<�/�X/(��^)�z�#>����˪��I��;�P�����@8^t���^���Xg/���A=<Gn4�E�}����V�Y"i̔�&�ܩ�a�h*��m?σ幎����!#u'Y#4�:t��R�C�E�G�y�{^� ʑ�����}�|?��̵;fM���V�;���:�%1yH��:�6�x�Lp��韌|/}wYPYzk�)��8�I`@�d��s6���D�v߼ 6���SA*���XFf[��I��p1$�7ט��:���ľj��<��g<�B�x,��`H^4������,��x#���X��%0�9Rc��}�݇��PP_���>����2��o�{n��8��ꩈ=��a�k���r\�Z�u����0���X��1�g��1���\�z�1G���Y��vu�a�u�7��c�Ĺ=s
���£�E�q[�t��Փ��}blFY�����.˒�I�f鹰 �qx0D>���>���F�#,�/zы�c�B�OYc�:tP�:�o)B����N/����!�/�zh	0R�à}�q���2���]�������@0i��yq�/��e.3:(�k�yiXP-{9�y�vn& �:7-�2�yY�u\V�J�8��em-�A����g����=E�(�w|��h[�� �Y�|r>R4c��e"�ȴ�=E�<�����u�q#��	���� �ϑ��[�����4}�"~Y;2 ��q��0�fv�H��YC��)1yH��:�6�x��x�ت]?�`!�=�X������@��?x���8r� ���nu�_}&<�����4w�t
&�.4uHZ�Z\�3 Jm&�ق%I�ױ����e�2�e%�Bs���Q�� K�P�#�an�?(o��\�ut��N�TD�1�t�c��?һ#v�����jCc��k���䜫lhm�zn��WA��C��H�����֍{��BiYܿ�(��gY�hv���^hc���Rn0�k�o}�i W�~9#	p��(�p���/O/�/�dF�}��?x`���=n��8	�k�)�nR�3�$��S�z��v9d��H�`b���d�j�-��1e���Җ���Ԯ-��Q/�,}:P�Ȋs9�� s%F��c�rΗ � ![�'�d�@��3�ݴkLG��gL�z�	���6{W�����s��˯$\�j��lsYae�v=,��'1Fm�F�ԈeZG���l�gY3.�m�sɹ���u��A��|���K��)1yH��:�6�x�E�1F��x�A�M����޶.�3�ǡ�:/�B�[�T��I$V%��C�;�t
&�D��<�k�Z.�@�'v�-3��o3�!{A�Y\s1�H��
ᲽN�^`D��]'��u�a�H"���{�nH������OG��X�1��1�Å�>�X�6��l�����8"ژ^ ��v�\���1����"��l���s�MG������˻�.X�Y��d��A�}��yA{����$�)��h�I��Db�����4w�t
&�$@B�v=�QF�R�2ӵed���trk��,���B^jwTD��Ldt�i骳��82�i�uT�.�iY���[�8Kl�k�w�}��?b��r�.��Cd#ß�R+-�k�X'	����\ӝ?r�@P��� ó�Z1��T��h#il;�M�ʲj��8�L����!�4��I����-~.�ڹ`�<X�?����m���Q�B�Swߕ�f� k�\�C��X��q����G$KL� ����'N$����!˝F:��6ʕYƶH��#��+"!�Pdf�������*�� -HYË�q32%�	b�	��5P�e�YL0RٍA�#��(�{�%'�T;?R�LڎX��u,猄U�'ݽ��*QXmmu�\G��$c��۲�+�q�ɯ��y��,����ʖ�%:���H�kc%W߰K���R�G�27�p�F�%�r��D
�N�>d�V�XRϝe�r(,(X�%n��q�c_��ڑ�G���~���86�l=�k���?;�c�����E���Q��$��D"��C_�Q�)��X�X_��5jh�g�9ne�'�7b���:1�u*􅠞V�b�g3m��"�^���.P��#n}@��{VS ,���ٶ����;�n�8�3�~��v}b�"	p��(�p��	���0�é�{ox�Q�3J��AU��VMy-'Ǩ|4f��
cE;5�b�}[�^!P��1SD����?�o��V<Z�vʜ��'i�_�v��{�10Dͦ]�G�,�´D�,��t�I����3�T�o���ËN��[�g`�M'�E⾅�I@�С���*mޘ���T��/������Ց;�t�}1�����]�]_�d�ܙ�@si�"�j;S�q@ƾ��R�N-2</p�/��I�M����$NYEN�<�{y;�		�xݵ�G)��KB*�y�h�����i��<�5d$O����{��'<���I��������|��:i�����)�gu�]�>3g3��|f4�s:�Bd���#���cyP��`����^t�=�+��ݷ���3ƨ2o�e�$�L.3t�>�-��"�=�b�3��خ_�p?��N'����Cܧ��&�n�h��IP��d����8R�'Vtp4�7�XUH��:�6�xr /�(+&r�J6��W�>��^�˳�}���y8��V5W,_HX�;�2V"$4��	��!��0�5DQHWM�Y����Ż�c{�'�xb��5�Sw"o2}����bp�#�ʇ�a`^��mD�t�;ur��a�H����n�	����k�`DUrQa��,+����=>����ks���>�)yy�3�.���"OL{�������[��ˌy�m�?J�M��&���S0�H$�A������N��L�h���E�	$In	$I��b�=��HaX@��|��[�YX���j�!A �e)�	��/!�Fm4�l��
Q�d����� ��!'	�HP)	��r�n�o��� �'�X-�<.w��݇�>�T	oA3�X��
a�䞒Q����0���[�C#	��<��y���r\V� �ܯYs���ލ�ĥ�"��?�.��:#�����hy�zv�2�X�|��2�� �5v��԰���r��tD m�3�Y~�i��=`(��)y�W�z���H&���<g�$�>r� �ڐ�(A��_S�z�u"�Q�Fc?3khgڕ�xf���6̽:�=��z�˙�QG����J���Ի��8'�T
��_�����<&!����'�-���D"�X��	�8t�N߉��Im��� � 5	���9�s��� ���l5Q�F��b4c�P&bkk��" aa����i�AMI�e`$Mh�䔈�m��"�eD�5�E�&)$Kl,�@�Ԙu�(��Uψ5E�$�d���H��A�n	0"��W���w?��:Y�B��H{��58?b��I�	O)J�s���w�cx,�5��� #�,���u�9� /s!���چ@R�p!<��>Pⸯ��>��ۗw�e
����0�3�6��P�����{�彎�m*��=�R�{$w:�L$��������">�,"��Ĥ�ň5�5��_��U�N8�*�
ˈ�g(����!\��A8Y�½5�A>w���ӹ�3��s|VD	��#�,����.�b1g���qyf!�s� �u��k�v�ZS9fX	ݓ���%��piG��V�� ��ǔ|k�	�݈���rNu�,@�j��z����l���kͤʇ� �_���M��m��>SV6v�E�x����hp�4⺭����q@�Lya���<K+���S01���s�.e�<�ǟ{M��L�)�Z�~�0�v/��s��*^`�D�P�V���B1и�r�)��-$3�Q�~���׾��e����M:��2[�|s͉e�k�v��>&\��'�@F'j����*w'���.��s�L��7;�Bb�Db�B�]3 d��ʯ�o����~gi���h��
¦�A|���ę�00���u
	��T`-Ƽ���\��m��eY����-̊��.'+o`S":vي&3��u�YSʷ@h۱�dS����[;FvՉ����M��OM�#1TM�œ�� #�a]�s{I0���������C��;����O���	������>����$��gK�)F�W+P(&V6d��v&wd�1g��@n�M�ݯ��h�Y�+޿�S014"����K����@�K�ݧ�N�ޮ7�)�v�\A���u�m����,�sg�]��xef;�D�?8�2�ݟI{������?�+p��]�zW�(�<��N�W������|ɶ����}Lh�>f��+K,�6�F��f���?����R�H,Uh�H�>��P�e��%1bIK��� ��	��u���-K��g�PD(��O\�Y�j�m`}"��6�׹.8b��c	mH��u�-I�� S�#P-���n�Å���l��6Z���[!GʐJ����2�w�o�}j�!�uB,�'���s�e���0�4�v��QB�TS��u�ؚ 3f���7�;�sۑz  1�IDATB�x�T����LK�]�{m��؏R��.\��e:���훎���B�o�0��2�l	����G�F��D�4^�����掖N��Tp[i�]\pF�s�q��FT��2՘i��^D�i?�:� G��E��t������G!:�ꨮ�:�n�.�v��`�6���oF~io�,��ר{�n�ֱ:��v}hG�a�GP�K���FM�U����D���_����G�ݯ-sd{��c�t�m&ȀD+��R�H{'���d�:}hV�BbvЧ �s�+$� ��E"�R�~���\�<���$���0��M�r�w����!�p�E%䩧��LY��zP� #�����M�.�H���61���E�!C�'/*��ٸ@��5���A��;�=��� SB�v���c��&�m���wܱ�{�d��� #��;�3�T�e�u��=/�4>�4�<YعL��M��<��M�&��c�w�C��sLG�Y>�2W�zJ8�ic�sK���6�?���J�#��S_���ևP �Ύ2P ��XZ=��o�hܫ~���v����%���q�έ��O;���>���^���y�������)��
�^�i\���4A�q�!�0,s��1"5q�Qxѕ� #�R���+c��6�|���#љ��'8��IdA4}M�Nֹ>��?��@t���e�s}�������Σ3���:����҈"A,謁�t���u=�4�\k:q�죬̂:T��G�u�.�����,���{.�A��aq4����ޟ�R=X9g�Tt">D:O���qU
-H,��k���5�rz}P�tDڒ2:��@i\���uƮ۽u�b�- m��K<3m�6�bd�t筵�k{S���P�]��gf�}��[��I�X.+�M$3�@i/q"��a ���{�/ӇR����r�b�l�����v�fc�;������H�u���ɖ�k�b�\�㛉|��r�5V����o�픁������6�%���L����Q���f���
w���諍1b�ʈ��.I��i�;�=o��X�]?
,c���+�g"��tCb��Q��w�aVmp��5" ��e,KP�鞧�%%W[� �����-���Ia���c�<��C����=2n3�J��\�l�/�1ϸ�>����Xf56�5*���=��%c|!"�����}ý������s��N�T�Z�0��)����Y�h�%D�2r�-4:�H����^�p����"�֨�C���"4a%��݀�����Ӊ��j�|���a1H��z9r�`�F���SvM^"�i�"�eץ#Qo��-��N��<��pG� {�r�+�X^Zǰ�R$��C��k�;�#�]�f��<��X���_>���<:"�t2�?�Ԟ�D�6A�d5�?2���q]b�=+�:�+�J ���%�ƥso�6Ԏ)A|(�k�6g������5\�ΜU~���:�f
��ʃ��6�.�������.%Kڪ6����a��Oj�I��� �����7�]�`<(v�]�ԏ1�!�5a\�ٸ]7i`Z*�e\�۸�@�0֯�1����<_P���"�����I�`�^&d��h��~�Bb;\��e;��?2D2��� #�:�Xo�I����NF�'�Ʋ>��q�<B�p���C���6�#~ ���[[P��`/q��
Ĳ%��e]�B3+�>.��9�ύ�>,�\�"ƁF��D�\�B���E�U�b��-[�� ���q��Ŧ��J ��n���OH7L�\��?�a�n��&x�iYG���}i��8�%%�P��-|b�9 }�����BN�'�mV��M'�]�X�`5N2���n_
0F�	W���`q����WaPXY��nC�&��\�W&(�꩞
�7�Zb�Xg\I��|3y0,�d�O:��
�����ۮs�5���g)���G{L@�e���I��xȅ]<��p����k�z�� �V=�Bm�&�I�s���X�Y=u<��h�긅�0�5eGi�ZLC��eVw䶶r�_r���E2D�@��έf&��F|�sF��#Ϧ�C�� �����ȹ{A���ȶ �>�m����T���y6��y!PG�S��v[����us
�~S���A��IGߥJ��&�,�B��DJK��-�6�F�!x���v���q�6�F��qO��k�;J:�@:�z������`1�喅٬��~���Q�Y�H!��8,�� ��2B�u�A��,�m�V��8��Gl1�A���6�D9�6��n���[\' �00���cb-jcJ�nϞ!+7�p�|� �:)�n��\T�}%��&�K�ذ�r��Jd607t����žĸ	��I�("$��8�V#I1 >�����v�u8�H$�D"��-pۖ��I�`��j��Ђ \L#I�tX|�X��N��d���� �RX�G"��.4���)+[�����o�9Z �\s9�f	�Z̵����t!������J~�E�+Ku��tD�u n̲,9�5��Zl
���xXq�-Vg�6Ȗ_	�"	r��I	ĴR��B�������^[�#{c\/�wD�{�� �~�	�=� (u0+��X��mʑ ��%���敠}��&a�I�(^�]J\"�V�c�)>��v{\1�GuTg}"�H$�D"1�-��N��h )H b��p�8�{��}�^%��d���AE~���AJĴ� �%�U��x�:ݿXcV�֥���x��-�K�H��C�b�'��m�Cq�ȥ�؟kF��U�2�x�]kk���X�Y_���4bOXFq�d)�=,�bb�e�\P~_>1\nYI�Cn���b	�\���龍r+A��v}X͑�h�Bsώ���T���^ͥ�2AB.��"!�$EK���-2ZJ^��ڏ)��:�p��W}kw�> �ܲ<��s�z�.��ȹ{f_�kj�������D"�H$�Db��m[��'�����Z6� ��&h`Y��Z��]���q��D��[ �ܖY^Ym���0����8^���a�n��m� �������]ρ�Ph�6m�sC�g�dT�sEB��s���k�2�L�D"�H$��|�۶d�O:�b�Y�Y۩c�b�gٙg��-p�~u�,��U�,O;͚�羛XxAh�C"�H$�D"1�-��N�Ī,�/u:7�6��8���u�]���ؽ�]�+b�ey��D"�H$�� �m�n�t
&�D"�H$�D"1I�m[��'���D"�H$�D"�HLpۖ��I�`"�H$�D"�H$�ܶ%�}�)�H$�D"�H$��$�m�n�t
&�D"�H$�D"1I�m[��'���D"�H$�D"�HLpۖ��I�`"�H$�D"�H$�ܶ%�}�)�H$�D"�H$��$�m�n�t
&�D"�H$�D"1I�m[��'���D"�H$�D"�HLpۖ��I�`"�H$�D"�H$�ܶ%�}�)�H$�D"�H$��$�m�n�t
&�D"�H$�D"1I�m[��'���D"�H$�Db����~w�=l
����8���������Ĥ�m�n�t
&�D"�H$���׾��B��w���w��Ї>t��~���v�$���%�}�)�H$�D"�H$&A����MY����~p�[�b��|`��+��bp饗����MY����e�������s���답��C�o}�[����7�m���;�������r�Q����G��.���>�����d�O:�D"�H$��dc�կ~5X{�����'��W^9�z�w����������=�\rIن�n��ƃm��fp�{�{p���}H����'v�i�R�Az���w���_���<�zի믿��~���`������Cr��}�sl���Nw���ַ���_�j����}p�;�y��?xp�{�sp���w����lC�O���r����n:$®��~�ӟ�܋����p�^�L$�D"�H$�� ��x�+�y�k
<��B�?���e���<�����-˯������/~����~�����o}�[�x�M6\{��e���N*d�O�����භ�m�ۆ�r��m~��?�����{�1xғ�T����<��0��n�����e��6�u=��[m�U��R��_w�u��&������I�`"�H$�D"��l�k���x�3x�k�����+$�>\�or����`��W�D#���)mO@��8��m뮻�����/�C���H����𩧞:�v��r�?��H~��.�`�˵�"�Q�}�C��W]uՔs%�'���T�_:�D"�H$��d�u�fM�{����kʺ���e���ۮ�1�k1R{�	'����̊���|��Ef����w��]��ԧ�k�!�2e�QGU��:|��n;���y�C���裏.u���nVܮ�]������w�z��O9WbyB��Ju��S0�H$�D"�HL6Z`!��nl�)��G|����r�pc���/}i!�����:֚k�Y��>��S�v]a�0�?���>7��P;2��Moz��E]4,w�7���+ubyC{o�n�t
&�D"�H$��F�+�g�Q�����ӟ��d_FT��b�b1���xD!�bl_��r0WeY��c��W�v�y�n~��q�Ygny�[�9眲<v\q������eٶ]wݵX������9%�RWu������%�}�)�H$�D"�H$&^xa�ЌH����o����n[H$+곞�����`r���t�6ɶG=�QC�����.��6۬�G�㎅��9N?������|����r�p�;�0��g>3\�-H."���<�v�y�ah�*�/V�5�X�$����\��=��s;כX��Z��'���D"�H$�D"1`�����Īnے�>�L$�D"�H$��8�Ԁ۶d�O:�D"�H$�Db:�v�i�/~���Īnے�>�L$�D"�H$�Db��۶d�O:�D"�H$�D"��$�-��N�D"�H$�D"�H$&	�mKv��S0�H$�D"�XYK���=l$���N�q��+ǯ��	|���-�>��t�M
�������u�/W���tO����}��Μ�ox�;��S��'?�I�ܸ`��v�Bq���v�}���Inے�>�L$�D"�H$V.�����������u�Yg�}�؎{�g����O}jg�S���Mnr�����ζI��g�9�c�=:�3(3�{��v�O���>��9|�LYo.bsS�h���[^(�;���ŧ>���]�z���Inے�>�L$�D"�H$V>�яny�[v�/7�p�ࢋ.���?��Fb����p="s���np��ݯC����.���������y~��.����6���w�3���;e�{�e������b�]��]7�x����������egۖ[n9��׿>eݨ��c8�c��~��_����O�l����w����v�o~�b�����;�f¯~��R�?���mQ����\�}mw�ϕ ?�����6������B���5�Xc���f�m�x�;:�m�?���u�A��?����p�;t��O����oSֻ~���M���-���k��%��6���e'�mKv��S0�H$�D"�X�#�ܑ7�`�)�6�|���?���Yg�5�խn5�����//���[�z�<���/��/�ن ��E/��>�|�#���뮻�Ї	�2��nX�Ν�t���������E!����V[�]�O�X�ο�F��~������/�cA��mo;��׾V�!�Χ�k}��_,�?�����}�c��o��փ���.��q���/�~�������1YmS��:փ��퓟���GY�۶�n;�l���=9���6��>����o~�R/���������_�(�[o��k^��q���`�F>���:�s�9e�=�y����ۿ����/��~w��W]uUٗg��o\�:>�෽�m垷x��=��.����=m
~���7�׽�5�����`���\Km�AzP9�m#�l�I���zF?��O���u�R�?������^�{{�W�c��u�ٓ���B���//�v���Y`�ܳ��Ã:�S�I�{ڒ�>�L$�D"�H$V�J��򗿔��>����2�rv��]wݡ�@��A�����e�]��j��=�q�ZiO9�R'S�<����?��C��=���e�G���'b��|Xa	��������A�_��W��=�z��(��o����C)˯|�+��u��Mo<�1�.����x���� �q�O����#�^xa9��m�w�`�5לB�������z�w�=���e�t�A���GQH`��o{ynH5�^��z�Q�яg�<S��o��� �����Z�9����a���#�n˶@�=GJ�X��t�M�~�����<?�	O(�[�s<�y�Z~w�m�R?�w���*�[������C��2»�>����ˣ��!V�3g)�LaBa0�g����6\�W:�D"�H$�U��`��͝w޹�G�X˂  E��N.������+i�A#]�����Q��4 ��g�qF!����׮�b����:����ԑ[������'>�BnXrmcD�b_n�b�`����&n�����E���(˺�:�����$���ǒ�$��bvM�~�b|M�_����!Lay�D�@܂�O�8 �ᖋ ���M�����.��ܯ����\\�-v>����:��-��3E�cY���ܻ��\�)՚ #��ATA��n�_{��������/m��6�xl�x���+
�� �,�m��:�˖��I�`"�H$�D"�*0[��50���k���BjÚ��t����!`AK���V��H�c]`DĘ����P� ۗ;3��\�P#k��JW�w,�K�kc���rA�YK����]#���ŵ�Kd�UVԺ,�6��9v���YM�c!�}m�5�{	����wG}����؈q����駟�Y�_�����?|p���Y�`J��NLō:��c{Ϣ=gK�O<����}\ۓ���N�0��Xֶ����qM��yu���A�Nx��?���K�:f��;0%/����c{����qF�L$�D"�H$V�0�T��X)� ���_,�'�("L�Ac?(SM�Y2-�����,.�&^,�\��O�-�Y�W&k�KD2���+�^{�5��7�1��MoZ�?���z�[�:�v�W���kcɬ���M9�w�p}����sM��:N��N���YP�9�b����e�FDY�։�����9��2"hJ'd���Fb�(L���*9Wlc9�I0�B�m[�� {v�h���F[�EK�y�T�#�u�#��oM�Yr]��ؗ[:�{ ��:�����W�2ܦ-��q'q
-�HKv��S0�H$�D"�X�#�� 	�$k,��jV��N:���n��(��!���o�ښ #�ȳ�� 65F(�E��p>��5�
�AYW��ꁰ�KEV�����W�Z,��e�hVo�y���0��M����0��2,v�ǁ׽�u���e���/��kir�Y]K����r�ou��XbD�2�jn�A�)�QG��� ����_��!��-��eS�+� �v�-��4b*���/,�b�#��5��FK�A�)���F$%�sDy����6	�(V(~X���fu��N!�����}=S��l_
���|��,m�3�ݳ�~�ײ�i�n�t
&�D"�H$��]�sCE���Ye�5�KlG�z�.�W�'���.Qq���~���Hcm9�RS� \�B�g	�j�곞��B@l�l	�����v�mW������\q��!�;����N(�ˮs���A�����b q�^0��9ݫ ��9�~W��<KlCؿ��/��4��� ~A��1D=�_�dŲX��v�\mA��Iz�/ޚ��}����6�[�}�:&�B#��%�M�!.�N6[xNu�3P��V�F�Rg�vOBЂ��4ܧ�mmU[`��M[q��/e	凶�5���JB�N\�e��|�8�U��F��vu��� Pֹj�Y���K꿂�N+���D"�H$��$1D����&��zꔌ�,��n����I�j�9.�� -2Ob��ـպu)�dP$q�o�/E�-��N�D"�H$�DbR���J���6�`���
���m����o�'�V�q`�#V{u���eRn�O*(R�U��m�n�t
&�D"�H$�n��[�tu 7`V`��ܦ���I�f��:<.p7�+7�X
�m[��'���D"�H$�D"�HLpۖ��I�`"�H$�D"�H$�ܶ%�}�)�H$�D"�H$��$�m�n�t
&�D"�H$KbNw�m�����49��1�j����>���l��&e���/�˘nfT�i٘��I�zz���O�o7��9���˼���;���Ǳ������c��v���K������1�ѷ���i�9hM�t衇�)����g�yuM}�����}l8�-���Q�zT��s�<�5L_���>�L�S�Y܇c�9f����)���.(Y�c�b�N�'<�	ej�+��rXƺ3�<�$<U_mM��vک<Ks6[�駗�ܧ�״V��l����Y:��s;��mKv��S0�H$�D"�X*@t�kڮ_(���2`���~������g!���/�4>��
9n�����fe
�v�\p�AM;��_%�B�\����|�;���7w�E�˼ʣ�E��ۮ�����_�/}���ꫯ���|�#K�n�U"3ٮO9��k�1e?d�<�����p��v͝�y8Ǐ����e06w�{s(��9���v�|����g?��2�2Bk^�=�A���{�������Y�o����=&<�q���.�O{��
�54b������y�R@�W�£=�b�;e�蕝������(�L$�D"�H$����7e�>����o~��bׇ>̺�X�m�G����<?�s%�,���{��e���_��W��O���~��~���%���%�\2��7����>�l=�Ǫ��>�X�c��!�Ѷ�n;e�kB�G`���ٯ���w��R�X�pn���%��k�]�I[���w��G?�у/~�S�9���n����|�*��s���։'�X�E��U������j	0����fD�1�Hw���h������2���|����k��=��ON�4"�<L����V�f��w�º�|���dJ�pǟ�e�q���Cg��_^�-��۷^2����	��T��/���D"�H$��|��;���'�A9bƺ�� ��nw�B�n���L;p��_�!�x`�.��~����ze9�!w��ʼ�o�q!N�e����k��x��f�mV,i��K���)T�Eu�=�,�s�"�~]<�)O)�Dd������C��"w�{�c���?��Gdc���*$"��<�\�ݏ� #����8��6��-Q�2VCS*!�ܡ�s�[m�U�ֻ������X���yn����đ����W�^����� ���~��˺���s�Ư~���gp��G�{R�|���/-
��5v�؏5ޯg�����������j�)�h��J����8ڑ�������7�Q�ǲ�馛k.O��W��ӟ�4x�k_[��	'�P�����;��,��;�䓇����tDֽ�����ŕ����׊
�#�8�S�>P"Dv����6��y�w?���[��֖fJ���	u���(�L$�D"�H$��KfX�ؑ���3,u	�B�P�lq���Yw�u���&���vZ���G?*��k����C�а>{��W���8"�a=C���@�E�����9A��k{�%֔��2��#Xȓ�w�qe���'?yHܸ�|���cQ �������xY� ���S���BlXA�j���ZF�=C.�HW� �'R
�H���ܓ�/���oZ��w��F� s'�_����o^,ǖ��r�}�-�5�x�{�[��N��e��$@Z�\��3`&x^�m��xm�������#���X��`���;Ur
m�=n^��וk����˲���s�0�u�Q��9ʗx�,���x�<gms�〶:���K�`"�H$�D"1 �A� �3 7���� QH/r��E�������Yfq��&�,�/~񋧜S�d��	�D?��O�#��������f���s�u�v[���XF�Y`V�5�\�X`�X�Wl�}%>
8�\�I���6!��ZF���Xfy�	��u�3b��;��"@�9��l�c�������n1ܢ&�$���{����k[M�)}V�h����t,��[��r�j�Q�6���fM�4	%�L@�),�uu��l���l?K{����]�����@�=����Jh������*V��-��N�D"�H$�Db>@��8�)�X�I�lG���n�������6��M!G\,�ZZ`D�u�D$�E��G*En�A�LI��\���t�A|/b��._a�Z��`�
>��S���%�7h�!��&�P�.�5F�Z+�k�/f1t�b]c�zM������<�����vu�-�� ܽ�N��b���k�:N��=�`P���ٻ.�m�n��"�}��/�ң�:�X����~�m�w@��9�yNqE�e��{U�	^�qG���eѮ�@|r,�w}��jxoݳv�ba�;;�t
&�D"�H$�A1����	Ӌ�!]��e�-D��H�xF�j�Jn���I�p9r�X0��D<b�:#�Hw$�j�b���e�>w�8`����E��|�T'jr�:V]<D�&!5f}[\�9�/q�5Ia�	�����rɒ_O��J�=�+x{�>P����%���B	�v��ֱ��c�K�� �Һ�`M;��@�Mi���N�FAq�3�k�8�z��F�L�0h�w�>��z���
	Ц�5y:xG��[�6k2\����T�=�o��[�9��:�Y,x�[��'���D"�H$��|� (sW�53(��B��"=b�E%ˉ�,\b|k7ߚ �lPq��ZF�M8��f,1O�)�$:���v�ٺ�"��Щ�	���Q���Շ���k�	D��>��P� �u�TA���sLG�m�����W��X:Y�e'V�6X�k�,�2���~+���Y�@�B �<�:�_xᅝ}�0��;G�ܚ �s�+
����;!܇k0k)R깱#���˽�v�`�} �rڒ󏲂kw��y~�=	�d�n�h뱿g yW(�(J��8�v���g��r}�b�l�wTk�Z\�w��y�BY�=P8���m�&���S0�H$�D"���'��K�9Zو��j뭷.���Pbn�u̡DJ�5aCz#K.���ru���,�H�x�t�I�Ȣ�w�2�:Ψ�-d(n�/[���C�Xǜ;�D!^�R����Z�k�Y��E.��@!�ݧ�w޹��:�WI�"�S($�?n����!�\�_��k6rT�m�H��g�rn�@��g��ubS#K�L@�$2k��p?�#�V�6$�yc�z(Y$�27o���n$���$L��Y�ǳ�F��{Ǝ�8A��?��Hg�}v�t��d+�� ��M׊�����:�,��D��xQ�y�=���,]�P� � �x��k�2�;�L�u�1ň��9�Q�Q�)�H$�D"�H�m��Br,��&FZ���͹]���~�a�u���ݮ$�Z�I�V�G���9�c�e������oˎ�zԣ���,�-��N�D"�H$�Db>�/f];�CJ��:q)�ˬDUm�R+]��w�Xl�zʂsEO:��6�ʂ��ܝ�zb�y$�a��}sD���ymL�4n1�۶d�O:�D"�H$���{�|�L��r�\����1�S\J���+$xj�n��ϽZ6�v[bn�E]�y��۽}�[���w�!�@6�v�b�m�n�t
&�D"�H$�D"1I�m[��'���D"�H$�D"�HLpۖ��I�`"�H$�D"�H$�ܶ%�}�)�H$�D"�H$��$�m�n�t
&�D"�H$�D"1I�m[��'���D"�H$�D"�HLpۖ��I�`"�H$�D"�H$�ܶ%�}�)�H$�D"�H$��$�m�n�t
&�D"�H$�D"1I�m[��'7����1�H$�D"�H$���k�����������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ۃC    A�_��              � �46�W�{�    IEND�B`�

=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: docs/TinyTuya-diagram.svg

<svg version="1.1" viewBox="0.0 0.0 960.0 720.0" fill="none" stroke="none" stroke-linecap="square" stroke-miterlimit="10" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg"><clipPath id="p.0"><path d="m0 0l960.0 0l0 720.0l-960.0 0l0 -720.0z" clip-rule="nonzero"/></clipPath><g clip-path="url(#p.0)"><path fill="#000000" fill-opacity="0.0" d="m0 0l960.0 0l0 720.0l-960.0 0z" fill-rule="evenodd"/><path fill="#f3f3f3" d="m0.96850395 29.217848l950.45667 0l0 674.33075l-950.45667 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m0.96850395 29.217848l950.45667 0l0 674.33075l-950.45667 0z" fill-rule="evenodd"/><path fill="#000000" d="m430.46347 336.80316l0 -11.09375l-3.953125 0l0 -2.265625l10.609375 0l0 2.265625l-3.953125 0l0 11.09375l-2.703125 0zm13.354309 0l0 -1.453125q-0.53125 0.78125 -1.390625 1.234375q-0.859375 0.4375 -1.8125 0.4375q-0.96875 0 -1.75 -0.421875q-0.765625 -0.4375 -1.125 -1.203125q-0.34375 -0.78125 -0.34375 -2.140625l0 -6.125l2.5625 0l0 4.4375q0 2.046875 0.140625 2.515625q0.140625 0.453125 0.515625 0.71875q0.375 0.265625 0.953125 0.265625q0.65625 0 1.171875 -0.359375q0.515625 -0.359375 0.703125 -0.890625q0.203125 -0.53125 0.203125 -2.609375l0 -4.078125l2.546875 0l0 9.671875l-2.375 0zm3.8178406 -9.671875l2.71875 0l2.328125 6.859375l2.25 -6.859375l2.65625 0l-3.421875 9.3125l-0.609375 1.6875q-0.328125 0.84375 -0.640625 1.28125q-0.3125 0.453125 -0.703125 0.71875q-0.390625 0.28125 -0.96875 0.4375q-0.578125 0.15625 -1.3125 0.15625q-0.734375 0 -1.453125 -0.15625l-0.21875 -2.0q0.59375 0.125 1.078125 0.125q0.890625 0 1.3125 -0.53125q0.4375 -0.515625 0.671875 -1.328125l-3.6875 -9.703125zm13.500732 2.953125l-2.328125 -0.421875q0.40625 -1.40625 1.359375 -2.078125q0.953125 -0.671875 2.84375 -0.671875q1.703125 0 2.546875 0.40625q0.84375 0.40625 1.171875 1.03125q0.34375 0.625 0.34375 2.28125l-0.015625 3.0q0 1.265625 0.109375 1.875q0.125 0.609375 0.46875 1.296875l-2.53125 0q-0.109375 -0.25 -0.25 -0.75q-0.0625 -0.234375 -0.09375 -0.3125q-0.65625 0.640625 -1.40625 0.96875q-0.734375 0.3125 -1.59375 0.3125q-1.484375 0 -2.34375 -0.8125q-0.859375 -0.8125 -0.859375 -2.046875q0 -0.828125 0.390625 -1.46875q0.390625 -0.640625 1.09375 -0.96875q0.703125 -0.34375 2.03125 -0.609375q1.796875 -0.328125 2.484375 -0.625l0 -0.25q0 -0.75 -0.359375 -1.0625q-0.359375 -0.3125 -1.375 -0.3125q-0.6875 0 -1.078125 0.28125q-0.375 0.265625 -0.609375 0.9375zm3.421875 2.078125q-0.484375 0.15625 -1.5625 0.390625q-1.0625 0.21875 -1.390625 0.4375q-0.5 0.359375 -0.5 0.90625q0 0.53125 0.40625 0.9375q0.40625 0.390625 1.015625 0.390625q0.703125 0 1.328125 -0.46875q0.46875 -0.34375 0.609375 -0.84375q0.09375 -0.328125 0.09375 -1.25l0 -0.5zm18.793396 -0.265625l2.609375 0.828125q-0.59375 2.1875 -2.0 3.25q-1.390625 1.0625 -3.546875 1.0625q-2.65625 0 -4.375 -1.8125q-1.703125 -1.828125 -1.703125 -4.984375q0 -3.328125 1.71875 -5.171875q1.71875 -1.84375 4.515625 -1.84375q2.453125 0 3.984375 1.4375q0.921875 0.859375 1.375 2.46875l-2.671875 0.640625q-0.234375 -1.046875 -0.984375 -1.640625q-0.75 -0.609375 -1.828125 -0.609375q-1.484375 0 -2.421875 1.078125q-0.921875 1.0625 -0.921875 3.4375q0 2.53125 0.90625 3.609375q0.921875 1.078125 2.375 1.078125q1.078125 0 1.84375 -0.671875q0.78125 -0.6875 1.125 -2.15625zm4.9104614 4.90625l0 -13.359375l2.5625 0l0 13.359375l-2.5625 0zm4.5895386 -4.96875q0 -1.28125 0.625 -2.46875q0.625 -1.203125 1.78125 -1.828125q1.15625 -0.625 2.578125 -0.625q2.1875 0 3.59375 1.421875q1.40625 1.421875 1.40625 3.609375q0 2.1875 -1.421875 3.640625q-1.421875 1.4375 -3.5625 1.4375q-1.328125 0 -2.546875 -0.59375q-1.203125 -0.609375 -1.828125 -1.765625q-0.625 -1.171875 -0.625 -2.828125zm2.625 0.125q0 1.453125 0.671875 2.21875q0.6875 0.75 1.6875 0.75q1.0 0 1.671875 -0.75q0.6875 -0.765625 0.6875 -2.234375q0 -1.421875 -0.6875 -2.1875q-0.671875 -0.765625 -1.671875 -0.765625q-1.0 0 -1.6875 0.765625q-0.671875 0.765625 -0.671875 2.203125zm15.724121 4.84375l0 -1.453125q-0.53125 0.78125 -1.390625 1.234375q-0.859375 0.4375 -1.8125 0.4375q-0.96875 0 -1.75 -0.421875q-0.765625 -0.4375 -1.125 -1.203125q-0.34375 -0.78125 -0.34375 -2.140625l0 -6.125l2.5625 0l0 4.4375q0 2.046875 0.140625 2.515625q0.140625 0.453125 0.515625 0.71875q0.375 0.265625 0.953125 0.265625q0.65625 0 1.171875 -0.359375q0.515625 -0.359375 0.703125 -0.890625q0.203125 -0.53125 0.203125 -2.609375l0 -4.078125l2.546875 0l0 9.671875l-2.375 0zm13.91156 0l-2.390625 0l0 -1.421875q-0.59375 0.828125 -1.40625 1.234375q-0.796875 0.40625 -1.609375 0.40625q-1.671875 0 -2.859375 -1.34375q-1.1875 -1.34375 -1.1875 -3.75q0 -2.453125 1.15625 -3.734375q1.15625 -1.28125 2.921875 -1.28125q1.625 0 2.8125 1.34375l0 -4.8125l2.5625 0l0 13.359375zm-6.84375 -5.046875q0 1.546875 0.4375 2.234375q0.609375 1.015625 1.71875 1.015625q0.890625 0 1.5 -0.75q0.625 -0.765625 0.625 -2.25q0 -1.671875 -0.609375 -2.40625q-0.59375 -0.734375 -1.53125 -0.734375q-0.90625 0 -1.53125 0.734375q-0.609375 0.71875 -0.609375 2.15625z" fill-rule="nonzero"/><path fill="#000000" d="m439.5562 371.1963l1.390625 0.1875q-0.234375 1.421875 -1.171875 2.234375q-0.921875 0.8125 -2.28125 0.8125q-1.703125 0 -2.75 -1.109375q-1.03125 -1.125 -1.03125 -3.203125q0 -1.34375 0.4375 -2.34375q0.453125 -1.015625 1.359375 -1.515625q0.921875 -0.5 1.984375 -0.5q1.359375 0 2.21875 0.6875q0.859375 0.671875 1.09375 1.9375l-1.359375 0.203125q-0.203125 -0.828125 -0.703125 -1.25q-0.484375 -0.421875 -1.1875 -0.421875q-1.0625 0 -1.734375 0.765625q-0.65625 0.75 -0.65625 2.40625q0 1.671875 0.640625 2.4375q0.640625 0.75 1.671875 0.75q0.828125 0 1.375 -0.5q0.5625 -0.515625 0.703125 -1.578125zm2.5625 3.046875l0 -11.453125l1.40625 0l0 11.453125l-1.40625 0zm8.9921875 -1.03125q-0.78125 0.671875 -1.5 0.953125q-0.71875 0.265625 -1.546875 0.265625q-1.375 0 -2.109375 -0.671875q-0.734375 -0.671875 -0.734375 -1.703125q0 -0.609375 0.28125 -1.109375q0.28125 -0.515625 0.71875 -0.8125q0.453125 -0.3125 1.015625 -0.46875q0.421875 -0.109375 1.25 -0.203125q1.703125 -0.203125 2.515625 -0.484375q0 -0.296875 0 -0.375q0 -0.859375 -0.390625 -1.203125q-0.546875 -0.484375 -1.609375 -0.484375q-0.984375 0 -1.46875 0.359375q-0.46875 0.34375 -0.6875 1.21875l-1.375 -0.1875q0.1875 -0.875 0.609375 -1.421875q0.4375 -0.546875 1.25 -0.828125q0.8125 -0.296875 1.875 -0.296875q1.0625 0 1.71875 0.25q0.671875 0.25 0.984375 0.625q0.3125 0.375 0.4375 0.953125q0.078125 0.359375 0.078125 1.296875l0 1.875q0 1.96875 0.078125 2.484375q0.09375 0.515625 0.359375 1.0l-1.46875 0q-0.21875 -0.4375 -0.28125 -1.03125zm-0.109375 -3.140625q-0.765625 0.3125 -2.296875 0.53125q-0.875 0.125 -1.234375 0.28125q-0.359375 0.15625 -0.5625 0.46875q-0.1875 0.296875 -0.1875 0.65625q0 0.5625 0.421875 0.9375q0.4375 0.375 1.25 0.375q0.8125 0 1.4375 -0.34375q0.640625 -0.359375 0.9375 -0.984375q0.234375 -0.46875 0.234375 -1.40625l0 -0.515625zm3.0390625 1.6875l1.390625 -0.21875q0.109375 0.84375 0.640625 1.296875q0.546875 0.4375 1.5 0.4375q0.96875 0 1.4375 -0.390625q0.46875 -0.40625 0.46875 -0.9375q0 -0.46875 -0.40625 -0.75q-0.296875 -0.1875 -1.4375 -0.46875q-1.546875 -0.390625 -2.15625 -0.671875q-0.59375 -0.296875 -0.90625 -0.796875q-0.296875 -0.5 -0.296875 -1.109375q0 -0.5625 0.25 -1.03125q0.25 -0.46875 0.6875 -0.78125q0.328125 -0.25 0.890625 -0.40625q0.578125 -0.171875 1.21875 -0.171875q0.984375 0 1.71875 0.28125q0.734375 0.28125 1.078125 0.765625q0.359375 0.46875 0.5 1.28125l-1.375 0.1875q-0.09375 -0.640625 -0.546875 -1.0q-0.453125 -0.359375 -1.265625 -0.359375q-0.96875 0 -1.390625 0.328125q-0.40625 0.3125 -0.40625 0.734375q0 0.28125 0.171875 0.5q0.171875 0.21875 0.53125 0.375q0.21875 0.078125 1.25 0.359375q1.484375 0.390625 2.078125 0.65625q0.59375 0.25 0.921875 0.734375q0.34375 0.484375 0.34375 1.203125q0 0.703125 -0.421875 1.328125q-0.40625 0.609375 -1.1875 0.953125q-0.765625 0.34375 -1.734375 0.34375q-1.625 0 -2.46875 -0.671875q-0.84375 -0.671875 -1.078125 -2.0zm8.0 0l1.390625 -0.21875q0.109375 0.84375 0.640625 1.296875q0.546875 0.4375 1.5 0.4375q0.96875 0 1.4375 -0.390625q0.46875 -0.40625 0.46875 -0.9375q0 -0.46875 -0.40625 -0.75q-0.296875 -0.1875 -1.4375 -0.46875q-1.546875 -0.390625 -2.15625 -0.671875q-0.59375 -0.296875 -0.90625 -0.796875q-0.296875 -0.5 -0.296875 -1.109375q0 -0.5625 0.25 -1.03125q0.25 -0.46875 0.6875 -0.78125q0.328125 -0.25 0.890625 -0.40625q0.578125 -0.171875 1.21875 -0.171875q0.984375 0 1.71875 0.28125q0.734375 0.28125 1.078125 0.765625q0.359375 0.46875 0.5 1.28125l-1.375 0.1875q-0.09375 -0.640625 -0.546875 -1.0q-0.453125 -0.359375 -1.265625 -0.359375q-0.96875 0 -1.390625 0.328125q-0.40625 0.3125 -0.40625 0.734375q0 0.28125 0.171875 0.5q0.171875 0.21875 0.53125 0.375q0.21875 0.078125 1.25 0.359375q1.484375 0.390625 2.078125 0.65625q0.59375 0.25 0.921875 0.734375q0.34375 0.484375 0.34375 1.203125q0 0.703125 -0.421875 1.328125q-0.40625 0.609375 -1.1875 0.953125q-0.765625 0.34375 -1.734375 0.34375q-1.625 0 -2.46875 -0.671875q-0.84375 -0.671875 -1.078125 -2.0z" fill-rule="nonzero"/><path fill="#000000" d="m482.4859 370.0244l2.234375 0.71875q-0.515625 1.875 -1.71875 2.796875q-1.1875 0.90625 -3.03125 0.90625q-2.28125 0 -3.75 -1.5625q-1.46875 -1.5625 -1.46875 -4.265625q0 -2.859375 1.46875 -4.4375q1.484375 -1.59375 3.890625 -1.59375q2.09375 0 3.40625 1.25q0.78125 0.734375 1.171875 2.109375l-2.28125 0.546875q-0.203125 -0.890625 -0.859375 -1.40625q-0.640625 -0.515625 -1.5625 -0.515625q-1.265625 0 -2.0625 0.921875q-0.796875 0.90625 -0.796875 2.953125q0 2.171875 0.78125 3.09375q0.78125 0.921875 2.03125 0.921875q0.921875 0 1.578125 -0.578125q0.671875 -0.59375 0.96875 -1.859375zm4.2109375 4.21875l0 -11.453125l2.1875 0l0 11.453125l-2.1875 0zm3.9296875 -4.265625q0 -1.09375 0.53125 -2.109375q0.546875 -1.03125 1.53125 -1.5625q1.0 -0.546875 2.21875 -0.546875q1.875 0 3.078125 1.21875q1.203125 1.21875 1.203125 3.09375q0 1.875 -1.21875 3.125q-1.203125 1.234375 -3.046875 1.234375q-1.140625 0 -2.1875 -0.515625q-1.03125 -0.515625 -1.578125 -1.515625q-0.53125 -1.0 -0.53125 -2.421875zm2.25 0.109375q0 1.234375 0.578125 1.890625q0.59375 0.65625 1.453125 0.65625q0.859375 0 1.4375 -0.65625q0.59375 -0.65625 0.59375 -1.90625q0 -1.21875 -0.59375 -1.875q-0.578125 -0.65625 -1.4375 -0.65625q-0.859375 0 -1.453125 0.65625q-0.578125 0.65625 -0.578125 1.890625zm13.4921875 4.15625l0 -1.25q-0.453125 0.671875 -1.1875 1.0625q-0.734375 0.375 -1.5625 0.375q-0.828125 0 -1.5 -0.359375q-0.65625 -0.375 -0.953125 -1.03125q-0.296875 -0.671875 -0.296875 -1.84375l0 -5.25l2.1875 0l0 3.8125q0 1.75 0.125 2.140625q0.125 0.390625 0.4375 0.625q0.328125 0.234375 0.8125 0.234375q0.5625 0 1.0 -0.3125q0.453125 -0.3125 0.609375 -0.765625q0.171875 -0.453125 0.171875 -2.234375l0 -3.5l2.203125 0l0 8.296875l-2.046875 0zm11.9296875 0l-2.046875 0l0 -1.21875q-0.5 0.703125 -1.203125 1.0625q-0.6875 0.34375 -1.390625 0.34375q-1.421875 0 -2.453125 -1.15625q-1.015625 -1.15625 -1.015625 -3.21875q0 -2.109375 0.984375 -3.203125q1.0 -1.09375 2.515625 -1.09375q1.390625 0 2.40625 1.15625l0 -4.125l2.203125 0l0 11.453125zm-5.859375 -4.328125q0 1.328125 0.359375 1.921875q0.53125 0.859375 1.484375 0.859375q0.765625 0 1.296875 -0.640625q0.53125 -0.65625 0.53125 -1.9375q0 -1.421875 -0.515625 -2.046875q-0.515625 -0.640625 -1.328125 -0.640625q-0.78125 0 -1.3125 0.625q-0.515625 0.625 -0.515625 1.859375z" fill-rule="nonzero"/><path fill="#000000" d="m422.16336 391.96317l0 -9.25l-3.453125 0l0 -1.234375l8.3125 0l0 1.234375l-3.46875 0l0 9.25l-1.390625 0zm10.564606 0l0 -1.109375q-0.890625 1.28125 -2.421875 1.28125q-0.671875 0 -1.25 -0.25q-0.578125 -0.265625 -0.875 -0.65625q-0.28125 -0.390625 -0.390625 -0.953125q-0.078125 -0.375 -0.078125 -1.203125l0 -4.703125l1.28125 0l0 4.203125q0 1.015625 0.078125 1.359375q0.125 0.515625 0.515625 0.8125q0.40625 0.28125 0.984375 0.28125q0.578125 0 1.078125 -0.296875q0.515625 -0.296875 0.71875 -0.8125q0.21875 -0.515625 0.21875 -1.484375l0 -4.0625l1.28125 0l0 7.59375l-1.140625 0zm3.104248 2.921875l-0.140625 -1.203125q0.421875 0.109375 0.734375 0.109375q0.4375 0 0.6875 -0.140625q0.265625 -0.140625 0.421875 -0.40625q0.125 -0.1875 0.390625 -0.953125q0.046875 -0.109375 0.125 -0.3125l-2.890625 -7.609375l1.390625 0l1.578125 4.390625q0.3125 0.84375 0.546875 1.765625q0.234375 -0.890625 0.53125 -1.734375l1.625 -4.421875l1.296875 0l-2.890625 7.71875q-0.46875 1.25 -0.734375 1.734375q-0.34375 0.625 -0.78125 0.921875q-0.4375 0.296875 -1.0625 0.296875q-0.375 0 -0.828125 -0.15625zm12.34375 -3.859375q-0.71875 0.609375 -1.375 0.859375q-0.65625 0.25 -1.421875 0.25q-1.25 0 -1.921875 -0.609375q-0.671875 -0.609375 -0.671875 -1.5625q0 -0.5625 0.25 -1.015625q0.25 -0.46875 0.65625 -0.75q0.421875 -0.28125 0.9375 -0.421875q0.375 -0.09375 1.140625 -0.1875q1.5625 -0.1875 2.296875 -0.453125q0.015625 -0.265625 0.015625 -0.328125q0 -0.796875 -0.375 -1.109375q-0.484375 -0.4375 -1.453125 -0.4375q-0.921875 0 -1.359375 0.328125q-0.421875 0.3125 -0.625 1.109375l-1.265625 -0.171875q0.171875 -0.796875 0.5625 -1.296875q0.390625 -0.5 1.140625 -0.765625q0.75 -0.265625 1.71875 -0.265625q0.984375 0 1.59375 0.234375q0.609375 0.21875 0.890625 0.5625q0.28125 0.34375 0.40625 0.875q0.0625 0.328125 0.0625 1.1875l0 1.71875q0 1.796875 0.078125 2.28125q0.078125 0.46875 0.328125 0.90625l-1.34375 0q-0.203125 -0.40625 -0.265625 -0.9375zm-0.109375 -2.875q-0.703125 0.28125 -2.09375 0.484375q-0.796875 0.109375 -1.125 0.265625q-0.328125 0.140625 -0.515625 0.421875q-0.171875 0.265625 -0.171875 0.59375q0 0.515625 0.390625 0.859375q0.390625 0.34375 1.140625 0.34375q0.734375 0 1.3125 -0.3125q0.59375 -0.328125 0.859375 -0.890625q0.203125 -0.4375 0.203125 -1.296875l0 -0.46875zm7.7699585 3.8125l0 -10.484375l1.390625 0l0 10.484375l-1.390625 0zm3.1969604 -3.796875q0 -2.109375 1.171875 -3.125q0.984375 -0.84375 2.390625 -0.84375q1.578125 0 2.5625 1.03125q1.0 1.015625 1.0 2.828125q0 1.46875 -0.4375 2.3125q-0.4375 0.828125 -1.28125 1.296875q-0.84375 0.46875 -1.84375 0.46875q-1.59375 0 -2.578125 -1.015625q-0.984375 -1.03125 -0.984375 -2.953125zm1.328125 0q0 1.453125 0.625 2.1875q0.640625 0.71875 1.609375 0.71875q0.96875 0 1.59375 -0.71875q0.640625 -0.734375 0.640625 -2.234375q0 -1.40625 -0.640625 -2.125q-0.640625 -0.734375 -1.59375 -0.734375q-0.96875 0 -1.609375 0.71875q-0.625 0.71875 -0.625 2.1875zm10.135498 3.796875l0 -9.25l-3.453125 0l0 -1.234375l8.3125 0l0 1.234375l-3.46875 0l0 9.25l-1.390625 0zm10.087738 0l0 -10.484375l3.96875 0q1.046875 0 1.59375 0.09375q0.765625 0.125 1.28125 0.484375q0.53125 0.359375 0.84375 1.015625q0.328125 0.65625 0.328125 1.4375q0 1.328125 -0.859375 2.265625q-0.84375 0.921875 -3.078125 0.921875l-2.6875 0l0 4.265625l-1.390625 0zm1.390625 -5.5l2.71875 0q1.34375 0 1.90625 -0.5q0.5625 -0.5 0.5625 -1.40625q0 -0.671875 -0.328125 -1.140625q-0.328125 -0.46875 -0.875 -0.609375q-0.359375 -0.09375 -1.296875 -0.09375l-2.6875 0l0 3.75zm8.197479 5.5l0 -10.484375l1.28125 0l0 10.484375l-1.28125 0zm8.24054 -0.9375q-0.71875 0.609375 -1.375 0.859375q-0.65625 0.25 -1.421875 0.25q-1.25 0 -1.921875 -0.609375q-0.671875 -0.609375 -0.671875 -1.5625q0 -0.5625 0.25 -1.015625q0.25 -0.46875 0.65625 -0.75q0.421875 -0.28125 0.9375 -0.421875q0.375 -0.09375 1.140625 -0.1875q1.5625 -0.1875 2.296875 -0.453125q0.015625 -0.265625 0.015625 -0.328125q0 -0.796875 -0.375 -1.109375q-0.484375 -0.4375 -1.453125 -0.4375q-0.921875 0 -1.359375 0.328125q-0.421875 0.3125 -0.625 1.109375l-1.265625 -0.171875q0.171875 -0.796875 0.5625 -1.296875q0.390625 -0.5 1.140625 -0.765625q0.75 -0.265625 1.71875 -0.265625q0.984375 0 1.59375 0.234375q0.609375 0.21875 0.890625 0.5625q0.28125 0.34375 0.40625 0.875q0.0625 0.328125 0.0625 1.1875l0 1.71875q0 1.796875 0.078125 2.28125q0.078125 0.46875 0.328125 0.90625l-1.34375 0q-0.203125 -0.40625 -0.265625 -0.9375zm-0.109375 -2.875q-0.703125 0.28125 -2.09375 0.484375q-0.796875 0.109375 -1.125 0.265625q-0.328125 0.140625 -0.515625 0.421875q-0.171875 0.265625 -0.171875 0.59375q0 0.515625 0.390625 0.859375q0.390625 0.34375 1.140625 0.34375q0.734375 0 1.3125 -0.3125q0.59375 -0.328125 0.859375 -0.890625q0.203125 -0.4375 0.203125 -1.296875l0 -0.46875zm6.1198425 2.65625l0.1875 1.140625q-0.546875 0.109375 -0.984375 0.109375q-0.6875 0 -1.078125 -0.21875q-0.390625 -0.21875 -0.546875 -0.578125q-0.15625 -0.359375 -0.15625 -1.515625l0 -4.375l-0.953125 0l0 -1.0l0.953125 0l0 -1.890625l1.28125 -0.765625l0 2.65625l1.296875 0l0 1.0l-1.296875 0l0 4.4375q0 0.546875 0.0625 0.71875q0.078125 0.15625 0.21875 0.25q0.15625 0.078125 0.453125 0.078125q0.203125 0 0.5625 -0.046875zm1.571991 1.15625l0 -6.59375l-1.140625 0l0 -1.0l1.140625 0l0 -0.8125q0 -0.765625 0.125 -1.140625q0.1875 -0.5 0.65625 -0.8125q0.46875 -0.3125 1.3125 -0.3125q0.546875 0 1.203125 0.125l-0.1875 1.125q-0.40625 -0.0625 -0.765625 -0.0625q-0.578125 0 -0.828125 0.25q-0.234375 0.25 -0.234375 0.9375l0 0.703125l1.46875 0l0 1.0l-1.46875 0l0 6.59375l-1.28125 0zm3.2750854 -3.796875q0 -2.109375 1.171875 -3.125q0.984375 -0.84375 2.390625 -0.84375q1.578125 0 2.5625 1.03125q1.0 1.015625 1.0 2.828125q0 1.46875 -0.4375 2.3125q-0.4375 0.828125 -1.28125 1.296875q-0.84375 0.46875 -1.84375 0.46875q-1.59375 0 -2.578125 -1.015625q-0.984375 -1.03125 -0.984375 -2.953125zm1.328125 0q0 1.453125 0.625 2.1875q0.640625 0.71875 1.609375 0.71875q0.96875 0 1.59375 -0.71875q0.640625 -0.734375 0.640625 -2.234375q0 -1.40625 -0.640625 -2.125q-0.640625 -0.734375 -1.59375 -0.734375q-0.96875 0 -1.609375 0.71875q-0.625 0.71875 -0.625 2.1875zm7.291748 3.796875l0 -7.59375l1.15625 0l0 1.140625q0.453125 -0.796875 0.828125 -1.046875q0.375 -0.265625 0.8125 -0.265625q0.65625 0 1.328125 0.40625l-0.4375 1.203125q-0.46875 -0.28125 -0.953125 -0.28125q-0.421875 0 -0.765625 0.25q-0.328125 0.25 -0.46875 0.703125q-0.21875 0.6875 -0.21875 1.5l0 3.984375l-1.28125 0zm4.89624 0l0 -7.59375l1.15625 0l0 1.0625q0.34375 -0.5625 0.9375 -0.890625q0.609375 -0.34375 1.359375 -0.34375q0.84375 0 1.375 0.34375q0.546875 0.34375 0.765625 0.984375q0.90625 -1.328125 2.359375 -1.328125q1.125 0 1.734375 0.625q0.609375 0.625 0.609375 1.921875l0 5.21875l-1.28125 0l0 -4.78125q0 -0.78125 -0.125 -1.109375q-0.125 -0.34375 -0.453125 -0.546875q-0.328125 -0.21875 -0.78125 -0.21875q-0.796875 0 -1.328125 0.53125q-0.53125 0.53125 -0.53125 1.703125l0 4.421875l-1.28125 0l0 -4.9375q0 -0.859375 -0.3125 -1.28125q-0.3125 -0.4375 -1.03125 -0.4375q-0.546875 0 -1.015625 0.296875q-0.453125 0.28125 -0.671875 0.828125q-0.203125 0.546875 -0.203125 1.59375l0 3.9375l-1.28125 0z" fill-rule="nonzero"/><path fill="#000000" d="m448.40295 409.96317l0 -10.484375l3.96875 0q1.046875 0 1.59375 0.09375q0.765625 0.125 1.28125 0.484375q0.53125 0.359375 0.84375 1.015625q0.328125 0.65625 0.328125 1.4375q0 1.328125 -0.859375 2.265625q-0.84375 0.921875 -3.078125 0.921875l-2.6875 0l0 4.265625l-1.390625 0zm1.390625 -5.5l2.71875 0q1.34375 0 1.90625 -0.5q0.5625 -0.5 0.5625 -1.40625q0 -0.671875 -0.328125 -1.140625q-0.328125 -0.46875 -0.875 -0.609375q-0.359375 -0.09375 -1.296875 -0.09375l-2.6875 0l0 3.75zm13.213104 5.5l0 -1.109375q-0.890625 1.28125 -2.421875 1.28125q-0.671875 0 -1.25 -0.25q-0.578125 -0.265625 -0.875 -0.65625q-0.28125 -0.390625 -0.390625 -0.953125q-0.078125 -0.375 -0.078125 -1.203125l0 -4.703125l1.28125 0l0 4.203125q0 1.015625 0.078125 1.359375q0.125 0.515625 0.515625 0.8125q0.40625 0.28125 0.984375 0.28125q0.578125 0 1.078125 -0.296875q0.515625 -0.296875 0.71875 -0.8125q0.21875 -0.515625 0.21875 -1.484375l0 -4.0625l1.28125 0l0 7.59375l-1.140625 0zm4.3542175 0l-1.203125 0l0 -10.484375l1.296875 0l0 3.734375q0.8125 -1.015625 2.078125 -1.015625q0.703125 0 1.328125 0.28125q0.625 0.28125 1.03125 0.796875q0.40625 0.5 0.625 1.234375q0.234375 0.71875 0.234375 1.53125q0 1.96875 -0.96875 3.03125q-0.953125 1.0625 -2.3125 1.0625q-1.34375 0 -2.109375 -1.125l0 0.953125zm-0.015625 -3.859375q0 1.375 0.375 1.984375q0.609375 0.984375 1.640625 0.984375q0.84375 0 1.453125 -0.734375q0.625 -0.734375 0.625 -2.1875q0 -1.484375 -0.59375 -2.1875q-0.59375 -0.71875 -1.421875 -0.71875q-0.84375 0 -1.46875 0.734375q-0.609375 0.734375 -0.609375 2.125zm6.947998 3.859375l0 -10.484375l1.28125 0l0 10.484375l-1.28125 0zm3.2874146 -9.015625l0 -1.46875l1.296875 0l0 1.46875l-1.296875 0zm0 9.015625l0 -7.59375l1.296875 0l0 7.59375l-1.296875 0zm8.209259 -2.78125l1.265625 0.15625q-0.203125 1.3125 -1.0625 2.0625q-0.84375 0.734375 -2.09375 0.734375q-1.5625 0 -2.515625 -1.015625q-0.9375 -1.03125 -0.9375 -2.921875q0 -1.234375 0.40625 -2.15625q0.40625 -0.921875 1.234375 -1.375q0.84375 -0.46875 1.8125 -0.46875q1.25 0 2.03125 0.625q0.78125 0.625 1.015625 1.765625l-1.265625 0.203125q-0.171875 -0.765625 -0.625 -1.15625q-0.453125 -0.390625 -1.09375 -0.390625q-0.984375 0 -1.59375 0.703125q-0.609375 0.703125 -0.609375 2.203125q0 1.53125 0.578125 2.234375q0.59375 0.6875 1.546875 0.6875q0.75 0 1.265625 -0.453125q0.515625 -0.46875 0.640625 -1.4375zm6.837616 2.78125l0 -10.484375l1.390625 0l0 10.484375l-1.390625 0zm3.8375854 0l0 -10.484375l3.96875 0q1.046875 0 1.59375 0.09375q0.765625 0.125 1.28125 0.484375q0.53125 0.359375 0.84375 1.015625q0.328125 0.65625 0.328125 1.4375q0 1.328125 -0.859375 2.265625q-0.84375 0.921875 -3.078125 0.921875l-2.6875 0l0 4.265625l-1.390625 0zm1.390625 -5.5l2.71875 0q1.34375 0 1.90625 -0.5q0.5625 -0.5 0.5625 -1.40625q0 -0.671875 -0.328125 -1.140625q-0.328125 -0.46875 -0.875 -0.609375q-0.359375 -0.09375 -1.296875 -0.09375l-2.6875 0l0 3.75z" fill-rule="nonzero"/><g filter="url(#shadowFilter-p.1)"><use xlink:href="#p.1" transform="matrix(1.0 0.0 0.0 1.0 0.0 2.0)"/></g><defs><filter id="shadowFilter-p.1" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" stdDeviation="2.0" result="blur"/><feComponentTransfer in="blur" color-interpolation-filters="sRGB"><feFuncR type="linear" slope="0" intercept="0.0"/><feFuncG type="linear" slope="0" intercept="0.0"/><feFuncB type="linear" slope="0" intercept="0.0"/><feFuncA type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><g id="p.1"><path fill="#ffffff" d="m57.26509 228.09973l250.07875 0l0 256.1575l-250.07875 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m57.26509 228.09973l250.07875 0l0 256.1575l-250.07875 0z" fill-rule="evenodd"/><path fill="#000000" d="m119.41774 249.41286l1.390625 0.1875q-0.234375 1.421875 -1.171875 2.234375q-0.921875 0.8125 -2.28125 0.8125q-1.703125 0 -2.75 -1.109375q-1.03125 -1.125 -1.03125 -3.203125q0 -1.34375 0.4375 -2.34375q0.453125 -1.015625 1.359375 -1.515625q0.921875 -0.5 1.984375 -0.5q1.359375 0 2.21875 0.6875q0.859375 0.671875 1.09375 1.9375l-1.359375 0.203125q-0.203125 -0.828125 -0.703125 -1.25q-0.484375 -0.421875 -1.1875 -0.421875q-1.0625 0 -1.734375 0.765625q-0.65625 0.75 -0.65625 2.40625q0 1.671875 0.640625 2.4375q0.640625 0.75 1.671875 0.75q0.828125 0 1.375 -0.5q0.5625 -0.515625 0.703125 -1.578125zm2.5625 3.046875l0 -11.453125l1.40625 0l0 11.453125l-1.40625 0zm8.9921875 -1.03125q-0.78125 0.671875 -1.5 0.953125q-0.71875 0.265625 -1.546875 0.265625q-1.375 0 -2.109375 -0.671875q-0.734375 -0.671875 -0.734375 -1.703125q0 -0.609375 0.28125 -1.109375q0.28125 -0.515625 0.71875 -0.8125q0.453125 -0.3125 1.015625 -0.46875q0.421875 -0.109375 1.25 -0.203125q1.703125 -0.203125 2.515625 -0.484375q0 -0.296875 0 -0.375q0 -0.859375 -0.390625 -1.203125q-0.546875 -0.484375 -1.609375 -0.484375q-0.984375 0 -1.46875 0.359375q-0.46875 0.34375 -0.6875 1.21875l-1.375 -0.1875q0.1875 -0.875 0.609375 -1.421875q0.4375 -0.546875 1.25 -0.828125q0.8125 -0.296875 1.875 -0.296875q1.0625 0 1.71875 0.25q0.671875 0.25 0.984375 0.625q0.3125 0.375 0.4375 0.953125q0.078125 0.359375 0.078125 1.296875l0 1.875q0 1.96875 0.078125 2.484375q0.09375 0.515625 0.359375 1.0l-1.46875 0q-0.21875 -0.4375 -0.28125 -1.03125zm-0.109375 -3.140625q-0.765625 0.3125 -2.296875 0.53125q-0.875 0.125 -1.234375 0.28125q-0.359375 0.15625 -0.5625 0.46875q-0.1875 0.296875 -0.1875 0.65625q0 0.5625 0.421875 0.9375q0.4375 0.375 1.25 0.375q0.8125 0 1.4375 -0.34375q0.640625 -0.359375 0.9375 -0.984375q0.234375 -0.46875 0.234375 -1.40625l0 -0.515625zm3.0390625 1.6875l1.390625 -0.21875q0.109375 0.84375 0.640625 1.296875q0.546875 0.4375 1.5 0.4375q0.96875 0 1.4375 -0.390625q0.46875 -0.40625 0.46875 -0.9375q0 -0.46875 -0.40625 -0.75q-0.296875 -0.1875 -1.4375 -0.46875q-1.546875 -0.390625 -2.15625 -0.671875q-0.59375 -0.296875 -0.90625 -0.796875q-0.296875 -0.5 -0.296875 -1.109375q0 -0.5625 0.25 -1.03125q0.25 -0.46875 0.6875 -0.78125q0.328125 -0.25 0.890625 -0.40625q0.578125 -0.171875 1.21875 -0.171875q0.984375 0 1.71875 0.28125q0.734375 0.28125 1.078125 0.765625q0.359375 0.46875 0.5 1.28125l-1.375 0.1875q-0.09375 -0.640625 -0.546875 -1.0q-0.453125 -0.359375 -1.265625 -0.359375q-0.96875 0 -1.390625 0.328125q-0.40625 0.3125 -0.40625 0.734375q0 0.28125 0.171875 0.5q0.171875 0.21875 0.53125 0.375q0.21875 0.078125 1.25 0.359375q1.484375 0.390625 2.078125 0.65625q0.59375 0.25 0.921875 0.734375q0.34375 0.484375 0.34375 1.203125q0 0.703125 -0.421875 1.328125q-0.40625 0.609375 -1.1875 0.953125q-0.765625 0.34375 -1.734375 0.34375q-1.625 0 -2.46875 -0.671875q-0.84375 -0.671875 -1.078125 -2.0zm8.0 0l1.390625 -0.21875q0.109375 0.84375 0.640625 1.296875q0.546875 0.4375 1.5 0.4375q0.96875 0 1.4375 -0.390625q0.46875 -0.40625 0.46875 -0.9375q0 -0.46875 -0.40625 -0.75q-0.296875 -0.1875 -1.4375 -0.46875q-1.546875 -0.390625 -2.15625 -0.671875q-0.59375 -0.296875 -0.90625 -0.796875q-0.296875 -0.5 -0.296875 -1.109375q0 -0.5625 0.25 -1.03125q0.25 -0.46875 0.6875 -0.78125q0.328125 -0.25 0.890625 -0.40625q0.578125 -0.171875 1.21875 -0.171875q0.984375 0 1.71875 0.28125q0.734375 0.28125 1.078125 0.765625q0.359375 0.46875 0.5 1.28125l-1.375 0.1875q-0.09375 -0.640625 -0.546875 -1.0q-0.453125 -0.359375 -1.265625 -0.359375q-0.96875 0 -1.390625 0.328125q-0.40625 0.3125 -0.40625 0.734375q0 0.28125 0.171875 0.5q0.171875 0.21875 0.53125 0.375q0.21875 0.078125 1.25 0.359375q1.484375 0.390625 2.078125 0.65625q0.59375 0.25 0.921875 0.734375q0.34375 0.484375 0.34375 1.203125q0 0.703125 -0.421875 1.328125q-0.40625 0.609375 -1.1875 0.953125q-0.765625 0.34375 -1.734375 0.34375q-1.625 0 -2.46875 -0.671875q-0.84375 -0.671875 -1.078125 -2.0z" fill-rule="nonzero"/><path fill="#000000" d="m154.55055 246.80348q0 -1.75 0.515625 -2.9375q0.390625 -0.875 1.0625 -1.5625q0.6875 -0.703125 1.484375 -1.046875q1.078125 -0.453125 2.46875 -0.453125q2.53125 0 4.046875 1.578125q1.53125 1.5625 1.53125 4.359375q0 2.78125 -1.515625 4.359375q-1.5 1.5625 -4.03125 1.5625q-2.546875 0 -4.0625 -1.5625q-1.5 -1.5625 -1.5 -4.296875zm2.375 -0.078125q0 1.9375 0.890625 2.953125q0.90625 1.0 2.296875 1.0q1.375 0 2.265625 -1.0q0.890625 -1.0 0.890625 -2.984375q0 -1.96875 -0.875 -2.9375q-0.859375 -0.96875 -2.28125 -0.96875q-1.4375 0 -2.3125 0.984375q-0.875 0.96875 -0.875 2.953125zm15.9765625 5.734375l0 -1.25q-0.453125 0.671875 -1.1875 1.0625q-0.734375 0.375 -1.5625 0.375q-0.828125 0 -1.5 -0.359375q-0.65625 -0.375 -0.953125 -1.03125q-0.296875 -0.671875 -0.296875 -1.84375l0 -5.25l2.1875 0l0 3.8125q0 1.75 0.125 2.140625q0.125 0.390625 0.4375 0.625q0.328125 0.234375 0.8125 0.234375q0.5625 0 1.0 -0.3125q0.453125 -0.3125 0.609375 -0.765625q0.171875 -0.453125 0.171875 -2.234375l0 -3.5l2.203125 0l0 8.296875l-2.046875 0zm8.1171875 -8.296875l0 1.75l-1.5 0l0 3.34375q0 1.015625 0.046875 1.1875q0.046875 0.15625 0.1875 0.265625q0.15625 0.109375 0.375 0.109375q0.3125 0 0.890625 -0.203125l0.1875 1.703125q-0.765625 0.328125 -1.734375 0.328125q-0.59375 0 -1.078125 -0.203125q-0.46875 -0.203125 -0.703125 -0.515625q-0.21875 -0.3125 -0.296875 -0.859375q-0.078125 -0.375 -0.078125 -1.546875l0 -3.609375l-1.0 0l0 -1.75l1.0 0l0 -1.65625l2.203125 -1.28125l0 2.9375l1.5 0zm1.53125 8.296875l0 -11.453125l2.1875 0l0 11.453125l-2.1875 0zm9.2421875 -2.640625l2.1875 0.359375q-0.421875 1.203125 -1.328125 1.84375q-0.90625 0.625 -2.28125 0.625q-2.15625 0 -3.203125 -1.421875q-0.8125 -1.125 -0.8125 -2.859375q0 -2.0625 1.078125 -3.21875q1.078125 -1.171875 2.71875 -1.171875q1.859375 0 2.921875 1.21875q1.078125 1.21875 1.03125 3.75l-5.5 0q0.015625 0.96875 0.515625 1.515625q0.515625 0.546875 1.28125 0.546875q0.515625 0 0.859375 -0.28125q0.359375 -0.28125 0.53125 -0.90625zm0.125 -2.21875q-0.015625 -0.953125 -0.484375 -1.453125q-0.46875 -0.5 -1.140625 -0.5q-0.71875 0 -1.1875 0.53125q-0.46875 0.515625 -0.46875 1.421875l3.28125 0zm7.7734375 -3.4375l0 1.75l-1.5 0l0 3.34375q0 1.015625 0.046875 1.1875q0.046875 0.15625 0.1875 0.265625q0.15625 0.109375 0.375 0.109375q0.3125 0 0.890625 -0.203125l0.1875 1.703125q-0.765625 0.328125 -1.734375 0.328125q-0.59375 0 -1.078125 -0.203125q-0.46875 -0.203125 -0.703125 -0.515625q-0.21875 -0.3125 -0.296875 -0.859375q-0.078125 -0.375 -0.078125 -1.546875l0 -3.609375l-1.0 0l0 -1.75l1.0 0l0 -1.65625l2.203125 -1.28125l0 2.9375l1.5 0zm1.53125 -3.15625l4.234375 0q1.421875 0 2.171875 0.21875q1.015625 0.296875 1.734375 1.0625q0.71875 0.75 1.09375 1.84375q0.375 1.09375 0.375 2.703125q0 1.421875 -0.359375 2.4375q-0.421875 1.25 -1.21875 2.03125q-0.609375 0.578125 -1.625 0.90625q-0.765625 0.25 -2.046875 0.25l-4.359375 0l0 -11.453125zm2.3125 1.9375l0 7.578125l1.734375 0q0.96875 0 1.390625 -0.109375q0.5625 -0.140625 0.9375 -0.46875q0.375 -0.34375 0.609375 -1.109375q0.234375 -0.765625 0.234375 -2.09375q0 -1.328125 -0.234375 -2.03125q-0.234375 -0.71875 -0.65625 -1.109375q-0.421875 -0.40625 -1.078125 -0.546875q-0.484375 -0.109375 -1.890625 -0.109375l-1.046875 0zm14.0390625 6.875l2.1875 0.359375q-0.421875 1.203125 -1.328125 1.84375q-0.90625 0.625 -2.28125 0.625q-2.15625 0 -3.203125 -1.421875q-0.8125 -1.125 -0.8125 -2.859375q0 -2.0625 1.078125 -3.21875q1.078125 -1.171875 2.71875 -1.171875q1.859375 0 2.921875 1.21875q1.078125 1.21875 1.03125 3.75l-5.5 0q0.015625 0.96875 0.515625 1.515625q0.515625 0.546875 1.28125 0.546875q0.515625 0 0.859375 -0.28125q0.359375 -0.28125 0.53125 -0.90625zm0.125 -2.21875q-0.015625 -0.953125 -0.484375 -1.453125q-0.46875 -0.5 -1.140625 -0.5q-0.71875 0 -1.1875 0.53125q-0.46875 0.515625 -0.46875 1.421875l3.28125 0zm6.2578125 4.859375l-3.34375 -8.296875l2.296875 0l1.5625 4.234375l0.453125 1.40625q0.1875 -0.53125 0.234375 -0.703125q0.109375 -0.359375 0.234375 -0.703125l1.578125 -4.234375l2.25 0l-3.296875 8.296875l-1.96875 0zm6.6171875 -9.421875l0 -2.03125l2.1875 0l0 2.03125l-2.1875 0zm0 9.421875l0 -8.296875l2.1875 0l0 8.296875l-2.1875 0zm11.6796875 -5.84375l-2.171875 0.390625q-0.109375 -0.65625 -0.5 -0.984375q-0.375 -0.328125 -1.0 -0.328125q-0.8125 0 -1.3125 0.578125q-0.484375 0.5625 -0.484375 1.890625q0 1.46875 0.5 2.078125q0.5 0.609375 1.328125 0.609375q0.625 0 1.015625 -0.34375q0.40625 -0.359375 0.578125 -1.234375l2.15625 0.375q-0.34375 1.484375 -1.296875 2.25q-0.953125 0.75 -2.546875 0.75q-1.828125 0 -2.90625 -1.140625q-1.078125 -1.15625 -1.078125 -3.1875q0 -2.0625 1.078125 -3.203125q1.09375 -1.140625 2.9375 -1.140625q1.515625 0 2.40625 0.65625q0.90625 0.640625 1.296875 1.984375zm6.4609375 3.203125l2.1875 0.359375q-0.421875 1.203125 -1.328125 1.84375q-0.90625 0.625 -2.28125 0.625q-2.15625 0 -3.203125 -1.421875q-0.8125 -1.125 -0.8125 -2.859375q0 -2.0625 1.078125 -3.21875q1.078125 -1.171875 2.71875 -1.171875q1.859375 0 2.921875 1.21875q1.078125 1.21875 1.03125 3.75l-5.5 0q0.015625 0.96875 0.515625 1.515625q0.515625 0.546875 1.28125 0.546875q0.515625 0 0.859375 -0.28125q0.359375 -0.28125 0.53125 -0.90625zm0.125 -2.21875q-0.015625 -0.953125 -0.484375 -1.453125q-0.46875 -0.5 -1.140625 -0.5q-0.71875 0 -1.1875 0.53125q-0.46875 0.515625 -0.46875 1.421875l3.28125 0z" fill-rule="nonzero"/></g><g filter="url(#shadowFilter-p.2)"><use xlink:href="#p.2" transform="matrix(1.0 0.0 0.0 1.0 0.0 2.0)"/></g><defs><filter id="shadowFilter-p.2" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" stdDeviation="2.0" result="blur"/><feComponentTransfer in="blur" color-interpolation-filters="sRGB"><feFuncR type="linear" slope="0" intercept="0.0"/><feFuncG type="linear" slope="0" intercept="0.0"/><feFuncB type="linear" slope="0" intercept="0.0"/><feFuncA type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><g id="p.2"><path fill="#ffffff" d="m322.38058 228.09973l329.19687 0l0 256.1575l-329.19687 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m322.38058 228.09973l329.19687 0l0 256.1575l-329.19687 0z" fill-rule="evenodd"/><path fill="#000000" d="m429.42822 249.41286l1.390625 0.1875q-0.234375 1.421875 -1.171875 2.234375q-0.921875 0.8125 -2.28125 0.8125q-1.703125 0 -2.75 -1.109375q-1.03125 -1.125 -1.03125 -3.203125q0 -1.34375 0.4375 -2.34375q0.453125 -1.015625 1.359375 -1.515625q0.921875 -0.5 1.984375 -0.5q1.359375 0 2.21875 0.6875q0.859375 0.671875 1.09375 1.9375l-1.359375 0.203125q-0.203125 -0.828125 -0.703125 -1.25q-0.484375 -0.421875 -1.1875 -0.421875q-1.0625 0 -1.734375 0.765625q-0.65625 0.75 -0.65625 2.40625q0 1.671875 0.640625 2.4375q0.640625 0.75 1.671875 0.75q0.828125 0 1.375 -0.5q0.5625 -0.515625 0.703125 -1.578125zm2.5625 3.046875l0 -11.453125l1.40625 0l0 11.453125l-1.40625 0zm8.9921875 -1.03125q-0.78125 0.671875 -1.5 0.953125q-0.71875 0.265625 -1.546875 0.265625q-1.375 0 -2.109375 -0.671875q-0.734375 -0.671875 -0.734375 -1.703125q0 -0.609375 0.28125 -1.109375q0.28125 -0.515625 0.71875 -0.8125q0.453125 -0.3125 1.015625 -0.46875q0.421875 -0.109375 1.25 -0.203125q1.703125 -0.203125 2.515625 -0.484375q0 -0.296875 0 -0.375q0 -0.859375 -0.390625 -1.203125q-0.546875 -0.484375 -1.609375 -0.484375q-0.984375 0 -1.46875 0.359375q-0.46875 0.34375 -0.6875 1.21875l-1.375 -0.1875q0.1875 -0.875 0.609375 -1.421875q0.4375 -0.546875 1.25 -0.828125q0.8125 -0.296875 1.875 -0.296875q1.0625 0 1.71875 0.25q0.671875 0.25 0.984375 0.625q0.3125 0.375 0.4375 0.953125q0.078125 0.359375 0.078125 1.296875l0 1.875q0 1.96875 0.078125 2.484375q0.09375 0.515625 0.359375 1.0l-1.46875 0q-0.21875 -0.4375 -0.28125 -1.03125zm-0.109375 -3.140625q-0.765625 0.3125 -2.296875 0.53125q-0.875 0.125 -1.234375 0.28125q-0.359375 0.15625 -0.5625 0.46875q-0.1875 0.296875 -0.1875 0.65625q0 0.5625 0.421875 0.9375q0.4375 0.375 1.25 0.375q0.8125 0 1.4375 -0.34375q0.640625 -0.359375 0.9375 -0.984375q0.234375 -0.46875 0.234375 -1.40625l0 -0.515625zm3.0390625 1.6875l1.390625 -0.21875q0.109375 0.84375 0.640625 1.296875q0.546875 0.4375 1.5 0.4375q0.96875 0 1.4375 -0.390625q0.46875 -0.40625 0.46875 -0.9375q0 -0.46875 -0.40625 -0.75q-0.296875 -0.1875 -1.4375 -0.46875q-1.546875 -0.390625 -2.15625 -0.671875q-0.59375 -0.296875 -0.90625 -0.796875q-0.296875 -0.5 -0.296875 -1.109375q0 -0.5625 0.25 -1.03125q0.25 -0.46875 0.6875 -0.78125q0.328125 -0.25 0.890625 -0.40625q0.578125 -0.171875 1.21875 -0.171875q0.984375 0 1.71875 0.28125q0.734375 0.28125 1.078125 0.765625q0.359375 0.46875 0.5 1.28125l-1.375 0.1875q-0.09375 -0.640625 -0.546875 -1.0q-0.453125 -0.359375 -1.265625 -0.359375q-0.96875 0 -1.390625 0.328125q-0.40625 0.3125 -0.40625 0.734375q0 0.28125 0.171875 0.5q0.171875 0.21875 0.53125 0.375q0.21875 0.078125 1.25 0.359375q1.484375 0.390625 2.078125 0.65625q0.59375 0.25 0.921875 0.734375q0.34375 0.484375 0.34375 1.203125q0 0.703125 -0.421875 1.328125q-0.40625 0.609375 -1.1875 0.953125q-0.765625 0.34375 -1.734375 0.34375q-1.625 0 -2.46875 -0.671875q-0.84375 -0.671875 -1.078125 -2.0zm8.0 0l1.390625 -0.21875q0.109375 0.84375 0.640625 1.296875q0.546875 0.4375 1.5 0.4375q0.96875 0 1.4375 -0.390625q0.46875 -0.40625 0.46875 -0.9375q0 -0.46875 -0.40625 -0.75q-0.296875 -0.1875 -1.4375 -0.46875q-1.546875 -0.390625 -2.15625 -0.671875q-0.59375 -0.296875 -0.90625 -0.796875q-0.296875 -0.5 -0.296875 -1.109375q0 -0.5625 0.25 -1.03125q0.25 -0.46875 0.6875 -0.78125q0.328125 -0.25 0.890625 -0.40625q0.578125 -0.171875 1.21875 -0.171875q0.984375 0 1.71875 0.28125q0.734375 0.28125 1.078125 0.765625q0.359375 0.46875 0.5 1.28125l-1.375 0.1875q-0.09375 -0.640625 -0.546875 -1.0q-0.453125 -0.359375 -1.265625 -0.359375q-0.96875 0 -1.390625 0.328125q-0.40625 0.3125 -0.40625 0.734375q0 0.28125 0.171875 0.5q0.171875 0.21875 0.53125 0.375q0.21875 0.078125 1.25 0.359375q1.484375 0.390625 2.078125 0.65625q0.59375 0.25 0.921875 0.734375q0.34375 0.484375 0.34375 1.203125q0 0.703125 -0.421875 1.328125q-0.40625 0.609375 -1.1875 0.953125q-0.765625 0.34375 -1.734375 0.34375q-1.625 0 -2.46875 -0.671875q-0.84375 -0.671875 -1.078125 -2.0z" fill-rule="nonzero"/><path fill="#000000" d="m465.0298 241.0066l4.578125 0q1.359375 0 2.03125 0.109375q0.671875 0.109375 1.1875 0.46875q0.53125 0.359375 0.875 0.96875q0.359375 0.59375 0.359375 1.328125q0 0.8125 -0.4375 1.484375q-0.421875 0.671875 -1.171875 1.0q1.046875 0.3125 1.609375 1.046875q0.5625 0.734375 0.5625 1.71875q0 0.78125 -0.359375 1.53125q-0.359375 0.734375 -1.0 1.171875q-0.625 0.4375 -1.546875 0.546875q-0.578125 0.0625 -2.78125 0.078125l-3.90625 0l0 -11.453125zm2.3125 1.90625l0 2.640625l1.515625 0q1.359375 0 1.6875 -0.03125q0.59375 -0.078125 0.921875 -0.40625q0.34375 -0.34375 0.34375 -0.90625q0 -0.53125 -0.296875 -0.859375q-0.28125 -0.328125 -0.859375 -0.40625q-0.34375 -0.03125 -1.984375 -0.03125l-1.328125 0zm0 4.546875l0 3.0625l2.140625 0q1.25 0 1.59375 -0.0625q0.515625 -0.09375 0.828125 -0.453125q0.328125 -0.375 0.328125 -0.984375q0 -0.515625 -0.25 -0.875q-0.25 -0.359375 -0.71875 -0.515625q-0.46875 -0.171875 -2.046875 -0.171875l-1.875 0zm14.6796875 5.0l0 -1.25q-0.453125 0.671875 -1.1875 1.0625q-0.734375 0.375 -1.5625 0.375q-0.828125 0 -1.5 -0.359375q-0.65625 -0.375 -0.953125 -1.03125q-0.296875 -0.671875 -0.296875 -1.84375l0 -5.25l2.1875 0l0 3.8125q0 1.75 0.125 2.140625q0.125 0.390625 0.4375 0.625q0.328125 0.234375 0.8125 0.234375q0.5625 0 1.0 -0.3125q0.453125 -0.3125 0.609375 -0.765625q0.171875 -0.453125 0.171875 -2.234375l0 -3.5l2.203125 0l0 8.296875l-2.046875 0zm4.3203125 0l0 -11.453125l2.1875 0l0 11.453125l-2.1875 0zm4.3515625 0l0 -11.453125l2.1875 0l0 4.125q1.015625 -1.15625 2.40625 -1.15625q1.515625 0 2.5 1.09375q1.0 1.09375 1.0 3.15625q0 2.125 -1.015625 3.28125q-1.0 1.140625 -2.453125 1.140625q-0.703125 0 -1.40625 -0.359375q-0.6875 -0.359375 -1.1875 -1.046875l0 1.21875l-2.03125 0zm2.171875 -4.328125q0 1.28125 0.40625 1.90625q0.578125 0.875 1.515625 0.875q0.734375 0 1.234375 -0.625q0.515625 -0.625 0.515625 -1.953125q0 -1.421875 -0.515625 -2.046875q-0.515625 -0.640625 -1.3125 -0.640625q-0.796875 0 -1.328125 0.625q-0.515625 0.609375 -0.515625 1.859375zm7.6953125 -7.125l4.234375 0q1.421875 0 2.171875 0.21875q1.015625 0.296875 1.734375 1.0625q0.71875 0.75 1.09375 1.84375q0.375 1.09375 0.375 2.703125q0 1.421875 -0.359375 2.4375q-0.421875 1.25 -1.21875 2.03125q-0.609375 0.578125 -1.625 0.90625q-0.765625 0.25 -2.046875 0.25l-4.359375 0l0 -11.453125zm2.3125 1.9375l0 7.578125l1.734375 0q0.96875 0 1.390625 -0.109375q0.5625 -0.140625 0.9375 -0.46875q0.375 -0.34375 0.609375 -1.109375q0.234375 -0.765625 0.234375 -2.09375q0 -1.328125 -0.234375 -2.03125q-0.234375 -0.71875 -0.65625 -1.109375q-0.421875 -0.40625 -1.078125 -0.546875q-0.484375 -0.109375 -1.890625 -0.109375l-1.046875 0zm14.0390625 6.875l2.1875 0.359375q-0.421875 1.203125 -1.328125 1.84375q-0.90625 0.625 -2.28125 0.625q-2.15625 0 -3.203125 -1.421875q-0.8125 -1.125 -0.8125 -2.859375q0 -2.0625 1.078125 -3.21875q1.078125 -1.171875 2.71875 -1.171875q1.859375 0 2.921875 1.21875q1.078125 1.21875 1.03125 3.75l-5.5 0q0.015625 0.96875 0.515625 1.515625q0.515625 0.546875 1.28125 0.546875q0.515625 0 0.859375 -0.28125q0.359375 -0.28125 0.53125 -0.90625zm0.125 -2.21875q-0.015625 -0.953125 -0.484375 -1.453125q-0.46875 -0.5 -1.140625 -0.5q-0.71875 0 -1.1875 0.53125q-0.46875 0.515625 -0.46875 1.421875l3.28125 0zm6.2578125 4.859375l-3.34375 -8.296875l2.296875 0l1.5625 4.234375l0.453125 1.40625q0.1875 -0.53125 0.234375 -0.703125q0.109375 -0.359375 0.234375 -0.703125l1.578125 -4.234375l2.25 0l-3.296875 8.296875l-1.96875 0zm6.6171875 -9.421875l0 -2.03125l2.1875 0l0 2.03125l-2.1875 0zm0 9.421875l0 -8.296875l2.1875 0l0 8.296875l-2.1875 0zm11.6796875 -5.84375l-2.171875 0.390625q-0.109375 -0.65625 -0.5 -0.984375q-0.375 -0.328125 -1.0 -0.328125q-0.8125 0 -1.3125 0.578125q-0.484375 0.5625 -0.484375 1.890625q0 1.46875 0.5 2.078125q0.5 0.609375 1.328125 0.609375q0.625 0 1.015625 -0.34375q0.40625 -0.359375 0.578125 -1.234375l2.15625 0.375q-0.34375 1.484375 -1.296875 2.25q-0.953125 0.75 -2.546875 0.75q-1.828125 0 -2.90625 -1.140625q-1.078125 -1.15625 -1.078125 -3.1875q0 -2.0625 1.078125 -3.203125q1.09375 -1.140625 2.9375 -1.140625q1.515625 0 2.40625 0.65625q0.90625 0.640625 1.296875 1.984375zm6.4609375 3.203125l2.1875 0.359375q-0.421875 1.203125 -1.328125 1.84375q-0.90625 0.625 -2.28125 0.625q-2.15625 0 -3.203125 -1.421875q-0.8125 -1.125 -0.8125 -2.859375q0 -2.0625 1.078125 -3.21875q1.078125 -1.171875 2.71875 -1.171875q1.859375 0 2.921875 1.21875q1.078125 1.21875 1.03125 3.75l-5.5 0q0.015625 0.96875 0.515625 1.515625q0.515625 0.546875 1.28125 0.546875q0.515625 0 0.859375 -0.28125q0.359375 -0.28125 0.53125 -0.90625zm0.125 -2.21875q-0.015625 -0.953125 -0.484375 -1.453125q-0.46875 -0.5 -1.140625 -0.5q-0.71875 0 -1.1875 0.53125q-0.46875 0.515625 -0.46875 1.421875l3.28125 0z" fill-rule="nonzero"/></g><g filter="url(#shadowFilter-p.3)"><use xlink:href="#p.3" transform="matrix(1.0 0.0 0.0 1.0 0.0 2.0)"/></g><defs><filter id="shadowFilter-p.3" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" stdDeviation="2.0" result="blur"/><feComponentTransfer in="blur" color-interpolation-filters="sRGB"><feFuncR type="linear" slope="0" intercept="0.0"/><feFuncG type="linear" slope="0" intercept="0.0"/><feFuncB type="linear" slope="0" intercept="0.0"/><feFuncA type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><g id="p.3"><path fill="#ffffff" d="m666.6142 228.09973l223.87396 0l0 256.1575l-223.87396 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m666.6142 228.09973l223.87396 0l0 256.1575l-223.87396 0z" fill-rule="evenodd"/><path fill="#000000" d="m716.098 249.41286l1.390625 0.1875q-0.234375 1.421875 -1.171875 2.234375q-0.921875 0.8125 -2.28125 0.8125q-1.703125 0 -2.75 -1.109375q-1.03125 -1.125 -1.03125 -3.203125q0 -1.34375 0.4375 -2.34375q0.453125 -1.015625 1.359375 -1.515625q0.921875 -0.5 1.984375 -0.5q1.359375 0 2.21875 0.6875q0.859375 0.671875 1.09375 1.9375l-1.359375 0.203125q-0.203125 -0.828125 -0.703125 -1.25q-0.484375 -0.421875 -1.1875 -0.421875q-1.0625 0 -1.734375 0.765625q-0.65625 0.75 -0.65625 2.40625q0 1.671875 0.640625 2.4375q0.640625 0.75 1.671875 0.75q0.828125 0 1.375 -0.5q0.5625 -0.515625 0.703125 -1.578125zm2.5625 3.046875l0 -11.453125l1.40625 0l0 11.453125l-1.40625 0zm8.9921875 -1.03125q-0.78125 0.671875 -1.5 0.953125q-0.71875 0.265625 -1.546875 0.265625q-1.375 0 -2.109375 -0.671875q-0.734375 -0.671875 -0.734375 -1.703125q0 -0.609375 0.28125 -1.109375q0.28125 -0.515625 0.71875 -0.8125q0.453125 -0.3125 1.015625 -0.46875q0.421875 -0.109375 1.25 -0.203125q1.703125 -0.203125 2.515625 -0.484375q0 -0.296875 0 -0.375q0 -0.859375 -0.390625 -1.203125q-0.546875 -0.484375 -1.609375 -0.484375q-0.984375 0 -1.46875 0.359375q-0.46875 0.34375 -0.6875 1.21875l-1.375 -0.1875q0.1875 -0.875 0.609375 -1.421875q0.4375 -0.546875 1.25 -0.828125q0.8125 -0.296875 1.875 -0.296875q1.0625 0 1.71875 0.25q0.671875 0.25 0.984375 0.625q0.3125 0.375 0.4375 0.953125q0.078125 0.359375 0.078125 1.296875l0 1.875q0 1.96875 0.078125 2.484375q0.09375 0.515625 0.359375 1.0l-1.46875 0q-0.21875 -0.4375 -0.28125 -1.03125zm-0.109375 -3.140625q-0.765625 0.3125 -2.296875 0.53125q-0.875 0.125 -1.234375 0.28125q-0.359375 0.15625 -0.5625 0.46875q-0.1875 0.296875 -0.1875 0.65625q0 0.5625 0.421875 0.9375q0.4375 0.375 1.25 0.375q0.8125 0 1.4375 -0.34375q0.640625 -0.359375 0.9375 -0.984375q0.234375 -0.46875 0.234375 -1.40625l0 -0.515625zm3.0390625 1.6875l1.390625 -0.21875q0.109375 0.84375 0.640625 1.296875q0.546875 0.4375 1.5 0.4375q0.96875 0 1.4375 -0.390625q0.46875 -0.40625 0.46875 -0.9375q0 -0.46875 -0.40625 -0.75q-0.296875 -0.1875 -1.4375 -0.46875q-1.546875 -0.390625 -2.15625 -0.671875q-0.59375 -0.296875 -0.90625 -0.796875q-0.296875 -0.5 -0.296875 -1.109375q0 -0.5625 0.25 -1.03125q0.25 -0.46875 0.6875 -0.78125q0.328125 -0.25 0.890625 -0.40625q0.578125 -0.171875 1.21875 -0.171875q0.984375 0 1.71875 0.28125q0.734375 0.28125 1.078125 0.765625q0.359375 0.46875 0.5 1.28125l-1.375 0.1875q-0.09375 -0.640625 -0.546875 -1.0q-0.453125 -0.359375 -1.265625 -0.359375q-0.96875 0 -1.390625 0.328125q-0.40625 0.3125 -0.40625 0.734375q0 0.28125 0.171875 0.5q0.171875 0.21875 0.53125 0.375q0.21875 0.078125 1.25 0.359375q1.484375 0.390625 2.078125 0.65625q0.59375 0.25 0.921875 0.734375q0.34375 0.484375 0.34375 1.203125q0 0.703125 -0.421875 1.328125q-0.40625 0.609375 -1.1875 0.953125q-0.765625 0.34375 -1.734375 0.34375q-1.625 0 -2.46875 -0.671875q-0.84375 -0.671875 -1.078125 -2.0zm8.0 0l1.390625 -0.21875q0.109375 0.84375 0.640625 1.296875q0.546875 0.4375 1.5 0.4375q0.96875 0 1.4375 -0.390625q0.46875 -0.40625 0.46875 -0.9375q0 -0.46875 -0.40625 -0.75q-0.296875 -0.1875 -1.4375 -0.46875q-1.546875 -0.390625 -2.15625 -0.671875q-0.59375 -0.296875 -0.90625 -0.796875q-0.296875 -0.5 -0.296875 -1.109375q0 -0.5625 0.25 -1.03125q0.25 -0.46875 0.6875 -0.78125q0.328125 -0.25 0.890625 -0.40625q0.578125 -0.171875 1.21875 -0.171875q0.984375 0 1.71875 0.28125q0.734375 0.28125 1.078125 0.765625q0.359375 0.46875 0.5 1.28125l-1.375 0.1875q-0.09375 -0.640625 -0.546875 -1.0q-0.453125 -0.359375 -1.265625 -0.359375q-0.96875 0 -1.390625 0.328125q-0.40625 0.3125 -0.40625 0.734375q0 0.28125 0.171875 0.5q0.171875 0.21875 0.53125 0.375q0.21875 0.078125 1.25 0.359375q1.484375 0.390625 2.078125 0.65625q0.59375 0.25 0.921875 0.734375q0.34375 0.484375 0.34375 1.203125q0 0.703125 -0.421875 1.328125q-0.40625 0.609375 -1.1875 0.953125q-0.765625 0.34375 -1.734375 0.34375q-1.625 0 -2.46875 -0.671875q-0.84375 -0.671875 -1.078125 -2.0z" fill-rule="nonzero"/><path fill="#000000" d="m759.0277 248.24098l2.234375 0.71875q-0.515625 1.875 -1.71875 2.796875q-1.1875 0.90625 -3.03125 0.90625q-2.28125 0 -3.75 -1.5625q-1.46875 -1.5625 -1.46875 -4.265625q0 -2.859375 1.46875 -4.4375q1.484375 -1.59375 3.890625 -1.59375q2.09375 0 3.40625 1.25q0.78125 0.734375 1.171875 2.109375l-2.28125 0.546875q-0.203125 -0.890625 -0.859375 -1.40625q-0.640625 -0.515625 -1.5625 -0.515625q-1.265625 0 -2.0625 0.921875q-0.796875 0.90625 -0.796875 2.953125q0 2.171875 0.78125 3.09375q0.78125 0.921875 2.03125 0.921875q0.921875 0 1.578125 -0.578125q0.671875 -0.59375 0.96875 -1.859375zm3.6953125 -0.046875q0 -1.09375 0.53125 -2.109375q0.546875 -1.03125 1.53125 -1.5625q1.0 -0.546875 2.21875 -0.546875q1.875 0 3.078125 1.21875q1.203125 1.21875 1.203125 3.09375q0 1.875 -1.21875 3.125q-1.203125 1.234375 -3.046875 1.234375q-1.140625 0 -2.1875 -0.515625q-1.03125 -0.515625 -1.578125 -1.515625q-0.53125 -1.0 -0.53125 -2.421875zm2.25 0.109375q0 1.234375 0.578125 1.890625q0.59375 0.65625 1.453125 0.65625q0.859375 0 1.4375 -0.65625q0.59375 -0.65625 0.59375 -1.90625q0 -1.21875 -0.59375 -1.875q-0.578125 -0.65625 -1.4375 -0.65625q-0.859375 0 -1.453125 0.65625q-0.578125 0.65625 -0.578125 1.890625zm10.3203125 4.15625l-3.34375 -8.296875l2.296875 0l1.5625 4.234375l0.453125 1.40625q0.1875 -0.53125 0.234375 -0.703125q0.109375 -0.359375 0.234375 -0.703125l1.578125 -4.234375l2.25 0l-3.296875 8.296875l-1.96875 0zm11.4140625 -2.640625l2.1875 0.359375q-0.421875 1.203125 -1.328125 1.84375q-0.90625 0.625 -2.28125 0.625q-2.15625 0 -3.203125 -1.421875q-0.8125 -1.125 -0.8125 -2.859375q0 -2.0625 1.078125 -3.21875q1.078125 -1.171875 2.71875 -1.171875q1.859375 0 2.921875 1.21875q1.078125 1.21875 1.03125 3.75l-5.5 0q0.015625 0.96875 0.515625 1.515625q0.515625 0.546875 1.28125 0.546875q0.515625 0 0.859375 -0.28125q0.359375 -0.28125 0.53125 -0.90625zm0.125 -2.21875q-0.015625 -0.953125 -0.484375 -1.453125q-0.46875 -0.5 -1.140625 -0.5q-0.71875 0 -1.1875 0.53125q-0.46875 0.515625 -0.46875 1.421875l3.28125 0zm6.0703125 4.859375l-2.1875 0l0 -8.296875l2.03125 0l0 1.171875q0.53125 -0.828125 0.9375 -1.09375q0.421875 -0.265625 0.95318604 -0.265625q0.75 0 1.453125 0.40625l-0.6875 1.921875q-0.546875 -0.359375 -1.031311 -0.359375q-0.453125 0 -0.78125 0.25q-0.3125 0.25 -0.5 0.921875q-0.1875 0.65625 -0.1875 2.78125l0 2.5625zm4.1328735 -11.453125l4.234375 0q1.421875 0 2.171875 0.21875q1.015625 0.296875 1.734375 1.0625q0.71875 0.75 1.09375 1.84375q0.375 1.09375 0.375 2.703125q0 1.421875 -0.359375 2.4375q-0.421875 1.25 -1.21875 2.03125q-0.609375 0.578125 -1.625 0.90625q-0.765625 0.25 -2.046875 0.25l-4.359375 0l0 -11.453125zm2.3125 1.9375l0 7.578125l1.734375 0q0.96875 0 1.390625 -0.109375q0.5625 -0.140625 0.9375 -0.46875q0.375 -0.34375 0.609375 -1.109375q0.234375 -0.765625 0.234375 -2.09375q0 -1.328125 -0.234375 -2.03125q-0.234375 -0.71875 -0.65625 -1.109375q-0.421875 -0.40625 -1.078125 -0.546875q-0.484375 -0.109375 -1.890625 -0.109375l-1.046875 0zm14.0390625 6.875l2.1875 0.359375q-0.421875 1.203125 -1.328125 1.84375q-0.90625 0.625 -2.28125 0.625q-2.15625 0 -3.203125 -1.421875q-0.8125 -1.125 -0.8125 -2.859375q0 -2.0625 1.078125 -3.21875q1.078125 -1.171875 2.71875 -1.171875q1.859375 0 2.921875 1.21875q1.078125 1.21875 1.03125 3.75l-5.5 0q0.015625 0.96875 0.515625 1.515625q0.515625 0.546875 1.28125 0.546875q0.515625 0 0.859375 -0.28125q0.359375 -0.28125 0.53125 -0.90625zm0.125 -2.21875q-0.015625 -0.953125 -0.484375 -1.453125q-0.46875 -0.5 -1.140625 -0.5q-0.71875 0 -1.1875 0.53125q-0.46875 0.515625 -0.46875 1.421875l3.28125 0zm6.2578125 4.859375l-3.34375 -8.296875l2.296875 0l1.5625 4.234375l0.453125 1.40625q0.1875 -0.53125 0.234375 -0.703125q0.109375 -0.359375 0.234375 -0.703125l1.578125 -4.234375l2.25 0l-3.296875 8.296875l-1.96875 0zm6.6171875 -9.421875l0 -2.03125l2.1875 0l0 2.03125l-2.1875 0zm0 9.421875l0 -8.296875l2.1875 0l0 8.296875l-2.1875 0zm11.6796875 -5.84375l-2.171875 0.390625q-0.109375 -0.65625 -0.5 -0.984375q-0.375 -0.328125 -1.0 -0.328125q-0.8125 0 -1.3125 0.578125q-0.484375 0.5625 -0.484375 1.890625q0 1.46875 0.5 2.078125q0.5 0.609375 1.328125 0.609375q0.625 0 1.015625 -0.34375q0.40625 -0.359375 0.578125 -1.234375l2.15625 0.375q-0.34375 1.484375 -1.296875 2.25q-0.953125 0.75 -2.546875 0.75q-1.828125 0 -2.90625 -1.140625q-1.078125 -1.15625 -1.078125 -3.1875q0 -2.0625 1.078125 -3.203125q1.09375 -1.140625 2.9375 -1.140625q1.515625 0 2.40625 0.65625q0.90625 0.640625 1.296875 1.984375zm6.4609375 3.203125l2.1875 0.359375q-0.421875 1.203125 -1.328125 1.84375q-0.90625 0.625 -2.28125 0.625q-2.15625 0 -3.203125 -1.421875q-0.8125 -1.125 -0.8125 -2.859375q0 -2.0625 1.078125 -3.21875q1.078125 -1.171875 2.71875 -1.171875q1.859375 0 2.921875 1.21875q1.078125 1.21875 1.03125 3.75l-5.5 0q0.015625 0.96875 0.515625 1.515625q0.515625 0.546875 1.28125 0.546875q0.515625 0 0.859375 -0.28125q0.359375 -0.28125 0.53125 -0.90625zm0.125 -2.21875q-0.015625 -0.953125 -0.484375 -1.453125q-0.46875 -0.5 -1.140625 -0.5q-0.71875 0 -1.1875 0.53125q-0.46875 0.515625 -0.46875 1.421875l3.28125 0z" fill-rule="nonzero"/></g><path fill="#d9d9d9" d="m90.86352 280.9708l51.874016 0l0 53.070892l-51.874016 0zm6.484253 6.484253l0 40.102386l38.90551 0l0 -40.102386z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m90.86352 280.9708l51.874016 0l0 53.070892l-51.874016 0zm6.484253 6.484253l0 40.102386l38.90551 0l0 -40.102386z" fill-rule="evenodd"/><path fill="#efefef" d="m106.07873 295.2325l4.503937 0l0 13.51181l-4.503937 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m106.07873 295.2325l4.503937 0l0 13.51181l-4.503937 0z" fill-rule="evenodd"/><path fill="#efefef" d="m123.041405 295.2325l4.503937 0l0 13.51181l-4.503937 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m123.041405 295.2325l4.503937 0l0 13.51181l-4.503937 0z" fill-rule="evenodd"/><path fill="#efefef" d="m113.61398 318.95352l0 0c0 -1.8699341 1.431282 -3.3858337 3.1968536 -3.3858337l0 0c0.8478546 0 1.6609879 0.35671997 2.2605133 0.9916992c0.59952545 0.63494873 0.9363327 1.4961548 0.9363327 2.3941345l0 0c0 1.8699341 -1.4312744 3.3858337 -3.196846 3.3858337l0 0c-1.7655716 0 -3.1968536 -1.5158997 -3.1968536 -3.3858337z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m113.61398 318.95352l0 0c0 -1.8699341 1.431282 -3.3858337 3.1968536 -3.3858337l0 0c0.8478546 0 1.6609879 0.35671997 2.2605133 0.9916992c0.59952545 0.63494873 0.9363327 1.4961548 0.9363327 2.3941345l0 0c0 1.8699341 -1.4312744 3.3858337 -3.196846 3.3858337l0 0c-1.7655716 0 -3.1968536 -1.5158997 -3.1968536 -3.3858337z" fill-rule="evenodd"/><path fill="#ffffff" d="m334.99738 315.0656l0 0c0 -23.752594 19.494995 -43.007874 43.543304 -43.007874l0 0c11.548401 0 22.62381 4.531189 30.789764 12.59671c8.165955 8.065552 12.75354 19.00476 12.75354 30.411163l0 0c0 23.752594 -19.494995 43.007874 -43.543304 43.007874l0 0c-24.04831 0 -43.543304 -19.25528 -43.543304 -43.007874z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m334.99738 315.0656l0 0c0 -23.752594 19.494995 -43.007874 43.543304 -43.007874l0 0c11.548401 0 22.62381 4.531189 30.789764 12.59671c8.165955 8.065552 12.75354 19.00476 12.75354 30.411163l0 0c0 23.752594 -19.494995 43.007874 -43.543304 43.007874l0 0c-24.04831 0 -43.543304 -19.25528 -43.543304 -43.007874z" fill-rule="evenodd"/><path fill="#efefef" d="m359.64304 407.58005l37.795258 0l-7.5590515 9.574799l-22.677155 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m359.64304 407.58005l37.795258 0l-7.5590515 9.574799l-22.677155 0z" fill-rule="evenodd"/><path fill="#ffffff" d="m342.47375 315.0656l0 0c0 -20.27362 16.435028 -36.70865 36.70865 -36.70865l0 0c9.735748 0 19.072754 3.8674927 25.95694 10.751709c6.8842163 6.8842163 10.7517395 16.221191 10.7517395 25.95694l0 0c0 20.273651 -16.435028 36.70868 -36.70868 36.70868l0 0c-20.27362 0 -36.70865 -16.435028 -36.70865 -36.70868z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" stroke-dasharray="1.0,3.0" d="m342.47375 315.0656l0 0c0 -20.27362 16.435028 -36.70865 36.70865 -36.70865l0 0c9.735748 0 19.072754 3.8674927 25.95694 10.751709c6.8842163 6.8842163 10.7517395 16.221191 10.7517395 25.95694l0 0c0 20.273651 -16.435028 36.70868 -36.70868 36.70868l0 0c-20.27362 0 -36.70865 -16.435028 -36.70865 -36.70868z" fill-rule="evenodd"/><path fill="#d9d9d9" d="m345.1286 343.51712l68.107605 0l-13.621521 42.097107l-40.864563 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m345.1286 343.51712l68.107605 0l-13.621521 42.097107l-40.864563 0z" fill-rule="evenodd"/><path fill="#ffffff" d="m531.53546 315.0656l0 0c0 23.752594 -19.495056 43.007874 -43.543335 43.007874l0 0c-11.548401 0 -22.62381 -4.5311584 -30.789764 -12.59671c-8.165955 -8.065552 -12.75354 -19.00476 -12.75354 -30.411163l0 0c0 -23.752594 19.494995 -43.007874 43.543304 -43.007874l0 0c24.048279 0 43.543335 19.25528 43.543335 43.007874z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m531.53546 315.0656l0 0c0 23.752594 -19.495056 43.007874 -43.543335 43.007874l0 0c-11.548401 0 -22.62381 -4.5311584 -30.789764 -12.59671c-8.165955 -8.065552 -12.75354 -19.00476 -12.75354 -30.411163l0 0c0 -23.752594 19.494995 -43.007874 43.543304 -43.007874l0 0c24.048279 0 43.543335 19.25528 43.543335 43.007874z" fill-rule="evenodd"/><path fill="#ff00ff" d="m524.0591 315.0656l0 0c0 20.273651 -16.435059 36.70868 -36.70868 36.70868l0 0c-9.735748 0 -19.072754 -3.8675232 -25.95694 -10.7517395c-6.8842163 -6.8842163 -10.7517395 -16.221191 -10.7517395 -25.95694l0 0c0 -20.27362 16.435028 -36.70865 36.70868 -36.70865l0 0c20.27362 0 36.70868 16.435028 36.70868 36.70865z" fill-rule="evenodd"/><path fill="#9900ff" d="m450.64734 314.3534l0 0c0.39154053 -20.177185 16.997284 -36.254395 37.176575 -35.993378c20.17929 0.26104736 36.363586 16.762451 36.233032 36.943024c-0.13049316 20.180542 -16.526886 36.471252 -36.707855 36.471252z" fill-rule="evenodd"/><path fill="#0000ff" d="m457.59253 293.56973c10.156769 -14.059937 28.768402 -19.092194 44.626434 -12.066193c15.858002 7.026001 24.634308 24.192627 21.043488 41.16165c-3.5907593 16.969025 -18.568573 29.1091 -35.91336 29.1091z" fill-rule="evenodd"/><path fill="#00ffff" d="m470.46515 282.47025c13.521423 -7.0039062 29.963074 -4.932556 41.32486 5.2061768c11.361725 10.138763 15.28421 26.239471 9.858856 40.467896c-5.425415 14.228455 -19.072052 23.629974 -34.299774 23.629974z" fill-rule="evenodd"/><path fill="#00ff00" d="m486.80615 278.36096l0 0c13.1779785 -0.19491577 25.449097 6.689575 32.151062 18.03775c6.7019043 11.348175 6.805969 25.418213 0.272583 36.86429c-6.533325 11.446045 -18.701294 18.511292 -31.880707 18.511292z" fill-rule="evenodd"/><path fill="#ffff00" d="m503.1397 281.9268l0 0c15.486633 7.379364 23.797241 24.500732 20.014465 41.2334c-3.7827759 16.732635 -18.650177 28.614105 -35.805084 28.614105z" fill-rule="evenodd"/><path fill="#ff9900" d="m518.0779 294.4753c7.621277 11.248596 8.405884 25.786896 2.0394897 37.790344c-6.366394 12.003479 -18.842407 19.508636 -32.429718 19.508636z" fill-rule="evenodd"/><path fill="#ff0000" d="m524.3935 314.61087l0 0c0.12158203 9.813812 -3.6917725 19.267609 -10.588623 26.250397c-6.8967896 6.9828186 -16.302643 10.913025 -26.117218 10.913025z" fill-rule="evenodd"/><path fill="#d9d9d9" d="m177.82677 271.34122l102.23622 0l0 158.64566l-102.23622 0zm9.299408 9.299408l0 140.04684l83.637405 0l0 -140.04684z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m177.82677 271.34122l102.23622 0l0 158.64566l-102.23622 0zm9.299408 9.299408l0 140.04684l83.637405 0l0 -140.04684z" fill-rule="evenodd"/><path fill="#efefef" d="m220.70866 331.78217l16.472443 0l0 37.763763l-16.472443 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m220.70866 331.78217l16.472443 0l0 37.763763l-16.472443 0z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m224.4252 399.99475l0 0c0 -2.6440125 2.023529 -4.7874146 4.519684 -4.7874146l0 0c1.1986847 0 2.348297 0.50439453 3.1958923 1.4022217c0.8476105 0.89779663 1.3237915 2.115509 1.3237915 3.3851929l0 0c0 2.6440125 -2.023529 4.7874146 -4.519684 4.7874146l0 0c-2.4961548 0 -4.519684 -2.143402 -4.519684 -4.7874146z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m224.4252 399.99475l0 0c0 -2.6440125 2.023529 -4.7874146 4.519684 -4.7874146l0 0c1.1986847 0 2.348297 0.50439453 3.1958923 1.4022217c0.8476105 0.89779663 1.3237915 2.115509 1.3237915 3.3851929l0 0c0 2.6440125 -2.023529 4.7874146 -4.519684 4.7874146l0 0c-2.4961548 0 -4.519684 -2.143402 -4.519684 -4.7874146z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m224.4252 304.4908l0 0c0 -2.6440125 2.023529 -4.7874146 4.519684 -4.7874146l0 0c1.1986847 0 2.348297 0.50439453 3.1958923 1.4022217c0.8476105 0.89779663 1.3237915 2.115509 1.3237915 3.3851929l0 0c0 2.6440125 -2.023529 4.7874146 -4.519684 4.7874146l0 0c-2.4961548 0 -4.519684 -2.143402 -4.519684 -4.7874146z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m224.4252 304.4908l0 0c0 -2.6440125 2.023529 -4.7874146 4.519684 -4.7874146l0 0c1.1986847 0 2.348297 0.50439453 3.1958923 1.4022217c0.8476105 0.89779663 1.3237915 2.115509 1.3237915 3.3851929l0 0c0 2.6440125 -2.023529 4.7874146 -4.519684 4.7874146l0 0c-2.4961548 0 -4.519684 -2.143402 -4.519684 -4.7874146z" fill-rule="evenodd"/><path fill="#d9d9d9" d="m554.73914 411.04852l0 0c1.4625244 0.6067505 8.387146 -12.734894 15.466614 -29.799377c7.079468 -17.064484 11.632935 -31.389832 10.17041 -31.996552l0 0c-1.4625244 -0.6067505 3.0909424 -14.932098 10.17041 -31.996582c7.079468 -17.064484 14.004089 -30.406128 15.466614 -29.799377l21.184692 8.788788c-1.4625244 -0.60672 -8.387146 12.734894 -15.466614 29.799377c-7.079468 17.064484 -11.632935 31.389832 -10.17041 31.996582c1.4625244 0.6067505 -3.0909424 14.932098 -10.17041 31.996582c-7.079468 17.064484 -14.004089 30.406097 -15.466614 29.799377z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m554.73914 411.04852l0 0c1.4625244 0.6067505 8.387146 -12.734894 15.466614 -29.799377c7.079468 -17.064484 11.632935 -31.389832 10.17041 -31.996552l0 0c-1.4625244 -0.6067505 3.0909424 -14.932098 10.17041 -31.996582c7.079468 -17.064484 14.004089 -30.406128 15.466614 -29.799377l21.184692 8.788788c-1.4625244 -0.60672 -8.387146 12.734894 -15.466614 29.799377c-7.079468 17.064484 -11.632935 31.389832 -10.17041 31.996582c1.4625244 0.6067505 -3.0909424 14.932098 -10.17041 31.996582c-7.079468 17.064484 -14.004089 30.406097 -15.466614 29.799377z" fill-rule="evenodd"/><path fill="#ff0000" d="m572.12555 407.54254l0 0c-2.4439697 -1.0088806 -3.6495972 -3.6951904 -2.6929321 -6.0l0 0c0.45947266 -1.106781 1.366272 -1.9757996 2.5210571 -2.415863c1.1547241 -0.44003296 2.4628296 -0.41506958 3.6364746 0.06942749l0 0c2.4439697 1.0088806 3.6495972 3.6951904 2.692871 6.0l0 0c-0.9567261 2.3048096 -3.713501 3.3553467 -6.1574707 2.3464355z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m572.12555 407.54254l0 0c-2.4439697 -1.0088806 -3.6495972 -3.6951904 -2.6929321 -6.0l0 0c0.45947266 -1.106781 1.366272 -1.9757996 2.5210571 -2.415863c1.1547241 -0.44003296 2.4628296 -0.41506958 3.6364746 0.06942749l0 0c2.4439697 1.0088806 3.6495972 3.6951904 2.692871 6.0l0 0c-0.9567261 2.3048096 -3.713501 3.3553467 -6.1574707 2.3464355z" fill-rule="evenodd"/><path fill="#ff9900" d="m581.8132 387.62982l0 0c-2.4439697 -1.0089111 -3.6496582 -3.6951904 -2.6929321 -6.0l0 0c0.45941162 -1.1068115 1.366272 -1.9758301 2.520996 -2.415863c1.1547852 -0.44006348 2.4628296 -0.4151001 3.6364746 0.06939697l0 0c2.4439697 1.0089111 3.6495972 3.6951904 2.6929321 6.0l0 0c-0.9567261 2.3048096 -3.713562 3.3553467 -6.1574707 2.346466z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m581.8132 387.62982l0 0c-2.4439697 -1.0089111 -3.6496582 -3.6951904 -2.6929321 -6.0l0 0c0.45941162 -1.1068115 1.366272 -1.9758301 2.520996 -2.415863c1.1547852 -0.44006348 2.4628296 -0.4151001 3.6364746 0.06939697l0 0c2.4439697 1.0089111 3.6495972 3.6951904 2.6929321 6.0l0 0c-0.9567261 2.3048096 -3.713562 3.3553467 -6.1574707 2.346466z" fill-rule="evenodd"/><path fill="#ffff00" d="m587.26086 367.96426l0 0c-2.4439697 -1.0089111 -3.6496582 -3.6951904 -2.6929321 -6.0l0 0c0.45941162 -1.1068115 1.366272 -1.9758301 2.520996 -2.4158936c1.1547852 -0.44003296 2.4628296 -0.41506958 3.6364746 0.06942749l0 0c2.4439697 1.0088806 3.6496582 3.6951904 2.6929321 6.0l0 0c-0.9567261 2.3048096 -3.713501 3.3553467 -6.1574707 2.346466z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m587.26086 367.96426l0 0c-2.4439697 -1.0089111 -3.6496582 -3.6951904 -2.6929321 -6.0l0 0c0.45941162 -1.1068115 1.366272 -1.9758301 2.520996 -2.4158936c1.1547852 -0.44003296 2.4628296 -0.41506958 3.6364746 0.06942749l0 0c2.4439697 1.0088806 3.6496582 3.6951904 2.6929321 6.0l0 0c-0.9567261 2.3048096 -3.713501 3.3553467 -6.1574707 2.346466z" fill-rule="evenodd"/><path fill="#00ff00" d="m591.143 349.09274l0 0c-2.4439697 -1.0089111 -3.6495972 -3.6951904 -2.692871 -6.0l0 0c0.45941162 -1.1068115 1.366272 -1.9758301 2.520996 -2.4158936c1.1547852 -0.44003296 2.4628296 -0.41506958 3.6364746 0.06942749l0 0c2.4439697 1.0088806 3.6495972 3.6951904 2.6929321 6.0l0 0c-0.9567261 2.3048096 -3.713562 3.3553467 -6.1575317 2.346466z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m591.143 349.09274l0 0c-2.4439697 -1.0089111 -3.6495972 -3.6951904 -2.692871 -6.0l0 0c0.45941162 -1.1068115 1.366272 -1.9758301 2.520996 -2.4158936c1.1547852 -0.44003296 2.4628296 -0.41506958 3.6364746 0.06942749l0 0c2.4439697 1.0088806 3.6495972 3.6951904 2.6929321 6.0l0 0c-0.9567261 2.3048096 -3.713562 3.3553467 -6.1575317 2.346466z" fill-rule="evenodd"/><path fill="#00ffff" d="m596.9865 331.03488l0 0c-2.4439697 -1.0089111 -3.6496582 -3.6951904 -2.6929321 -6.0l0 0c0.45941162 -1.1068115 1.366272 -1.9758301 2.5210571 -2.415863c1.1547241 -0.44006348 2.4627686 -0.4151001 3.6364136 0.06939697l0 0c2.4439697 1.0089111 3.6496582 3.6951904 2.6929321 6.0l0 0c-0.9567261 2.3048096 -3.713501 3.3553467 -6.1574707 2.346466z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m596.9865 331.03488l0 0c-2.4439697 -1.0089111 -3.6496582 -3.6951904 -2.6929321 -6.0l0 0c0.45941162 -1.1068115 1.366272 -1.9758301 2.5210571 -2.415863c1.1547241 -0.44006348 2.4627686 -0.4151001 3.6364136 0.06939697l0 0c2.4439697 1.0089111 3.6496582 3.6951904 2.6929321 6.0l0 0c-0.9567261 2.3048096 -3.713501 3.3553467 -6.1574707 2.346466z" fill-rule="evenodd"/><path fill="#0000ff" d="m604.2361 313.56036l0 0c-2.4439697 -1.0088806 -3.6496582 -3.6951904 -2.6929321 -6.0l0 0c0.45941162 -1.1068115 1.366272 -1.9758301 2.5210571 -2.415863c1.1547241 -0.44003296 2.4627686 -0.41506958 3.6364136 0.06939697l0 0c2.4439697 1.0089111 3.6496582 3.6951904 2.6929321 6.0l0 0c-0.9567261 2.3048096 -3.713501 3.3553772 -6.1574707 2.346466z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m604.2361 313.56036l0 0c-2.4439697 -1.0088806 -3.6496582 -3.6951904 -2.6929321 -6.0l0 0c0.45941162 -1.1068115 1.366272 -1.9758301 2.5210571 -2.415863c1.1547241 -0.44003296 2.4627686 -0.41506958 3.6364136 0.06939697l0 0c2.4439697 1.0089111 3.6496582 3.6951904 2.6929321 6.0l0 0c-0.9567261 2.3048096 -3.713501 3.3553772 -6.1574707 2.346466z" fill-rule="evenodd"/><path fill="#d9d9d9" d="m681.1155 267.4882l102.236206 0l0 158.64566l-102.236206 0zm9.299438 9.299408l0 140.04684l83.63739 0l0 -140.04684z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m681.1155 267.4882l102.236206 0l0 158.64566l-102.236206 0zm9.299438 9.299408l0 140.04684l83.63739 0l0 -140.04684z" fill-rule="evenodd"/><path fill="#d9d9d9" d="m773.2231 267.4882l102.236206 0l0 158.64566l-102.236206 0zm9.299438 9.299408l0 140.04684l83.63739 0l0 -140.04684z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m773.2231 267.4882l102.236206 0l0 158.64566l-102.236206 0zm9.299438 9.299408l0 140.04684l83.63739 0l0 -140.04684z" fill-rule="evenodd"/><path fill="#f3f3f3" d="m861.01447 277.063l0 0c-1.137207 0 -2.059082 3.6875 -2.059082 8.236237c0 4.5487366 0.921875 8.236206 2.059082 8.236206l-165.29926 0c-1.137146 0 -2.059021 -3.6874695 -2.059021 -8.236206c0 -4.5487366 0.921875 -8.236237 2.059021 -8.236237z" fill-rule="evenodd"/><path fill="#f7f7f7" d="m861.01447 277.063l0 0c1.137146 0 2.059021 3.6875 2.059021 8.236237c0 4.5487366 -0.921875 8.236206 -2.059021 8.236206l0 0c-1.137207 0 -2.059082 -3.6874695 -2.059082 -8.236206c0 -4.5487366 0.921875 -8.236237 2.059082 -8.236237z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m861.01447 293.53543l0 0c-1.137207 0 -2.059082 -3.6874695 -2.059082 -8.236206c0 -4.5487366 0.921875 -8.236237 2.059082 -8.236237l0 0c1.137146 0 2.059021 3.6875 2.059021 8.236237c0 4.5487366 -0.921875 8.236206 -2.059021 8.236206l-165.29926 0c-1.137146 0 -2.059021 -3.6874695 -2.059021 -8.236206c0 -4.5487366 0.921875 -8.236237 2.059021 -8.236237l165.29926 0" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m861.01447 293.53543l0 0c-1.137207 0 -2.059082 -3.6874695 -2.059082 -8.236206c0 -4.5487366 0.921875 -8.236237 2.059082 -8.236237l0 0c1.137146 0 2.059021 3.6875 2.059021 8.236237c0 4.5487366 -0.921875 8.236206 -2.059021 8.236206l-165.29926 0c-1.137146 0 -2.059021 -3.6874695 -2.059021 -8.236206c0 -4.5487366 0.921875 -8.236237 2.059021 -8.236237l165.29926 0" fill-rule="evenodd"/><path fill="#f3f3f3" d="m849.1941 354.29135l-141.66888 0l-10.12616 -10.12619l0 -50.62973l0 0l161.92126 0l0 0l0 50.62973z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m849.1941 354.29135l-141.66888 0l-10.12616 -10.12619l0 -50.62973l0 0l161.92126 0l0 0l0 50.62973z" fill-rule="evenodd"/><g filter="url(#shadowFilter-p.4)"><use xlink:href="#p.4" transform="matrix(1.0 0.0 0.0 1.0 0.0 2.0)"/></g><defs><filter id="shadowFilter-p.4" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" stdDeviation="2.0" result="blur"/><feComponentTransfer in="blur" color-interpolation-filters="sRGB"><feFuncR type="linear" slope="0" intercept="0.0"/><feFuncG type="linear" slope="0" intercept="0.0"/><feFuncB type="linear" slope="0" intercept="0.0"/><feFuncA type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><g id="p.4"><path fill="#ffffff" d="m387.05884 88.53182l0 0c-1.9863892 -12.004478 4.535309 -23.888184 16.797699 -30.608425c12.26239 -6.7202377 28.114899 -7.098423 40.83072 -0.97408295l0 0c4.5043335 -6.9799004 12.748596 -11.799042 22.239044 -12.999725c9.4904175 -1.2006836 19.112366 1.3581161 25.955353 6.9024124l0 0c3.8371277 -6.32843 11.371368 -10.580322 19.9292 -11.246891c8.5578 -0.66656876 16.9281 2.3465233 22.140625 7.9700775l0 0c6.932312 -6.7081184 17.961792 -9.532513 28.315918 -7.2510567c10.354126 2.281456 18.173218 9.258999 20.073914 17.913399l0 0c8.493225 1.9051361 15.567932 6.7482414 19.39618 13.278011c3.828308 6.5297623 4.034607 14.105644 0.5656128 20.770271l0 0c8.363403 8.951317 10.319824 20.878845 5.13916 31.331436c-5.180664 10.452591 -16.720093 17.859863 -30.31195 19.457565c-0.09576416 9.81012 -6.6381836 18.811783 -17.105469 23.53534c-10.467224 4.7235413 -23.224915 4.4313965 -33.35553 -0.763855l0 0c-4.3151855 11.749329 -16.460785 20.394379 -31.189575 22.20015c-14.72879 1.8057861 -29.4003 -3.551422 -37.675873 -13.757095l0 0c-10.144165 5.030411 -22.316315 6.4795074 -33.77063 4.0204163c-11.454346 -2.4590912 -21.226013 -8.619247 -27.110748 -17.09085l0 0c-10.366028 0.9975586 -20.38858 -3.4190521 -25.093445 -11.057861c-4.7048645 -7.6388245 -3.0905457 -16.873734 4.0418396 -23.12149l0 0c-9.246796 -4.475586 -13.965057 -13.356644 -11.6944275 -22.01204c2.2706604 -8.6553955 11.0156555 -15.123795 21.674866 -16.03218z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m376.87347 127.03871l0 0c4.3635864 2.1120453 9.404572 3.0701141 14.446075 2.7455902m6.603302 31.434525c2.1680298 -0.20863342 4.2931213 -0.6504364 6.3204346 -1.3140411m54.55789 14.383926c-1.5248718 -1.8804932 -2.8015442 -3.8899536 -3.808319 -5.994156m72.67639 -2.4492493l0 0c0.7866821 -2.1420746 1.2963867 -4.3467407 1.5206299 -6.5772095m48.938477 -16.19345c0.101989746 -10.444397 -7.1116333 -20.0074 -18.54248 -24.581413m43.715027 -26.20649c-1.8511963 3.5565186 -4.677185 6.7114487 -8.256531 9.217438m-11.703552 -43.266647l0 0c0.3154297 1.4361992 0.46136475 2.8939857 0.4359131 4.353153m-48.82489 -15.015064l0 0c-1.7293091 1.6733437 -3.1539917 3.5432816 -4.2297363 5.55159m-37.840485 -2.275505l0 0c-0.9215698 1.5198822 -1.6097107 3.1281815 -2.0486145 4.787842m-46.146484 1.309597l0 0c2.6906433 1.2959061 5.179901 2.855671 7.4129944 4.645027m-65.04068 26.937649l0 0c0.2737732 1.6545334 0.70635986 3.2886581 1.2937012 4.8871" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m387.05884 88.53182l0 0c-1.9863892 -12.004478 4.535309 -23.888184 16.797699 -30.608425c12.26239 -6.7202377 28.114899 -7.098423 40.83072 -0.97408295l0 0c4.5043335 -6.9799004 12.748596 -11.799042 22.239044 -12.999725c9.4904175 -1.2006836 19.112366 1.3581161 25.955353 6.9024124l0 0c3.8371277 -6.32843 11.371368 -10.580322 19.9292 -11.246891c8.5578 -0.66656876 16.9281 2.3465233 22.140625 7.9700775l0 0c6.932312 -6.7081184 17.961792 -9.532513 28.315918 -7.2510567c10.354126 2.281456 18.173218 9.258999 20.073914 17.913399l0 0c8.493225 1.9051361 15.567932 6.7482414 19.39618 13.278011c3.828308 6.5297623 4.034607 14.105644 0.5656128 20.770271l0 0c8.363403 8.951317 10.319824 20.878845 5.13916 31.331436c-5.180664 10.452591 -16.720093 17.859863 -30.31195 19.457565c-0.09576416 9.81012 -6.6381836 18.811783 -17.105469 23.53534c-10.467224 4.7235413 -23.224915 4.4313965 -33.35553 -0.763855l0 0c-4.3151855 11.749329 -16.460785 20.394379 -31.189575 22.20015c-14.72879 1.8057861 -29.4003 -3.551422 -37.675873 -13.757095l0 0c-10.144165 5.030411 -22.316315 6.4795074 -33.77063 4.0204163c-11.454346 -2.4590912 -21.226013 -8.619247 -27.110748 -17.09085l0 0c-10.366028 0.9975586 -20.38858 -3.4190521 -25.093445 -11.057861c-4.7048645 -7.6388245 -3.0905457 -16.873734 4.0418396 -23.12149l0 0c-9.246796 -4.475586 -13.965057 -13.356644 -11.6944275 -22.01204c2.2706604 -8.6553955 11.0156555 -15.123795 21.674866 -16.03218z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m376.87347 127.03871l0 0c4.3635864 2.1120453 9.404572 3.0701141 14.446075 2.7455902m6.603302 31.434525c2.1680298 -0.20863342 4.2931213 -0.6504364 6.3204346 -1.3140411m54.55789 14.383926c-1.5248718 -1.8804932 -2.8015442 -3.8899536 -3.808319 -5.994156m72.67639 -2.4492493l0 0c0.7866821 -2.1420746 1.2963867 -4.3467407 1.5206299 -6.5772095m48.938477 -16.19345c0.101989746 -10.444397 -7.1116333 -20.0074 -18.54248 -24.581413m43.715027 -26.20649c-1.8511963 3.5565186 -4.677185 6.7114487 -8.256531 9.217438m-11.703552 -43.266647l0 0c0.3154297 1.4361992 0.46136475 2.8939857 0.4359131 4.353153m-48.82489 -15.015064l0 0c-1.7293091 1.6733437 -3.1539917 3.5432816 -4.2297363 5.55159m-37.840485 -2.275505l0 0c-0.9215698 1.5198822 -1.6097107 3.1281815 -2.0486145 4.787842m-46.146484 1.309597l0 0c2.6906433 1.2959061 5.179901 2.855671 7.4129944 4.645027m-65.04068 26.937649l0 0c0.2737732 1.6545334 0.70635986 3.2886581 1.2937012 4.8871" fill-rule="evenodd"/></g><g filter="url(#shadowFilter-p.5)"><use xlink:href="#p.5" transform="matrix(1.0 0.0 0.0 1.0 0.0 2.0)"/></g><defs><filter id="shadowFilter-p.5" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" stdDeviation="2.0" result="blur"/><feComponentTransfer in="blur" color-interpolation-filters="sRGB"><feFuncR type="linear" slope="0" intercept="1.0"/><feFuncG type="linear" slope="0" intercept="1.0"/><feFuncB type="linear" slope="0" intercept="1.0"/><feFuncA type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><g id="p.5"><path fill="#000000" fill-opacity="0.0" d="m182.30446 228.09973c0 -57.338577 91.6378 -114.67716 183.27559 -114.67716" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m182.30446 228.09973c0 -28.669281 22.909454 -57.338577 57.27362 -78.840546c17.182083 -10.750977 37.22786 -19.710144 58.70546 -25.981544c10.7388 -3.135704 21.835571 -5.599472 33.111298 -7.279312c5.6378784 -0.8399277 11.320496 -1.4838638 17.025513 -1.9178162c2.8525085 -0.21698761 5.7105713 -0.38146973 8.571442 -0.49170685c0.7152405 -0.027557373 1.430603 -0.051734924 2.1461792 -0.07248688l0.44265747 -0.011779785" fill-rule="evenodd"/><path fill="#000000" stroke="#000000" stroke-width="1.0" stroke-linecap="butt" d="m359.60318 115.15613l4.515106 -1.7135849l-4.5602417 -1.5895767z" fill-rule="evenodd"/></g><g filter="url(#shadowFilter-p.6)"><use xlink:href="#p.6" transform="matrix(1.0 0.0 0.0 1.0 0.0 2.0)"/></g><defs><filter id="shadowFilter-p.6" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" stdDeviation="2.0" result="blur"/><feComponentTransfer in="blur" color-interpolation-filters="sRGB"><feFuncR type="linear" slope="0" intercept="1.0"/><feFuncG type="linear" slope="0" intercept="1.0"/><feFuncB type="linear" slope="0" intercept="1.0"/><feFuncA type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><g id="p.6"><path fill="#000000" fill-opacity="0.0" d="m778.5512 228.09973c0 -57.338577 -83.77954 -114.67716 -167.55908 -114.67716" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m778.5512 228.09973c0 -28.669281 -20.944885 -57.338577 -52.362244 -78.840546c-15.708679 -10.750977 -34.0354 -19.710144 -53.671265 -25.981544c-9.817871 -3.135704 -19.963074 -5.599472 -30.271912 -7.279312c-5.154358 -0.8399277 -10.349731 -1.4838638 -15.565491 -1.9178162c-2.6078491 -0.21698761 -5.220886 -0.38146973 -7.8363647 -0.49170685c-0.32696533 -0.0137786865 -0.6539917 -0.02671814 -0.98101807 -0.03879547l-0.87158203 -0.029922485" fill-rule="evenodd"/><path fill="#000000" stroke="#000000" stroke-width="1.0" stroke-linecap="butt" d="m617.0182 111.86857l-4.564331 1.5777664l4.51062 1.7252655z" fill-rule="evenodd"/></g><g filter="url(#shadowFilter-p.7)"><use xlink:href="#p.7" transform="matrix(1.0 0.0 0.0 1.0 0.0 2.0)"/></g><defs><filter id="shadowFilter-p.7" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" stdDeviation="2.0" result="blur"/><feComponentTransfer in="blur" color-interpolation-filters="sRGB"><feFuncR type="linear" slope="0" intercept="1.0"/><feFuncG type="linear" slope="0" intercept="1.0"/><feFuncB type="linear" slope="0" intercept="1.0"/><feFuncA type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><g id="p.7"><path fill="#000000" fill-opacity="0.0" d="m486.979 228.09973c0 -9.926773 0.25195312 -14.802383 0.50393677 -19.853561c0.25195312 -5.051178 0.50393677 -10.277939 0.50393677 -20.555878" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m486.979 228.09973c0 -9.926773 0.25195312 -14.802383 0.50393677 -19.853561c0.12597656 -2.525589 0.25195312 -5.095093 0.34646606 -8.317902c0.04724121 -1.6114197 0.08660889 -3.3861694 0.11416626 -5.4004364l0.009887695 -0.8376465" fill-rule="evenodd"/><path fill="#000000" stroke="#000000" stroke-width="1.0" stroke-linecap="butt" d="m489.60516 193.69939l-1.6264343 -4.5472107l-1.6769714 4.528824z" fill-rule="evenodd"/></g><g filter="url(#shadowFilter-p.8)"><use xlink:href="#p.8" transform="matrix(1.0 0.0 0.0 1.0 0.0 2.0)"/></g><defs><filter id="shadowFilter-p.8" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" stdDeviation="2.0" result="blur"/><feComponentTransfer in="blur" color-interpolation-filters="sRGB"><feFuncR type="linear" slope="0" intercept="0.0"/><feFuncG type="linear" slope="0" intercept="0.0"/><feFuncB type="linear" slope="0" intercept="0.0"/><feFuncA type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><g id="p.8"><path fill="#ffffff" d="m394.1601 527.1942l0 0c0 -7.9345703E-4 6.713867E-4 -0.0014648438 0.0014953613 -0.0014648438l177.38437 0.0014648438c3.6621094E-4 0 7.324219E-4 1.8310547E-4 0.0010375977 4.272461E-4c2.4414062E-4 3.0517578E-4 4.272461E-4 6.713867E-4 4.272461E-4 0.0010375977l-0.0014648438 95.58911c0 7.9345703E-4 -6.713867E-4 0.0014648438 -0.0015258789 0.0014648438l-177.38434 -0.0014648438l0 0c-7.9345703E-4 0 -0.0014648438 -6.713867E-4 -0.0014648438 -0.0014648438z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m394.1601 527.1942l0 0c0 -7.9345703E-4 6.713867E-4 -0.0014648438 0.0014953613 -0.0014648438l177.38437 0.0014648438c3.6621094E-4 0 7.324219E-4 1.8310547E-4 0.0010375977 4.272461E-4c2.4414062E-4 3.0517578E-4 4.272461E-4 6.713867E-4 4.272461E-4 0.0010375977l-0.0014648438 95.58911c0 7.9345703E-4 -6.713867E-4 0.0014648438 -0.0015258789 0.0014648438l-177.38434 -0.0014648438l0 0c-7.9345703E-4 0 -0.0014648438 -6.713867E-4 -0.0014648438 -0.0014648438z" fill-rule="evenodd"/><path fill="#000000" d="m447.12653 570.9095l0 -11.09375l-3.953125 0l0 -2.265625l10.609375 0l0 2.265625l-3.953125 0l0 11.09375l-2.703125 0zm8.043121 -10.984375l0 -2.375l2.5625 0l0 2.375l-2.5625 0zm0 10.984375l0 -9.671875l2.5625 0l0 9.671875l-2.5625 0zm13.980194 0l-2.5625 0l0 -4.9375q0 -1.5625 -0.171875 -2.015625q-0.15625 -0.46875 -0.53125 -0.71875q-0.359375 -0.265625 -0.875 -0.265625q-0.671875 0 -1.203125 0.375q-0.53125 0.359375 -0.734375 0.96875q-0.1875 0.59375 -0.1875 2.21875l0 4.375l-2.546875 0l0 -9.671875l2.375 0l0 1.421875q1.265625 -1.640625 3.1875 -1.640625q0.84375 0 1.546875 0.3125q0.703125 0.296875 1.0625 0.78125q0.359375 0.46875 0.5 1.078125q0.140625 0.59375 0.140625 1.703125l0 6.015625zm1.3803406 -9.671875l2.71875 0l2.328125 6.859375l2.25 -6.859375l2.65625 0l-3.421875 9.3125l-0.609375 1.6875q-0.328125 0.84375 -0.640625 1.28125q-0.3125 0.453125 -0.703125 0.71875q-0.390625 0.28125 -0.96875 0.4375q-0.578125 0.15625 -1.3125 0.15625q-0.734375 0 -1.453125 -0.15625l-0.21875 -2.0q0.59375 0.125 1.078125 0.125q0.890625 0 1.3125 -0.53125q0.4375 -0.515625 0.671875 -1.328125l-3.6875 -9.703125zm14.610107 9.671875l0 -11.09375l-3.953125 0l0 -2.265625l10.609375 0l0 2.265625l-3.953125 0l0 11.09375l-2.703125 0zm13.354309 0l0 -1.453125q-0.53125 0.78125 -1.390625 1.234375q-0.859375 0.4375 -1.8125 0.4375q-0.96875 0 -1.75 -0.421875q-0.765625 -0.4375 -1.125 -1.203125q-0.34375 -0.78125 -0.34375 -2.140625l0 -6.125l2.5625 0l0 4.4375q0 2.046875 0.140625 2.515625q0.140625 0.453125 0.515625 0.71875q0.375 0.265625 0.953125 0.265625q0.65625 0 1.171875 -0.359375q0.515625 -0.359375 0.703125 -0.890625q0.203125 -0.53125 0.203125 -2.609375l0 -4.078125l2.546875 0l0 9.671875l-2.375 0zm3.8178406 -9.671875l2.71875 0l2.328125 6.859375l2.25 -6.859375l2.65625 0l-3.421875 9.3125l-0.609375 1.6875q-0.328125 0.84375 -0.640625 1.28125q-0.3125 0.453125 -0.703125 0.71875q-0.390625 0.28125 -0.96875 0.4375q-0.578125 0.15625 -1.3125 0.15625q-0.734375 0 -1.453125 -0.15625l-0.21875 -2.0q0.59375 0.125 1.078125 0.125q0.890625 0 1.3125 -0.53125q0.4375 -0.515625 0.671875 -1.328125l-3.6875 -9.703125zm13.500732 2.953125l-2.328125 -0.421875q0.40625 -1.40625 1.359375 -2.078125q0.953125 -0.671875 2.84375 -0.671875q1.703125 0 2.546875 0.40625q0.84375 0.40625 1.171875 1.03125q0.34375 0.625 0.34375 2.28125l-0.015625 3.0q0 1.265625 0.109375 1.875q0.125 0.609375 0.46875 1.296875l-2.53125 0q-0.109375 -0.25 -0.25 -0.75q-0.0625 -0.234375 -0.09375 -0.3125q-0.65625 0.640625 -1.40625 0.96875q-0.734375 0.3125 -1.59375 0.3125q-1.484375 0 -2.34375 -0.8125q-0.859375 -0.8125 -0.859375 -2.046875q0 -0.828125 0.390625 -1.46875q0.390625 -0.640625 1.09375 -0.96875q0.703125 -0.34375 2.03125 -0.609375q1.796875 -0.328125 2.484375 -0.625l0 -0.25q0 -0.75 -0.359375 -1.0625q-0.359375 -0.3125 -1.375 -0.3125q-0.6875 0 -1.078125 0.28125q-0.375 0.265625 -0.609375 0.9375zm3.421875 2.078125q-0.484375 0.15625 -1.5625 0.390625q-1.0625 0.21875 -1.390625 0.4375q-0.5 0.359375 -0.5 0.90625q0 0.53125 0.40625 0.9375q0.40625 0.390625 1.015625 0.390625q0.703125 0 1.328125 -0.46875q0.46875 -0.34375 0.609375 -0.84375q0.09375 -0.328125 0.09375 -1.25l0 -0.5z" fill-rule="nonzero"/><path fill="#000000" d="m428.54083 592.9095l0 -10.484375l1.390625 0l0 9.25l5.15625 0l0 1.234375l-6.546875 0zm7.5573425 -3.796875q0 -2.109375 1.171875 -3.125q0.984375 -0.84375 2.390625 -0.84375q1.578125 0 2.5625 1.03125q1.0 1.015625 1.0 2.828125q0 1.46875 -0.4375 2.3125q-0.4375 0.828125 -1.28125 1.296875q-0.84375 0.46875 -1.84375 0.46875q-1.59375 0 -2.578125 -1.015625q-0.984375 -1.03125 -0.984375 -2.953125zm1.328125 0q0 1.453125 0.625 2.1875q0.640625 0.71875 1.609375 0.71875q0.96875 0 1.59375 -0.71875q0.640625 -0.734375 0.640625 -2.234375q0 -1.40625 -0.640625 -2.125q-0.640625 -0.734375 -1.59375 -0.734375q-0.96875 0 -1.609375 0.71875q-0.625 0.71875 -0.625 2.1875zm12.260498 1.015625l1.265625 0.15625q-0.203125 1.3125 -1.0625 2.0625q-0.84375 0.734375 -2.09375 0.734375q-1.5625 0 -2.515625 -1.015625q-0.9375 -1.03125 -0.9375 -2.921875q0 -1.234375 0.40625 -2.15625q0.40625 -0.921875 1.234375 -1.375q0.84375 -0.46875 1.8125 -0.46875q1.25 0 2.03125 0.625q0.78125 0.625 1.015625 1.765625l-1.265625 0.203125q-0.171875 -0.765625 -0.625 -1.15625q-0.453125 -0.390625 -1.09375 -0.390625q-0.984375 0 -1.59375 0.703125q-0.609375 0.703125 -0.609375 2.203125q0 1.53125 0.578125 2.234375q0.59375 0.6875 1.546875 0.6875q0.75 0 1.265625 -0.453125q0.515625 -0.46875 0.640625 -1.4375zm7.328125 1.84375q-0.71875 0.609375 -1.375 0.859375q-0.65625 0.25 -1.421875 0.25q-1.25 0 -1.921875 -0.609375q-0.671875 -0.609375 -0.671875 -1.5625q0 -0.5625 0.25 -1.015625q0.25 -0.46875 0.65625 -0.75q0.421875 -0.28125 0.9375 -0.421875q0.375 -0.09375 1.140625 -0.1875q1.5625 -0.1875 2.296875 -0.453125q0.015625 -0.265625 0.015625 -0.328125q0 -0.796875 -0.375 -1.109375q-0.484375 -0.4375 -1.453125 -0.4375q-0.921875 0 -1.359375 0.328125q-0.421875 0.3125 -0.625 1.109375l-1.265625 -0.171875q0.171875 -0.796875 0.5625 -1.296875q0.390625 -0.5 1.140625 -0.765625q0.75 -0.265625 1.71875 -0.265625q0.984375 0 1.59375 0.234375q0.609375 0.21875 0.890625 0.5625q0.28125 0.34375 0.40625 0.875q0.0625 0.328125 0.0625 1.1875l0 1.71875q0 1.796875 0.078125 2.28125q0.078125 0.46875 0.328125 0.90625l-1.34375 0q-0.203125 -0.40625 -0.265625 -0.9375zm-0.109375 -2.875q-0.703125 0.28125 -2.09375 0.484375q-0.796875 0.109375 -1.125 0.265625q-0.328125 0.140625 -0.515625 0.421875q-0.171875 0.265625 -0.171875 0.59375q0 0.515625 0.390625 0.859375q0.390625 0.34375 1.140625 0.34375q0.734375 0 1.3125 -0.3125q0.59375 -0.328125 0.859375 -0.890625q0.203125 -0.4375 0.203125 -1.296875l0 -0.46875zm3.2760925 3.8125l0 -10.484375l1.28125 0l0 10.484375l-1.28125 0zm7.5 0l0 -10.484375l1.4375 0l5.5 8.234375l0 -8.234375l1.328125 0l0 10.484375l-1.421875 0l-5.5 -8.25l0 8.25l-1.34375 0zm15.64679 -2.453125l1.328125 0.171875q-0.3125 1.171875 -1.171875 1.8125q-0.84375 0.640625 -2.171875 0.640625q-1.671875 0 -2.65625 -1.015625q-0.96875 -1.03125 -0.96875 -2.890625q0 -1.921875 0.984375 -2.96875q1.0 -1.0625 2.578125 -1.0625q1.515625 0 2.484375 1.03125q0.96875 1.03125 0.96875 2.921875q0 0.109375 -0.015625 0.34375l-5.65625 0q0.0625 1.25 0.703125 1.921875q0.640625 0.65625 1.59375 0.65625q0.703125 0 1.203125 -0.359375q0.5 -0.375 0.796875 -1.203125zm-4.234375 -2.078125l4.25 0q-0.09375 -0.953125 -0.484375 -1.4375q-0.625 -0.75 -1.609375 -0.75q-0.875 0 -1.484375 0.59375q-0.609375 0.59375 -0.671875 1.59375zm9.994843 3.375l0.1875 1.140625q-0.546875 0.109375 -0.984375 0.109375q-0.6875 0 -1.078125 -0.21875q-0.390625 -0.21875 -0.546875 -0.578125q-0.15625 -0.359375 -0.15625 -1.515625l0 -4.375l-0.953125 0l0 -1.0l0.953125 0l0 -1.890625l1.28125 -0.765625l0 2.65625l1.296875 0l0 1.0l-1.296875 0l0 4.4375q0 0.546875 0.0625 0.71875q0.078125 0.15625 0.21875 0.25q0.15625 0.078125 0.453125 0.078125q0.203125 0 0.5625 -0.046875zm2.665741 1.15625l-2.328125 -7.59375l1.328125 0l1.203125 4.375l0.453125 1.640625q0.03125 -0.125 0.390625 -1.578125l1.21875 -4.4375l1.328125 0l1.125 4.40625l0.390625 1.453125l0.4375 -1.46875l1.296875 -4.390625l1.25 0l-2.375 7.59375l-1.34375 0l-1.203125 -4.546875l-0.296875 -1.296875l-1.53125 5.84375l-1.34375 0zm8.693634 -3.796875q0 -2.109375 1.171875 -3.125q0.984375 -0.84375 2.390625 -0.84375q1.578125 0 2.5625 1.03125q1.0 1.015625 1.0 2.828125q0 1.46875 -0.4375 2.3125q-0.4375 0.828125 -1.28125 1.296875q-0.84375 0.46875 -1.84375 0.46875q-1.59375 0 -2.578125 -1.015625q-0.984375 -1.03125 -0.984375 -2.953125zm1.328125 0q0 1.453125 0.625 2.1875q0.640625 0.71875 1.609375 0.71875q0.96875 0 1.59375 -0.71875q0.640625 -0.734375 0.640625 -2.234375q0 -1.40625 -0.640625 -2.125q-0.640625 -0.734375 -1.59375 -0.734375q-0.96875 0 -1.609375 0.71875q-0.625 0.71875 -0.625 2.1875zm7.291748 3.796875l0 -7.59375l1.15625 0l0 1.140625q0.453125 -0.796875 0.828125 -1.046875q0.375 -0.265625 0.8125 -0.265625q0.6562195 0 1.3280945 0.40625l-0.4375 1.203125q-0.46875 -0.28125 -0.9530945 -0.28125q-0.421875 0 -0.765625 0.25q-0.328125 0.25 -0.46875 0.703125q-0.21875 0.6875 -0.21875 1.5l0 3.984375l-1.28125 0zm4.8962708 0l0 -10.484375l1.296875 0l0 5.96875l3.046875 -3.078125l1.671875 0l-2.90625 2.8125l3.1875 4.78125l-1.578125 0l-2.515625 -3.890625l-0.90625 0.875l0 3.015625l-1.296875 0zm11.79071 0l0 -10.484375l1.390625 0l0 10.484375l-1.390625 0zm3.8375854 0l0 -10.484375l3.96875 0q1.046875 0 1.59375 0.09375q0.765625 0.125 1.28125 0.484375q0.53125 0.359375 0.84375 1.015625q0.328125 0.65625 0.328125 1.4375q0 1.328125 -0.859375 2.265625q-0.84375 0.921875 -3.078125 0.921875l-2.6875 0l0 4.265625l-1.390625 0zm1.390625 -5.5l2.71875 0q1.34375 0 1.90625 -0.5q0.5625 -0.5 0.5625 -1.40625q0 -0.671875 -0.328125 -1.140625q-0.328125 -0.46875 -0.875 -0.609375q-0.359375 -0.09375 -1.296875 -0.09375l-2.6875 0l0 3.75z" fill-rule="nonzero"/></g><path fill="#ffffff" d="m342.19946 543.9344l64.30209 0l10.627045 31.055115l-10.627045 31.055115l-64.30209 0l10.627075 -31.055115z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m342.19946 543.9344l64.30209 0l10.627045 31.055115l-10.627045 31.055115l-64.30209 0l10.627075 -31.055115z" fill-rule="evenodd"/><path fill="#000000" d="m367.85544 549.9158l1.734375 0l0 4.65625q0 1.109375 0.0625 1.4375q0.109375 0.53125 0.53125 0.84375q0.421875 0.3125 1.15625 0.3125q0.734375 0 1.109375 -0.296875q0.375 -0.296875 0.453125 -0.734375q0.078125 -0.4375 0.078125 -1.46875l0 -4.75l1.734375 0l0 4.515625q0 1.546875 -0.140625 2.1875q-0.140625 0.640625 -0.53125 1.078125q-0.375 0.4375 -1.015625 0.703125q-0.625 0.25 -1.640625 0.25q-1.234375 0 -1.875 -0.28125q-0.625 -0.28125 -1.0 -0.734375q-0.359375 -0.453125 -0.484375 -0.953125q-0.171875 -0.734375 -0.171875 -2.1875l0 -4.578125zm8.681641 0l3.15625 0q1.078125 0 1.640625 0.171875q0.75 0.21875 1.28125 0.796875q0.546875 0.5625 0.828125 1.390625q0.28125 0.8125 0.28125 2.015625q0 1.0625 -0.25 1.828125q-0.328125 0.9375 -0.921875 1.515625q-0.453125 0.453125 -1.21875 0.6875q-0.578125 0.1875 -1.546875 0.1875l-3.25 0l0 -8.59375zm1.734375 1.453125l0 5.6875l1.28125 0q0.734375 0 1.0625 -0.078125q0.421875 -0.109375 0.6875 -0.359375q0.28125 -0.25 0.453125 -0.828125q0.1875 -0.578125 0.1875 -1.578125q0 -0.984375 -0.1875 -1.515625q-0.171875 -0.546875 -0.484375 -0.84375q-0.3125 -0.296875 -0.796875 -0.40625q-0.375 -0.078125 -1.4375 -0.078125l-0.765625 0zm6.9316406 7.140625l0 -8.59375l2.78125 0q1.578125 0 2.0625 0.125q0.734375 0.203125 1.234375 0.859375q0.5 0.640625 0.5 1.65625q0 0.796875 -0.296875 1.34375q-0.28125 0.53125 -0.71875 0.84375q-0.4375 0.296875 -0.90625 0.40625q-0.609375 0.125 -1.796875 0.125l-1.125 0l0 3.234375l-1.734375 0zm1.734375 -7.140625l0 2.4375l0.953125 0q1.015625 0 1.359375 -0.125q0.359375 -0.140625 0.546875 -0.421875q0.203125 -0.296875 0.203125 -0.671875q0 -0.46875 -0.28125 -0.765625q-0.28125 -0.3125 -0.703125 -0.390625q-0.296875 -0.0625 -1.234375 -0.0625l-0.84375 0z" fill-rule="nonzero"/><path fill="#000000" d="m372.28513 566.02515l-1.046875 0.078125q-0.140625 -0.625 -0.390625 -0.90625q-0.4375 -0.453125 -1.0625 -0.453125q-0.5 0 -0.890625 0.28125q-0.484375 0.375 -0.78125 1.078125q-0.28125 0.6875 -0.296875 1.96875q0.375 -0.578125 0.921875 -0.859375q0.5625 -0.28125 1.171875 -0.28125q1.046875 0 1.78125 0.78125q0.75 0.78125 0.75 2.0q0 0.8125 -0.359375 1.515625q-0.34375 0.6875 -0.953125 1.0625q-0.609375 0.359375 -1.375 0.359375q-1.328125 0 -2.15625 -0.96875q-0.828125 -0.96875 -0.828125 -3.1875q0 -2.5 0.921875 -3.625q0.796875 -0.984375 2.15625 -0.984375q1.015625 0 1.65625 0.578125q0.65625 0.5625 0.78125 1.5625zm-4.296875 3.703125q0 0.546875 0.21875 1.046875q0.234375 0.484375 0.640625 0.75q0.421875 0.265625 0.890625 0.265625q0.65625 0 1.140625 -0.53125q0.484375 -0.546875 0.484375 -1.46875q0 -0.890625 -0.484375 -1.40625q-0.46875 -0.515625 -1.1875 -0.515625q-0.71875 0 -1.21875 0.515625q-0.484375 0.515625 -0.484375 1.34375zm10.970703 -3.703125l-1.046875 0.078125q-0.140625 -0.625 -0.390625 -0.90625q-0.4375 -0.453125 -1.0625 -0.453125q-0.5 0 -0.890625 0.28125q-0.484375 0.375 -0.78125 1.078125q-0.28125 0.6875 -0.296875 1.96875q0.375 -0.578125 0.921875 -0.859375q0.5625 -0.28125 1.171875 -0.28125q1.046875 0 1.78125 0.78125q0.75 0.78125 0.75 2.0q0 0.8125 -0.359375 1.515625q-0.34375 0.6875 -0.953125 1.0625q-0.609375 0.359375 -1.375 0.359375q-1.328125 0 -2.15625 -0.96875q-0.828125 -0.96875 -0.828125 -3.1875q0 -2.5 0.921875 -3.625q0.796875 -0.984375 2.15625 -0.984375q1.015625 0 1.65625 0.578125q0.65625 0.5625 0.78125 1.5625zm-4.296875 3.703125q0 0.546875 0.21875 1.046875q0.234375 0.484375 0.640625 0.75q0.421875 0.265625 0.890625 0.265625q0.65625 0 1.140625 -0.53125q0.484375 -0.546875 0.484375 -1.46875q0 -0.890625 -0.484375 -1.40625q-0.46875 -0.515625 -1.1875 -0.515625q-0.71875 0 -1.21875 0.515625q-0.484375 0.515625 -0.484375 1.34375zm10.970703 -3.703125l-1.046875 0.078125q-0.140625 -0.625 -0.390625 -0.90625q-0.4375 -0.453125 -1.0625 -0.453125q-0.5 0 -0.890625 0.28125q-0.484375 0.375 -0.78125 1.078125q-0.28125 0.6875 -0.296875 1.96875q0.375 -0.578125 0.921875 -0.859375q0.5625 -0.28125 1.171875 -0.28125q1.046875 0 1.78125 0.78125q0.75 0.78125 0.75 2.0q0 0.8125 -0.359375 1.515625q-0.34375 0.6875 -0.953125 1.0625q-0.609375 0.359375 -1.375 0.359375q-1.328125 0 -2.15625 -0.96875q-0.828125 -0.96875 -0.828125 -3.1875q0 -2.5 0.921875 -3.625q0.796875 -0.984375 2.15625 -0.984375q1.015625 0 1.65625 0.578125q0.65625 0.5625 0.78125 1.5625zm-4.296875 3.703125q0 0.546875 0.21875 1.046875q0.234375 0.484375 0.640625 0.75q0.421875 0.265625 0.890625 0.265625q0.65625 0 1.140625 -0.53125q0.484375 -0.546875 0.484375 -1.46875q0 -0.890625 -0.484375 -1.40625q-0.46875 -0.515625 -1.1875 -0.515625q-0.71875 0 -1.21875 0.515625q-0.484375 0.515625 -0.484375 1.34375zm10.970703 -3.703125l-1.046875 0.078125q-0.140625 -0.625 -0.390625 -0.90625q-0.4375 -0.453125 -1.0625 -0.453125q-0.5 0 -0.890625 0.28125q-0.484375 0.375 -0.78125 1.078125q-0.28125 0.6875 -0.296875 1.96875q0.375 -0.578125 0.921875 -0.859375q0.5625 -0.28125 1.171875 -0.28125q1.046875 0 1.78125 0.78125q0.75 0.78125 0.75 2.0q0 0.8125 -0.359375 1.515625q-0.34375 0.6875 -0.953125 1.0625q-0.609375 0.359375 -1.375 0.359375q-1.328125 0 -2.15625 -0.96875q-0.828125 -0.96875 -0.828125 -3.1875q0 -2.5 0.921875 -3.625q0.796875 -0.984375 2.15625 -0.984375q1.015625 0 1.65625 0.578125q0.65625 0.5625 0.78125 1.5625zm-4.296875 3.703125q0 0.546875 0.21875 1.046875q0.234375 0.484375 0.640625 0.75q0.421875 0.265625 0.890625 0.265625q0.65625 0 1.140625 -0.53125q0.484375 -0.546875 0.484375 -1.46875q0 -0.890625 -0.484375 -1.40625q-0.46875 -0.515625 -1.1875 -0.515625q-0.71875 0 -1.21875 0.515625q-0.484375 0.515625 -0.484375 1.34375z" fill-rule="nonzero"/><path fill="#000000" d="m372.28513 580.02515l-1.046875 0.078125q-0.140625 -0.625 -0.390625 -0.90625q-0.4375 -0.453125 -1.0625 -0.453125q-0.5 0 -0.890625 0.28125q-0.484375 0.375 -0.78125 1.078125q-0.28125 0.6875 -0.296875 1.96875q0.375 -0.578125 0.921875 -0.859375q0.5625 -0.28125 1.171875 -0.28125q1.046875 0 1.78125 0.78125q0.75 0.78125 0.75 2.0q0 0.8125 -0.359375 1.515625q-0.34375 0.6875 -0.953125 1.0625q-0.609375 0.359375 -1.375 0.359375q-1.328125 0 -2.15625 -0.96875q-0.828125 -0.96875 -0.828125 -3.1875q0 -2.5 0.921875 -3.625q0.796875 -0.984375 2.15625 -0.984375q1.015625 0 1.65625 0.578125q0.65625 0.5625 0.78125 1.5625zm-4.296875 3.703125q0 0.546875 0.21875 1.046875q0.234375 0.484375 0.640625 0.75q0.421875 0.265625 0.890625 0.265625q0.65625 0 1.140625 -0.53125q0.484375 -0.546875 0.484375 -1.46875q0 -0.890625 -0.484375 -1.40625q-0.46875 -0.515625 -1.1875 -0.515625q-0.71875 0 -1.21875 0.515625q-0.484375 0.515625 -0.484375 1.34375zm10.970703 -3.703125l-1.046875 0.078125q-0.140625 -0.625 -0.390625 -0.90625q-0.4375 -0.453125 -1.0625 -0.453125q-0.5 0 -0.890625 0.28125q-0.484375 0.375 -0.78125 1.078125q-0.28125 0.6875 -0.296875 1.96875q0.375 -0.578125 0.921875 -0.859375q0.5625 -0.28125 1.171875 -0.28125q1.046875 0 1.78125 0.78125q0.75 0.78125 0.75 2.0q0 0.8125 -0.359375 1.515625q-0.34375 0.6875 -0.953125 1.0625q-0.609375 0.359375 -1.375 0.359375q-1.328125 0 -2.15625 -0.96875q-0.828125 -0.96875 -0.828125 -3.1875q0 -2.5 0.921875 -3.625q0.796875 -0.984375 2.15625 -0.984375q1.015625 0 1.65625 0.578125q0.65625 0.5625 0.78125 1.5625zm-4.296875 3.703125q0 0.546875 0.21875 1.046875q0.234375 0.484375 0.640625 0.75q0.421875 0.265625 0.890625 0.265625q0.65625 0 1.140625 -0.53125q0.484375 -0.546875 0.484375 -1.46875q0 -0.890625 -0.484375 -1.40625q-0.46875 -0.515625 -1.1875 -0.515625q-0.71875 0 -1.21875 0.515625q-0.484375 0.515625 -0.484375 1.34375zm10.970703 -3.703125l-1.046875 0.078125q-0.140625 -0.625 -0.390625 -0.90625q-0.4375 -0.453125 -1.0625 -0.453125q-0.5 0 -0.890625 0.28125q-0.484375 0.375 -0.78125 1.078125q-0.28125 0.6875 -0.296875 1.96875q0.375 -0.578125 0.921875 -0.859375q0.5625 -0.28125 1.171875 -0.28125q1.046875 0 1.78125 0.78125q0.75 0.78125 0.75 2.0q0 0.8125 -0.359375 1.515625q-0.34375 0.6875 -0.953125 1.0625q-0.609375 0.359375 -1.375 0.359375q-1.328125 0 -2.15625 -0.96875q-0.828125 -0.96875 -0.828125 -3.1875q0 -2.5 0.921875 -3.625q0.796875 -0.984375 2.15625 -0.984375q1.015625 0 1.65625 0.578125q0.65625 0.5625 0.78125 1.5625zm-4.296875 3.703125q0 0.546875 0.21875 1.046875q0.234375 0.484375 0.640625 0.75q0.421875 0.265625 0.890625 0.265625q0.65625 0 1.140625 -0.53125q0.484375 -0.546875 0.484375 -1.46875q0 -0.890625 -0.484375 -1.40625q-0.46875 -0.515625 -1.1875 -0.515625q-0.71875 0 -1.21875 0.515625q-0.484375 0.515625 -0.484375 1.34375zm5.564453 -4.6875l0 -1.015625l5.5625 0l0 0.828125q-0.8125 0.875 -1.625 2.328125q-0.796875 1.4375 -1.234375 2.96875q-0.328125 1.078125 -0.40625 2.359375l-1.09375 0q0.015625 -1.015625 0.390625 -2.453125q0.390625 -1.4375 1.09375 -2.765625q0.71875 -1.328125 1.53125 -2.25l-4.21875 0z" fill-rule="nonzero"/><path fill="#000000" d="m366.87888 593.0408l0 -1.015625l5.5625 0l0 0.828125q-0.8125 0.875 -1.625 2.328125q-0.796875 1.4375 -1.234375 2.96875q-0.328125 1.078125 -0.40625 2.359375l-1.09375 0q0.015625 -1.015625 0.390625 -2.453125q0.390625 -1.4375 1.09375 -2.765625q0.71875 -1.328125 1.53125 -2.25l-4.21875 0zm6.611328 3.234375q0 -1.53125 0.3125 -2.453125q0.3125 -0.9375 0.921875 -1.4375q0.625 -0.5 1.5625 -0.5q0.6875 0 1.203125 0.28125q0.53125 0.28125 0.875 0.8125q0.34375 0.515625 0.53125 1.265625q0.1875 0.75 0.1875 2.03125q0 1.515625 -0.3125 2.4375q-0.296875 0.921875 -0.921875 1.4375q-0.609375 0.5 -1.5625 0.5q-1.234375 0 -1.953125 -0.890625q-0.84375 -1.0625 -0.84375 -3.484375zm1.078125 0q0 2.109375 0.5 2.8125q0.5 0.703125 1.21875 0.703125q0.734375 0 1.21875 -0.703125q0.5 -0.703125 0.5 -2.8125q0 -2.125 -0.5 -2.8125q-0.484375 -0.703125 -1.234375 -0.703125q-0.71875 0 -1.15625 0.609375q-0.546875 0.78125 -0.546875 2.90625zm5.595703 0q0 -1.53125 0.3125 -2.453125q0.3125 -0.9375 0.921875 -1.4375q0.625 -0.5 1.5625 -0.5q0.6875 0 1.203125 0.28125q0.53125 0.28125 0.875 0.8125q0.34375 0.515625 0.53125 1.265625q0.1875 0.75 0.1875 2.03125q0 1.515625 -0.3125 2.4375q-0.296875 0.921875 -0.921875 1.4375q-0.609375 0.5 -1.5625 0.5q-1.234375 0 -1.953125 -0.890625q-0.84375 -1.0625 -0.84375 -3.484375zm1.078125 0q0 2.109375 0.5 2.8125q0.5 0.703125 1.21875 0.703125q0.734375 0 1.21875 -0.703125q0.5 -0.703125 0.5 -2.8125q0 -2.125 -0.5 -2.8125q-0.484375 -0.703125 -1.234375 -0.703125q-0.71875 0 -1.15625 0.609375q-0.546875 0.78125 -0.546875 2.90625zm5.595703 0q0 -1.53125 0.3125 -2.453125q0.3125 -0.9375 0.921875 -1.4375q0.625 -0.5 1.5625 -0.5q0.6875 0 1.203125 0.28125q0.53125 0.28125 0.875 0.8125q0.34375 0.515625 0.53125 1.265625q0.1875 0.75 0.1875 2.03125q0 1.515625 -0.3125 2.4375q-0.296875 0.921875 -0.921875 1.4375q-0.609375 0.5 -1.5625 0.5q-1.234375 0 -1.953125 -0.890625q-0.84375 -1.0625 -0.84375 -3.484375zm1.078125 0q0 2.109375 0.5 2.8125q0.5 0.703125 1.21875 0.703125q0.734375 0 1.21875 -0.703125q0.5 -0.703125 0.5 -2.8125q0 -2.125 -0.5 -2.8125q-0.484375 -0.703125 -1.234375 -0.703125q-0.71875 0 -1.15625 0.609375q-0.546875 0.78125 -0.546875 2.90625z" fill-rule="nonzero"/><path fill="#ffffff" d="m548.8294 543.9344l64.56976 0l10.359375 31.055115l-10.359375 31.055115l-64.56976 0l10.359375 -31.055115z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m548.8294 543.9344l64.56976 0l10.359375 31.055115l-10.359375 31.055115l-64.56976 0l10.359375 -31.055115z" fill-rule="evenodd"/><path fill="#000000" d="m577.10645 572.5095l0 -7.140625l-2.546875 0l0 -1.453125l6.8125 0l0 1.453125l-2.53125 0l0 7.140625l-1.734375 0zm10.892578 -3.15625l1.671875 0.53125q-0.375 1.40625 -1.28125 2.09375q-0.90625 0.671875 -2.28125 0.671875q-1.71875 0 -2.828125 -1.15625q-1.09375 -1.171875 -1.09375 -3.203125q0 -2.140625 1.109375 -3.328125q1.109375 -1.1875 2.921875 -1.1875q1.578125 0 2.5625 0.921875q0.578125 0.5625 0.875 1.59375l-1.71875 0.40625q-0.15625 -0.671875 -0.640625 -1.046875q-0.484375 -0.390625 -1.171875 -0.390625q-0.953125 0 -1.546875 0.6875q-0.59375 0.671875 -0.59375 2.21875q0 1.625 0.578125 2.3125q0.59375 0.6875 1.53125 0.6875q0.6875 0 1.1875 -0.4375q0.5 -0.4375 0.71875 -1.375zm3.1660156 3.15625l0 -8.59375l2.78125 0q1.578125 0 2.0625 0.125q0.734375 0.203125 1.234375 0.859375q0.5 0.640625 0.5 1.65625q0 0.796875 -0.296875 1.34375q-0.28125 0.53125 -0.71875 0.84375q-0.4375 0.296875 -0.90625 0.40625q-0.609375 0.125 -1.796875 0.125l-1.125 0l0 3.234375l-1.734375 0zm1.734375 -7.140625l0 2.4375l0.953125 0q1.015625 0 1.359375 -0.125q0.359375 -0.140625 0.546875 -0.421875q0.203125 -0.296875 0.203125 -0.671875q0 -0.46875 -0.28125 -0.765625q-0.28125 -0.3125 -0.703125 -0.390625q-0.296875 -0.0625 -1.234375 -0.0625l-0.84375 0z" fill-rule="nonzero"/><path fill="#000000" d="m578.91504 580.02515l-1.046875 0.078125q-0.140625 -0.625 -0.390625 -0.90625q-0.4375 -0.453125 -1.0625 -0.453125q-0.5 0 -0.890625 0.28125q-0.484375 0.375 -0.78125 1.078125q-0.28125 0.6875 -0.296875 1.96875q0.375 -0.578125 0.921875 -0.859375q0.5625 -0.28125 1.171875 -0.28125q1.046875 0 1.78125 0.78125q0.75 0.78125 0.75 2.0q0 0.8125 -0.359375 1.515625q-0.34375 0.6875 -0.953125 1.0625q-0.609375 0.359375 -1.375 0.359375q-1.328125 0 -2.15625 -0.96875q-0.828125 -0.96875 -0.828125 -3.1875q0 -2.5 0.921875 -3.625q0.796875 -0.984375 2.15625 -0.984375q1.015625 0 1.65625 0.578125q0.65625 0.5625 0.78125 1.5625zm-4.296875 3.703125q0 0.546875 0.21875 1.046875q0.234375 0.484375 0.640625 0.75q0.421875 0.265625 0.890625 0.265625q0.65625 0 1.140625 -0.53125q0.484375 -0.546875 0.484375 -1.46875q0 -0.890625 -0.484375 -1.40625q-0.46875 -0.515625 -1.1875 -0.515625q-0.71875 0 -1.21875 0.515625q-0.484375 0.515625 -0.484375 1.34375zm10.970703 -3.703125l-1.046875 0.078125q-0.140625 -0.625 -0.390625 -0.90625q-0.4375 -0.453125 -1.0625 -0.453125q-0.5 0 -0.890625 0.28125q-0.484375 0.375 -0.78125 1.078125q-0.28125 0.6875 -0.296875 1.96875q0.375 -0.578125 0.921875 -0.859375q0.5625 -0.28125 1.171875 -0.28125q1.046875 0 1.78125 0.78125q0.75 0.78125 0.75 2.0q0 0.8125 -0.359375 1.515625q-0.34375 0.6875 -0.953125 1.0625q-0.609375 0.359375 -1.375 0.359375q-1.328125 0 -2.15625 -0.96875q-0.828125 -0.96875 -0.828125 -3.1875q0 -2.5 0.921875 -3.625q0.796875 -0.984375 2.15625 -0.984375q1.015625 0 1.65625 0.578125q0.65625 0.5625 0.78125 1.5625zm-4.296875 3.703125q0 0.546875 0.21875 1.046875q0.234375 0.484375 0.640625 0.75q0.421875 0.265625 0.890625 0.265625q0.65625 0 1.140625 -0.53125q0.484375 -0.546875 0.484375 -1.46875q0 -0.890625 -0.484375 -1.40625q-0.46875 -0.515625 -1.1875 -0.515625q-0.71875 0 -1.21875 0.515625q-0.484375 0.515625 -0.484375 1.34375zm10.970703 -3.703125l-1.046875 0.078125q-0.140625 -0.625 -0.390625 -0.90625q-0.4375 -0.453125 -1.0625 -0.453125q-0.5 0 -0.890625 0.28125q-0.484375 0.375 -0.78125 1.078125q-0.28125 0.6875 -0.296875 1.96875q0.375 -0.578125 0.921875 -0.859375q0.5625 -0.28125 1.171875 -0.28125q1.046875 0 1.78125 0.78125q0.75 0.78125 0.75 2.0q0 0.8125 -0.359375 1.515625q-0.34375 0.6875 -0.953125 1.0625q-0.609375 0.359375 -1.375 0.359375q-1.328125 0 -2.15625 -0.96875q-0.828125 -0.96875 -0.828125 -3.1875q0 -2.5 0.921875 -3.625q0.796875 -0.984375 2.15625 -0.984375q1.015625 0 1.65625 0.578125q0.65625 0.5625 0.78125 1.5625zm-4.296875 3.703125q0 0.546875 0.21875 1.046875q0.234375 0.484375 0.640625 0.75q0.421875 0.265625 0.890625 0.265625q0.65625 0 1.140625 -0.53125q0.484375 -0.546875 0.484375 -1.46875q0 -0.890625 -0.484375 -1.40625q-0.46875 -0.515625 -1.1875 -0.515625q-0.71875 0 -1.21875 0.515625q-0.484375 0.515625 -0.484375 1.34375zm7.126953 -1.875q-0.65625 -0.25 -0.984375 -0.6875q-0.3125 -0.453125 -0.3125 -1.0625q0 -0.9375 0.671875 -1.578125q0.6875 -0.640625 1.796875 -0.640625q1.125 0 1.8125 0.65625q0.6875 0.65625 0.6875 1.59375q0 0.59375 -0.3125 1.03125q-0.3125 0.4375 -0.953125 0.6875q0.796875 0.25 1.203125 0.828125q0.40625 0.578125 0.40625 1.375q0 1.09375 -0.78125 1.84375q-0.765625 0.75 -2.046875 0.75q-1.265625 0 -2.046875 -0.75q-0.78125 -0.75 -0.78125 -1.875q0 -0.84375 0.421875 -1.40625q0.4375 -0.5625 1.21875 -0.765625zm-0.21875 -1.796875q0 0.609375 0.390625 1.0q0.40625 0.390625 1.03125 0.390625q0.609375 0 1.0 -0.375q0.390625 -0.390625 0.390625 -0.953125q0 -0.578125 -0.40625 -0.96875q-0.40625 -0.40625 -1.0 -0.40625q-0.609375 0 -1.015625 0.390625q-0.390625 0.390625 -0.390625 0.921875zm-0.328125 3.96875q0 0.453125 0.203125 0.875q0.21875 0.421875 0.640625 0.65625q0.421875 0.234375 0.90625 0.234375q0.75 0 1.234375 -0.484375q0.5 -0.484375 0.5 -1.234375q0 -0.765625 -0.5 -1.265625q-0.5 -0.5 -1.265625 -0.5q-0.75 0 -1.234375 0.5q-0.484375 0.484375 -0.484375 1.21875z" fill-rule="nonzero"/><g filter="url(#shadowFilter-p.9)"><use xlink:href="#p.9" transform="matrix(1.0 0.0 0.0 1.0 0.0 2.0)"/></g><defs><filter id="shadowFilter-p.9" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" stdDeviation="2.0" result="blur"/><feComponentTransfer in="blur" color-interpolation-filters="sRGB"><feFuncR type="linear" slope="0" intercept="1.0"/><feFuncG type="linear" slope="0" intercept="1.0"/><feFuncB type="linear" slope="0" intercept="1.0"/><feFuncA type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><g id="p.9"><path fill="#000000" fill-opacity="0.0" d="m182.30446 484.25723c0 45.370087 85.25984 90.74014 170.5197 90.74014" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m182.30446 484.25723c0 22.685028 21.314957 45.370087 53.2874 62.38382c15.986221 8.506897 34.63681 15.596008 54.6196 20.55835c9.991394 2.4811401 20.315826 4.430664 30.806763 5.7598877c5.2454834 0.6645508 10.532593 1.1741333 15.840515 1.5175171c2.6539917 0.17163086 5.313141 0.30181885 7.974884 0.3890381c0.33276367 0.010925293 0.66552734 0.021118164 0.99832153 0.030700684l0.99264526 0.026489258" fill-rule="evenodd"/><path fill="#000000" stroke="#000000" stroke-width="1.0" stroke-linecap="butt" d="m346.80414 576.57465l4.5582275 -1.595398l-4.5173035 -1.7078247z" fill-rule="evenodd"/></g><g filter="url(#shadowFilter-p.10)"><use xlink:href="#p.10" transform="matrix(1.0 0.0 0.0 1.0 0.0 2.0)"/></g><defs><filter id="shadowFilter-p.10" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" stdDeviation="2.0" result="blur"/><feComponentTransfer in="blur" color-interpolation-filters="sRGB"><feFuncR type="linear" slope="0" intercept="1.0"/><feFuncG type="linear" slope="0" intercept="1.0"/><feFuncB type="linear" slope="0" intercept="1.0"/><feFuncA type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><g id="p.10"><path fill="#000000" fill-opacity="0.0" d="m623.75854 574.9895c77.40155 0 154.80316 -45.370056 154.80316 -90.74017" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m623.75854 574.9895c38.700745 0 77.40155 -11.342529 106.427124 -28.356323c14.512817 -8.506836 26.606812 -18.43158 35.07263 -29.065186c4.232849 -5.3168335 7.558716 -10.810852 9.826355 -16.393494c1.1338501 -2.7912903 2.0031128 -5.604767 2.5889282 -8.429352c0.1463623 -0.70614624 0.27514648 -1.4129639 0.38586426 -2.1203003l0.05883789 -0.39190674" fill-rule="evenodd"/><path fill="#000000" stroke="#000000" stroke-width="1.0" stroke-linecap="butt" d="m779.7655 490.355l-1.3118896 -4.647766l-1.982544 4.4036255z" fill-rule="evenodd"/></g><path fill="#000000" fill-opacity="0.0" d="m57.26509 543.9344l250.07875 0l0 103.433044l-250.07875 0z" fill-rule="evenodd"/><path fill="#000000" d="m131.29178 567.0144l0 -8.71875l-3.109375 0l0 -1.765625l8.34375 0l0 1.765625l-3.109375 0l0 8.71875l-2.125 0zm10.489075 0l0 -1.140625q-0.40625 0.609375 -1.09375 0.96875q-0.671875 0.34375 -1.421875 0.34375q-0.765625 0 -1.375 -0.328125q-0.609375 -0.34375 -0.875 -0.953125q-0.265625 -0.609375 -0.265625 -1.6875l0 -4.796875l2.0 0l0 3.484375q0 1.609375 0.109375 1.96875q0.109375 0.359375 0.40625 0.578125q0.296875 0.203125 0.75 0.203125q0.515625 0 0.921875 -0.28125q0.40625 -0.28125 0.546875 -0.703125q0.15625 -0.421875 0.15625 -2.046875l0 -3.203125l2.015625 0l0 7.59375l-1.875 0zm2.9994965 -7.59375l2.140625 0l1.828125 5.390625l1.765625 -5.390625l2.09375 0l-2.6875 7.3125l-0.484375 1.3125q-0.265625 0.671875 -0.515625 1.015625q-0.234375 0.359375 -0.546875 0.578125q-0.296875 0.21875 -0.765625 0.328125q-0.453125 0.125 -1.015625 0.125q-0.578125 0 -1.140625 -0.109375l-0.171875 -1.578125q0.46875 0.09375 0.84375 0.09375q0.703125 0 1.03125 -0.421875q0.34375 -0.40625 0.515625 -1.046875l-2.890625 -7.609375zm10.619858 2.3125l-1.828125 -0.328125q0.296875 -1.109375 1.046875 -1.625q0.765625 -0.53125 2.234375 -0.53125q1.359375 0 2.015625 0.3125q0.65625 0.3125 0.921875 0.8125q0.265625 0.484375 0.265625 1.796875l-0.015625 2.34375q0 1.0 0.09375 1.484375q0.09375 0.46875 0.359375 1.015625l-1.984375 0q-0.078125 -0.203125 -0.203125 -0.59375q-0.046875 -0.171875 -0.0625 -0.234375q-0.515625 0.5 -1.109375 0.75q-0.578125 0.25 -1.25 0.25q-1.171875 0 -1.859375 -0.640625q-0.671875 -0.640625 -0.671875 -1.609375q0 -0.640625 0.3125 -1.140625q0.3125 -0.515625 0.859375 -0.78125q0.5625 -0.265625 1.609375 -0.46875q1.40625 -0.265625 1.953125 -0.484375l0 -0.203125q0 -0.578125 -0.296875 -0.828125q-0.28125 -0.25 -1.078125 -0.25q-0.53125 0 -0.84375 0.21875q-0.296875 0.203125 -0.46875 0.734375zm2.6875 1.625q-0.390625 0.140625 -1.234375 0.328125q-0.828125 0.171875 -1.09375 0.34375q-0.390625 0.265625 -0.390625 0.703125q0 0.421875 0.3125 0.734375q0.3125 0.296875 0.8125 0.296875q0.53125 0 1.03125 -0.359375q0.359375 -0.265625 0.484375 -0.65625q0.078125 -0.265625 0.078125 -0.984375l0 -0.40625zm8.0512085 -6.828125l4.1875 0q1.25 0 1.859375 0.109375q0.609375 0.09375 1.09375 0.421875q0.484375 0.328125 0.796875 0.875q0.328125 0.546875 0.328125 1.234375q0 0.734375 -0.40625 1.359375q-0.390625 0.609375 -1.0625 0.90625q0.953125 0.28125 1.46875 0.953125q0.515625 0.671875 0.515625 1.578125q0 0.71875 -0.328125 1.40625q-0.328125 0.671875 -0.90625 1.078125q-0.578125 0.390625 -1.421875 0.484375q-0.53125 0.0625 -2.5625 0.078125l-3.5625 0l0 -10.484375zm2.109375 1.734375l0 2.4375l1.390625 0q1.234375 0 1.546875 -0.046875q0.53125 -0.0625 0.84375 -0.375q0.3125 -0.3125 0.3125 -0.8125q0 -0.484375 -0.265625 -0.78125q-0.265625 -0.3125 -0.796875 -0.375q-0.3125 -0.046875 -1.8125 -0.046875l-1.21875 0zm0 4.171875l0 2.8125l1.96875 0q1.140625 0 1.453125 -0.0625q0.46875 -0.09375 0.765625 -0.421875q0.296875 -0.328125 0.296875 -0.890625q0 -0.46875 -0.234375 -0.796875q-0.21875 -0.328125 -0.65625 -0.484375q-0.4375 -0.15625 -1.875 -0.15625l-1.71875 0zm10.381149 4.578125l-2.015625 0l0 -7.59375l1.859375 0l0 1.078125q0.484375 -0.765625 0.859375 -1.0q0.390625 -0.25 0.875 -0.25q0.6875 0 1.328125 0.375l-0.625 1.75q-0.5 -0.328125 -0.9375 -0.328125q-0.421875 0 -0.71875 0.234375q-0.296875 0.234375 -0.46875 0.84375q-0.15625 0.609375 -0.15625 2.546875l0 2.34375zm3.3130035 -3.90625q0 -1.0 0.484375 -1.9375q0.5 -0.9375 1.40625 -1.421875q0.90625 -0.5 2.015625 -0.5q1.71875 0 2.828125 1.125q1.109375 1.109375 1.109375 2.8125q0 1.734375 -1.125 2.875q-1.109375 1.125 -2.796875 1.125q-1.046875 0 -2.0 -0.46875q-0.9375 -0.46875 -1.4375 -1.375q-0.484375 -0.921875 -0.484375 -2.234375zm2.046875 0.109375q0 1.125 0.53125 1.734375q0.546875 0.59375 1.34375 0.59375q0.78125 0 1.3125 -0.59375q0.53125 -0.609375 0.53125 -1.75q0 -1.125 -0.53125 -1.71875q-0.53125 -0.609375 -1.3125 -0.609375q-0.796875 0 -1.34375 0.609375q-0.53125 0.59375 -0.53125 1.734375zm8.874496 -1.484375l-1.828125 -0.328125q0.296875 -1.109375 1.046875 -1.625q0.765625 -0.53125 2.234375 -0.53125q1.359375 0 2.015625 0.3125q0.65625 0.3125 0.921875 0.8125q0.265625 0.484375 0.265625 1.796875l-0.015625 2.34375q0 1.0 0.09375 1.484375q0.09375 0.46875 0.359375 1.015625l-1.984375 0q-0.078125 -0.203125 -0.203125 -0.59375q-0.046875 -0.171875 -0.0625 -0.234375q-0.515625 0.5 -1.109375 0.75q-0.578125 0.25 -1.25 0.25q-1.171875 0 -1.859375 -0.640625q-0.671875 -0.640625 -0.671875 -1.609375q0 -0.640625 0.3125 -1.140625q0.3125 -0.515625 0.859375 -0.78125q0.5625 -0.265625 1.609375 -0.46875q1.40625 -0.265625 1.953125 -0.484375l0 -0.203125q0 -0.578125 -0.296875 -0.828125q-0.28125 -0.25 -1.078125 -0.25q-0.53125 0 -0.84375 0.21875q-0.296875 0.203125 -0.46875 0.734375zm2.6875 1.625q-0.390625 0.140625 -1.234375 0.328125q-0.828125 0.171875 -1.09375 0.34375q-0.390625 0.265625 -0.390625 0.703125q0 0.421875 0.3125 0.734375q0.3125 0.296875 0.8125 0.296875q0.53125 0 1.03125 -0.359375q0.359375 -0.265625 0.484375 -0.65625q0.078125 -0.265625 0.078125 -0.984375l0 -0.40625zm10.916733 3.65625l-1.859375 0l0 -1.109375q-0.46875 0.640625 -1.109375 0.96875q-0.625 0.3125 -1.265625 0.3125q-1.3125 0 -2.25 -1.046875q-0.9375 -1.0625 -0.9375 -2.953125q0 -1.9375 0.90625 -2.9375q0.921875 -1.0 2.3125 -1.0q1.265625 0 2.203125 1.046875l0 -3.765625l2.0 0l0 10.484375zm-5.359375 -3.96875q0 1.21875 0.328125 1.765625q0.5 0.78125 1.359375 0.78125q0.703125 0 1.1875 -0.578125q0.484375 -0.59375 0.484375 -1.765625q0 -1.3125 -0.46875 -1.890625q-0.46875 -0.578125 -1.203125 -0.578125q-0.71875 0 -1.203125 0.578125q-0.484375 0.5625 -0.484375 1.6875zm13.968246 -1.390625l-1.96875 0.359375q-0.109375 -0.59375 -0.46875 -0.890625q-0.34375 -0.296875 -0.90625 -0.296875q-0.75 0 -1.203125 0.515625q-0.453125 0.515625 -0.453125 1.734375q0 1.359375 0.453125 1.921875q0.453125 0.546875 1.21875 0.546875q0.578125 0 0.9375 -0.328125q0.375 -0.328125 0.515625 -1.109375l1.984375 0.328125q-0.3125 1.359375 -1.1875 2.0625q-0.875 0.6875 -2.328125 0.6875q-1.671875 0 -2.671875 -1.046875q-0.984375 -1.0625 -0.984375 -2.921875q0 -1.875 0.984375 -2.921875q1.0 -1.046875 2.703125 -1.046875q1.390625 0 2.203125 0.59375q0.828125 0.59375 1.171875 1.8125zm3.0417328 0.078125l-1.828125 -0.328125q0.296875 -1.109375 1.046875 -1.625q0.765625 -0.53125 2.234375 -0.53125q1.359375 0 2.015625 0.3125q0.65625 0.3125 0.921875 0.8125q0.265625 0.484375 0.265625 1.796875l-0.015625 2.34375q0 1.0 0.09375 1.484375q0.09375 0.46875 0.359375 1.015625l-1.984375 0q-0.078125 -0.203125 -0.203125 -0.59375q-0.046875 -0.171875 -0.0625 -0.234375q-0.515625 0.5 -1.109375 0.75q-0.578125 0.25 -1.25 0.25q-1.171875 0 -1.859375 -0.640625q-0.671875 -0.640625 -0.671875 -1.609375q0 -0.640625 0.3125 -1.140625q0.3125 -0.515625 0.859375 -0.78125q0.5625 -0.265625 1.609375 -0.46875q1.40625 -0.265625 1.953125 -0.484375l0 -0.203125q0 -0.578125 -0.296875 -0.828125q-0.28125 -0.25 -1.078125 -0.25q-0.53125 0 -0.84375 0.21875q-0.296875 0.203125 -0.46875 0.734375zm2.6875 1.625q-0.390625 0.140625 -1.234375 0.328125q-0.828125 0.171875 -1.09375 0.34375q-0.390625 0.265625 -0.390625 0.703125q0 0.421875 0.3125 0.734375q0.3125 0.296875 0.8125 0.296875q0.53125 0 1.03125 -0.359375q0.359375 -0.265625 0.484375 -0.65625q0.078125 -0.265625 0.078125 -0.984375l0 -0.40625zm3.2448578 1.484375l2.015625 -0.296875q0.125 0.578125 0.515625 0.890625q0.40625 0.296875 1.109375 0.296875q0.78125 0 1.171875 -0.28125q0.265625 -0.203125 0.265625 -0.546875q0 -0.21875 -0.140625 -0.375q-0.15625 -0.140625 -0.671875 -0.265625q-2.4375 -0.53125 -3.078125 -0.984375q-0.90625 -0.609375 -0.90625 -1.703125q0 -0.984375 0.78125 -1.65625q0.78125 -0.671875 2.421875 -0.671875q1.546875 0 2.3125 0.515625q0.765625 0.5 1.046875 1.484375l-1.90625 0.359375q-0.109375 -0.453125 -0.453125 -0.6875q-0.34375 -0.234375 -0.96875 -0.234375q-0.796875 0 -1.140625 0.21875q-0.234375 0.15625 -0.234375 0.40625q0 0.21875 0.203125 0.375q0.28125 0.203125 1.875 0.5625q1.609375 0.359375 2.25 0.890625q0.625 0.546875 0.625 1.5q0 1.046875 -0.875 1.796875q-0.859375 0.75 -2.578125 0.75q-1.546875 0 -2.453125 -0.625q-0.90625 -0.640625 -1.1875 -1.71875zm12.338608 -5.421875l0 1.59375l-1.375 0l0 3.0625q0 0.9375 0.03125 1.09375q0.046875 0.140625 0.1875 0.25q0.140625 0.09375 0.34375 0.09375q0.28125 0 0.8125 -0.1875l0.171875 1.5625q-0.703125 0.296875 -1.59375 0.296875q-0.546875 0 -0.984375 -0.171875q-0.421875 -0.1875 -0.640625 -0.46875q-0.203125 -0.296875 -0.28125 -0.796875q-0.0625 -0.359375 -0.0625 -1.421875l0 -3.3125l-0.921875 0l0 -1.59375l0.921875 0l0 -1.515625l2.015625 -1.171875l0 2.6875l1.375 0z" fill-rule="nonzero"/><path fill="#000000" d="m157.29988 584.6144l0 -10.484375l3.40625 0q1.921875 0 2.515625 0.15625q0.90625 0.234375 1.515625 1.03125q0.609375 0.78125 0.609375 2.03125q0 0.96875 -0.359375 1.625q-0.34375 0.65625 -0.890625 1.03125q-0.53125 0.375 -1.09375 0.5q-0.765625 0.15625 -2.203125 0.15625l-1.375 0l0 3.953125l-2.125 0zm2.125 -8.71875l0 2.984375l1.15625 0q1.25 0 1.671875 -0.15625q0.421875 -0.171875 0.65625 -0.515625q0.25 -0.359375 0.25 -0.828125q0 -0.578125 -0.34375 -0.9375q-0.328125 -0.375 -0.84375 -0.46875q-0.375 -0.078125 -1.53125 -0.078125l-1.015625 0zm9.150604 3.4375l-1.828125 -0.328125q0.296875 -1.109375 1.046875 -1.625q0.765625 -0.53125 2.234375 -0.53125q1.359375 0 2.015625 0.3125q0.65625 0.3125 0.921875 0.8125q0.265625 0.484375 0.265625 1.796875l-0.015625 2.34375q0 1.0 0.09375 1.484375q0.09375 0.46875 0.359375 1.015625l-1.984375 0q-0.078125 -0.203125 -0.203125 -0.59375q-0.046875 -0.171875 -0.0625 -0.234375q-0.515625 0.5 -1.109375 0.75q-0.578125 0.25 -1.25 0.25q-1.171875 0 -1.859375 -0.640625q-0.671875 -0.640625 -0.671875 -1.609375q0 -0.640625 0.3125 -1.140625q0.3125 -0.515625 0.859375 -0.78125q0.5625 -0.265625 1.609375 -0.46875q1.40625 -0.265625 1.953125 -0.484375l0 -0.203125q0 -0.578125 -0.296875 -0.828125q-0.28125 -0.25 -1.078125 -0.25q-0.53125 0 -0.84375 0.21875q-0.296875 0.203125 -0.46875 0.734375zm2.6875 1.625q-0.390625 0.140625 -1.234375 0.328125q-0.828125 0.171875 -1.09375 0.34375q-0.390625 0.265625 -0.390625 0.703125q0 0.421875 0.3125 0.734375q0.3125 0.296875 0.8125 0.296875q0.53125 0 1.03125 -0.359375q0.359375 -0.265625 0.484375 -0.65625q0.078125 -0.265625 0.078125 -0.984375l0 -0.40625zm2.9948578 -3.9375l2.140625 0l1.828125 5.390625l1.765625 -5.390625l2.09375 0l-2.6875 7.3125l-0.484375 1.3125q-0.265625 0.671875 -0.515625 1.015625q-0.234375 0.359375 -0.546875 0.578125q-0.296875 0.21875 -0.765625 0.328125q-0.453125 0.125 -1.015625 0.125q-0.578125 0 -1.140625 -0.109375l-0.171875 -1.578125q0.46875 0.09375 0.84375 0.09375q0.703125 0 1.03125 -0.421875q0.34375 -0.40625 0.515625 -1.046875l-2.890625 -7.609375zm9.104233 7.59375l0 -10.484375l2.015625 0l0 10.484375l-2.015625 0zm3.6188354 -3.90625q0 -1.0 0.484375 -1.9375q0.5 -0.9375 1.40625 -1.421875q0.90625 -0.5 2.015625 -0.5q1.71875 0 2.828125 1.125q1.109375 1.109375 1.109375 2.8125q0 1.734375 -1.125 2.875q-1.109375 1.125 -2.796875 1.125q-1.046875 0 -2.0 -0.46875q-0.9375 -0.46875 -1.4375 -1.375q-0.484375 -0.921875 -0.484375 -2.234375zm2.046875 0.109375q0 1.125 0.53125 1.734375q0.546875 0.59375 1.34375 0.59375q0.78125 0 1.3125 -0.59375q0.53125 -0.609375 0.53125 -1.75q0 -1.125 -0.53125 -1.71875q-0.53125 -0.609375 -1.3125 -0.609375q-0.796875 0 -1.34375 0.609375q-0.53125 0.59375 -0.53125 1.734375zm8.874512 -1.484375l-1.828125 -0.328125q0.296875 -1.109375 1.046875 -1.625q0.765625 -0.53125 2.234375 -0.53125q1.359375 0 2.015625 0.3125q0.65625 0.3125 0.921875 0.8125q0.265625 0.484375 0.265625 1.796875l-0.015625 2.34375q0 1.0 0.09375 1.484375q0.09375 0.46875 0.359375 1.015625l-1.984375 0q-0.078125 -0.203125 -0.203125 -0.59375q-0.046875 -0.171875 -0.0625 -0.234375q-0.515625 0.5 -1.109375 0.75q-0.578125 0.25 -1.25 0.25q-1.171875 0 -1.859375 -0.640625q-0.671875 -0.640625 -0.671875 -1.609375q0 -0.640625 0.3125 -1.140625q0.3125 -0.515625 0.859375 -0.78125q0.5625 -0.265625 1.609375 -0.46875q1.40625 -0.265625 1.953125 -0.484375l0 -0.203125q0 -0.578125 -0.296875 -0.828125q-0.28125 -0.25 -1.078125 -0.25q-0.53125 0 -0.84375 0.21875q-0.296875 0.203125 -0.46875 0.734375zm2.6875 1.625q-0.390625 0.140625 -1.234375 0.328125q-0.828125 0.171875 -1.09375 0.34375q-0.390625 0.265625 -0.390625 0.703125q0 0.421875 0.3125 0.734375q0.3125 0.296875 0.8125 0.296875q0.53125 0 1.03125 -0.359375q0.359375 -0.265625 0.484375 -0.65625q0.078125 -0.265625 0.078125 -0.984375l0 -0.40625zm10.916718 3.65625l-1.859375 0l0 -1.109375q-0.46875 0.640625 -1.109375 0.96875q-0.625 0.3125 -1.265625 0.3125q-1.3125 0 -2.25 -1.046875q-0.9375 -1.0625 -0.9375 -2.953125q0 -1.9375 0.90625 -2.9375q0.921875 -1.0 2.3125 -1.0q1.265625 0 2.203125 1.046875l0 -3.765625l2.0 0l0 10.484375zm-5.359375 -3.96875q0 1.21875 0.328125 1.765625q0.5 0.78125 1.359375 0.78125q0.703125 0 1.1875 -0.578125q0.484375 -0.59375 0.484375 -1.765625q0 -1.3125 -0.46875 -1.890625q-0.46875 -0.578125 -1.203125 -0.578125q-0.71875 0 -1.203125 0.578125q-0.484375 0.5625 -0.484375 1.6875z" fill-rule="nonzero"/><path fill="#000000" d="m82.53941 612.95q0.5 -0.015625 0.8125 -0.265625q0.3125 -0.265625 0.421875 -0.703125q0.109375 -0.453125 0.109375 -1.53125q0 -1.09375 0.03125 -1.4375q0.0625 -0.546875 0.21875 -0.875q0.171875 -0.34375 0.40625 -0.53125q0.234375 -0.203125 0.59375 -0.3125q0.25 -0.0625 0.8125 -0.0625l0.359375 0l0 1.015625l-0.203125 0q-0.671875 0 -0.90625 0.25q-0.21875 0.25 -0.21875 1.09375q0 1.703125 -0.0625 2.15625q-0.125 0.6875 -0.40625 1.078125q-0.28125 0.375 -0.890625 0.65625q0.71875 0.296875 1.03125 0.921875q0.328125 0.609375 0.328125 2.015625q0 1.265625 0.03125 1.5q0.046875 0.453125 0.25 0.625q0.21875 0.171875 0.84375 0.171875l0.203125 0l0 1.03125l-0.359375 0q-0.640625 0 -0.9375 -0.109375q-0.40625 -0.15625 -0.6875 -0.5q-0.265625 -0.328125 -0.359375 -0.84375q-0.078125 -0.5 -0.078125 -1.671875q0 -1.171875 -0.109375 -1.625q-0.109375 -0.453125 -0.421875 -0.703125q-0.3125 -0.265625 -0.8125 -0.28125l0 -1.0625zm4.9670105 -2.171875l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.5445862 -2.03125l0 -1.359375l1.171875 0l0 1.359375l-1.171875 0zm0 8.1875l0 -6.90625l1.171875 0l0 6.90625l-1.171875 0zm2.945465 2.65625l0 -9.5625l1.078125 0l0 0.890625q0.375 -0.53125 0.84375 -0.78125q0.484375 -0.265625 1.15625 -0.265625q0.875 0 1.546875 0.453125q0.6875 0.453125 1.03125 1.28125q0.34375 0.828125 0.34375 1.828125q0 1.046875 -0.375 1.90625q-0.375 0.84375 -1.109375 1.296875q-0.71875 0.453125 -1.53125 0.453125q-0.578125 0 -1.046875 -0.25q-0.46875 -0.25 -0.765625 -0.625l0 3.375l-1.171875 0zm1.0625 -6.078125q0 1.34375 0.53125 1.984375q0.546875 0.625 1.3125 0.625q0.78125 0 1.34375 -0.65625q0.5625 -0.65625 0.5625 -2.046875q0 -1.3125 -0.546875 -1.96875q-0.546875 -0.671875 -1.296875 -0.671875q-0.75 0 -1.328125 0.703125q-0.578125 0.703125 -0.578125 2.03125zm6.3656006 -2.734375l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.8414612 6.15625l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm7.1091003 -6.15625l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.3102112 6.734375l1.140625 0.15625q0.078125 0.53125 0.40625 0.78125q0.4375 0.3125 1.1875 0.3125q0.8125 0 1.25 -0.328125q0.453125 -0.3125 0.609375 -0.90625q0.09375 -0.359375 0.078125 -1.5q-0.765625 0.90625 -1.90625 0.90625q-1.4375 0 -2.21875 -1.03125q-0.78125 -1.03125 -0.78125 -2.46875q0 -0.984375 0.359375 -1.8125q0.359375 -0.84375 1.03125 -1.296875q0.6875 -0.453125 1.609375 -0.453125q1.21875 0 2.015625 0.984375l0 -0.828125l1.078125 0l0 5.96875q0 1.609375 -0.328125 2.28125q-0.328125 0.6875 -1.046875 1.078125q-0.703125 0.390625 -1.75 0.390625q-1.234375 0 -2.0 -0.5625q-0.75 -0.5625 -0.734375 -1.671875zm0.984375 -4.15625q0 1.359375 0.53125 1.984375q0.546875 0.625 1.359375 0.625q0.796875 0 1.34375 -0.625q0.546875 -0.625 0.546875 -1.953125q0 -1.265625 -0.5625 -1.90625q-0.5625 -0.640625 -1.359375 -0.640625q-0.765625 0 -1.3125 0.640625q-0.546875 0.625 -0.546875 1.875zm7.9281006 3.578125l-2.125 -6.90625l1.21875 0l1.09375 3.984375l0.421875 1.484375q0.015625 -0.109375 0.359375 -1.421875l1.09375 -4.046875l1.203125 0l1.03125 4.0l0.34375 1.328125l0.40625 -1.34375l1.171875 -3.984375l1.140625 0l-2.15625 6.90625l-1.21875 0l-1.09375 -4.140625l-0.265625 -1.171875l-1.40625 5.3125l-1.21875 0zm8.718903 0l0 -9.546875l1.25 0l0 9.546875l-1.25 0zm7.8123627 0l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm6.6468506 -2.703125l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.8414612 6.15625l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm7.1091003 -6.15625l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm7.044586 5.296875q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm7.5062256 0.9375l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm4.7109375 1.484375l0.171875 1.03125q-0.5 0.109375 -0.890625 0.109375q-0.640625 0 -1.0 -0.203125q-0.34375 -0.203125 -0.484375 -0.53125q-0.140625 -0.328125 -0.140625 -1.390625l0 -3.96875l-0.859375 0l0 -0.90625l0.859375 0l0 -1.71875l1.171875 -0.703125l0 2.421875l1.171875 0l0 0.90625l-1.171875 0l0 4.046875q0 0.5 0.046875 0.640625q0.0625 0.140625 0.203125 0.234375q0.140625 0.078125 0.40625 0.078125q0.203125 0 0.515625 -0.046875zm1.1561127 -7.140625l0 -1.359375l1.171875 0l0 1.359375l-1.171875 0zm0 8.1875l0 -6.90625l1.171875 0l0 6.90625l-1.171875 0zm4.86734 0l-2.625 -6.90625l1.234375 0l1.484375 4.140625q0.234375 0.65625 0.4375 1.390625q0.15625 -0.546875 0.4375 -1.3125l1.53125 -4.21875l1.21875 0l-2.625 6.90625l-1.09375 0zm9.4765625 -2.21875l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.5374756 -2.03125l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.8414612 6.15625l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm7.1091003 -6.15625l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm7.044586 5.296875q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm4.0687256 3.46875l-1.078125 0l0 -9.546875l1.171875 0l0 3.40625q0.734375 -0.921875 1.890625 -0.921875q0.640625 0 1.203125 0.265625q0.578125 0.25 0.9375 0.71875q0.375 0.453125 0.578125 1.109375q0.203125 0.65625 0.203125 1.40625q0 1.78125 -0.875 2.75q-0.875 0.96875 -2.109375 0.96875q-1.21875 0 -1.921875 -1.015625l0 0.859375zm0 -3.5q0 1.234375 0.328125 1.78125q0.5625 0.90625 1.5 0.90625q0.765625 0 1.328125 -0.65625q0.5625 -0.671875 0.5625 -2.0q0 -1.34375 -0.546875 -1.984375q-0.53125 -0.65625 -1.296875 -0.65625q-0.765625 0 -1.328125 0.671875q-0.546875 0.671875 -0.546875 1.9375zm6.3499756 -4.6875l0 -1.359375l1.171875 0l0 1.359375l-1.171875 0zm0 8.1875l0 -6.90625l1.171875 0l0 6.90625l-1.171875 0zm2.92984 0l0 -9.546875l1.171875 0l0 9.546875l-1.171875 0zm2.99234 -8.1875l0 -1.359375l1.171875 0l0 1.359375l-1.171875 0zm0 8.1875l0 -6.90625l1.171875 0l0 6.90625l-1.171875 0zm5.507965 -1.046875l0.171875 1.03125q-0.5 0.109375 -0.890625 0.109375q-0.640625 0 -1.0 -0.203125q-0.34375 -0.203125 -0.484375 -0.53125q-0.140625 -0.328125 -0.140625 -1.390625l0 -3.96875l-0.859375 0l0 -0.90625l0.859375 0l0 -1.71875l1.171875 -0.703125l0 2.421875l1.171875 0l0 0.90625l-1.171875 0l0 4.046875q0 0.5 0.046875 0.640625q0.0625 0.140625 0.203125 0.234375q0.140625 0.078125 0.40625 0.078125q0.203125 0 0.515625 -0.046875zm1.0936127 3.703125l-0.125 -1.09375q0.375 0.109375 0.65625 0.109375q0.390625 0 0.625 -0.140625q0.234375 -0.125 0.390625 -0.359375q0.109375 -0.171875 0.359375 -0.875q0.03125 -0.09375 0.109375 -0.28125l-2.625 -6.921875l1.265625 0l1.4375 4.0q0.28125 0.765625 0.5 1.59375q0.203125 -0.796875 0.46875 -1.578125l1.484375 -4.015625l1.171875 0l-2.625 7.015625q-0.421875 1.140625 -0.65625 1.578125q-0.3125 0.578125 -0.71875 0.84375q-0.40625 0.28125 -0.96875 0.28125q-0.328125 0 -0.75 -0.15625zm6.7265625 -8.8125l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm6.247574 0l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.5289612 6.15625l0 -6.90625l1.046875 0l0 0.96875q0.328125 -0.515625 0.859375 -0.8125q0.546875 -0.3125 1.234375 -0.3125q0.78125 0 1.265625 0.3125q0.484375 0.3125 0.6875 0.890625q0.828125 -1.203125 2.140625 -1.203125q1.03125 0 1.578125 0.578125q0.5625 0.5625 0.5625 1.734375l0 4.75l-1.171875 0l0 -4.359375q0 -0.703125 -0.125 -1.0q-0.109375 -0.3125 -0.40625 -0.5q-0.296875 -0.1875 -0.703125 -0.1875q-0.71875 0 -1.203125 0.484375q-0.484375 0.484375 -0.484375 1.546875l0 4.015625l-1.171875 0l0 -4.484375q0 -0.78125 -0.296875 -1.171875q-0.28125 -0.390625 -0.921875 -0.390625q-0.5 0 -0.921875 0.265625q-0.421875 0.25 -0.609375 0.75q-0.1875 0.5 -0.1875 1.453125l0 3.578125l-1.171875 0zm10.664932 -3.453125q0 -1.921875 1.078125 -2.84375q0.890625 -0.765625 2.171875 -0.765625q1.421875 0 2.328125 0.9375q0.90625 0.921875 0.90625 2.578125q0 1.328125 -0.40625 2.09375q-0.390625 0.765625 -1.15625 1.1875q-0.765625 0.421875 -1.671875 0.421875q-1.453125 0 -2.359375 -0.921875q-0.890625 -0.9375 -0.890625 -2.6875zm1.203125 0q0 1.328125 0.578125 1.984375q0.59375 0.65625 1.46875 0.65625q0.875 0 1.453125 -0.65625q0.578125 -0.671875 0.578125 -2.03125q0 -1.28125 -0.59375 -1.9375q-0.578125 -0.65625 -1.4375 -0.65625q-0.875 0 -1.46875 0.65625q-0.578125 0.65625 -0.578125 1.984375zm11.131226 3.453125l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm11.365601 1.234375l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.5374756 -2.03125l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.8414612 6.15625l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0z" fill-rule="nonzero"/><path fill="#000000" d="m73.371346 626.77814l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm7.263336 3.9375l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.5218506 4.125l0 -6.90625l1.0625 0l0 0.984375q0.75 -1.140625 2.1875 -1.140625q0.625 0 1.15625 0.21875q0.53125 0.21875 0.78125 0.59375q0.265625 0.359375 0.375 0.859375q0.0625 0.328125 0.0625 1.140625l0 4.25l-1.171875 0l0 -4.203125q0 -0.71875 -0.140625 -1.0625q-0.140625 -0.359375 -0.484375 -0.5625q-0.34375 -0.21875 -0.8125 -0.21875q-0.75 0 -1.296875 0.46875q-0.546875 0.46875 -0.546875 1.796875l0 3.78125l-1.171875 0zm11.928101 -2.53125l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm2.1328125 2.53125l0 -6.90625l1.0625 0l0 1.046875q0.40625 -0.734375 0.734375 -0.96875q0.34375 -0.234375 0.765625 -0.234375q0.59375 0 1.203125 0.375l-0.40625 1.078125q-0.4375 -0.25 -0.859375 -0.25q-0.390625 0 -0.703125 0.234375q-0.296875 0.234375 -0.421875 0.640625q-0.203125 0.625 -0.203125 1.359375l0 3.625l-1.171875 0zm4.4071198 2.65625l-0.125 -1.09375q0.375 0.109375 0.65625 0.109375q0.390625 0 0.625 -0.140625q0.234375 -0.125 0.390625 -0.359375q0.109375 -0.171875 0.359375 -0.875q0.03125 -0.09375 0.109375 -0.28125l-2.625 -6.921875l1.265625 0l1.4375 4.0q0.28125 0.765625 0.5 1.59375q0.203125 -0.796875 0.46875 -1.578125l1.484375 -4.015625l1.171875 0l-2.625 7.015625q-0.421875 1.140625 -0.65625 1.578125q-0.3125 0.578125 -0.71875 0.84375q-0.40625 0.28125 -0.96875 0.28125q-0.328125 0 -0.75 -0.15625zm6.7109375 0l0 -9.5625l1.078125 0l0 0.890625q0.375 -0.53125 0.84375 -0.78125q0.484375 -0.265625 1.15625 -0.265625q0.875 0 1.546875 0.453125q0.6875 0.453125 1.03125 1.28125q0.34375 0.828125 0.34375 1.828125q0 1.046875 -0.375 1.90625q-0.375 0.84375 -1.109375 1.296875q-0.71875 0.453125 -1.53125 0.453125q-0.578125 0 -1.046875 -0.25q-0.46875 -0.25 -0.765625 -0.625l0 3.375l-1.171875 0zm1.0625 -6.078125q0 1.34375 0.53125 1.984375q0.546875 0.625 1.3125 0.625q0.78125 0 1.34375 -0.65625q0.5625 -0.65625 0.5625 -2.046875q0 -1.3125 -0.546875 -1.96875q-0.546875 -0.671875 -1.296875 -0.671875q-0.75 0 -1.328125 0.703125q-0.578125 0.703125 -0.578125 2.03125zm8.912476 2.375l0.171875 1.03125q-0.5 0.109375 -0.890625 0.109375q-0.640625 0 -1.0 -0.203125q-0.34375 -0.203125 -0.484375 -0.53125q-0.140625 -0.328125 -0.140625 -1.390625l0 -3.96875l-0.859375 0l0 -0.90625l0.859375 0l0 -1.71875l1.171875 -0.703125l0 2.421875l1.171875 0l0 0.90625l-1.171875 0l0 4.046875q0 0.5 0.046875 0.640625q0.0625 0.140625 0.203125 0.234375q0.140625 0.078125 0.40625 0.078125q0.203125 0 0.515625 -0.046875zm1.1561127 -5.109375l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.8414612 6.15625l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm7.109108 -6.15625l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.5289612 8.8125l0 -9.5625l1.078125 0l0 0.890625q0.375 -0.53125 0.84375 -0.78125q0.484375 -0.265625 1.15625 -0.265625q0.875 0 1.546875 0.453125q0.6875 0.453125 1.03125 1.28125q0.34375 0.828125 0.34375 1.828125q0 1.046875 -0.375 1.90625q-0.375 0.84375 -1.109375 1.296875q-0.71875 0.453125 -1.53125 0.453125q-0.578125 0 -1.046875 -0.25q-0.46875 -0.25 -0.765625 -0.625l0 3.375l-1.171875 0zm1.0625 -6.078125q0 1.34375 0.53125 1.984375q0.546875 0.625 1.3125 0.625q0.78125 0 1.34375 -0.65625q0.5625 -0.65625 0.5625 -2.046875q0 -1.3125 -0.546875 -1.96875q-0.546875 -0.671875 -1.296875 -0.671875q-0.75 0 -1.328125 0.703125q-0.578125 0.703125 -0.578125 2.03125zm6.3343506 3.421875l0 -6.90625l1.0625 0l0 1.046875q0.40625 -0.734375 0.734375 -0.96875q0.34375 -0.234375 0.765625 -0.234375q0.59375 0 1.203125 0.375l-0.40625 1.078125q-0.4375 -0.25 -0.859375 -0.25q-0.390625 0 -0.703125 0.234375q-0.296875 0.234375 -0.421875 0.640625q-0.203125 0.625 -0.203125 1.359375l0 3.625l-1.171875 0zm4.0164948 -3.453125q0 -1.921875 1.078125 -2.84375q0.890625 -0.765625 2.171875 -0.765625q1.421875 0 2.328125 0.9375q0.90625 0.921875 0.90625 2.578125q0 1.328125 -0.40625 2.09375q-0.390625 0.765625 -1.15625 1.1875q-0.765625 0.421875 -1.671875 0.421875q-1.453125 0 -2.359375 -0.921875q-0.890625 -0.9375 -0.890625 -2.6875zm1.203125 0q0 1.328125 0.578125 1.984375q0.59375 0.65625 1.46875 0.65625q0.875 0 1.453125 -0.65625q0.578125 -0.671875 0.578125 -2.03125q0 -1.28125 -0.59375 -1.9375q-0.578125 -0.65625 -1.4375 -0.65625q-0.875 0 -1.46875 0.65625q-0.578125 0.65625 -0.578125 1.984375zm11.131226 3.453125l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm11.162476 3.453125l0 -1.015625q-0.8125 1.171875 -2.1875 1.171875q-0.609375 0 -1.140625 -0.234375q-0.53125 -0.234375 -0.796875 -0.578125q-0.25 -0.359375 -0.359375 -0.875q-0.0625 -0.34375 -0.0625 -1.09375l0 -4.28125l1.171875 0l0 3.828125q0 0.921875 0.0625 1.234375q0.109375 0.46875 0.46875 0.734375q0.359375 0.25 0.890625 0.25q0.515625 0 0.984375 -0.265625q0.46875 -0.265625 0.65625 -0.734375q0.1875 -0.46875 0.1875 -1.34375l0 -3.703125l1.171875 0l0 6.90625l-1.046875 0zm7.3968506 -2.53125l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm4.7109375 1.484375l0.171875 1.03125q-0.5 0.109375 -0.890625 0.109375q-0.640625 0 -1.0 -0.203125q-0.34375 -0.203125 -0.484375 -0.53125q-0.140625 -0.328125 -0.140625 -1.390625l0 -3.96875l-0.859375 0l0 -0.90625l0.859375 0l0 -1.71875l1.171875 -0.703125l0 2.421875l1.171875 0l0 0.90625l-1.171875 0l0 4.046875q0 0.5 0.046875 0.640625q0.0625 0.140625 0.203125 0.234375q0.140625 0.078125 0.40625 0.078125q0.203125 0 0.515625 -0.046875zm1.2342377 1.046875l0 -9.546875l1.265625 0l0 4.734375l4.734375 -4.734375l1.71875 0l-4.0 3.875l4.171875 5.671875l-1.65625 0l-3.40625 -4.828125l-1.5625 1.515625l0 3.3125l-1.265625 0zm13.530365 -2.21875l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.89060974 -0.9375 -0.89060974 -2.609375q0 -1.75 0.89060974 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.4749756 6.78125l-0.125 -1.09375q0.375 0.109375 0.65625 0.109375q0.390625 0 0.625 -0.140625q0.234375 -0.125 0.390625 -0.359375q0.109375 -0.171875 0.359375 -0.875q0.03125 -0.09375 0.109375 -0.28125l-2.625 -6.921875l1.265625 0l1.4375 4.0q0.28125 0.765625 0.5 1.59375q0.203125 -0.796875 0.46875 -1.578125l1.484375 -4.015625l1.171875 0l-2.625 7.015625q-0.421875 1.140625 -0.65625 1.578125q-0.3125 0.578125 -0.71875 0.84375q-0.40625 0.28125 -0.96875 0.28125q-0.328125 0 -0.75 -0.15625zm6.7265625 -8.8125l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.8414612 6.15625l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm7.1091003 -6.15625l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm4.450836 6.15625l-2.625 -6.90625l1.234375 0l1.484375 4.140625q0.234375 0.65625 0.4375 1.390625q0.15625 -0.546875 0.4375 -1.3125l1.53125 -4.21875l1.21875 0l-2.625 6.90625l-1.09375 0zm9.4765625 -2.21875l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.5062256 4.125l0 -6.90625l1.0625 0l0 1.046875q0.40625 -0.734375 0.734375 -0.96875q0.34375 -0.234375 0.765625 -0.234375q0.59375 0 1.203125 0.375l-0.40625 1.078125q-0.4375 -0.25 -0.859375 -0.25q-0.390625 0 -0.703125 0.234375q-0.296875 0.234375 -0.421875 0.640625q-0.203125 0.625 -0.203125 1.359375l0 3.625l-1.171875 0zm3.98526 -2.0625l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm7.1484375 -6.125l0 -1.359375l1.171875 0l0 1.359375l-1.171875 0zm0 8.1875l0 -6.90625l1.171875 0l0 6.90625l-1.171875 0zm2.507965 -3.453125q0 -1.921875 1.078125 -2.84375q0.890625 -0.765625 2.171875 -0.765625q1.421875 0 2.328125 0.9375q0.90625 0.921875 0.90625 2.578125q0 1.328125 -0.40625 2.09375q-0.390625 0.765625 -1.15625 1.1875q-0.765625 0.421875 -1.671875 0.421875q-1.453125 0 -2.359375 -0.921875q-0.890625 -0.9375 -0.890625 -2.6875zm1.203125 0q0 1.328125 0.578125 1.984375q0.59375 0.65625 1.46875 0.65625q0.875 0 1.453125 -0.65625q0.578125 -0.671875 0.578125 -2.03125q0 -1.28125 -0.59375 -1.9375q-0.578125 -0.65625 -1.4375 -0.65625q-0.875 0 -1.46875 0.65625q-0.578125 0.65625 -0.578125 1.984375zm6.6468506 3.453125l0 -6.90625l1.0625 0l0 0.984375q0.75 -1.140625 2.1875 -1.140625q0.625 0 1.15625 0.21875q0.53125 0.21875 0.78125 0.59375q0.265625 0.359375 0.375 0.859375q0.0625 0.328125 0.0625 1.140625l0 4.25l-1.171875 0l0 -4.203125q0 -0.71875 -0.140625 -1.0625q-0.140625 -0.359375 -0.484375 -0.5625q-0.34375 -0.21875 -0.8125 -0.21875q-0.75 0 -1.296875 0.46875q-0.546875 0.46875 -0.546875 1.796875l0 3.78125l-1.171875 0zm7.4281006 -6.15625l-0.3125 -1.796875l0 -1.59375l1.3437653 0l0 1.59375l-0.31251526 1.796875l-0.71875 0zm2.8571014 0.578125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0zm0 5.578125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0zm7.0934753 -6.15625l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm2.2164612 3.640625l1.171875 -0.15625q0.203125 1.0 0.6875 1.4375q0.484375 0.4375 1.171875 0.4375q0.828125 0 1.390625 -0.578125q0.578125 -0.578125 0.578125 -1.421875q0 -0.796875 -0.53125 -1.3125q-0.515625 -0.53125 -1.328125 -0.53125q-0.34375 0 -0.828125 0.125l0.125 -1.03125q0.125 0.015625 0.1875 0.015625q0.75 0 1.34375 -0.390625q0.609375 -0.390625 0.609375 -1.203125q0 -0.640625 -0.4375 -1.0625q-0.4375 -0.421875 -1.125 -0.421875q-0.6875 0 -1.140625 0.4375q-0.453125 0.421875 -0.59375 1.28125l-1.171875 -0.21875q0.21875 -1.171875 0.984375 -1.8125q0.765625 -0.65625 1.890625 -0.65625q0.78125 0 1.4375 0.34375q0.65625 0.328125 1.0 0.90625q0.359375 0.578125 0.359375 1.234375q0 0.609375 -0.34375 1.125q-0.328125 0.5 -0.96875 0.796875q0.84375 0.203125 1.3125 0.828125q0.46875 0.609375 0.46875 1.53125q0 1.25 -0.921875 2.125q-0.90625 0.859375 -2.296875 0.859375q-1.25 0 -2.09375 -0.75q-0.828125 -0.75 -0.9375 -1.9375zm8.053101 2.515625l0 -1.328125l1.34375 0l0 1.328125l-1.34375 0zm3.0623474 -2.515625l1.171875 -0.15625q0.203125 1.0 0.6875 1.4375q0.484375 0.4375 1.171875 0.4375q0.828125 0 1.390625 -0.578125q0.578125 -0.578125 0.578125 -1.421875q0 -0.796875 -0.53125 -1.3125q-0.515625 -0.53125 -1.328125 -0.53125q-0.34375 0 -0.828125 0.125l0.125 -1.03125q0.125 0.015625 0.1875 0.015625q0.75 0 1.34375 -0.390625q0.609375 -0.390625 0.609375 -1.203125q0 -0.640625 -0.4375 -1.0625q-0.4375 -0.421875 -1.125 -0.421875q-0.6875 0 -1.140625 0.4375q-0.453125 0.421875 -0.59375 1.28125l-1.171875 -0.21875q0.21875 -1.171875 0.984375 -1.8125q0.765625 -0.65625 1.890625 -0.65625q0.78125 0 1.4375 0.34375q0.65625 0.328125 1.0 0.90625q0.359375 0.578125 0.359375 1.234375q0 0.609375 -0.34375 1.125q-0.328125 0.5 -0.96875 0.796875q0.84375 0.203125 1.3125 0.828125q0.46875 0.609375 0.46875 1.53125q0 1.25 -0.921875 2.125q-0.90625 0.859375 -2.296875 0.859375q-1.25 0 -2.09375 -0.75q-0.828125 -0.75 -0.9375 -1.9375zm7.7406006 -3.640625l-0.3125 -1.796875l0 -1.59375l1.34375 0l0 1.59375l-0.3125 1.796875l-0.71875 0zm5.732086 2.171875l0 1.0625q-0.5 0.015625 -0.828125 0.28125q-0.3125 0.25 -0.421875 0.703125q-0.09375 0.4375 -0.109375 1.53125q0 1.078125 -0.03125 1.421875q-0.0625 0.5625 -0.21875 0.890625q-0.15625 0.328125 -0.390625 0.515625q-0.234375 0.203125 -0.59375 0.3125q-0.25 0.078125 -0.8125 0.078125l-0.359375 0l0 -1.03125l0.1875 0q0.6875 0 0.90625 -0.25q0.21875 -0.234375 0.21875 -1.09375q0 -1.625 0.0625 -2.0625q0.109375 -0.71875 0.421875 -1.140625q0.3125 -0.4375 0.875 -0.6875q-0.75 -0.359375 -1.0625 -0.9375q-0.296875 -0.59375 -0.296875 -2.0q0 -1.265625 -0.03125 -1.515625q-0.046875 -0.4375 -0.265625 -0.609375q-0.203125 -0.171875 -0.828125 -0.171875l-0.1875 0l0 -1.015625l0.359375 0q0.640625 0 0.921875 0.109375q0.421875 0.140625 0.6875 0.484375q0.28125 0.328125 0.359375 0.84375q0.078125 0.515625 0.078125 1.6875q0.015625 1.171875 0.109375 1.625q0.109375 0.4375 0.421875 0.703125q0.328125 0.25 0.828125 0.265625z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m651.57745 521.85565l284.0315 0l0 232.69293l-284.0315 0z" fill-rule="evenodd"/><path fill="#000000" d="m759.2799 544.93567l0 -8.71875l-3.109375 0l0 -1.765625l8.34375 0l0 1.765625l-3.109375 0l0 8.71875l-2.125 0zm10.489075 0l0 -1.140625q-0.40625 0.609375 -1.09375 0.96875q-0.671875 0.34375 -1.421875 0.34375q-0.765625 0 -1.375 -0.328125q-0.609375 -0.34375 -0.875 -0.953125q-0.265625 -0.609375 -0.265625 -1.6875l0 -4.796875l2.0 0l0 3.484375q0 1.609375 0.109375 1.96875q0.109375 0.359375 0.40625 0.578125q0.296875 0.203125 0.75 0.203125q0.515625 0 0.921875 -0.28125q0.40625 -0.28125 0.546875 -0.703125q0.15625 -0.421875 0.15625 -2.046875l0 -3.203125l2.015625 0l0 7.59375l-1.875 0zm2.9994507 -7.59375l2.140625 0l1.828125 5.390625l1.765625 -5.390625l2.093811 0l-2.687561 7.3125l-0.484375 1.3125q-0.265625 0.671875 -0.515625 1.015625q-0.234375 0.359375 -0.546875 0.578125q-0.296875 0.21875 -0.765625 0.328125q-0.453125 0.125 -1.015625 0.125q-0.578125 0 -1.140625 -0.109375l-0.171875 -1.578125q0.46875 0.09375 0.84375 0.09375q0.703125 0 1.03125 -0.421875q0.34375 -0.40625 0.515625 -1.046875l-2.890625 -7.609375zm10.619873 2.3125l-1.828125 -0.328125q0.296875 -1.109375 1.046875 -1.625q0.765625 -0.53125 2.234375 -0.53125q1.359375 0 2.015625 0.3125q0.65625 0.3125 0.921875 0.8125q0.265625 0.484375 0.265625 1.796875l-0.015625 2.34375q0 1.0 0.09375 1.484375q0.09375 0.46875 0.359375 1.015625l-1.984375 0q-0.078125 -0.203125 -0.203125 -0.59375q-0.046875 -0.171875 -0.0625 -0.234375q-0.515625 0.5 -1.109375 0.75q-0.578125 0.25 -1.25 0.25q-1.171875 0 -1.859375 -0.640625q-0.671875 -0.640625 -0.671875 -1.609375q0 -0.640625 0.3125 -1.140625q0.3125 -0.515625 0.859375 -0.78125q0.5625 -0.265625 1.609375 -0.46875q1.40625 -0.265625 1.953125 -0.484375l0 -0.203125q0 -0.578125 -0.296875 -0.828125q-0.28125 -0.25 -1.078125 -0.25q-0.53125 0 -0.84375 0.21875q-0.296875 0.203125 -0.46875 0.734375zm2.6875 1.625q-0.390625 0.140625 -1.234375 0.328125q-0.828125 0.171875 -1.09375 0.34375q-0.390625 0.265625 -0.390625 0.703125q0 0.421875 0.3125 0.734375q0.3125 0.296875 0.8125 0.296875q0.53125 0 1.03125 -0.359375q0.359375 -0.265625 0.484375 -0.65625q0.078125 -0.265625 0.078125 -0.984375l0 -0.40625zm8.0980835 3.65625l0 -10.40625l2.109375 0l0 8.640625l5.28125 0l0 1.765625l-7.390625 0zm8.421387 -3.90625q0 -1.0 0.484375 -1.9375q0.5 -0.9375 1.40625 -1.421875q0.90625 -0.5 2.015625 -0.5q1.71875 0 2.828125 1.125q1.109375 1.109375 1.109375 2.8125q0 1.734375 -1.125 2.875q-1.109375 1.125 -2.796875 1.125q-1.046875 0 -2.0 -0.46875q-0.9375 -0.46875 -1.4375 -1.375q-0.484375 -0.921875 -0.484375 -2.234375zm2.046875 0.109375q0 1.125 0.53125 1.734375q0.546875 0.59375 1.34375 0.59375q0.78125 0 1.3125 -0.59375q0.53125 -0.609375 0.53125 -1.75q0 -1.125 -0.53125 -1.71875q-0.53125 -0.609375 -1.3125 -0.609375q-0.796875 0 -1.34375 0.609375q-0.53125 0.59375 -0.53125 1.734375zm13.983887 -1.5625l-1.96875 0.359375q-0.109375 -0.59375 -0.46875 -0.890625q-0.34375 -0.296875 -0.90625 -0.296875q-0.75 0 -1.203125 0.515625q-0.453125 0.515625 -0.453125 1.734375q0 1.359375 0.453125 1.921875q0.453125 0.546875 1.21875 0.546875q0.578125 0 0.9375 -0.328125q0.375 -0.328125 0.515625 -1.109375l1.984375 0.328125q-0.3125 1.359375 -1.1875 2.0625q-0.875 0.6875 -2.328125 0.6875q-1.671875 0 -2.671875 -1.046875q-0.984375 -1.0625 -0.984375 -2.921875q0 -1.875 0.984375 -2.921875q1.0 -1.046875 2.703125 -1.046875q1.390625 0 2.203125 0.59375q0.828125 0.59375 1.171875 1.8125zm3.041748 0.078125l-1.828125 -0.328125q0.296875 -1.109375 1.046875 -1.625q0.765625 -0.53125 2.234375 -0.53125q1.359375 0 2.015625 0.3125q0.65625 0.3125 0.921875 0.8125q0.265625 0.484375 0.265625 1.796875l-0.015625 2.34375q0 1.0 0.09375 1.484375q0.09375 0.46875 0.359375 1.015625l-1.984375 0q-0.078125 -0.203125 -0.203125 -0.59375q-0.046875 -0.171875 -0.0625 -0.234375q-0.515625 0.5 -1.109375 0.75q-0.578125 0.25 -1.25 0.25q-1.171875 0 -1.859375 -0.640625q-0.671875 -0.640625 -0.671875 -1.609375q0 -0.640625 0.3125 -1.140625q0.3125 -0.515625 0.859375 -0.78125q0.5625 -0.265625 1.609375 -0.46875q1.40625 -0.265625 1.953125 -0.484375l0 -0.203125q0 -0.578125 -0.296875 -0.828125q-0.28125 -0.25 -1.078125 -0.25q-0.53125 0 -0.84375 0.21875q-0.296875 0.203125 -0.46875 0.734375zm2.6875 1.625q-0.390625 0.140625 -1.234375 0.328125q-0.828125 0.171875 -1.09375 0.34375q-0.390625 0.265625 -0.390625 0.703125q0 0.421875 0.3125 0.734375q0.3125 0.296875 0.8125 0.296875q0.53125 0 1.03125 -0.359375q0.359375 -0.265625 0.484375 -0.65625q0.078125 -0.265625 0.078125 -0.984375l0 -0.40625zm3.947937 3.65625l0 -10.484375l2.015625 0l0 10.484375l-2.015625 0z" fill-rule="nonzero"/><path fill="#000000" d="m761.4705 558.6763l2.046875 0.65625q-0.46875 1.71875 -1.578125 2.546875q-1.09375 0.828125 -2.78125 0.828125q-2.078125 0 -3.4375 -1.421875q-1.34375 -1.421875 -1.34375 -3.90625q0 -2.609375 1.359375 -4.0625q1.359375 -1.453125 3.5625 -1.453125q1.921875 0 3.125 1.140625q0.71875 0.671875 1.0625 1.9375l-2.09375 0.5q-0.1875 -0.828125 -0.78125 -1.296875q-0.578125 -0.46875 -1.421875 -0.46875q-1.171875 0 -1.90625 0.84375q-0.71875 0.828125 -0.71875 2.703125q0 1.984375 0.71875 2.84375q0.71875 0.84375 1.859375 0.84375q0.84375 0 1.453125 -0.53125q0.609375 -0.546875 0.875 -1.703125zm3.3967285 -0.046875q0 -1.0 0.484375 -1.9375q0.5 -0.9375 1.40625 -1.421875q0.90625 -0.5 2.015625 -0.5q1.71875 0 2.828125 1.125q1.109375 1.109375 1.109375 2.8125q0 1.734375 -1.125 2.875q-1.109375 1.125 -2.796875 1.125q-1.046875 0 -2.0 -0.46875q-0.9375 -0.46875 -1.4375 -1.375q-0.484375 -0.921875 -0.484375 -2.234375zm2.046875 0.109375q0 1.125 0.53125 1.734375q0.546875 0.59375 1.34375 0.59375q0.78125 0 1.3125 -0.59375q0.53125 -0.609375 0.53125 -1.75q0 -1.125 -0.53125 -1.71875q-0.53125 -0.609375 -1.3125 -0.609375q-0.796875 0 -1.34375 0.609375q-0.53125 0.59375 -0.53125 1.734375zm7.2182617 -3.796875l1.84375 0l0 1.03125q1.0 -1.203125 2.375 -1.203125q0.734375 0 1.265625 0.296875q0.53125 0.296875 0.875 0.90625q0.5 -0.609375 1.078125 -0.90625q0.59375 -0.296875 1.25 -0.296875q0.828125 0 1.40625 0.34375q0.59375 0.328125 0.875 0.984375q0.203125 0.484375 0.203125 1.578125l0 4.859375l-2.015625 0l0 -4.34375q0 -1.125 -0.203125 -1.453125q-0.28125 -0.4375 -0.859375 -0.4375q-0.421875 0 -0.796875 0.265625q-0.359375 0.25 -0.53125 0.75q-0.171875 0.5 -0.171875 1.5625l0 3.65625l-2.0 0l0 -4.171875q0 -1.109375 -0.109375 -1.421875q-0.109375 -0.328125 -0.34375 -0.484375q-0.21875 -0.15625 -0.609375 -0.15625q-0.453125 0 -0.828125 0.25q-0.375 0.25 -0.546875 0.734375q-0.15625 0.46875 -0.15625 1.5625l0 3.6875l-2.0 0l0 -7.59375zm13.031738 0l1.84375 0l0 1.03125q1.0 -1.203125 2.375 -1.203125q0.734375 0 1.265625 0.296875q0.53125 0.296875 0.875 0.90625q0.5 -0.609375 1.078125 -0.90625q0.59375 -0.296875 1.25 -0.296875q0.828125 0 1.40625 0.34375q0.59375 0.328125 0.875 0.984375q0.203125 0.484375 0.203125 1.578125l0 4.859375l-2.015625 0l0 -4.34375q0 -1.125 -0.203125 -1.453125q-0.28125 -0.4375 -0.859375 -0.4375q-0.421875 0 -0.796875 0.265625q-0.359375 0.25 -0.53125 0.75q-0.171875 0.5 -0.171875 1.5625l0 3.65625l-2.0 0l0 -4.171875q0 -1.109375 -0.109375 -1.421875q-0.109375 -0.328125 -0.34375 -0.484375q-0.21875 -0.15625 -0.609375 -0.15625q-0.453125 0 -0.828125 0.25q-0.375 0.25 -0.546875 0.734375q-0.15625 0.46875 -0.15625 1.5625l0 3.6875l-2.0 0l0 -7.59375zm14.688049 2.3125l-1.828125 -0.328125q0.296875 -1.109375 1.046875 -1.625q0.765625 -0.53125 2.234375 -0.53125q1.359375 0 2.015625 0.3125q0.65625 0.3125 0.921875 0.8125q0.265625 0.484375 0.265625 1.796875l-0.015625 2.34375q0 1.0 0.09375 1.484375q0.09375 0.46875 0.359375 1.015625l-1.984375 0q-0.078125 -0.203125 -0.203125 -0.59375q-0.046875 -0.171875 -0.0625 -0.234375q-0.515625 0.5 -1.109375 0.75q-0.578125 0.25 -1.25 0.25q-1.171875 0 -1.859375 -0.640625q-0.671875 -0.640625 -0.671875 -1.609375q0 -0.640625 0.3125 -1.140625q0.3125 -0.515625 0.859375 -0.78125q0.5625 -0.265625 1.609375 -0.46875q1.40625 -0.265625 1.953125 -0.484375l0 -0.203125q0 -0.578125 -0.296875 -0.828125q-0.28125 -0.25 -1.078125 -0.25q-0.53125 0 -0.84375 0.21875q-0.296875 0.203125 -0.46875 0.734375zm2.6875 1.625q-0.390625 0.140625 -1.234375 0.328125q-0.828125 0.171875 -1.09375 0.34375q-0.390625 0.265625 -0.390625 0.703125q0 0.421875 0.3125 0.734375q0.3125 0.296875 0.8125 0.296875q0.53125 0 1.03125 -0.359375q0.359375 -0.265625 0.484375 -0.65625q0.078125 -0.265625 0.078125 -0.984375l0 -0.40625zm10.869812 3.65625l-2.015625 0l0 -3.875q0 -1.234375 -0.125 -1.59375q-0.125 -0.359375 -0.421875 -0.5625q-0.296875 -0.203125 -0.703125 -0.203125q-0.515625 0 -0.9375 0.296875q-0.40625 0.28125 -0.5625 0.75q-0.15625 0.46875 -0.15625 1.75l0 3.4375l-2.015625 0l0 -7.59375l1.875 0l0 1.109375q1.0 -1.28125 2.5 -1.28125q0.671875 0 1.21875 0.234375q0.546875 0.234375 0.828125 0.609375q0.296875 0.375 0.40625 0.84375q0.109375 0.46875 0.109375 1.359375l0 4.71875zm8.999512 0l-1.859375 0l0 -1.109375q-0.46875 0.640625 -1.109375 0.96875q-0.625 0.3125 -1.265625 0.3125q-1.3125 0 -2.25 -1.046875q-0.9375 -1.0625 -0.9375 -2.953125q0 -1.9375 0.90625 -2.9375q0.921875 -1.0 2.3125 -1.0q1.265625 0 2.203125 1.046875l0 -3.765625l2.0 0l0 10.484375zm-5.359375 -3.96875q0 1.21875 0.328125 1.765625q0.5 0.78125 1.359375 0.78125q0.703125 0 1.1875 -0.578125q0.484375 -0.59375 0.484375 -1.765625q0 -1.3125 -0.46875 -1.890625q-0.46875 -0.578125 -1.203125 -0.578125q-0.71875 0 -1.203125 0.578125q-0.484375 0.5625 -0.484375 1.6875zm6.6401367 1.796875l2.015625 -0.296875q0.125 0.578125 0.515625 0.890625q0.40625 0.296875 1.109375 0.296875q0.78125 0 1.171875 -0.28125q0.265625 -0.203125 0.265625 -0.546875q0 -0.21875 -0.140625 -0.375q-0.15625 -0.140625 -0.671875 -0.265625q-2.4375 -0.53125 -3.078125 -0.984375q-0.90625 -0.609375 -0.90625 -1.703125q0 -0.984375 0.78125 -1.65625q0.78125 -0.671875 2.421875 -0.671875q1.546875 0 2.3125 0.515625q0.765625 0.5 1.046875 1.484375l-1.90625 0.359375q-0.109375 -0.453125 -0.453125 -0.6875q-0.34375 -0.234375 -0.96875 -0.234375q-0.796875 0 -1.140625 0.21875q-0.234375 0.15625 -0.234375 0.40625q0 0.21875 0.203125 0.375q0.28125 0.203125 1.875 0.5625q1.609375 0.359375 2.25 0.890625q0.625 0.546875 0.625 1.5q0 1.046875 -0.875 1.796875q-0.859375 0.75 -2.578125 0.75q-1.546875 0 -2.453125 -0.625q-0.90625 -0.640625 -1.1875 -1.71875z" fill-rule="nonzero"/><path fill="#000000" d="m776.77185 591.79315l1.203125 -0.109375q0.078125 0.71875 0.390625 1.1875q0.3125 0.453125 0.953125 0.734375q0.65625 0.28125 1.46875 0.28125q0.71875 0 1.265625 -0.21875q0.5625 -0.21875 0.828125 -0.578125q0.265625 -0.375 0.265625 -0.828125q0 -0.453125 -0.265625 -0.78125q-0.25 -0.328125 -0.84375 -0.5625q-0.390625 -0.15625 -1.703125 -0.46875q-1.3125 -0.3125 -1.84375 -0.59375q-0.671875 -0.359375 -1.015625 -0.890625q-0.328125 -0.53125 -0.328125 -1.1875q0 -0.71875 0.40625 -1.34375q0.40625 -0.625 1.1875 -0.953125q0.796875 -0.328125 1.765625 -0.328125q1.046875 0 1.859375 0.34375q0.8125 0.34375 1.25 1.015625q0.4375 0.65625 0.46875 1.484375l-1.203125 0.09375q-0.109375 -0.90625 -0.671875 -1.359375q-0.5625 -0.46875 -1.65625 -0.46875q-1.140625 0 -1.671875 0.421875q-0.515625 0.421875 -0.515625 1.015625q0 0.515625 0.359375 0.84375q0.375 0.328125 1.90625 0.6875q1.546875 0.34375 2.109375 0.59375q0.84375 0.390625 1.234375 0.984375q0.390625 0.578125 0.390625 1.359375q0 0.75 -0.4375 1.4375q-0.421875 0.671875 -1.25 1.046875q-0.8125 0.359375 -1.828125 0.359375q-1.296875 0 -2.171875 -0.375q-0.875 -0.375 -1.375 -1.125q-0.5 -0.765625 -0.53125 -1.71875zm13.9053955 0.84375l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.5218506 4.125l0 -6.90625l1.0625 0l0 0.984375q0.75 -1.140625 2.1875 -1.140625q0.625 0 1.15625 0.21875q0.53125 0.21875 0.78125 0.59375q0.265625 0.359375 0.375 0.859375q0.0625 0.328125 0.0625 1.140625l0 4.25l-1.171875 0l0 -4.203125q0 -0.71875 -0.140625 -1.0625q-0.140625 -0.359375 -0.484375 -0.5625q-0.34375 -0.21875 -0.8125 -0.21875q-0.75 0 -1.296875 0.46875q-0.546875 0.46875 -0.546875 1.796875l0 3.78125l-1.171875 0zm11.896851 0l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm6.9593506 -2.125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0zm0 5.578125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0z" fill-rule="nonzero"/><path fill="#000000" d="m681.41437 610.85565l0 -8.421875l-3.140625 0l0 -1.125l7.5625 0l0 1.125l-3.15625 0l0 8.421875l-1.265625 0zm9.59967 0l0 -1.015625q-0.8125 1.171875 -2.1875 1.171875q-0.609375 0 -1.140625 -0.234375q-0.53125 -0.234375 -0.796875 -0.578125q-0.25 -0.359375 -0.359375 -0.875q-0.0625 -0.34375 -0.0625 -1.09375l0 -4.28125l1.171875 0l0 3.828125q0 0.921875 0.0625 1.234375q0.109375 0.46875 0.46875 0.734375q0.359375 0.25 0.890625 0.25q0.515625 0 0.984375 -0.265625q0.46875 -0.265625 0.65625 -0.734375q0.1875 -0.46875 0.1875 -1.34375l0 -3.703125l1.171875 0l0 6.90625l-1.046875 0zm2.8343506 2.65625l-0.125 -1.09375q0.375 0.109375 0.65625 0.109375q0.390625 0 0.625 -0.140625q0.234375 -0.125 0.390625 -0.359375q0.109375 -0.171875 0.359375 -0.875q0.03125 -0.09375 0.109375 -0.28125l-2.625 -6.921875l1.265625 0l1.4375 4.0q0.28125 0.765625 0.5 1.59375q0.203125 -0.796875 0.46875 -1.578125l1.484375 -4.015625l1.171875 0l-2.625 7.015625q-0.421875 1.140625 -0.65625 1.578125q-0.3125 0.578125 -0.71875 0.84375q-0.40625 0.28125 -0.96875 0.28125q-0.328125 0 -0.75 -0.15625zm11.2265625 -3.515625q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm3.0999756 3.46875l0 -9.546875l1.90625 0l2.25 6.765625q0.3125 0.9375 0.46875 1.40625q0.15625 -0.515625 0.5 -1.53125l2.28125 -6.640625l1.703125 0l0 9.546875l-1.21875 0l0 -7.984375l-2.765625 7.984375l-1.140625 0l-2.765625 -8.125l0 8.125l-1.21875 0zm15.727417 -2.21875l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.0531006 2.0625l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm6.6640625 0l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm11.6484375 1.203125q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm2.7718506 4.046875l1.140625 0.15625q0.078125 0.53125 0.40625 0.78125q0.4375 0.3125 1.1875 0.3125q0.8125 0 1.25 -0.328125q0.453125 -0.3125 0.609375 -0.90625q0.09375 -0.359375 0.078125 -1.5q-0.765625 0.90625 -1.90625 0.90625q-1.4375 0 -2.21875 -1.03125q-0.78125 -1.03125 -0.78125 -2.46875q0 -0.984375 0.359375 -1.8125q0.359375 -0.84375 1.03125 -1.296875q0.6875 -0.453125 1.609375 -0.453125q1.21875 0 2.015625 0.984375l0 -0.828125l1.078125 0l0 5.96875q0 1.609375 -0.328125 2.28125q-0.328125 0.6875 -1.046875 1.078125q-0.703125 0.390625 -1.75 0.390625q-1.234375 0 -2.0 -0.5625q-0.75 -0.5625 -0.734375 -1.671875zm0.984375 -4.15625q0 1.359375 0.53125 1.984375q0.546875 0.625 1.359375 0.625q0.796875 0 1.34375 -0.625q0.546875 -0.625 0.546875 -1.953125q0 -1.265625 -0.5625 -1.90625q-0.5625 -0.640625 -1.359375 -0.640625q-0.765625 0 -1.3125 0.640625q-0.546875 0.625 -0.546875 1.875zm11.381226 1.359375l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm8.771851 6.9375q-0.984375 -1.234375 -1.65625 -2.875q-0.65625 -1.640625 -0.65625 -3.390625q0 -1.546875 0.5 -2.96875q0.578125 -1.640625 1.8125 -3.28125l0.828125 0q-0.78125 1.359375 -1.03125 1.9375q-0.40625 0.890625 -0.625 1.875q-0.28125 1.21875 -0.28125 2.4375q0 3.140625 1.9375 6.265625l-0.828125 0zm1.7196655 -4.875l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm11.8671875 -0.15625l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm10.928101 6.78125l0 -3.390625q-0.265625 0.390625 -0.765625 0.640625q-0.484375 0.25 -1.046875 0.25q-1.21875 0 -2.109375 -0.984375q-0.890625 -0.984375 -0.890625 -2.6875q0 -1.046875 0.359375 -1.875q0.359375 -0.828125 1.046875 -1.25q0.6875 -0.421875 1.515625 -0.421875q1.28125 0 2.015625 1.078125l0 -0.921875l1.046875 0l0 9.5625l-1.171875 0zm-3.609375 -6.125q0 1.328125 0.5625 2.0q0.5625 0.65625 1.34375 0.65625q0.75 0 1.28125 -0.625q0.546875 -0.640625 0.546875 -1.9375q0 -1.375 -0.578125 -2.0625q-0.5625 -0.703125 -1.328125 -0.703125q-0.765625 0 -1.296875 0.65625q-0.53125 0.640625 -0.53125 2.015625zm6.6156006 3.46875l0 -6.90625l1.0625 0l0 0.984375q0.75 -1.140625 2.1875 -1.140625q0.625 0 1.15625 0.21875q0.53125 0.21875 0.78125 0.59375q0.265625 0.359375 0.375 0.859375q0.0625 0.328125 0.0625 1.140625l0 4.25l-1.171875 0l0 -4.203125q0 -0.71875 -0.140625 -1.0625q-0.140625 -0.359375 -0.484375 -0.5625q-0.34375 -0.21875 -0.8125 -0.21875q-0.75 0 -1.296875 0.46875q-0.546875 0.46875 -0.546875 1.796875l0 3.78125l-1.171875 0zm6.9749756 -3.453125q0 -1.921875 1.078125 -2.84375q0.890625 -0.765625 2.171875 -0.765625q1.421875 0 2.328125 0.9375q0.90625 0.921875 0.90625 2.578125q0 1.328125 -0.40625 2.09375q-0.390625 0.765625 -1.15625 1.1875q-0.765625 0.421875 -1.671875 0.421875q-1.453125 0 -2.359375 -0.921875q-0.890625 -0.9375 -0.890625 -2.6875zm1.203125 0q0 1.328125 0.578125 1.984375q0.59375 0.65625 1.46875 0.65625q0.875 0 1.453125 -0.65625q0.578125 -0.671875 0.578125 -2.03125q0 -1.28125 -0.59375 -1.9375q-0.578125 -0.65625 -1.4375 -0.65625q-0.875 0 -1.46875 0.65625q-0.578125 0.65625 -0.578125 1.984375zm6.9593506 3.453125l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm11.60907 -2.53125l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm2.1484375 2.53125l0 -6.90625l1.046875 0l0 0.96875q0.328125 -0.515625 0.859375 -0.8125q0.546875 -0.3125 1.234375 -0.3125q0.78125 0 1.265625 0.3125q0.484375 0.3125 0.6875 0.890625q0.828125 -1.203125 2.140625 -1.203125q1.03125 0 1.578125 0.578125q0.5625 0.5625 0.5625 1.734375l0 4.75l-1.171875 0l0 -4.359375q0 -0.703125 -0.125 -1.0q-0.109375 -0.3125 -0.40625 -0.5q-0.296875 -0.1875 -0.703125 -0.1875q-0.71875 0 -1.203125 0.484375q-0.484375 0.484375 -0.484375 1.546875l0 4.015625l-1.171875 0l0 -4.484375q0 -0.78125 -0.296875 -1.171875q-0.28125 -0.390625 -0.921875 -0.390625q-0.5 0 -0.921875 0.265625q-0.421875 0.25 -0.609375 0.75q-0.1875 0.5 -0.1875 1.453125l0 3.578125l-1.171875 0zm15.586853 0l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm12.803101 -2.15625l-6.3125 0l0 -1.09375l6.3125 0l0 1.09375zm0 2.890625l-6.3125 0l0 -1.09375l6.3125 0l0 1.09375zm5.705261 2.71875l-1.171875 0l0 -7.46875q-0.421875 0.40625 -1.109375 0.8125q-0.6875 0.40625 -1.234375 0.609375l0 -1.140625q0.984375 -0.453125 1.71875 -1.109375q0.734375 -0.671875 1.03125 -1.28125l0.765625 0l0 9.578125zm2.9906006 -4.703125q0 -1.6875 0.34375 -2.71875q0.359375 -1.03125 1.046875 -1.59375q0.6875 -0.5625 1.71875 -0.5625q0.78125 0 1.359375 0.3125q0.578125 0.296875 0.953125 0.890625q0.375 0.578125 0.59375 1.421875q0.21875 0.828125 0.21875 2.25q0 1.671875 -0.359375 2.703125q-0.34375 1.03125 -1.03125 1.59375q-0.671875 0.5625 -1.734375 0.5625q-1.375 0 -2.15625 -0.984375q-0.953125 -1.1875 -0.953125 -3.875zm1.203125 0q0 2.34375 0.546875 3.125q0.5625 0.78125 1.359375 0.78125q0.8125 0 1.359375 -0.78125q0.5625 -0.78125 0.5625 -3.125q0 -2.359375 -0.5625 -3.125q-0.546875 -0.78125 -1.359375 -0.78125q-0.8125 0 -1.296875 0.6875q-0.609375 0.875 -0.609375 3.21875zm6.8499756 4.703125l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm7.077881 0l0 -6.90625l1.0625 0l0 1.046875q0.40625 -0.734375 0.734375 -0.96875q0.34375 -0.234375 0.765625 -0.234375q0.59375 0 1.203125 0.375l-0.40625 1.078125q-0.4375 -0.25 -0.859375 -0.25q-0.390625 0 -0.703125 0.234375q-0.296875 0.234375 -0.421875 0.640625q-0.203125 0.625 -0.203125 1.359375l0 3.625l-1.171875 0zm9.1883545 -2.21875l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm9.084351 3.078125l0.171875 1.03125q-0.5 0.109375 -0.890625 0.109375q-0.640625 0 -1.0 -0.203125q-0.34375 -0.203125 -0.484375 -0.53125q-0.140625 -0.328125 -0.140625 -1.390625l0 -3.96875l-0.859375 0l0 -0.90625l0.859375 0l0 -1.71875l1.171875 -0.703125l0 2.421875l1.171875 0l0 0.90625l-1.171875 0l0 4.046875q0 0.5 0.046875 0.640625q0.0625 0.140625 0.203125 0.234375q0.140625 0.078125 0.40625 0.078125q0.203125 0 0.515625 -0.046875zm5.656128 -1.484375l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm1.7109375 -0.921875q0 -1.921875 1.078125 -2.84375q0.890625 -0.765625 2.171875 -0.765625q1.421875 0 2.328125 0.9375q0.90625 0.921875 0.90625 2.578125q0 1.328125 -0.40625 2.09375q-0.390625 0.765625 -1.15625 1.1875q-0.765625 0.421875 -1.671875 0.421875q-1.453125 0 -2.359375 -0.921875q-0.890625 -0.9375 -0.890625 -2.6875zm1.203125 0q0 1.328125 0.578125 1.984375q0.59375 0.65625 1.46875 0.65625q0.875 0 1.453125 -0.65625q0.578125 -0.671875 0.578125 -2.03125q0 -1.28125 -0.59375 -1.9375q-0.578125 -0.65625 -1.4375 -0.65625q-0.875 0 -1.46875 0.65625q-0.578125 0.65625 -0.578125 1.984375zm11.131226 3.453125l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm11.365601 1.234375l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.8343506 4.125l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0z" fill-rule="nonzero"/><path fill="#000000" d="m676.8187 629.5119l0 -9.5625l1.078125 0l0 0.890625q0.375 -0.53125 0.84375 -0.78125q0.484375 -0.265625 1.15625 -0.265625q0.875 0 1.546875 0.453125q0.6875 0.453125 1.03125 1.28125q0.34375 0.828125 0.34375 1.828125q0 1.046875 -0.375 1.90625q-0.375 0.84375 -1.109375 1.296875q-0.71875 0.453125 -1.53125 0.453125q-0.578125 0 -1.046875 -0.25q-0.46875 -0.25 -0.765625 -0.625l0 3.375l-1.171875 0zm1.0625 -6.078125q0 1.34375 0.53125 1.984375q0.546875 0.625 1.3125 0.625q0.78125 0 1.34375 -0.65625q0.5625 -0.65625 0.5625 -2.046875q0 -1.3125 -0.546875 -1.96875q-0.546875 -0.671875 -1.296875 -0.671875q-0.75 0 -1.328125 0.703125q-0.578125 0.703125 -0.578125 2.03125zm10.865601 2.5625q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm2.9437256 6.125l-0.125 -1.09375q0.375 0.109375 0.65625 0.109375q0.390625 0 0.625 -0.140625q0.234375 -0.125 0.390625 -0.359375q0.109375 -0.171875 0.359375 -0.875q0.03125 -0.09375 0.109375 -0.28125l-2.625 -6.921875l1.265625 0l1.4375 4.0q0.28125 0.765625 0.5 1.59375q0.203125 -0.796875 0.46875 -1.578125l1.484375 -4.015625l1.171875 0l-2.625 7.015625q-0.421875 1.140625 -0.65625 1.578125q-0.3125 0.578125 -0.71875 0.84375q-0.40625 0.28125 -0.96875 0.28125q-0.328125 0 -0.75 -0.15625zm6.6953125 -2.65625l0 -9.546875l1.171875 0l0 9.546875l-1.171875 0zm2.5391846 -3.453125q0 -1.921875 1.078125 -2.84375q0.890625 -0.765625 2.171875 -0.765625q1.421875 0 2.328125 0.9375q0.90625 0.921875 0.90625 2.578125q0 1.328125 -0.40625 2.09375q-0.390625 0.765625 -1.15625 1.1875q-0.765625 0.421875 -1.671875 0.421875q-1.453125 0 -2.359375 -0.921875q-0.890625 -0.9375 -0.890625 -2.6875zm1.203125 0q0 1.328125 0.578125 1.984375q0.59375 0.65625 1.46875 0.65625q0.875 0 1.453125 -0.65625q0.578125 -0.671875 0.578125 -2.03125q0 -1.28125 -0.59375 -1.9375q-0.578125 -0.65625 -1.4375 -0.65625q-0.875 0 -1.46875 0.65625q-0.578125 0.65625 -0.578125 1.984375zm11.162476 2.59375q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm7.4749756 3.46875l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm12.803101 -2.15625l-6.3125 0l0 -1.09375l6.3125 0l0 1.09375zm0 2.890625l-6.3125 0l0 -1.09375l6.3125 0l0 1.09375zm1.1115723 -1.265625q0.5 -0.015625 0.8125 -0.265625q0.3125 -0.265625 0.421875 -0.703125q0.109375 -0.453125 0.109375 -1.53125q0 -1.09375 0.03125 -1.4375q0.0625 -0.546875 0.21875 -0.875q0.171875 -0.34375 0.40625 -0.53125q0.234375 -0.203125 0.59375 -0.3125q0.25 -0.0625 0.8125 -0.0625l0.359375 0l0 1.015625l-0.203125 0q-0.671875 0 -0.90625 0.25q-0.21875 0.25 -0.21875 1.09375q0 1.703125 -0.0625 2.15625q-0.125 0.6875 -0.40625 1.078125q-0.28125 0.375 -0.890625 0.65625q0.71875 0.296875 1.03125 0.921875q0.328125 0.609375 0.328125 2.015625q0 1.265625 0.03125 1.5q0.046875 0.453125 0.25 0.625q0.21875 0.171875 0.84375 0.171875l0.203125 0l0 1.03125l-0.359375 0q-0.640625 0 -0.9375 -0.109375q-0.40625 -0.15625 -0.6875 -0.5q-0.265625 -0.328125 -0.359375 -0.84375q-0.078125 -0.5 -0.078125 -1.671875q0 -1.171875 -0.109375 -1.625q-0.109375 -0.453125 -0.421875 -0.703125q-0.3125 -0.265625 -0.8125 -0.28125l0 -1.0625zm5.013855 -2.171875l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm2.2937622 6.734375l1.140625 0.15625q0.078125 0.53125 0.40625 0.78125q0.4375 0.3125 1.1875 0.3125q0.8125 0 1.25 -0.328125q0.453125 -0.3125 0.609375 -0.90625q0.09375 -0.359375 0.078125 -1.5q-0.765625 0.90625 -1.90625 0.90625q-1.4375 0 -2.21875 -1.03125q-0.78125 -1.03125 -0.78125 -2.46875q0 -0.984375 0.359375 -1.8125q0.359375 -0.84375 1.03125 -1.296875q0.6875 -0.453125 1.609375 -0.453125q1.21875 0 2.015625 0.984375l0 -0.828125l1.078125 0l0 5.96875q0 1.609375 -0.328125 2.28125q-0.328125 0.6875 -1.046875 1.078125q-0.703125 0.390625 -1.75 0.390625q-1.234375 0 -2.0 -0.5625q-0.75 -0.5625 -0.734375 -1.671875zm0.984375 -4.15625q0 1.359375 0.53125 1.984375q0.546875 0.625 1.359375 0.625q0.796875 0 1.34375 -0.625q0.546875 -0.625 0.546875 -1.953125q0 -1.265625 -0.5625 -1.90625q-0.5625 -0.640625 -1.359375 -0.640625q-0.765625 0 -1.3125 0.640625q-0.546875 0.625 -0.546875 1.875zm7.9281006 3.578125l-2.125 -6.90625l1.21875 0l1.09375 3.984375l0.421875 1.484375q0.015625 -0.109375 0.359375 -1.421875l1.09375 -4.046875l1.203125 0l1.03125 4.0l0.34375 1.328125l0.40625 -1.34375l1.171875 -3.984375l1.140625 0l-2.15625 6.90625l-1.21875 0l-1.09375 -4.140625l-0.265625 -1.171875l-1.40625 5.3125l-1.21875 0zm8.718872 0l0 -9.546875l1.25 0l0 9.546875l-1.25 0zm7.812378 0l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm6.6937256 -2.703125l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm2.8249512 6.15625l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm7.156006 -6.15625l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm6.996887 6.15625l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm11.365601 1.234375l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm8.443726 4.125l-2.625 -6.90625l1.234375 0l1.484375 4.140625q0.234375 0.65625 0.4375 1.390625q0.15625 -0.546875 0.4375 -1.3125l1.53125 -4.21875l1.21875 0l-2.625 6.90625l-1.09375 0zm5.1171875 0l0 -9.546875l1.25 0l0 9.546875l-1.25 0zm7.812317 0l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm6.6937256 -2.703125l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm2.8250122 6.15625l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm7.155945 -6.15625l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm7.043762 6.15625l0 -1.015625q-0.8125 1.171875 -2.1875 1.171875q-0.609375 0 -1.140625 -0.234375q-0.53125 -0.234375 -0.796875 -0.578125q-0.25 -0.359375 -0.359375 -0.875q-0.0625 -0.34375 -0.0625 -1.09375l0 -4.28125l1.171875 0l0 3.828125q0 0.921875 0.0625 1.234375q0.109375 0.46875 0.46875 0.734375q0.359375 0.25 0.890625 0.25q0.515625 0 0.984375 -0.265625q0.46875 -0.265625 0.65625 -0.734375q0.1875 -0.46875 0.1875 -1.34375l0 -3.703125l1.171875 0l0 6.90625l-1.046875 0zm2.8968506 -8.1875l0 -1.359375l1.171875 0l0 1.359375l-1.171875 0zm0 8.1875l0 -6.90625l1.171875 0l0 6.90625l-1.171875 0zm7.4298096 0l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm6.6937256 -2.703125l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm2.8250122 6.15625l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm7.155945 -6.15625l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm5.075012 5.109375l0.171875 1.03125q-0.5 0.109375 -0.890625 0.109375q-0.640625 0 -1.0 -0.203125q-0.34375 -0.203125 -0.484375 -0.53125q-0.140625 -0.328125 -0.140625 -1.390625l0 -3.96875l-0.859375 0l0 -0.90625l0.859375 0l0 -1.71875l1.171875 -0.703125l0 2.421875l1.171875 0l0 0.90625l-1.171875 0l0 4.046875q0 0.5 0.046875 0.640625q0.0625 0.140625 0.203125 0.234375q0.140625 0.078125 0.40625 0.078125q0.203125 0 0.515625 -0.046875zm1.2030029 -5.109375l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm5.715576 2.171875l0 1.0625q-0.5 0.015625 -0.828125 0.28125q-0.3125 0.25 -0.421875 0.703125q-0.09375 0.4375 -0.109375 1.53125q0 1.078125 -0.03125 1.421875q-0.0625 0.5625 -0.21875 0.890625q-0.15625 0.328125 -0.390625 0.515625q-0.234375 0.203125 -0.59375 0.3125q-0.25 0.078125 -0.8125 0.078125l-0.359375 0l0 -1.03125l0.1875 0q0.6875 0 0.90625 -0.25q0.21875 -0.234375 0.21875 -1.09375q0 -1.625 0.0625 -2.0625q0.109375 -0.71875 0.421875 -1.140625q0.3125 -0.4375 0.875 -0.6875q-0.75 -0.359375 -1.0625 -0.9375q-0.296875 -0.59375 -0.296875 -2.0q0 -1.265625 -0.03125 -1.515625q-0.046875 -0.4375 -0.265625 -0.609375q-0.203125 -0.171875 -0.828125 -0.171875l-0.1875 0l0 -1.015625l0.359375 0q0.640625 0 0.921875 0.109375q0.421875 0.140625 0.6875 0.484375q0.28125 0.328125 0.359375 0.84375q0.078125 0.515625 0.078125 1.6875q0.015625 1.171875 0.109375 1.625q0.109375 0.4375 0.421875 0.703125q0.328125 0.25 0.828125 0.265625zm1.560791 3.984375l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm11.60907 -2.53125l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm2.1328125 2.53125l0 -6.90625l1.0625 0l0 1.046875q0.40625 -0.734375 0.734375 -0.96875q0.34375 -0.234375 0.765625 -0.234375q0.59375 0 1.203125 0.375l-0.40625 1.078125q-0.4375 -0.25 -0.859375 -0.25q-0.390625 0 -0.703125 0.234375q-0.296875 0.234375 -0.421875 0.640625q-0.203125 0.625 -0.203125 1.359375l0 3.625l-1.171875 0zm8.9696045 -2.53125l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm2.9140625 5.34375l-0.828125 0q1.9375 -3.125 1.9375 -6.265625q0 -1.21875 -0.28125 -2.421875q-0.21875 -0.984375 -0.609375 -1.875q-0.265625 -0.59375 -1.046875 -1.953125l0.828125 0q1.234375 1.640625 1.8125 3.28125q0.5 1.421875 0.5 2.96875q0 1.75 -0.671875 3.390625q-0.671875 1.640625 -1.640625 2.875z" fill-rule="nonzero"/><path fill="#000000" d="m762.7807 658.85565l0 -9.546875l4.234375 0q1.265625 0 1.921875 0.265625q0.671875 0.25 1.0625 0.90625q0.40625 0.65625 0.40625 1.4375q0 1.015625 -0.65625 1.71875q-0.65625 0.6875 -2.03125 0.875q0.5 0.25 0.765625 0.484375q0.546875 0.5 1.046875 1.265625l1.65625 2.59375l-1.578125 0l-1.265625 -1.984375q-0.5625 -0.859375 -0.921875 -1.3125q-0.34375 -0.453125 -0.640625 -0.640625q-0.28125 -0.1875 -0.5625 -0.25q-0.21875 -0.046875 -0.703125 -0.046875l-1.46875 0l0 4.234375l-1.265625 0zm1.265625 -5.328125l2.71875 0q0.859375 0 1.34375 -0.171875q0.484375 -0.1875 0.734375 -0.578125q0.265625 -0.390625 0.265625 -0.859375q0 -0.671875 -0.5 -1.109375q-0.484375 -0.4375 -1.546875 -0.4375l-3.015625 0l0 3.15625zm12.922058 3.109375l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.0531006 2.0625l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm7.1328125 4.71875l0 -9.5625l1.078125 0l0 0.890625q0.375 -0.53125 0.84375 -0.78125q0.484375 -0.265625 1.15625 -0.265625q0.875 0 1.546875 0.453125q0.6875 0.453125 1.03125 1.28125q0.34375 0.828125 0.34375 1.828125q0 1.046875 -0.375 1.90625q-0.375 0.84375 -1.109375 1.296875q-0.71875 0.453125 -1.53125 0.453125q-0.578125 0 -1.046875 -0.25q-0.46875 -0.25 -0.765625 -0.625l0 3.375l-1.171875 0zm1.0625 -6.078125q0 1.34375 0.53125 1.984375q0.546875 0.625 1.3125 0.625q0.78125 0 1.34375 -0.65625q0.5625 -0.65625 0.5625 -2.046875q0 -1.3125 -0.546875 -1.96875q-0.546875 -0.671875 -1.296875 -0.671875q-0.75 0 -1.328125 0.703125q-0.578125 0.703125 -0.578125 2.03125zm5.9124756 -0.03125q0 -1.921875 1.078125 -2.84375q0.890625 -0.765625 2.171875 -0.765625q1.421875 0 2.328125 0.9375q0.90625 0.921875 0.90625 2.578125q0 1.328125 -0.40625 2.09375q-0.390625 0.765625 -1.15625 1.1875q-0.765625 0.421875 -1.671875 0.421875q-1.453125 0 -2.359375 -0.921875q-0.890625 -0.9375 -0.890625 -2.6875zm1.203125 0q0 1.328125 0.578125 1.984375q0.59375 0.65625 1.46875 0.65625q0.875 0 1.453125 -0.65625q0.578125 -0.671875 0.578125 -2.03125q0 -1.28125 -0.59375 -1.9375q-0.578125 -0.65625 -1.4375 -0.65625q-0.875 0 -1.46875 0.65625q-0.578125 0.65625 -0.578125 1.984375zm6.6468506 3.453125l0 -6.90625l1.0625 0l0 0.984375q0.75 -1.140625 2.1875 -1.140625q0.625 0 1.15625 0.21875q0.53125 0.21875 0.78125 0.59375q0.265625 0.359375 0.375 0.859375q0.0625 0.328125 0.0625 1.140625l0 4.25l-1.171875 0l0 -4.203125q0 -0.71875 -0.140625 -1.0625q-0.140625 -0.359375 -0.484375 -0.5625q-0.34375 -0.21875 -0.8125 -0.21875q-0.75 0 -1.296875 0.46875q-0.546875 0.46875 -0.546875 1.796875l0 3.78125l-1.171875 0zm6.9437256 -2.0625l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm11.8671875 -0.15625l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.8499756 -1.453125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0zm0 5.578125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0z" fill-rule="nonzero"/><path fill="#000000" d="m679.6833 674.85565l0 -8.421875l-3.140625 0l0 -1.125l7.5625 0l0 1.125l-3.15625 0l0 8.421875l-1.265625 0zm9.599731 0l0 -1.015625q-0.8125 1.171875 -2.1875 1.171875q-0.609375 0 -1.140625 -0.234375q-0.53125 -0.234375 -0.796875 -0.578125q-0.25 -0.359375 -0.359375 -0.875q-0.0625 -0.34375 -0.0625 -1.09375l0 -4.28125l1.171875 0l0 3.828125q0 0.921875 0.0625 1.234375q0.109375 0.46875 0.46875 0.734375q0.359375 0.25 0.890625 0.25q0.515625 0 0.984375 -0.265625q0.46875 -0.265625 0.65625 -0.734375q0.1875 -0.46875 0.1875 -1.34375l0 -3.703125l1.171875 0l0 6.90625l-1.046875 0zm2.8343506 2.65625l-0.125 -1.09375q0.375 0.109375 0.65625 0.109375q0.390625 0 0.625 -0.140625q0.234375 -0.125 0.390625 -0.359375q0.109375 -0.171875 0.359375 -0.875q0.03125 -0.09375 0.109375 -0.28125l-2.625 -6.921875l1.265625 0l1.4375 4.0q0.28125 0.765625 0.5 1.59375q0.203125 -0.796875 0.46875 -1.578125l1.484375 -4.015625l1.171875 0l-2.625 7.015625q-0.421875 1.140625 -0.65625 1.578125q-0.3125 0.578125 -0.71875 0.84375q-0.40625 0.28125 -0.96875 0.28125q-0.328125 0 -0.75 -0.15625zm11.2265625 -3.515625q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm3.0999756 3.46875l0 -9.546875l1.90625 0l2.25 6.765625q0.3125 0.9375 0.46875 1.40625q0.15625 -0.515625 0.5 -1.53125l2.28125 -6.640625l1.703125 0l0 9.546875l-1.21875 0l0 -7.984375l-2.765625 7.984375l-1.140625 0l-2.765625 -8.125l0 8.125l-1.21875 0zm15.727417 -2.21875l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.0531006 2.0625l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm6.6640625 0l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm11.6484375 1.203125q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm2.7718506 4.046875l1.140625 0.15625q0.078125 0.53125 0.40625 0.78125q0.4375 0.3125 1.1875 0.3125q0.8125 0 1.25 -0.328125q0.453125 -0.3125 0.609375 -0.90625q0.09375 -0.359375 0.078125 -1.5q-0.765625 0.90625 -1.90625 0.90625q-1.4375 0 -2.21875 -1.03125q-0.78125 -1.03125 -0.78125 -2.46875q0 -0.984375 0.359375 -1.8125q0.359375 -0.84375 1.03125 -1.296875q0.6875 -0.453125 1.609375 -0.453125q1.21875 0 2.015625 0.984375l0 -0.828125l1.078125 0l0 5.96875q0 1.609375 -0.328125 2.28125q-0.328125 0.6875 -1.046875 1.078125q-0.703125 0.390625 -1.75 0.390625q-1.234375 0 -2.0 -0.5625q-0.75 -0.5625 -0.734375 -1.671875zm0.984375 -4.15625q0 1.359375 0.53125 1.984375q0.546875 0.625 1.359375 0.625q0.796875 0 1.34375 -0.625q0.546875 -0.625 0.546875 -1.953125q0 -1.265625 -0.5625 -1.90625q-0.5625 -0.640625 -1.359375 -0.640625q-0.765625 0 -1.3125 0.640625q-0.546875 0.625 -0.546875 1.875zm11.381226 1.359375l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm8.771851 6.9375q-0.984375 -1.234375 -1.65625 -2.875q-0.65625 -1.640625 -0.65625 -3.390625q0 -1.546875 0.5 -2.96875q0.578125 -1.640625 1.8125 -3.28125l0.828125 0q-0.78125 1.359375 -1.03125 1.9375q-0.40625 0.890625 -0.625 1.875q-0.28125 1.21875 -0.28125 2.4375q0 3.140625 1.9375 6.265625l-0.828125 0zm1.7196045 -4.875l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm11.8671875 -0.15625l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm10.928101 6.78125l0 -3.390625q-0.265625 0.390625 -0.765625 0.640625q-0.484375 0.25 -1.046875 0.25q-1.21875 0 -2.109375 -0.984375q-0.890625 -0.984375 -0.890625 -2.6875q0 -1.046875 0.359375 -1.875q0.359375 -0.828125 1.046875 -1.25q0.6875 -0.421875 1.515625 -0.421875q1.28125 0 2.015625 1.078125l0 -0.921875l1.046875 0l0 9.5625l-1.171875 0zm-3.609375 -6.125q0 1.328125 0.5625 2.0q0.5625 0.65625 1.34375 0.65625q0.75 0 1.28125 -0.625q0.546875 -0.640625 0.546875 -1.9375q0 -1.375 -0.578125 -2.0625q-0.5625 -0.703125 -1.328125 -0.703125q-0.765625 0 -1.296875 0.65625q-0.53125 0.640625 -0.53125 2.015625zm6.6156006 3.46875l0 -6.90625l1.0625 0l0 0.984375q0.75 -1.140625 2.1875 -1.140625q0.625 0 1.15625 0.21875q0.53125 0.21875 0.78125 0.59375q0.265625 0.359375 0.375 0.859375q0.0625 0.328125 0.0625 1.140625l0 4.25l-1.171875 0l0 -4.203125q0 -0.71875 -0.140625 -1.0625q-0.140625 -0.359375 -0.484375 -0.5625q-0.34375 -0.21875 -0.8125 -0.21875q-0.75 0 -1.296875 0.46875q-0.546875 0.46875 -0.546875 1.796875l0 3.78125l-1.171875 0zm6.9749756 -3.453125q0 -1.921875 1.078125 -2.84375q0.890625 -0.765625 2.171875 -0.765625q1.421875 0 2.328125 0.9375q0.90625 0.921875 0.90625 2.578125q0 1.328125 -0.40625 2.09375q-0.390625 0.765625 -1.15625 1.1875q-0.765625 0.421875 -1.671875 0.421875q-1.453125 0 -2.359375 -0.921875q-0.890625 -0.9375 -0.890625 -2.6875zm1.203125 0q0 1.328125 0.578125 1.984375q0.59375 0.65625 1.46875 0.65625q0.875 0 1.453125 -0.65625q0.578125 -0.671875 0.578125 -2.03125q0 -1.28125 -0.59375 -1.9375q-0.578125 -0.65625 -1.4375 -0.65625q-0.875 0 -1.46875 0.65625q-0.578125 0.65625 -0.578125 1.984375zm6.9593506 3.453125l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm11.609131 -2.53125l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm2.1484375 2.53125l0 -6.90625l1.046875 0l0 0.96875q0.328125 -0.515625 0.859375 -0.8125q0.546875 -0.3125 1.234375 -0.3125q0.78125 0 1.265625 0.3125q0.484375 0.3125 0.6875 0.890625q0.828125 -1.203125 2.140625 -1.203125q1.03125 0 1.578125 0.578125q0.5625 0.5625 0.5625 1.734375l0 4.75l-1.171875 0l0 -4.359375q0 -0.703125 -0.125 -1.0q-0.109375 -0.3125 -0.40625 -0.5q-0.296875 -0.1875 -0.703125 -0.1875q-0.71875 0 -1.203125 0.484375q-0.484375 0.484375 -0.484375 1.546875l0 4.015625l-1.171875 0l0 -4.484375q0 -0.78125 -0.296875 -1.171875q-0.28125 -0.390625 -0.921875 -0.390625q-0.5 0 -0.921875 0.265625q-0.421875 0.25 -0.609375 0.75q-0.1875 0.5 -0.1875 1.453125l0 3.578125l-1.171875 0zm15.586792 0l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm12.803101 -2.15625l-6.3125 0l0 -1.09375l6.3125 0l0 1.09375zm0 2.890625l-6.3125 0l0 -1.09375l6.3125 0l0 1.09375zm5.7053223 2.71875l-1.171875 0l0 -7.46875q-0.421875 0.40625 -1.109375 0.8125q-0.6875 0.40625 -1.234375 0.609375l0 -1.140625q0.984375 -0.453125 1.71875 -1.109375q0.734375 -0.671875 1.03125 -1.28125l0.765625 0l0 9.578125zm2.9906006 -4.703125q0 -1.6875 0.34375 -2.71875q0.359375 -1.03125 1.046875 -1.59375q0.6875 -0.5625 1.71875 -0.5625q0.78125 0 1.359375 0.3125q0.578125 0.296875 0.953125 0.890625q0.375 0.578125 0.59375 1.421875q0.21875 0.828125 0.21875 2.25q0 1.671875 -0.359375 2.703125q-0.34375 1.03125 -1.03125 1.59375q-0.671875 0.5625 -1.734375 0.5625q-1.375 0 -2.15625 -0.984375q-0.953125 -1.1875 -0.953125 -3.875zm1.203125 0q0 2.34375 0.546875 3.125q0.5625 0.78125 1.359375 0.78125q0.8125 0 1.359375 -0.78125q0.5625 -0.78125 0.5625 -3.125q0 -2.359375 -0.5625 -3.125q-0.546875 -0.78125 -1.359375 -0.78125q-0.8125 0 -1.296875 0.6875q-0.609375 0.875 -0.609375 3.21875zm6.8499756 4.703125l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm7.07782 0l0 -6.90625l1.0625 0l0 1.046875q0.40625 -0.734375 0.734375 -0.96875q0.34375 -0.234375 0.765625 -0.234375q0.59375 0 1.203125 0.375l-0.40625 1.078125q-0.4375 -0.25 -0.859375 -0.25q-0.390625 0 -0.703125 0.234375q-0.296875 0.234375 -0.421875 0.640625q-0.203125 0.625 -0.203125 1.359375l0 3.625l-1.171875 0zm9.1883545 -2.21875l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm9.084351 3.078125l0.171875 1.03125q-0.5 0.109375 -0.890625 0.109375q-0.640625 0 -1.0 -0.203125q-0.34375 -0.203125 -0.484375 -0.53125q-0.140625 -0.328125 -0.140625 -1.390625l0 -3.96875l-0.859375 0l0 -0.90625l0.859375 0l0 -1.71875l1.171875 -0.703125l0 2.421875l1.171875 0l0 0.90625l-1.171875 0l0 4.046875q0 0.5 0.046875 0.640625q0.0625 0.140625 0.203125 0.234375q0.140625 0.078125 0.40625 0.078125q0.203125 0 0.515625 -0.046875zm5.656128 -1.484375l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm1.7109375 -0.921875q0 -1.921875 1.078125 -2.84375q0.890625 -0.765625 2.171875 -0.765625q1.421875 0 2.328125 0.9375q0.90625 0.921875 0.90625 2.578125q0 1.328125 -0.40625 2.09375q-0.390625 0.765625 -1.15625 1.1875q-0.765625 0.421875 -1.671875 0.421875q-1.453125 0 -2.359375 -0.921875q-0.890625 -0.9375 -0.890625 -2.6875zm1.203125 0q0 1.328125 0.578125 1.984375q0.59375 0.65625 1.46875 0.65625q0.875 0 1.453125 -0.65625q0.578125 -0.671875 0.578125 -2.03125q0 -1.28125 -0.59375 -1.9375q-0.578125 -0.65625 -1.4375 -0.65625q-0.875 0 -1.46875 0.65625q-0.578125 0.65625 -0.578125 1.984375zm11.131226 3.453125l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm11.365601 1.234375l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.8343506 4.125l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0z" fill-rule="nonzero"/><path fill="#000000" d="m663.2466 693.5119l0 -9.5625l1.078125 0l0 0.890625q0.375 -0.53125 0.84375 -0.78125q0.484375 -0.265625 1.15625 -0.265625q0.875 0 1.546875 0.453125q0.6875 0.453125 1.03125 1.28125q0.34375 0.828125 0.34375 1.828125q0 1.046875 -0.375 1.90625q-0.375 0.84375 -1.109375 1.296875q-0.71875 0.453125 -1.53125 0.453125q-0.578125 0 -1.046875 -0.25q-0.46875 -0.25 -0.765625 -0.625l0 3.375l-1.171875 0zm1.0625 -6.078125q0 1.34375 0.53125 1.984375q0.546875 0.625 1.3125 0.625q0.78125 0 1.34375 -0.65625q0.5625 -0.65625 0.5625 -2.046875q0 -1.3125 -0.546875 -1.96875q-0.546875 -0.671875 -1.296875 -0.671875q-0.75 0 -1.328125 0.703125q-0.578125 0.703125 -0.578125 2.03125zm10.865601 2.5625q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm2.9437256 6.125l-0.125 -1.09375q0.375 0.109375 0.65625 0.109375q0.390625 0 0.625 -0.140625q0.234375 -0.125 0.390625 -0.359375q0.109375 -0.171875 0.359375 -0.875q0.03125 -0.09375 0.109375 -0.28125l-2.625 -6.921875l1.265625 0l1.4375 4.0q0.28125 0.765625 0.5 1.59375q0.203125 -0.796875 0.46875 -1.578125l1.484375 -4.015625l1.171875 0l-2.625 7.015625q-0.421875 1.140625 -0.65625 1.578125q-0.3125 0.578125 -0.71875 0.84375q-0.40625 0.28125 -0.96875 0.28125q-0.328125 0 -0.75 -0.15625zm6.6953125 -2.65625l0 -9.546875l1.171875 0l0 9.546875l-1.171875 0zm2.5391846 -3.453125q0 -1.921875 1.078125 -2.84375q0.890625 -0.765625 2.171875 -0.765625q1.421875 0 2.328125 0.9375q0.90625 0.921875 0.90625 2.578125q0 1.328125 -0.40625 2.09375q-0.390625 0.765625 -1.15625 1.1875q-0.765625 0.421875 -1.671875 0.421875q-1.453125 0 -2.359375 -0.921875q-0.890625 -0.9375 -0.890625 -2.6875zm1.203125 0q0 1.328125 0.578125 1.984375q0.59375 0.65625 1.46875 0.65625q0.875 0 1.453125 -0.65625q0.578125 -0.671875 0.578125 -2.03125q0 -1.28125 -0.59375 -1.9375q-0.578125 -0.65625 -1.4375 -0.65625q-0.875 0 -1.46875 0.65625q-0.578125 0.65625 -0.578125 1.984375zm11.162476 2.59375q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm7.4749756 3.46875l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm12.803101 -2.15625l-6.3125 0l0 -1.09375l6.3125 0l0 1.09375zm0 2.890625l-6.3125 0l0 -1.09375l6.3125 0l0 1.09375zm1.1115723 -1.265625q0.5 -0.015625 0.8125 -0.265625q0.3125 -0.265625 0.421875 -0.703125q0.109375 -0.453125 0.109375 -1.53125q0 -1.09375 0.03125 -1.4375q0.0625 -0.546875 0.21875 -0.875q0.171875 -0.34375 0.40625 -0.53125q0.234375 -0.203125 0.59375 -0.3125q0.25 -0.0625 0.8125 -0.0625l0.359375 0l0 1.015625l-0.203125 0q-0.671875 0 -0.90625 0.25q-0.21875 0.25 -0.21875 1.09375q0 1.703125 -0.0625 2.15625q-0.125 0.6875 -0.40625 1.078125q-0.28125 0.375 -0.890625 0.65625q0.71875 0.296875 1.03125 0.921875q0.328125 0.609375 0.328125 2.015625q0 1.265625 0.03125 1.5q0.046875 0.453125 0.25 0.625q0.21875 0.171875 0.84375 0.171875l0.203125 0l0 1.03125l-0.359375 0q-0.640625 0 -0.9375 -0.109375q-0.40625 -0.15625 -0.6875 -0.5q-0.265625 -0.328125 -0.359375 -0.84375q-0.078125 -0.5 -0.078125 -1.671875q0 -1.171875 -0.109375 -1.625q-0.109375 -0.453125 -0.421875 -0.703125q-0.3125 -0.265625 -0.8125 -0.28125l0 -1.0625zm5.87323 -3.953125l0 1.359375l-1.25 0l0 -1.078125q0 -0.875 0.203125 -1.265625q0.265625 -0.515625 0.859375 -0.78125l0.296875 0.453125q-0.359375 0.15625 -0.53125 0.453125q-0.171875 0.296875 -0.1875 0.859375l0.609375 0zm2.015625 0l0 1.359375l-1.25 0l0 -1.078125q0 -0.875 0.203125 -1.265625q0.28125 -0.515625 0.859375 -0.78125l0.296875 0.453125q-0.359375 0.15625 -0.53125 0.453125q-0.171875 0.296875 -0.1875 0.859375l0.609375 0zm5.9852295 7.9375l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm11.365601 1.234375l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm8.443726 4.125l-2.625 -6.90625l1.234375 0l1.484375 4.140625q0.234375 0.65625 0.4375 1.390625q0.15625 -0.546875 0.4375 -1.3125l1.53125 -4.21875l1.21875 0l-2.625 6.90625l-1.09375 0zm5.1171875 0l0 -9.546875l1.25 0l0 9.546875l-1.25 0zm7.812378 0l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm6.6937256 -2.703125l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm2.8250122 6.15625l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm3.452942 -6.15625l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm6.996887 6.15625l0 -0.875q-0.65625 1.03125 -1.9375 1.03125q-0.8125 0 -1.515625 -0.453125q-0.6875 -0.453125 -1.078125 -1.265625q-0.375 -0.828125 -0.375 -1.890625q0 -1.03125 0.34375 -1.875q0.34375 -0.84375 1.03125 -1.28125q0.703125 -0.453125 1.546875 -0.453125q0.625 0 1.109375 0.265625q0.5 0.25 0.796875 0.671875l0 -3.421875l1.171875 0l0 9.546875l-1.09375 0zm-3.703125 -3.453125q0 1.328125 0.5625 1.984375q0.5625 0.65625 1.328125 0.65625q0.765625 0 1.296875 -0.625q0.53125 -0.625 0.53125 -1.90625q0 -1.421875 -0.546875 -2.078125q-0.546875 -0.671875 -1.34375 -0.671875q-0.78125 0 -1.3125 0.640625q-0.515625 0.625 -0.515625 2.0zm6.6312256 6.109375l0 -9.5625l1.078125 0l0 0.890625q0.375 -0.53125 0.84375 -0.78125q0.484375 -0.265625 1.15625 -0.265625q0.875 0 1.546875 0.453125q0.6875 0.453125 1.03125 1.28125q0.34375 0.828125 0.34375 1.828125q0 1.046875 -0.375 1.90625q-0.375 0.84375 -1.109375 1.296875q-0.71875 0.453125 -1.53125 0.453125q-0.578125 0 -1.046875 -0.25q-0.46875 -0.25 -0.765625 -0.625l0 3.375l-1.171875 0zm1.0625 -6.078125q0 1.34375 0.53125 1.984375q0.546875 0.625 1.3125 0.625q0.78125 0 1.34375 -0.65625q0.5625 -0.65625 0.5625 -2.046875q0 -1.3125 -0.546875 -1.96875q-0.546875 -0.671875 -1.296875 -0.671875q-0.75 0 -1.328125 0.703125q-0.578125 0.703125 -0.578125 2.03125zm5.8812256 1.359375l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm7.1953125 -4.09375l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm2.8405762 0.578125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0zm0 5.578125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0zm2.874878 -3.984375q0.5 -0.015625 0.8125 -0.265625q0.3125 -0.265625 0.421875 -0.703125q0.109375 -0.453125 0.109375 -1.53125q0 -1.09375 0.03125 -1.4375q0.0625 -0.546875 0.21875 -0.875q0.171875 -0.34375 0.40625 -0.53125q0.234375 -0.203125 0.59375 -0.3125q0.25 -0.0625 0.8125 -0.0625l0.359375 0l0 1.015625l-0.203125 0q-0.671875 0 -0.90625 0.25q-0.21875 0.25 -0.21875 1.09375q0 1.703125 -0.0625 2.15625q-0.125 0.6875 -0.40625 1.078125q-0.28125 0.375 -0.890625 0.65625q0.71875 0.296875 1.03125 0.921875q0.328125 0.609375 0.328125 2.015625q0 1.265625 0.03125 1.5q0.046875 0.453125 0.25 0.625q0.21875 0.171875 0.84375 0.171875l0.203125 0l0 1.03125l-0.359375 0q-0.640625 0 -0.9375 -0.109375q-0.40625 -0.15625 -0.6875 -0.5q-0.265625 -0.328125 -0.359375 -0.84375q-0.078125 -0.5 -0.078125 -1.671875q0 -1.171875 -0.109375 -1.625q-0.109375 -0.453125 -0.421875 -0.703125q-0.3125 -0.265625 -0.8125 -0.28125l0 -1.0625zm5.013916 -2.171875l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm6.606201 6.15625l-1.171875 0l0 -7.46875q-0.421875 0.40625 -1.109375 0.8125q-0.6875 0.40625 -1.234375 0.609375l0 -1.140625q0.984375 -0.453125 1.71875 -1.109375q0.734375 -0.671875 1.03125 -1.28125l0.765625 0l0 9.578125zm3.3812256 -6.15625l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm2.8406372 0.578125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0zm0 5.578125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0zm3.656067 0l0 -6.0l-1.03125 0l0 -0.90625l1.03125 0l0 -0.734375q0 -0.703125 0.125 -1.046875q0.171875 -0.453125 0.59375 -0.734375q0.421875 -0.28125 1.203125 -0.28125q0.484375 0 1.09375 0.109375l-0.1875 1.03125q-0.359375 -0.0625 -0.6875 -0.0625q-0.53125 0 -0.75 0.234375q-0.21875 0.21875 -0.21875 0.84375l0 0.640625l1.34375 0l0 0.90625l-1.34375 0l0 6.0l-1.171875 0zm7.937378 -0.859375q-0.65625 0.5625 -1.265625 0.796875q-0.59375 0.21875 -1.28125 0.21875q-1.140625 0 -1.75 -0.546875q-0.609375 -0.5625 -0.609375 -1.4375q0 -0.5 0.21875 -0.921875q0.234375 -0.421875 0.609375 -0.671875q0.375 -0.25 0.84375 -0.390625q0.34375 -0.078125 1.046875 -0.171875q1.421875 -0.171875 2.09375 -0.40625q0 -0.234375 0 -0.296875q0 -0.71875 -0.328125 -1.015625q-0.453125 -0.390625 -1.34375 -0.390625q-0.8125 0 -1.21875 0.296875q-0.390625 0.28125 -0.578125 1.015625l-1.140625 -0.15625q0.15625 -0.734375 0.515625 -1.1875q0.359375 -0.453125 1.03125 -0.6875q0.671875 -0.25 1.5625 -0.25q0.890625 0 1.4375 0.203125q0.5625 0.203125 0.8125 0.53125q0.265625 0.3125 0.375 0.796875q0.046875 0.296875 0.046875 1.078125l0 1.5625q0 1.625 0.078125 2.0625q0.078125 0.4375 0.296875 0.828125l-1.21875 0q-0.1875 -0.359375 -0.234375 -0.859375zm-0.09375 -2.609375q-0.640625 0.265625 -1.921875 0.4375q-0.71875 0.109375 -1.015625 0.25q-0.296875 0.125 -0.46875 0.375q-0.15625 0.25 -0.15625 0.546875q0 0.46875 0.34375 0.78125q0.359375 0.3125 1.046875 0.3125q0.671875 0 1.203125 -0.296875q0.53125 -0.296875 0.78125 -0.8125q0.1875 -0.390625 0.1875 -1.171875l0 -0.421875zm2.9749756 3.46875l0 -9.546875l1.171875 0l0 9.546875l-1.171875 0zm2.5079956 -2.0625l1.15625 -0.1875q0.109375 0.703125 0.546875 1.078125q0.453125 0.359375 1.25 0.359375q0.8125 0 1.203125 -0.328125q0.390625 -0.328125 0.390625 -0.765625q0 -0.390625 -0.359375 -0.625q-0.234375 -0.15625 -1.1875 -0.390625q-1.296875 -0.328125 -1.796875 -0.5625q-0.484375 -0.25 -0.75 -0.65625q-0.25 -0.421875 -0.25 -0.9375q0 -0.453125 0.203125 -0.84375q0.21875 -0.40625 0.578125 -0.671875q0.28125 -0.1875 0.75 -0.328125q0.46875 -0.140625 1.015625 -0.140625q0.8125 0 1.421875 0.234375q0.609375 0.234375 0.90625 0.640625q0.296875 0.390625 0.40625 1.0625l-1.140625 0.15625q-0.078125 -0.53125 -0.453125 -0.828125q-0.375 -0.3125 -1.0625 -0.3125q-0.8125 0 -1.15625 0.265625q-0.34375 0.265625 -0.34375 0.625q0 0.234375 0.140625 0.421875q0.15625 0.1875 0.453125 0.3125q0.171875 0.0625 1.03125 0.296875q1.25 0.328125 1.734375 0.546875q0.5 0.203125 0.78125 0.609375q0.28125 0.40625 0.28125 1.0q0 0.59375 -0.34375 1.109375q-0.34375 0.515625 -1.0 0.796875q-0.640625 0.28125 -1.453125 0.28125q-1.34375 0 -2.046875 -0.5625q-0.703125 -0.5625 -0.90625 -1.65625zm11.8671875 -0.15625l1.203125 0.140625q-0.28125 1.0625 -1.0625 1.65625q-0.765625 0.578125 -1.96875 0.578125q-1.515625 0 -2.40625 -0.9375q-0.890625 -0.9375 -0.890625 -2.609375q0 -1.75 0.890625 -2.703125q0.90625 -0.96875 2.34375 -0.96875q1.390625 0 2.265625 0.9375q0.875 0.9375 0.875 2.65625q0 0.109375 0 0.3125l-5.15625 0q0.0625 1.140625 0.640625 1.75q0.578125 0.59375 1.4375 0.59375q0.65625 0 1.109375 -0.328125q0.453125 -0.34375 0.71875 -1.078125zm-3.84375 -1.90625l3.859375 0q-0.078125 -0.859375 -0.4375 -1.296875q-0.5625 -0.6875 -1.453125 -0.6875q-0.8125 0 -1.359375 0.546875q-0.546875 0.53125 -0.609375 1.4375zm6.8343506 4.125l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm3.452942 -6.15625l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm2.3718872 3.953125l1.125 -0.109375q0.140625 0.796875 0.546875 1.15625q0.40625 0.359375 1.03125 0.359375q0.53125 0 0.9375 -0.25q0.421875 -0.25 0.671875 -0.65625q0.265625 -0.421875 0.4375 -1.125q0.171875 -0.703125 0.171875 -1.421875q0 -0.078125 0 -0.234375q-0.359375 0.546875 -0.96875 0.90625q-0.59375 0.34375 -1.3125 0.34375q-1.1875 0 -2.015625 -0.859375q-0.8125 -0.859375 -0.8125 -2.265625q0 -1.453125 0.859375 -2.328125q0.859375 -0.890625 2.140625 -0.890625q0.9375 0 1.703125 0.5q0.78125 0.5 1.171875 1.4375q0.40625 0.921875 0.40625 2.671875q0 1.828125 -0.40625 2.921875q-0.390625 1.078125 -1.171875 1.640625q-0.78125 0.5625 -1.84375 0.5625q-1.109375 0 -1.828125 -0.609375q-0.703125 -0.625 -0.84375 -1.75zm4.796875 -4.21875q0 -1.0 -0.546875 -1.59375q-0.53125 -0.59375 -1.28125 -0.59375q-0.78125 0 -1.375 0.640625q-0.578125 0.640625 -0.578125 1.65625q0 0.90625 0.546875 1.484375q0.5625 0.5625 1.359375 0.5625q0.828125 0 1.34375 -0.5625q0.53125 -0.578125 0.53125 -1.59375zm2.8187256 0.265625l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.296875 1.828125l-0.71875 0zm2.15625 0l-0.328125 -1.828125l0 -1.5625l1.34375 0l0 1.5625l-0.3125 1.828125l-0.703125 0zm2.8405762 0.578125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0zm0 5.578125l0 -1.328125l1.328125 0l0 1.328125l-1.328125 0zm3.046753 -4.703125q0 -1.6875 0.34375 -2.71875q0.359375 -1.03125 1.046875 -1.59375q0.6875 -0.5625 1.71875 -0.5625q0.78125 0 1.359375 0.3125q0.578125 0.296875 0.953125 0.890625q0.375 0.578125 0.59375 1.421875q0.21875 0.828125 0.21875 2.25q0 1.671875 -0.359375 2.703125q-0.34375 1.03125 -1.03125 1.59375q-0.671875 0.5625 -1.734375 0.5625q-1.375 0 -2.15625 -0.984375q-0.953125 -1.1875 -0.953125 -3.875zm1.203125 0q0 2.34375 0.546875 3.125q0.5625 0.78125 1.359375 0.78125q0.8125 0 1.359375 -0.78125q0.5625 -0.78125 0.5625 -3.125q0 -2.359375 -0.5625 -3.125q-0.546875 -0.78125 -1.359375 -0.78125q-0.8125 0 -1.296875 0.6875q-0.609375 0.875 -0.609375 3.21875zm9.740601 0.71875l0 1.0625q-0.5 0.015625 -0.828125 0.28125q-0.3125 0.25 -0.421875 0.703125q-0.09375 0.4375 -0.109375 1.53125q0 1.078125 -0.03125 1.421875q-0.0625 0.5625 -0.21875 0.890625q-0.15625 0.328125 -0.390625 0.515625q-0.234375 0.203125 -0.59375 0.3125q-0.25 0.078125 -0.8125 0.078125l-0.359375 0l0 -1.03125l0.1875 0q0.6875 0 0.90625 -0.25q0.21875 -0.234375 0.21875 -1.09375q0 -1.625 0.0625 -2.0625q0.109375 -0.71875 0.421875 -1.140625q0.3125 -0.4375 0.875 -0.6875q-0.75 -0.359375 -1.0625 -0.9375q-0.296875 -0.59375 -0.296875 -2.0q0 -1.265625 -0.03125 -1.515625q-0.046875 -0.4375 -0.265625 -0.609375q-0.203125 -0.171875 -0.828125 -0.171875l-0.1875 0l0 -1.015625l0.359375 0q0.640625 0 0.921875 0.109375q0.421875 0.140625 0.6875 0.484375q0.28125 0.328125 0.359375 0.84375q0.078125 0.515625 0.078125 1.6875q0.015625 1.171875 0.109375 1.625q0.109375 0.4375 0.421875 0.703125q0.328125 0.25 0.828125 0.265625zm4.451416 0l0 1.0625q-0.5 0.015625 -0.828125 0.28125q-0.3125 0.25 -0.421875 0.703125q-0.09375 0.4375 -0.109375 1.53125q0 1.078125 -0.03125 1.421875q-0.0625 0.5625 -0.21875 0.890625q-0.15625 0.328125 -0.390625 0.515625q-0.234375 0.203125 -0.59375 0.3125q-0.25 0.078125 -0.8125 0.078125l-0.359375 0l0 -1.03125l0.1875 0q0.6875 0 0.90625 -0.25q0.21875 -0.234375 0.21875 -1.09375q0 -1.625 0.0625 -2.0625q0.109375 -0.71875 0.421875 -1.140625q0.3125 -0.4375 0.875 -0.6875q-0.75 -0.359375 -1.0625 -0.9375q-0.296875 -0.59375 -0.296875 -2.0q0 -1.265625 -0.03125 -1.515625q-0.046875 -0.4375 -0.265625 -0.609375q-0.203125 -0.171875 -0.828125 -0.171875l-0.1875 0l0 -1.015625l0.359375 0q0.640625 0 0.921875 0.109375q0.421875 0.140625 0.6875 0.484375q0.28125 0.328125 0.359375 0.84375q0.078125 0.515625 0.078125 1.6875q0.015625 1.171875 0.109375 1.625q0.109375 0.4375 0.421875 0.703125q0.328125 0.25 0.828125 0.265625zm1.56073 3.984375l0 -1.328125l1.328125 0l0 1.328125q0 0.734375 -0.265625 1.1875q-0.25 0.453125 -0.8125 0.703125l-0.328125 -0.5q0.375 -0.171875 0.546875 -0.484375q0.171875 -0.3125 0.1875 -0.90625l-0.65625 0zm11.609131 -2.53125l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm2.1328125 2.53125l0 -6.90625l1.0625 0l0 1.046875q0.40625 -0.734375 0.734375 -0.96875q0.34375 -0.234375 0.765625 -0.234375q0.59375 0 1.203125 0.375l-0.40625 1.078125q-0.4375 -0.25 -0.859375 -0.25q-0.390625 0 -0.703125 0.234375q-0.296875 0.234375 -0.421875 0.640625q-0.203125 0.625 -0.203125 1.359375l0 3.625l-1.171875 0zm8.9696045 -2.53125l1.15625 0.15625q-0.1875 1.1875 -0.96875 1.859375q-0.78125 0.671875 -1.921875 0.671875q-1.40625 0 -2.28125 -0.921875q-0.859375 -0.9375 -0.859375 -2.65625q0 -1.125 0.375 -1.96875q0.375 -0.84375 1.125 -1.25q0.765625 -0.421875 1.65625 -0.421875q1.125 0 1.84375 0.578125q0.71875 0.5625 0.921875 1.609375l-1.140625 0.171875q-0.171875 -0.703125 -0.59375 -1.046875q-0.40625 -0.359375 -0.984375 -0.359375q-0.890625 0 -1.453125 0.640625q-0.546875 0.640625 -0.546875 2.0q0 1.40625 0.53125 2.03125q0.546875 0.625 1.40625 0.625q0.6875 0 1.140625 -0.421875q0.46875 -0.421875 0.59375 -1.296875zm2.9140625 5.34375l-0.828125 0q1.9375 -3.125 1.9375 -6.265625q0 -1.21875 -0.28125 -2.421875q-0.21875 -0.984375 -0.609375 -1.875q-0.265625 -0.59375 -1.046875 -1.953125l0.828125 0q1.234375 1.640625 1.8125 3.28125q0.5 1.421875 0.5 2.96875q0 1.75 -0.671875 3.390625q-0.671875 1.640625 -1.640625 2.875z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m56.293964 438.06824l250.07875 0l0 45.259857l-250.07875 0z" fill-rule="evenodd"/><path fill="#000000" d="m82.5605 455.65198l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.75 0.8125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5231476 0.15625q-0.53125 0.453125 -1.015625 0.640625q-0.46875 0.171875 -1.015625 0.171875q-0.921875 0 -1.40625 -0.4375q-0.484375 -0.453125 -0.484375 -1.140625q0 -0.40625 0.171875 -0.734375q0.1875 -0.34375 0.484375 -0.546875q0.3125 -0.203125 0.6875 -0.3125q0.265625 -0.0625 0.828125 -0.140625q1.125 -0.125 1.671875 -0.3125q0 -0.203125 0 -0.25q0 -0.578125 -0.265625 -0.8125q-0.359375 -0.3125 -1.0625 -0.3125q-0.65625 0 -0.984375 0.234375q-0.3125 0.234375 -0.453125 0.8125l-0.921875 -0.125q0.125 -0.578125 0.40625 -0.9375q0.296875 -0.375 0.828125 -0.5625q0.546875 -0.203125 1.25 -0.203125q0.71875 0 1.15625 0.171875q0.4375 0.171875 0.640625 0.421875q0.21875 0.25 0.296875 0.640625q0.046875 0.234375 0.046875 0.859375l0 1.25q0 1.296875 0.0625 1.65625q0.0625 0.34375 0.234375 0.65625l-0.96875 0q-0.15625 -0.296875 -0.1875 -0.6875zm-0.078125 -2.078125q-0.515625 0.203125 -1.53125 0.34375q-0.578125 0.078125 -0.828125 0.1875q-0.234375 0.109375 -0.359375 0.3125q-0.125 0.1875 -0.125 0.4375q0 0.375 0.28125 0.625q0.28125 0.25 0.828125 0.25q0.53125 0 0.953125 -0.234375q0.421875 -0.234375 0.625 -0.65625q0.15625 -0.3125 0.15625 -0.9375l0 -0.328125zm4.4421234 1.921875l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5387726 0.84375l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm1.9264984 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.5 3.90625q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.296295 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702484 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.054397583 2.96875l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm6.4108734 -3.78125l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.75 0.8125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5231476 0.15625q-0.53125 0.453125 -1.015625 0.640625q-0.46875 0.171875 -1.015625 0.171875q-0.921875 0 -1.40625 -0.4375q-0.484375 -0.453125 -0.484375 -1.140625q0 -0.40625 0.171875 -0.734375q0.1875 -0.34375 0.484375 -0.546875q0.3125 -0.203125 0.6875 -0.3125q0.265625 -0.0625 0.828125 -0.140625q1.125 -0.125 1.671875 -0.3125q0 -0.203125 0 -0.25q0 -0.578125 -0.265625 -0.8125q-0.359375 -0.3125 -1.0625 -0.3125q-0.65625 0 -0.984375 0.234375q-0.3125 0.234375 -0.453125 0.8125l-0.921875 -0.125q0.125 -0.578125 0.40625 -0.9375q0.296875 -0.375 0.828125 -0.5625q0.546875 -0.203125 1.25 -0.203125q0.71875 0 1.15625 0.171875q0.4375 0.171875 0.640625 0.421875q0.21875 0.25 0.296875 0.640625q0.046875 0.234375 0.046875 0.859375l0 1.25q0 1.296875 0.0625 1.65625q0.0625 0.34375 0.234375 0.65625l-0.96875 0q-0.15625 -0.296875 -0.1875 -0.6875zm-0.078125 -2.078125q-0.515625 0.203125 -1.53125 0.34375q-0.578125 0.078125 -0.828125 0.1875q-0.234375 0.109375 -0.359375 0.3125q-0.125 0.1875 -0.125 0.4375q0 0.375 0.28125 0.625q0.28125 0.25 0.828125 0.25q0.53125 0 0.953125 -0.234375q0.421875 -0.234375 0.625 -0.65625q0.15625 -0.3125 0.15625 -0.9375l0 -0.328125zm4.4421234 1.921875l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5387726 0.84375l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm1.9264984 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.5 3.90625q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm7.71817 -0.84375l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5387726 0.84375l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm2.2858734 0l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm3.5642395 0l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm5.0671234 2.125l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm6.4421234 -4.890625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.3171234 2.765625l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm7.7233734 2.25q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm7.71817 -0.84375l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5387726 0.84375l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm2.2858734 0l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm3.5642395 0l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm5.0671234 2.125l0 -0.6875l6.2031403 0l0 0.6875l-6.2031403 0zm6.4421234 -4.890625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.5358887 2.765625l0 -4.796875l-0.828125 0l0 -0.734375l0.828125 0l0 -0.578125q0 -0.5625 0.109375 -0.828125q0.125 -0.375 0.46875 -0.59375q0.34375 -0.234375 0.953125 -0.234375q0.390625 0 0.875 0.09375l-0.140625 0.828125q-0.296875 -0.0625 -0.546875 -0.0625q-0.421875 0 -0.609375 0.1875q-0.171875 0.1875 -0.171875 0.6875l0 0.5l1.078125 0l0 0.734375l-1.078125 0l0 4.796875l-0.9375 0zm2.7679443 0l0 -4.796875l-0.828125 0l0 -0.734375l0.828125 0l0 -0.578125q0 -0.5625 0.109375 -0.828125q0.125 -0.375 0.46875 -0.59375q0.34375 -0.234375 0.953125 -0.234375q0.390625 0 0.875 0.09375l-0.140625 0.828125q-0.296875 -0.0625 -0.546875 -0.0625q-0.421875 0 -0.609375 0.1875q-0.171875 0.1875 -0.171875 0.6875l0 0.5l1.078125 0l0 0.734375l-1.078125 0l0 4.796875l-0.9375 0zm4.5387573 2.25q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0z" fill-rule="nonzero"/><path fill="#000000" d="m92.54284 468.452l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702484 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.054397583 2.96875l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm8.832748 -2.96875l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.9137726 -5.703125l0 -1.078125l0.9375 0l0 1.078125l-0.9375 0zm0 6.546875l0 -5.53125l0.9375 0l0 5.53125l-0.9375 0zm2.3674774 0l0 -5.53125l0.84375 0l0 0.78125q0.25 -0.40625 0.6875 -0.65625q0.4375 -0.25 0.984375 -0.25q0.609375 0 1.0 0.265625q0.390625 0.25 0.5625 0.703125q0.65625 -0.96875 1.703125 -0.96875q0.828125 0 1.265625 0.46875q0.4375 0.453125 0.4375 1.390625l0 3.796875l-0.921875 0l0 -3.484375q0 -0.5625 -0.09375 -0.796875q-0.09375 -0.25 -0.34375 -0.40625q-0.234375 -0.15625 -0.546875 -0.15625q-0.59375 0 -0.984375 0.390625q-0.375 0.390625 -0.375 1.25l0 3.203125l-0.9375 0l0 -3.59375q0 -0.625 -0.234375 -0.9375q-0.21875 -0.3125 -0.75 -0.3125q-0.390625 0 -0.734375 0.21875q-0.328125 0.203125 -0.484375 0.609375q-0.140625 0.390625 -0.140625 1.15625l0 2.859375l-0.9375 0zm12.657997 -1.78125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.9218826 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.7187576 -0.78125 1.8593826 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.1250076 0q0.046875 0.921875 0.5156326 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.0781326 -1.515625l3.0937576 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.48438263 1.140625zm5.207756 3.296875l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm5.3611145 2.25q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.296295 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702484 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.054397583 2.96875l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm8.317123 -2.125l-2.09375 -5.53125l0.984375 0l1.1875 3.3125q0.1875 0.53125 0.359375 1.109375q0.109375 -0.4375 0.34375 -1.046875l1.21875 -3.375l0.96875 0l-2.09375 5.53125l-0.875 0zm7.40625 -0.6875q-0.53125 0.453125 -1.015625 0.640625q-0.46875 0.171875 -1.015625 0.171875q-0.921875 0 -1.40625 -0.4375q-0.484375 -0.453125 -0.484375 -1.140625q0 -0.40625 0.171875 -0.734375q0.1875 -0.34375 0.484375 -0.546875q0.3125 -0.203125 0.6875 -0.3125q0.265625 -0.0625 0.828125 -0.140625q1.125 -0.125 1.671875 -0.3125q0 -0.203125 0 -0.25q0 -0.578125 -0.265625 -0.8125q-0.359375 -0.3125 -1.0625 -0.3125q-0.65625 0 -0.984375 0.234375q-0.3125 0.234375 -0.453125 0.8125l-0.921875 -0.125q0.125 -0.578125 0.40625 -0.9375q0.296875 -0.375 0.828125 -0.5625q0.546875 -0.203125 1.25 -0.203125q0.71875 0 1.15625 0.171875q0.4375 0.171875 0.640625 0.421875q0.21875 0.25 0.296875 0.640625q0.046875 0.234375 0.046875 0.859375l0 1.25q0 1.296875 0.0625 1.65625q0.0625 0.34375 0.234375 0.65625l-0.96875 0q-0.15625 -0.296875 -0.1875 -0.6875zm-0.078125 -2.078125q-0.515625 0.203125 -1.53125 0.34375q-0.578125 0.078125 -0.828125 0.1875q-0.234375 0.109375 -0.359375 0.3125q-0.125 0.1875 -0.125 0.4375q0 0.375 0.28125 0.625q0.28125 0.25 0.828125 0.25q0.53125 0 0.953125 -0.234375q0.421875 -0.234375 0.625 -0.65625q0.15625 -0.3125 0.15625 -0.9375l0 -0.328125zm2.3796234 2.765625l0 -7.625l0.9375 0l0 7.625l-0.9375 0zm6.0081024 0l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm6.082733 -1.78125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.0202637 5.546875q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.296295 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.270233 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.05441284 2.96875l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm10.363983 -2.125l0 -0.703125q-0.515625 0.828125 -1.546875 0.828125q-0.65625 0 -1.21875 -0.359375q-0.546875 -0.375 -0.859375 -1.015625q-0.296875 -0.65625 -0.296875 -1.5q0 -0.828125 0.28125 -1.5q0.28125 -0.6875 0.828125 -1.046875q0.546875 -0.359375 1.234375 -0.359375q0.5 0 0.890625 0.21875q0.390625 0.203125 0.625 0.546875l0 -2.734375l0.9375 0l0 7.625l-0.875 0zm-2.953125 -2.75q0 1.046875 0.4375 1.578125q0.453125 0.53125 1.0625 0.53125q0.609375 0 1.03125 -0.5q0.4375 -0.515625 0.4375 -1.53125q0 -1.140625 -0.4375 -1.671875q-0.4375 -0.53125 -1.078125 -0.53125q-0.609375 0 -1.03125 0.515625q-0.421875 0.5 -0.421875 1.609375zm5.3015137 -3.796875l0 -1.078125l0.9375 0l0 1.078125l-0.9375 0zm0 6.546875l0 -5.53125l0.9375 0l0 5.53125l-0.9375 0zm2.3674622 0l0 -5.53125l0.84375 0l0 0.78125q0.25 -0.40625 0.6875 -0.65625q0.4375 -0.25 0.984375 -0.25q0.609375 0 1.0 0.265625q0.390625 0.25 0.5625 0.703125q0.65625 -0.96875 1.703125 -0.96875q0.828125 0 1.265625 0.46875q0.4375 0.453125 0.4375 1.390625l0 3.796875l-0.921875 0l0 -3.484375q0 -0.5625 -0.09375 -0.796875q-0.09375 -0.25 -0.34375 -0.40625q-0.234375 -0.15625 -0.546875 -0.15625q-0.59375 0 -0.984375 0.390625q-0.375 0.390625 -0.375 1.25l0 3.203125l-0.9375 0l0 -3.59375q0 -0.625 -0.234375 -0.9375q-0.21875 -0.3125 -0.75 -0.3125q-0.390625 0 -0.734375 0.21875q-0.328125 0.203125 -0.484375 0.609375q-0.140625 0.390625 -0.140625 1.15625l0 2.859375l-0.9375 0zm8.8767395 0l0 -5.53125l0.84375 0l0 0.78125q0.25 -0.40625 0.6875 -0.65625q0.4375 -0.25 0.984375 -0.25q0.609375 0 1.0 0.265625q0.390625 0.25 0.5625 0.703125q0.65625 -0.96875 1.703125 -0.96875q0.828125 0 1.265625 0.46875q0.4375 0.453125 0.4375 1.390625l0 3.796875l-0.921875 0l0 -3.484375q0 -0.5625 -0.09375 -0.796875q-0.09375 -0.25 -0.34375 -0.40625q-0.234375 -0.15625 -0.546875 -0.15625q-0.59375 0 -0.984375 0.390625q-0.375 0.390625 -0.375 1.25l0 3.203125l-0.9375 0l0 -3.59375q0 -0.625 -0.234375 -0.9375q-0.21875 -0.3125 -0.75 -0.3125q-0.390625 0 -0.734375 0.21875q-0.328125 0.203125 -0.484375 0.609375q-0.140625 0.390625 -0.140625 1.15625l0 2.859375l-0.9375 0zm12.658005 -1.78125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.2031403 0 -1.9218903 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.8593903 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.1250153 0q0.046875 0.921875 0.515625 1.40625q0.46876526 0.484375 1.1562653 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.0781403 -1.515625l3.0937653 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.0937653 0.4375q-0.4375 0.421875 -0.484375 1.140625zm5.207779 3.296875l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm5.3611145 2.25q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m322.28348 438.06824l329.1968 0l0 45.259857l-329.1968 0z" fill-rule="evenodd"/><path fill="#000000" d="m358.1982 455.65198l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.75 0.8125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5231323 0.15625q-0.53125 0.453125 -1.015625 0.640625q-0.46875 0.171875 -1.015625 0.171875q-0.921875 0 -1.40625 -0.4375q-0.484375 -0.453125 -0.484375 -1.140625q0 -0.40625 0.171875 -0.734375q0.1875 -0.34375 0.484375 -0.546875q0.3125 -0.203125 0.6875 -0.3125q0.265625 -0.0625 0.828125 -0.140625q1.125 -0.125 1.671875 -0.3125q0 -0.203125 0 -0.25q0 -0.578125 -0.265625 -0.8125q-0.359375 -0.3125 -1.0625 -0.3125q-0.65625 0 -0.984375 0.234375q-0.3125 0.234375 -0.453125 0.8125l-0.921875 -0.125q0.125 -0.578125 0.40625 -0.9375q0.296875 -0.375 0.828125 -0.5625q0.546875 -0.203125 1.25 -0.203125q0.71875 0 1.15625 0.171875q0.4375 0.171875 0.640625 0.421875q0.21875 0.25 0.296875 0.640625q0.046875 0.234375 0.046875 0.859375l0 1.25q0 1.296875 0.0625 1.65625q0.0625 0.34375 0.234375 0.65625l-0.96875 0q-0.15625 -0.296875 -0.1875 -0.6875zm-0.078125 -2.078125q-0.515625 0.203125 -1.53125 0.34375q-0.578125 0.078125 -0.828125 0.1875q-0.234375 0.109375 -0.359375 0.3125q-0.125 0.1875 -0.125 0.4375q0 0.375 0.28125 0.625q0.28125 0.25 0.828125 0.25q0.53125 0 0.953125 -0.234375q0.421875 -0.234375 0.625 -0.65625q0.15625 -0.3125 0.15625 -0.9375l0 -0.328125zm4.4421387 1.921875l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5387573 0.84375l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm1.9265137 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.5 3.90625q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm7.71817 -0.84375l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5387573 0.84375l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm2.2858887 0l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm3.5642395 0l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm5.067108 2.125l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm6.4421387 -4.890625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.317108 2.765625l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm7.7233887 2.25q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm7.71817 -0.84375l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5387573 0.84375l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm2.2858887 0l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm3.5642395 0l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm5.067108 2.125l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm6.4421387 -4.890625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.535858 2.765625l0 -4.796875l-0.828125 0l0 -0.734375l0.828125 0l0 -0.578125q0 -0.5625 0.109375 -0.828125q0.125 -0.375 0.46875 -0.59375q0.34375 -0.234375 0.953125 -0.234375q0.390625 0 0.875 0.09375l-0.140625 0.828125q-0.296875 -0.0625 -0.546875 -0.0625q-0.421875 0 -0.609375 0.1875q-0.171875 0.1875 -0.171875 0.6875l0 0.5l1.078125 0l0 0.734375l-1.078125 0l0 4.796875l-0.9375 0zm2.7679443 0l0 -4.796875l-0.828125 0l0 -0.734375l0.828125 0l0 -0.578125q0 -0.5625 0.109375 -0.828125q0.125 -0.375 0.46875 -0.59375q0.34375 -0.234375 0.953125 -0.234375q0.390625 0 0.875 0.09375l-0.140625 0.828125q-0.296875 -0.0625 -0.546875 -0.0625q-0.421875 0 -0.609375 0.1875q-0.171875 0.1875 -0.171875 0.6875l0 0.5l1.078125 0l0 0.734375l-1.078125 0l0 4.796875l-0.9375 0zm4.538788 2.25q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.296295 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.270233 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.05441284 2.96875l0 -0.6875l6.2030945 0l0 0.6875l-6.2030945 0zm6.785858 -2.125l0 -5.53125l0.84375 0l0 0.78125q0.25 -0.40625 0.6875 -0.65625q0.4375 -0.25 0.984375 -0.25q0.609375 0 1.0 0.265625q0.390625 0.25 0.5625 0.703125q0.65625 -0.96875 1.703125 -0.96875q0.828125 0 1.265625 0.46875q0.4375 0.453125 0.4375 1.390625l0 3.796875l-0.921875 0l0 -3.484375q0 -0.5625 -0.09375 -0.796875q-0.09375 -0.25 -0.34375 -0.40625q-0.234375 -0.15625 -0.546875 -0.15625q-0.59375 0 -0.984375 0.390625q-0.375 0.390625 -0.375 1.25l0 3.203125l-0.9375 0l0 -3.59375q0 -0.625 -0.234375 -0.9375q-0.21875 -0.3125 -0.75 -0.3125q-0.390625 0 -0.734375 0.21875q-0.328125 0.203125 -0.484375 0.609375q-0.140625 0.390625 -0.140625 1.15625l0 2.859375l-0.9375 0zm8.53302 -2.765625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm8.895203 2.765625l0 -0.703125q-0.515625 0.828125 -1.546875 0.828125q-0.65625 0 -1.21875 -0.359375q-0.546875 -0.375 -0.859375 -1.015625q-0.296875 -0.65625 -0.296875 -1.5q0 -0.828125 0.28125 -1.5q0.28125 -0.6875 0.828125 -1.046875q0.546875 -0.359375 1.234375 -0.359375q0.5 0 0.890625 0.21875q0.390625 0.203125 0.625 0.546875l0 -2.734375l0.9375 0l0 7.625l-0.875 0zm-2.953125 -2.75q0 1.046875 0.4375 1.578125q0.453125 0.53125 1.0625 0.53125q0.609375 0 1.03125 -0.5q0.4375 -0.515625 0.4375 -1.53125q0 -1.140625 -0.4375 -1.671875q-0.4375 -0.53125 -1.078125 -0.53125q-0.609375 0 -1.03125 0.515625q-0.421875 0.5 -0.421875 1.609375zm9.082764 0.96875l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.0202637 5.546875q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361084 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.18927 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.2962646 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702637 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.054382324 2.96875l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm6.4108887 -3.78125l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.3125 -0.375l0.921875 0.125q-0.15625 0.953125 -0.78125 1.5q-0.625 0.53125 -1.53125 0.53125q-1.125 0 -1.8125 -0.734375q-0.6875 -0.75 -0.6875 -2.125q0 -0.90625 0.296875 -1.578125q0.296875 -0.671875 0.890625 -1.0q0.609375 -0.34375 1.328125 -0.34375q0.890625 0 1.46875 0.46875q0.578125 0.453125 0.734375 1.28125l-0.90625 0.140625q-0.140625 -0.546875 -0.46875 -0.828125q-0.328125 -0.28125 -0.796875 -0.28125q-0.703125 0 -1.15625 0.515625q-0.4375 0.5 -0.4375 1.59375q0 1.109375 0.421875 1.625q0.4375 0.5 1.125 0.5q0.546875 0 0.90625 -0.34375q0.375 -0.34375 0.484375 -1.046875zm5.5 0.25l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm5.2233887 3.296875l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm9.707703 -1.78125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.0202637 5.546875q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.189209 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0z" fill-rule="nonzero"/><path fill="#000000" d="m345.96008 468.452l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.270233 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.05441284 2.96875l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm10.395233 -4.15625l0.921875 0.125q-0.15625 0.953125 -0.78125 1.5q-0.625 0.53125 -1.53125 0.53125q-1.125 0 -1.8125 -0.734375q-0.6875 -0.75 -0.6875 -2.125q0 -0.90625 0.296875 -1.578125q0.296875 -0.671875 0.890625 -1.0q0.609375 -0.34375 1.328125 -0.34375q0.890625 0 1.46875 0.46875q0.578125 0.453125 0.734375 1.28125l-0.90625 0.140625q-0.140625 -0.546875 -0.46875 -0.828125q-0.328125 -0.28125 -0.796875 -0.28125q-0.703125 0 -1.15625 0.515625q-0.4375 0.5 -0.4375 1.59375q0 1.109375 0.421875 1.625q0.4375 0.5 1.125 0.5q0.546875 0 0.90625 -0.34375q0.375 -0.34375 0.484375 -1.046875zm1.375 -0.734375q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.3015137 2.765625l0 -7.625l0.9375 0l0 7.625l-0.9375 0zm2.0393372 -2.765625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm8.942139 2.765625l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm2.2858582 0l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm5.3611145 2.25q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.296295 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702637 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.054382324 2.96875l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm7.8015137 -2.125l-1.6875 -5.53125l0.96875 0l0.875 3.1875l0.328125 1.1875q0.03125 -0.078125 0.296875 -1.140625l0.875 -3.234375l0.953125 0l0.828125 3.203125l0.28125 1.0625l0.3125 -1.0625l0.953125 -3.203125l0.90625 0l-1.71875 5.53125l-0.984375 0l-0.875 -3.3125l-0.21875 -0.9375l-1.109375 4.25l-0.984375 0zm6.679962 0l0 -7.625l0.9375 0l0 2.734375q0.65625 -0.765625 1.65625 -0.765625q0.609375 0 1.0625 0.25q0.453125 0.234375 0.640625 0.671875q0.203125 0.421875 0.203125 1.234375l0 3.5l-0.9375 0l0 -3.5q0 -0.703125 -0.3125 -1.015625q-0.296875 -0.328125 -0.859375 -0.328125q-0.40625 0 -0.78125 0.21875q-0.359375 0.21875 -0.515625 0.59375q-0.15625 0.359375 -0.15625 1.015625l0 3.015625l-0.9375 0zm5.9265137 -6.546875l0 -1.078125l0.9375 0l0 1.078125l-0.9375 0zm0 6.546875l0 -5.53125l0.9375 0l0 5.53125l-0.9375 0zm4.414337 -0.84375l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.695038 -0.9375l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.020233 5.546875q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.3611145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.1892395 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.296295 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702637 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.054382324 2.96875l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm7.6452637 -2.125l-0.859375 0l0 -7.625l0.9375 0l0 2.71875q0.59375 -0.75 1.5 -0.75q0.515625 0 0.96875 0.21875q0.453125 0.203125 0.75 0.578125q0.296875 0.359375 0.453125 0.890625q0.171875 0.53125 0.171875 1.125q0 1.421875 -0.703125 2.203125q-0.703125 0.765625 -1.6875 0.765625q-0.96875 0 -1.53125 -0.8125l0 0.6875zm0 -2.796875q0 0.984375 0.265625 1.421875q0.4375 0.734375 1.1875 0.734375q0.625 0 1.0625 -0.53125q0.453125 -0.546875 0.453125 -1.59375q0 -1.078125 -0.4375 -1.59375q-0.421875 -0.515625 -1.03125 -0.515625q-0.609375 0 -1.0625 0.53125q-0.4375 0.53125 -0.4375 1.546875zm5.051483 2.796875l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm3.5642395 -6.546875l0 -1.078125l0.9375 0l0 1.078125l-0.9375 0zm0 6.546875l0 -5.53125l0.9375 0l0 5.53125l-0.9375 0zm2.1956177 0.453125l0.90625 0.140625q0.0625 0.421875 0.328125 0.609375q0.34375 0.265625 0.9375 0.265625q0.65625 0 1.0 -0.265625q0.359375 -0.25 0.484375 -0.71875q0.078125 -0.296875 0.078125 -1.203125q-0.625 0.71875 -1.53125 0.71875q-1.140625 0 -1.765625 -0.8125q-0.625 -0.828125 -0.625 -1.984375q0 -0.78125 0.28125 -1.453125q0.296875 -0.671875 0.828125 -1.03125q0.546875 -0.375 1.28125 -0.375q0.984375 0 1.609375 0.796875l0 -0.671875l0.875 0l0 4.78125q0 1.296875 -0.265625 1.828125q-0.265625 0.546875 -0.84375 0.859375q-0.5625 0.3125 -1.390625 0.3125q-0.984375 0 -1.59375 -0.453125q-0.609375 -0.4375 -0.59375 -1.34375zm0.78125 -3.3125q0 1.078125 0.421875 1.578125q0.4375 0.5 1.078125 0.5q0.65625 0 1.09375 -0.484375q0.4375 -0.5 0.4375 -1.5625q0 -1.015625 -0.453125 -1.53125q-0.453125 -0.515625 -1.09375 -0.515625q-0.609375 0 -1.046875 0.515625q-0.4375 0.5 -0.4375 1.5zm5.317108 2.859375l0 -7.625l0.9375 0l0 2.734375q0.65625 -0.765625 1.65625 -0.765625q0.609375 0 1.0625 0.25q0.453125 0.234375 0.640625 0.671875q0.203125 0.421875 0.203125 1.234375l0 3.5l-0.9375 0l0 -3.5q0 -0.703125 -0.3125 -1.015625q-0.296875 -0.328125 -0.859375 -0.328125q-0.40625 0 -0.78125 0.21875q-0.359375 0.21875 -0.515625 0.59375q-0.15625 0.359375 -0.15625 1.015625l0 3.015625l-0.9375 0zm7.973358 -0.84375l0.125 0.828125q-0.390625 0.09375 -0.7030945 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9374695 0l0 0.734375l-0.9374695 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.32809448 0.0625q0.15625 0 0.40625 -0.046875zm0.91381836 0.84375l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm9.707703 -1.78125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm4.8483887 1.640625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm5.328125 0l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.5 3.90625q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.189209 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.2963257 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702026 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.05444336 2.96875l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm10.395203 -4.15625l0.921875 0.125q-0.15625 0.953125 -0.78125 1.5q-0.625 0.53125 -1.53125 0.53125q-1.125 0 -1.8125 -0.734375q-0.6875 -0.75 -0.6875 -2.125q0 -0.90625 0.296875 -1.578125q0.296875 -0.671875 0.890625 -1.0q0.609375 -0.34375 1.328125 -0.34375q0.890625 0 1.46875 0.46875q0.578125 0.453125 0.734375 1.28125l-0.90625 0.140625q-0.140625 -0.546875 -0.46875 -0.828125q-0.328125 -0.28125 -0.796875 -0.28125q-0.703125 0 -1.15625 0.515625q-0.4375 0.5 -0.4375 1.59375q0 1.109375 0.421875 1.625q0.4375 0.5 1.125 0.5q0.546875 0 0.90625 -0.34375q0.375 -0.34375 0.484375 -1.046875zm1.375 -0.734375q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.3015137 2.765625l0 -7.625l0.9375 0l0 7.625l-0.9375 0zm2.0393677 -2.765625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm8.942078 2.765625l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm2.2858887 0l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm5.611145 -0.84375l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.6950073 -0.9375l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm5.2233887 3.296875l0 -5.53125l0.84375 0l0 0.78125q0.25 -0.40625 0.6875 -0.65625q0.4375 -0.25 0.984375 -0.25q0.609375 0 1.0 0.265625q0.390625 0.25 0.5625 0.703125q0.65625 -0.96875 1.703125 -0.96875q0.828125 0 1.265625 0.46875q0.4375 0.453125 0.4375 1.390625l0 3.796875l-0.921875 0l0 -3.484375q0 -0.5625 -0.09375 -0.796875q-0.09375 -0.25 -0.34375 -0.40625q-0.234375 -0.15625 -0.546875 -0.15625q-0.59375 0 -0.984375 0.390625q-0.375 0.390625 -0.375 1.25l0 3.203125l-0.9375 0l0 -3.59375q0 -0.625 -0.234375 -0.9375q-0.21875 -0.3125 -0.75 -0.3125q-0.390625 0 -0.734375 0.21875q-0.328125 0.203125 -0.484375 0.609375q-0.140625 0.390625 -0.140625 1.15625l0 2.859375l-0.9375 0zm8.876709 2.125l0 -7.65625l0.859375 0l0 0.71875q0.296875 -0.421875 0.671875 -0.625q0.390625 -0.21875 0.921875 -0.21875q0.703125 0 1.25 0.375q0.546875 0.359375 0.8125 1.03125q0.28125 0.65625 0.28125 1.453125q0 0.84375 -0.3125 1.53125q-0.296875 0.671875 -0.875 1.03125q-0.578125 0.359375 -1.21875 0.359375q-0.46875 0 -0.84375 -0.1875q-0.375 -0.203125 -0.609375 -0.515625l0 2.703125l-0.9375 0zm0.84375 -4.859375q0 1.0625 0.4375 1.578125q0.4375 0.515625 1.046875 0.515625q0.625 0 1.0625 -0.53125q0.453125 -0.53125 0.453125 -1.640625q0 -1.046875 -0.4375 -1.578125q-0.4375 -0.53125 -1.046875 -0.53125q-0.59375 0 -1.0625 0.5625q-0.453125 0.5625 -0.453125 1.625zm6.8796387 4.984375q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361084 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m666.28345 438.06824l214.51971 0l0 45.259857l-214.51971 0z" fill-rule="evenodd"/><path fill="#000000" d="m685.333 455.65198l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.75 0.8125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5231323 0.15625q-0.53125 0.453125 -1.015625 0.640625q-0.46875 0.171875 -1.015625 0.171875q-0.921875 0 -1.40625 -0.4375q-0.484375 -0.453125 -0.484375 -1.140625q0 -0.40625 0.171875 -0.734375q0.1875 -0.34375 0.484375 -0.546875q0.3125 -0.203125 0.6875 -0.3125q0.265625 -0.0625 0.828125 -0.140625q1.125 -0.125 1.671875 -0.3125q0 -0.203125 0 -0.25q0 -0.578125 -0.265625 -0.8125q-0.359375 -0.3125 -1.0625 -0.3125q-0.65625 0 -0.984375 0.234375q-0.3125 0.234375 -0.453125 0.8125l-0.921875 -0.125q0.125 -0.578125 0.40625 -0.9375q0.296875 -0.375 0.828125 -0.5625q0.546875 -0.203125 1.25 -0.203125q0.71875 0 1.15625 0.171875q0.4375 0.171875 0.640625 0.421875q0.21875 0.25 0.296875 0.640625q0.046875 0.234375 0.046875 0.859375l0 1.25q0 1.296875 0.0625 1.65625q0.0625 0.34375 0.234375 0.65625l-0.96875 0q-0.15625 -0.296875 -0.1875 -0.6875zm-0.078125 -2.078125q-0.515625 0.203125 -1.53125 0.34375q-0.578125 0.078125 -0.828125 0.1875q-0.234375 0.109375 -0.359375 0.3125q-0.125 0.1875 -0.125 0.4375q0 0.375 0.28125 0.625q0.28125 0.25 0.828125 0.25q0.53125 0 0.953125 -0.234375q0.421875 -0.234375 0.625 -0.65625q0.15625 -0.3125 0.15625 -0.9375l0 -0.328125zm4.4421387 1.921875l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5387573 0.84375l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm1.9265137 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.5 3.90625q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361084 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.18927 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.3275146 -2.765625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.3171387 4.890625l0 -7.65625l0.859375 0l0 0.71875q0.296875 -0.421875 0.671875 -0.625q0.390625 -0.21875 0.921875 -0.21875q0.703125 0 1.25 0.375q0.546875 0.359375 0.8125 1.03125q0.28125 0.65625 0.28125 1.453125q0 0.84375 -0.3125 1.53125q-0.296875 0.671875 -0.875 1.03125q-0.578125 0.359375 -1.21875 0.359375q-0.46875 0 -0.84375 -0.1875q-0.375 -0.203125 -0.609375 -0.515625l0 2.703125l-0.9375 0zm0.84375 -4.859375q0 1.0625 0.4375 1.578125q0.4375 0.515625 1.046875 0.515625q0.625 0 1.0625 -0.53125q0.453125 -0.53125 0.453125 -1.640625q0 -1.046875 -0.4375 -1.578125q-0.4375 -0.53125 -1.046875 -0.53125q-0.59375 0 -1.0625 0.5625q-0.453125 0.5625 -0.453125 1.625zm8.864014 0.953125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm5.2233276 3.296875l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm5.0671387 2.125l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm10.395264 -4.15625l0.921875 0.125q-0.15625 0.953125 -0.78125 1.5q-0.625 0.53125 -1.53125 0.53125q-1.125 0 -1.8125 -0.734375q-0.6875 -0.75 -0.6875 -2.125q0 -0.90625 0.296875 -1.578125q0.296875 -0.671875 0.890625 -1.0q0.609375 -0.34375 1.328125 -0.34375q0.890625 0 1.46875 0.46875q0.578125 0.453125 0.734375 1.28125l-0.90625 0.140625q-0.140625 -0.546875 -0.46875 -0.828125q-0.328125 -0.28125 -0.796875 -0.28125q-0.703125 0 -1.15625 0.515625q-0.4375 0.5 -0.4375 1.59375q0 1.109375 0.421875 1.625q0.4375 0.5 1.125 0.5q0.546875 0 0.90625 -0.34375q0.375 -0.34375 0.484375 -1.046875zm1.375 -0.734375q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm6.8483887 2.765625l-2.09375 -5.53125l0.984375 0l1.1875 3.3125q0.1875 0.53125 0.359375 1.109375q0.109375 -0.4375 0.34375 -1.046875l1.21875 -3.375l0.96875 0l-2.09375 5.53125l-0.875 0zm7.578125 -1.78125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm5.2077026 3.296875l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm5.361145 2.25q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361084 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.18927 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm9.28064 -2.03125l0.921875 0.125q-0.15625 0.953125 -0.78125 1.5q-0.625 0.53125 -1.53125 0.53125q-1.125 0 -1.8125 -0.734375q-0.6875 -0.75 -0.6875 -2.125q0 -0.90625 0.296875 -1.578125q0.296875 -0.671875 0.890625 -1.0q0.609375 -0.34375 1.328125 -0.34375q0.890625 0 1.46875 0.46875q0.578125 0.453125 0.734375 1.28125l-0.90625 0.140625q-0.140625 -0.546875 -0.46875 -0.828125q-0.328125 -0.28125 -0.796875 -0.28125q-0.703125 0 -1.15625 0.515625q-0.4375 0.5 -0.4375 1.59375q0 1.109375 0.421875 1.625q0.4375 0.5 1.125 0.5q0.546875 0 0.90625 -0.34375q0.375 -0.34375 0.484375 -1.046875zm1.703125 2.03125l0 -7.625l0.9375 0l0 7.625l-0.9375 0zm2.0393677 -2.765625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm4.9421387 1.109375l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm4.3640137 5.421875l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm10.395203 -4.15625l0.921875 0.125q-0.15625 0.953125 -0.78125 1.5q-0.625 0.53125 -1.53125 0.53125q-1.125 0 -1.8125 -0.734375q-0.6875 -0.75 -0.6875 -2.125q0 -0.90625 0.296875 -1.578125q0.296875 -0.671875 0.890625 -1.0q0.609375 -0.34375 1.328125 -0.34375q0.890625 0 1.46875 0.46875q0.578125 0.453125 0.734375 1.28125l-0.90625 0.140625q-0.140625 -0.546875 -0.46875 -0.828125q-0.328125 -0.28125 -0.796875 -0.28125q-0.703125 0 -1.15625 0.515625q-0.4375 0.5 -0.4375 1.59375q0 1.109375 0.421875 1.625q0.4375 0.5 1.125 0.5q0.546875 0 0.90625 -0.34375q0.375 -0.34375 0.484375 -1.046875zm1.375 -0.734375q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm6.8483887 2.765625l-2.09375 -5.53125l0.984375 0l1.1875 3.3125q0.1875 0.53125 0.359375 1.109375q0.109375 -0.4375 0.34375 -1.046875l1.21875 -3.375l0.96875 0l-2.09375 5.53125l-0.875 0zm7.578125 -1.78125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm5.2077637 3.296875l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm5.361084 2.25q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.189209 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0z" fill-rule="nonzero"/><path fill="#000000" d="m744.25977 468.452l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.75 0.8125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.5700073 -1.921875q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.3171387 4.890625l0 -7.65625l0.859375 0l0 0.71875q0.296875 -0.421875 0.671875 -0.625q0.390625 -0.21875 0.921875 -0.21875q0.703125 0 1.25 0.375q0.546875 0.359375 0.8125 1.03125q0.28125 0.65625 0.28125 1.453125q0 0.84375 -0.3125 1.53125q-0.296875 0.671875 -0.875 1.03125q-0.578125 0.359375 -1.21875 0.359375q-0.46875 0 -0.84375 -0.1875q-0.375 -0.203125 -0.609375 -0.515625l0 2.703125l-0.9375 0zm0.84375 -4.859375q0 1.0625 0.4375 1.578125q0.4375 0.515625 1.046875 0.515625q0.625 0 1.0625 -0.53125q0.453125 -0.53125 0.453125 -1.640625q0 -1.046875 -0.4375 -1.578125q-0.4375 -0.53125 -1.046875 -0.53125q-0.59375 0 -1.0625 0.5625q-0.453125 0.5625 -0.453125 1.625zm4.2233887 4.859375l0 -0.6875l6.203125 0l0 0.6875l-6.203125 0zm10.395203 -4.15625l0.921875 0.125q-0.15625 0.953125 -0.78125 1.5q-0.625 0.53125 -1.53125 0.53125q-1.125 0 -1.8125 -0.734375q-0.6875 -0.75 -0.6875 -2.125q0 -0.90625 0.296875 -1.578125q0.296875 -0.671875 0.890625 -1.0q0.609375 -0.34375 1.328125 -0.34375q0.890625 0 1.46875 0.46875q0.578125 0.453125 0.734375 1.28125l-0.90625 0.140625q-0.140625 -0.546875 -0.46875 -0.828125q-0.328125 -0.28125 -0.796875 -0.28125q-0.703125 0 -1.15625 0.515625q-0.4375 0.5 -0.4375 1.59375q0 1.109375 0.421875 1.625q0.4375 0.5 1.125 0.5q0.546875 0 0.90625 -0.34375q0.375 -0.34375 0.484375 -1.046875zm1.375 -0.734375q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm6.8483887 2.765625l-2.09375 -5.53125l0.984375 0l1.1875 3.3125q0.1875 0.53125 0.359375 1.109375q0.109375 -0.4375 0.34375 -1.046875l1.21875 -3.375l0.96875 0l-2.09375 5.53125l-0.875 0zm7.578125 -1.78125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm5.2077637 3.296875l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm5.361084 2.25q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875z" fill-rule="nonzero"/><path fill="#efefef" d="m360.0966 390.4331l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984375 -4.452606c0.19003296 -0.023529053 0.37890625 0.029693604 0.52508545 0.14794922c0.1461792 0.118255615 0.2376709 0.2918396 0.25439453 0.48257446l0.25195312 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m360.0966 390.4331l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984375 -4.452606c0.19003296 -0.023529053 0.37890625 0.029693604 0.52508545 0.14794922c0.1461792 0.118255615 0.2376709 0.2918396 0.25439453 0.48257446l0.25195312 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path fill="#efefef" d="m360.0966 398.4331l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984375 -4.452606c0.19003296 -0.023529053 0.37890625 0.029693604 0.52508545 0.14794922c0.1461792 0.118255615 0.2376709 0.2918396 0.25439453 0.48257446l0.25195312 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m360.0966 398.4331l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984375 -4.452606c0.19003296 -0.023529053 0.37890625 0.029693604 0.52508545 0.14794922c0.1461792 0.118255615 0.2376709 0.2918396 0.25439453 0.48257446l0.25195312 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path fill="#efefef" d="m360.0966 405.33575l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984375 -4.452606c0.19003296 -0.023498535 0.37890625 0.029724121 0.52508545 0.14794922c0.1461792 0.118255615 0.2376709 0.2918396 0.25439453 0.48257446l0.25195312 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m360.0966 405.33575l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984375 -4.452606c0.19003296 -0.023498535 0.37890625 0.029724121 0.52508545 0.14794922c0.1461792 0.118255615 0.2376709 0.2918396 0.25439453 0.48257446l0.25195312 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path fill="#efefef" d="m468.0795 407.58005l37.795288 0l-7.5590515 9.574799l-22.677155 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m468.0795 407.58005l37.795288 0l-7.5590515 9.574799l-22.677155 0z" fill-rule="evenodd"/><path fill="#d9d9d9" d="m453.5651 343.51712l68.107635 0l-13.6215515 42.097107l-40.864563 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m453.5651 343.51712l68.107635 0l-13.6215515 42.097107l-40.864563 0z" fill-rule="evenodd"/><path fill="#efefef" d="m468.53305 390.4331l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984406 -4.452606c0.19003296 -0.023529053 0.37890625 0.029693604 0.52505493 0.14794922c0.1461792 0.118255615 0.23770142 0.2918396 0.25439453 0.48257446l0.25198364 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m468.53305 390.4331l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984406 -4.452606c0.19003296 -0.023529053 0.37890625 0.029693604 0.52505493 0.14794922c0.1461792 0.118255615 0.23770142 0.2918396 0.25439453 0.48257446l0.25198364 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path fill="#efefef" d="m468.53305 398.4331l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984406 -4.452606c0.19003296 -0.023529053 0.37890625 0.029693604 0.52505493 0.14794922c0.1461792 0.118255615 0.23770142 0.2918396 0.25439453 0.48257446l0.25198364 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m468.53305 398.4331l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984406 -4.452606c0.19003296 -0.023529053 0.37890625 0.029693604 0.52505493 0.14794922c0.1461792 0.118255615 0.23770142 0.2918396 0.25439453 0.48257446l0.25198364 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path fill="#efefef" d="m468.53305 405.33575l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984406 -4.452606c0.19003296 -0.023498535 0.37890625 0.029724121 0.52505493 0.14794922c0.1461792 0.118255615 0.23770142 0.2918396 0.25439453 0.48257446l0.25198364 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m468.53305 405.33575l0 0c-0.03479004 -0.39718628 0.25778198 -0.7588501 0.6534729 -0.8078308l35.984406 -4.452606c0.19003296 -0.023498535 0.37890625 0.029724121 0.52505493 0.14794922c0.1461792 0.118255615 0.23770142 0.2918396 0.25439453 0.48257446l0.25198364 2.8766174c0.03479004 0.39718628 -0.25778198 0.7588501 -0.6534729 0.8078308l-35.984406 4.452606c-0.39569092 0.048950195 -0.7446594 -0.2333374 -0.77944946 -0.6305237z" fill-rule="evenodd"/><path fill="#f3f3f3" d="m249.19948 322.5328l0 0c0 -0.27542114 0.2232666 -0.49868774 0.49868774 -0.49868774l1.9947357 0l0 0c0.13226318 0 0.2591095 0.05255127 0.35263062 0.14605713c0.09352112 0.09353638 0.14607239 0.22036743 0.14607239 0.35263062l0 56.26245c0 0.27542114 -0.22328186 0.49871826 -0.498703 0.49871826l-1.9947357 0c-0.27542114 0 -0.49868774 -0.22329712 -0.49868774 -0.49871826z" fill-rule="evenodd"/><path stroke="#b7b7b7" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m249.19948 322.5328l0 0c0 -0.27542114 0.2232666 -0.49868774 0.49868774 -0.49868774l1.9947357 0l0 0c0.13226318 0 0.2591095 0.05255127 0.35263062 0.14605713c0.09352112 0.09353638 0.14607239 0.22036743 0.14607239 0.35263062l0 56.26245c0 0.27542114 -0.22328186 0.49871826 -0.498703 0.49871826l-1.9947357 0c-0.27542114 0 -0.49868774 -0.22329712 -0.49868774 -0.49871826z" fill-rule="evenodd"/><path fill="#f3f3f3" d="m253.74478 322.28873l5.0393677 0l0 1.0708618l-5.0393677 0z" fill-rule="evenodd"/><path stroke="#b7b7b7" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m253.74478 322.28873l5.0393677 0l0 1.0708618l-5.0393677 0z" fill-rule="evenodd"/><path fill="#f3f3f3" d="m253.74478 378.28873l5.0393677 0l0 1.0708618l-5.0393677 0z" fill-rule="evenodd"/><path stroke="#b7b7b7" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m253.74478 378.28873l5.0393677 0l0 1.0708618l-5.0393677 0z" fill-rule="evenodd"/><path fill="#f3f3f3" d="m253.74478 340.95538l5.0393677 0l0 1.0708618l-5.0393677 0z" fill-rule="evenodd"/><path stroke="#b7b7b7" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m253.74478 340.95538l5.0393677 0l0 1.0708618l-5.0393677 0z" fill-rule="evenodd"/><path fill="#f3f3f3" d="m253.74478 359.62204l5.0393677 0l0 1.0708618l-5.0393677 0z" fill-rule="evenodd"/><path stroke="#b7b7b7" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m253.74478 359.62204l5.0393677 0l0 1.0708618l-5.0393677 0z" fill-rule="evenodd"/><path fill="#d9d9d9" d="m80.091866 348.33304l73.41732 0l0 75.08661l-73.41732 0zm9.177162 9.177155l0 56.7323l55.06299 0l0 -56.7323z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m80.091866 348.33304l73.41732 0l0 75.08661l-73.41732 0zm9.177162 9.177155l0 56.7323l55.06299 0l0 -56.7323z" fill-rule="evenodd"/><path fill="#efefef" d="m109.676216 367.65198l0 5.13385l-15.401573 0l0 -5.13385z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m109.676216 367.65198l0 5.13385l-15.401573 0l0 -5.13385z" fill-rule="evenodd"/><path fill="#efefef" d="m114.2451 393.61548l5.1338577 0l0 15.401581l-5.1338577 0z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m114.2451 393.61548l5.1338577 0l0 15.401581l-5.1338577 0z" fill-rule="evenodd"/><path fill="#efefef" d="m138.44362 367.65198l0 5.13385l-15.401573 0l0 -5.13385z" fill-rule="evenodd"/><path stroke="#000000" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m138.44362 367.65198l0 5.13385l-15.401573 0l0 -5.13385z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m605.2231 59.05019l223.87402 0l0 45.259846l-223.87402 0z" fill-rule="evenodd"/><path fill="#000000" d="m623.81696 78.74332l0.90625 0.140625q0.0625 0.421875 0.328125 0.609375q0.34375 0.265625 0.9375 0.265625q0.65625 0 1.0 -0.265625q0.359375 -0.25 0.484375 -0.71875q0.078125 -0.296875 0.078125 -1.203125q-0.625 0.71875 -1.53125 0.71875q-1.140625 0 -1.765625 -0.8125q-0.625 -0.828125 -0.625 -1.984375q0 -0.78125 0.28125 -1.453125q0.296875 -0.671875 0.828125 -1.03125q0.546875 -0.375 1.28125 -0.375q0.984375 0 1.609375 0.796875l0 -0.671875l0.875 0l0 4.78125q0 1.296875 -0.265625 1.828125q-0.265625 0.546875 -0.84375 0.859375q-0.5625 0.3125 -1.390625 0.3125q-0.984375 0 -1.59375 -0.453125q-0.609375 -0.4375 -0.59375 -1.34375zm0.78125 -3.3125q0 1.078125 0.421875 1.578125q0.4375 0.5 1.078125 0.5q0.65625 0 1.09375 -0.484375q0.4375 -0.5 0.4375 -1.5625q0 -1.015625 -0.453125 -1.53125q-0.453125 -0.515625 -1.09375 -0.515625q-0.609375 0 -1.046875 0.515625q-0.4375 0.5 -0.4375 1.5zm9.098389 1.078125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702637 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.4918823 0.84375l0 -0.703125q-0.515625 0.828125 -1.546875 0.828125q-0.65625 0 -1.21875 -0.359375q-0.546875 -0.375 -0.859375 -1.015625q-0.296875 -0.65625 -0.296875 -1.5q0 -0.828125 0.28125 -1.5q0.28125 -0.6875 0.828125 -1.046875q0.546875 -0.359375 1.234375 -0.359375q0.5 0 0.890625 0.21875q0.390625 0.203125 0.625 0.546875l0 -2.734375l0.9375 0l0 7.625l-0.875 0zm-2.953125 -2.75q0 1.046875 0.4375 1.578125q0.453125 0.53125 1.0625 0.53125q0.609375 0 1.03125 -0.5q0.4375 -0.515625 0.4375 -1.53125q0 -1.140625 -0.4375 -1.671875q-0.4375 -0.53125 -1.078125 -0.53125q-0.609375 0 -1.03125 0.515625q-0.421875 0.5 -0.421875 1.609375zm9.082764 0.96875l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm6.7545776 3.296875l-2.09375 -5.53125l0.984375 0l1.1875 3.3125q0.1875 0.53125 0.359375 1.109375q0.109375 -0.4375 0.34375 -1.046875l1.21875 -3.375l0.96875 0l-2.09375 5.53125l-0.875 0zm3.796875 -6.546875l0 -1.078125l0.9375 0l0 1.078125l-0.9375 0zm0 6.546875l0 -5.53125l0.9375 0l0 5.53125l-0.9375 0zm5.9768677 -2.03125l0.921875 0.125q-0.15625 0.953125 -0.78125 1.5q-0.625 0.53125 -1.53125 0.53125q-1.125 0 -1.8125 -0.734375q-0.6875 -0.75 -0.6875 -2.125q0 -0.90625 0.296875 -1.578125q0.296875 -0.671875 0.890625 -1.0q0.609375 -0.34375 1.328125 -0.34375q0.890625 0 1.46875 0.46875q0.578125 0.453125 0.734375 1.28125l-0.90625 0.140625q-0.140625 -0.546875 -0.46875 -0.828125q-0.328125 -0.28125 -0.796875 -0.28125q-0.703125 0 -1.15625 0.515625q-0.4375 0.5 -0.4375 1.59375q0 1.109375 0.421875 1.625q0.4375 0.5 1.125 0.5q0.546875 0 0.90625 -0.34375q0.375 -0.34375 0.484375 -1.046875zm5.5 0.25l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm4.8483887 1.640625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.5 3.90625q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361084 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.18927 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.4993896 0.453125l0.90625 0.140625q0.0625 0.421875 0.328125 0.609375q0.34375 0.265625 0.9375 0.265625q0.65625 0 1.0 -0.265625q0.359375 -0.25 0.484375 -0.71875q0.078125 -0.296875 0.078125 -1.203125q-0.625 0.71875 -1.53125 0.71875q-1.140625 0 -1.765625 -0.8125q-0.625 -0.828125 -0.625 -1.984375q0 -0.78125 0.28125 -1.453125q0.296875 -0.671875 0.828125 -1.03125q0.546875 -0.375 1.28125 -0.375q0.984375 0 1.609375 0.796875l0 -0.671875l0.875 0l0 4.78125q0 1.296875 -0.265625 1.828125q-0.265625 0.546875 -0.84375 0.859375q-0.5625 0.3125 -1.390625 0.3125q-0.984375 0 -1.59375 -0.453125q-0.609375 -0.4375 -0.59375 -1.34375zm0.78125 -3.3125q0 1.078125 0.421875 1.578125q0.4375 0.5 1.078125 0.5q0.65625 0 1.09375 -0.484375q0.4375 -0.5 0.4375 -1.5625q0 -1.015625 -0.453125 -1.53125q-0.453125 -0.515625 -1.09375 -0.515625q-0.609375 0 -1.046875 0.515625q-0.4375 0.5 -0.4375 1.5zm9.098389 1.078125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702637 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.5387573 -0.8125l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.75 0.8125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5231323 0.15625q-0.53125 0.453125 -1.015625 0.640625q-0.46875 0.171875 -1.015625 0.171875q-0.921875 0 -1.40625 -0.4375q-0.484375 -0.453125 -0.484375 -1.140625q0 -0.40625 0.171875 -0.734375q0.1875 -0.34375 0.484375 -0.546875q0.3125 -0.203125 0.6875 -0.3125q0.265625 -0.0625 0.828125 -0.140625q1.125 -0.125 1.671875 -0.3125q0 -0.203125 0 -0.25q0 -0.578125 -0.265625 -0.8125q-0.359375 -0.3125 -1.0625 -0.3125q-0.65625 0 -0.984375 0.234375q-0.3125 0.234375 -0.453125 0.8125l-0.921875 -0.125q0.125 -0.578125 0.40625 -0.9375q0.296875 -0.375 0.828125 -0.5625q0.546875 -0.203125 1.25 -0.203125q0.71875 0 1.15625 0.171875q0.4375 0.171875 0.640625 0.421875q0.21875 0.25 0.296875 0.640625q0.046875 0.234375 0.046875 0.859375l0 1.25q0 1.296875 0.0625 1.65625q0.0625 0.34375 0.234375 0.65625l-0.96875 0q-0.15625 -0.296875 -0.1875 -0.6875zm-0.078125 -2.078125q-0.515625 0.203125 -1.53125 0.34375q-0.578125 0.078125 -0.828125 0.1875q-0.234375 0.109375 -0.359375 0.3125q-0.125 0.1875 -0.125 0.4375q0 0.375 0.28125 0.625q0.28125 0.25 0.828125 0.25q0.53125 0 0.953125 -0.234375q0.421875 -0.234375 0.625 -0.65625q0.15625 -0.3125 0.15625 -0.9375l0 -0.328125zm4.4421387 1.921875l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.5387573 0.84375l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm1.9265137 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.5 3.90625q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.189209 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.4994507 0.453125l0.90625 0.140625q0.0625 0.421875 0.328125 0.609375q0.34375 0.265625 0.9375 0.265625q0.65625 0 1.0 -0.265625q0.359375 -0.25 0.484375 -0.71875q0.078125 -0.296875 0.078125 -1.203125q-0.625 0.71875 -1.53125 0.71875q-1.140625 0 -1.765625 -0.8125q-0.625 -0.828125 -0.625 -1.984375q0 -0.78125 0.28125 -1.453125q0.296875 -0.671875 0.828125 -1.03125q0.546875 -0.375 1.28125 -0.375q0.984375 0 1.609375 0.796875l0 -0.671875l0.875 0l0 4.78125q0 1.296875 -0.265625 1.828125q-0.265625 0.546875 -0.84375 0.859375q-0.5625 0.3125 -1.390625 0.3125q-0.984375 0 -1.59375 -0.453125q-0.609375 -0.4375 -0.59375 -1.34375zm0.78125 -3.3125q0 1.078125 0.421875 1.578125q0.4375 0.5 1.078125 0.5q0.65625 0 1.09375 -0.484375q0.4375 -0.5 0.4375 -1.5625q0 -1.015625 -0.453125 -1.53125q-0.453125 -0.515625 -1.09375 -0.515625q-0.609375 0 -1.046875 0.515625q-0.4375 0.5 -0.4375 1.5zm9.098328 1.078125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702637 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm1.1325073 0.84375l0 -4.796875l-0.828125 0l0 -0.734375l0.828125 0l0 -0.578125q0 -0.5625 0.109375 -0.828125q0.125 -0.375 0.46875 -0.59375q0.34375 -0.234375 0.953125 -0.234375q0.390625 0 0.875 0.09375l-0.140625 0.828125q-0.296875 -0.0625 -0.546875 -0.0625q-0.421875 0 -0.609375 0.1875q-0.171875 0.1875 -0.171875 0.6875l0 0.5l1.078125 0l0 0.734375l-1.078125 0l0 4.796875l-0.9375 0zm6.3669434 0l0 -0.8125q-0.65625 0.9375 -1.75 0.9375q-0.5 0 -0.921875 -0.1875q-0.421875 -0.1875 -0.625 -0.46875q-0.203125 -0.28125 -0.296875 -0.703125q-0.046875 -0.265625 -0.046875 -0.875l0 -3.421875l0.9375 0l0 3.0625q0 0.734375 0.046875 1.0q0.09375 0.359375 0.375 0.578125q0.296875 0.203125 0.703125 0.203125q0.421875 0 0.796875 -0.203125q0.375 -0.21875 0.515625 -0.59375q0.15625 -0.375 0.15625 -1.078125l0 -2.96875l0.9375 0l0 5.53125l-0.828125 0zm2.3014526 0l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm9.535889 -2.03125l0.921875 0.125q-0.15625 0.953125 -0.78125 1.5q-0.625 0.53125 -1.53125 0.53125q-1.125 0 -1.8125 -0.734375q-0.6875 -0.75 -0.6875 -2.125q0 -0.90625 0.296875 -1.578125q0.296875 -0.671875 0.890625 -1.0q0.609375 -0.34375 1.328125 -0.34375q0.890625 0 1.46875 0.46875q0.578125 0.453125 0.734375 1.28125l-0.90625 0.140625q-0.140625 -0.546875 -0.46875 -0.828125q-0.328125 -0.28125 -0.796875 -0.28125q-0.703125 0 -1.15625 0.515625q-0.4375 0.5 -0.4375 1.59375q0 1.109375 0.421875 1.625q0.4375 0.5 1.125 0.5q0.546875 0 0.90625 -0.34375q0.375 -0.34375 0.484375 -1.046875zm3.765625 1.1875l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.9137573 -5.703125l0 -1.078125l0.9375 0l0 1.078125l-0.9375 0zm0 6.546875l0 -5.53125l0.9375 0l0 5.53125l-0.9375 0zm2.0237427 -2.765625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.3171387 2.765625l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm5.5515137 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.5 3.90625q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361084 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.18927 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0z" fill-rule="nonzero"/><path fill="#000000" d="m619.0794 91.54332l0.90625 0.140625q0.0625 0.421875 0.328125 0.609375q0.34375 0.265625 0.9375 0.265625q0.65625 0 1.0 -0.265625q0.359375 -0.25 0.484375 -0.71875q0.078125 -0.296875 0.078125 -1.203125q-0.625 0.71875 -1.53125 0.71875q-1.140625 0 -1.765625 -0.8125q-0.625 -0.828125 -0.625 -1.984375q0 -0.78125 0.28125 -1.453125q0.296875 -0.671875 0.828125 -1.03125q0.546875 -0.375 1.28125 -0.375q0.984375 0 1.609375 0.796875l0 -0.671875l0.875 0l0 4.78125q0 1.296875 -0.265625 1.828125q-0.265625 0.546875 -0.84375 0.859375q-0.5625 0.3125 -1.390625 0.3125q-0.984375 0 -1.59375 -0.453125q-0.609375 -0.4375 -0.59375 -1.34375zm0.78125 -3.3125q0 1.078125 0.421875 1.578125q0.4375 0.5 1.078125 0.5q0.65625 0 1.09375 -0.484375q0.4375 -0.5 0.4375 -1.5625q0 -1.015625 -0.453125 -1.53125q-0.453125 -0.515625 -1.09375 -0.515625q-0.609375 0 -1.046875 0.515625q-0.4375 0.5 -0.4375 1.5zm9.098389 1.078125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702637 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.9137573 2.96875l0 -7.65625l0.859375 0l0 0.71875q0.296875 -0.421875 0.671875 -0.625q0.390625 -0.21875 0.921875 -0.21875q0.703125 0 1.25 0.375q0.546875 0.359375 0.8125 1.03125q0.28125 0.65625 0.28125 1.453125q0 0.84375 -0.3125 1.53125q-0.296875 0.671875 -0.875 1.03125q-0.578125 0.359375 -1.21875 0.359375q-0.46875 0 -0.84375 -0.1875q-0.375 -0.203125 -0.609375 -0.515625l0 2.703125l-0.9375 0zm0.84375 -4.859375q0 1.0625 0.4375 1.578125q0.4375 0.515625 1.046875 0.515625q0.625 0 1.0625 -0.53125q0.453125 -0.53125 0.453125 -1.640625q0 -1.046875 -0.4375 -1.578125q-0.4375 -0.53125 -1.046875 -0.53125q-0.59375 0 -1.0625 0.5625q-0.453125 0.5625 -0.453125 1.625zm5.0671387 2.734375l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm3.220459 -2.765625q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.3171387 4.890625l0 -7.65625l0.859375 0l0 0.71875q0.296875 -0.421875 0.671875 -0.625q0.390625 -0.21875 0.921875 -0.21875q0.703125 0 1.25 0.375q0.546875 0.359375 0.8125 1.03125q0.28125 0.65625 0.28125 1.453125q0 0.84375 -0.3125 1.53125q-0.296875 0.671875 -0.875 1.03125q-0.578125 0.359375 -1.21875 0.359375q-0.46875 0 -0.84375 -0.1875q-0.375 -0.203125 -0.609375 -0.515625l0 2.703125l-0.9375 0zm0.84375 -4.859375q0 1.0625 0.4375 1.578125q0.4375 0.515625 1.046875 0.515625q0.625 0 1.0625 -0.53125q0.453125 -0.53125 0.453125 -1.640625q0 -1.046875 -0.4375 -1.578125q-0.4375 -0.53125 -1.046875 -0.53125q-0.59375 0 -1.0625 0.5625q-0.453125 0.5625 -0.453125 1.625zm8.864014 0.953125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm5.2077026 3.296875l0 -5.53125l0.84375 0l0 0.84375q0.328125 -0.59375 0.59375 -0.78125q0.28125 -0.1875 0.609375 -0.1875q0.46875 0 0.953125 0.3125l-0.3125 0.859375q-0.34375 -0.203125 -0.6875 -0.203125q-0.3125 0 -0.5625 0.1875q-0.234375 0.1875 -0.34375 0.515625q-0.15625 0.5 -0.15625 1.09375l0 2.890625l-0.9375 0zm5.611145 -0.84375l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm0.9137573 -5.703125l0 -1.078125l0.9375 0l0 1.078125l-0.9375 0zm0 6.546875l0 -5.53125l0.9375 0l0 5.53125l-0.9375 0zm6.1487427 -1.78125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm4.8483887 1.640625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.5 3.90625q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361084 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.18927 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.4993896 0.453125l0.90625 0.140625q0.0625 0.421875 0.328125 0.609375q0.34375 0.265625 0.9375 0.265625q0.65625 0 1.0 -0.265625q0.359375 -0.25 0.484375 -0.71875q0.078125 -0.296875 0.078125 -1.203125q-0.625 0.71875 -1.53125 0.71875q-1.140625 0 -1.765625 -0.8125q-0.625 -0.828125 -0.625 -1.984375q0 -0.78125 0.28125 -1.453125q0.296875 -0.671875 0.828125 -1.03125q0.546875 -0.375 1.28125 -0.375q0.984375 0 1.609375 0.796875l0 -0.671875l0.875 0l0 4.78125q0 1.296875 -0.265625 1.828125q-0.265625 0.546875 -0.84375 0.859375q-0.5625 0.3125 -1.390625 0.3125q-0.984375 0 -1.59375 -0.453125q-0.609375 -0.4375 -0.59375 -1.34375zm0.78125 -3.3125q0 1.078125 0.421875 1.578125q0.4375 0.5 1.078125 0.5q0.65625 0 1.09375 -0.484375q0.4375 -0.5 0.4375 -1.5625q0 -1.015625 -0.453125 -1.53125q-0.453125 -0.515625 -1.09375 -0.515625q-0.609375 0 -1.046875 0.515625q-0.4375 0.5 -0.4375 1.5zm9.098389 1.078125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm7.2702637 2.453125l0.125 0.828125q-0.390625 0.09375 -0.703125 0.09375q-0.5 0 -0.78125 -0.15625q-0.28125 -0.171875 -0.40625 -0.4375q-0.109375 -0.265625 -0.109375 -1.109375l0 -3.171875l-0.6875 0l0 -0.734375l0.6875 0l0 -1.359375l0.9375 -0.5625l0 1.921875l0.9375 0l0 0.734375l-0.9375 0l0 3.234375q0 0.390625 0.046875 0.515625q0.046875 0.109375 0.15625 0.1875q0.109375 0.0625 0.328125 0.0625q0.15625 0 0.40625 -0.046875zm4.4918823 0.84375l0 -0.703125q-0.515625 0.828125 -1.546875 0.828125q-0.65625 0 -1.21875 -0.359375q-0.546875 -0.375 -0.859375 -1.015625q-0.296875 -0.65625 -0.296875 -1.5q0 -0.828125 0.28125 -1.5q0.28125 -0.6875 0.828125 -1.046875q0.546875 -0.359375 1.234375 -0.359375q0.5 0 0.890625 0.21875q0.390625 0.203125 0.625 0.546875l0 -2.734375l0.9375 0l0 7.625l-0.875 0zm-2.953125 -2.75q0 1.046875 0.4375 1.578125q0.453125 0.53125 1.0625 0.53125q0.609375 0 1.03125 -0.5q0.4375 -0.515625 0.4375 -1.53125q0 -1.140625 -0.4375 -1.671875q-0.4375 -0.53125 -1.078125 -0.53125q-0.609375 0 -1.03125 0.515625q-0.421875 0.5 -0.421875 1.609375zm5.3015137 4.875l0 -7.65625l0.859375 0l0 0.71875q0.296875 -0.421875 0.671875 -0.625q0.390625 -0.21875 0.921875 -0.21875q0.703125 0 1.25 0.375q0.546875 0.359375 0.8125 1.03125q0.28125 0.65625 0.28125 1.453125q0 0.84375 -0.3125 1.53125q-0.296875 0.671875 -0.875 1.03125q-0.578125 0.359375 -1.21875 0.359375q-0.46875 0 -0.84375 -0.1875q-0.375 -0.203125 -0.609375 -0.515625l0 2.703125l-0.9375 0zm0.84375 -4.859375q0 1.0625 0.4375 1.578125q0.4375 0.515625 1.046875 0.515625q0.625 0 1.0625 -0.53125q0.453125 -0.53125 0.453125 -1.640625q0 -1.046875 -0.4375 -1.578125q-0.4375 -0.53125 -1.046875 -0.53125q-0.59375 0 -1.0625 0.5625q-0.453125 0.5625 -0.453125 1.625zm4.7077026 1.078125l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm7.5 3.90625q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875zm3.189209 -2.25l0 -1.0625l1.0625 0l0 1.0625q0 0.59375 -0.21875 0.953125q-0.203125 0.359375 -0.65625 0.5625l-0.25 -0.40625q0.296875 -0.125 0.4375 -0.390625q0.140625 -0.25 0.15625 -0.71875l-0.53125 0zm5.2963257 -1.65625l0.921875 -0.140625q0.078125 0.5625 0.4375 0.859375q0.359375 0.296875 1.0 0.296875q0.640625 0 0.953125 -0.265625q0.3125 -0.265625 0.3125 -0.625q0 -0.3125 -0.28125 -0.5q-0.1875 -0.125 -0.953125 -0.3125q-1.03125 -0.265625 -1.4375 -0.453125q-0.390625 -0.1875 -0.59375 -0.515625q-0.203125 -0.34375 -0.203125 -0.75q0 -0.359375 0.171875 -0.671875q0.171875 -0.328125 0.453125 -0.53125q0.21875 -0.15625 0.59375 -0.265625q0.390625 -0.125 0.8125 -0.125q0.65625 0 1.140625 0.1875q0.5 0.1875 0.734375 0.515625q0.234375 0.3125 0.3125 0.859375l-0.90625 0.125q-0.0625 -0.4375 -0.375 -0.671875q-0.296875 -0.234375 -0.828125 -0.234375q-0.65625 0 -0.9375 0.21875q-0.265625 0.203125 -0.265625 0.484375q0 0.1875 0.109375 0.328125q0.125 0.15625 0.359375 0.25q0.140625 0.0625 0.828125 0.25q1.0 0.265625 1.390625 0.4375q0.390625 0.15625 0.609375 0.484375q0.234375 0.3125 0.234375 0.796875q0 0.46875 -0.28125 0.890625q-0.265625 0.40625 -0.78125 0.640625q-0.515625 0.21875 -1.171875 0.21875q-1.078125 0 -1.640625 -0.4375q-0.5625 -0.453125 -0.71875 -1.34375zm9.484375 -0.125l0.96875 0.125q-0.234375 0.84375 -0.859375 1.3125q-0.609375 0.46875 -1.578125 0.46875q-1.203125 0 -1.921875 -0.75q-0.703125 -0.75 -0.703125 -2.09375q0 -1.390625 0.71875 -2.15625q0.71875 -0.78125 1.859375 -0.78125q1.109375 0 1.8125 0.765625q0.703125 0.75 0.703125 2.125q0 0.078125 0 0.234375l-4.125 0q0.046875 0.921875 0.515625 1.40625q0.46875 0.484375 1.15625 0.484375q0.515625 0 0.875 -0.265625q0.359375 -0.28125 0.578125 -0.875zm-3.078125 -1.515625l3.09375 0q-0.0625 -0.6875 -0.359375 -1.046875q-0.453125 -0.53125 -1.15625 -0.53125q-0.640625 0 -1.09375 0.4375q-0.4375 0.421875 -0.484375 1.140625zm5.2233887 3.296875l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm9.504578 0l0 -0.703125q-0.515625 0.828125 -1.546875 0.828125q-0.65625 0 -1.21875 -0.359375q-0.546875 -0.375 -0.859375 -1.015625q-0.296875 -0.65625 -0.296875 -1.5q0 -0.828125 0.28125 -1.5q0.28125 -0.6875 0.828125 -1.046875q0.546875 -0.359375 1.234375 -0.359375q0.5 0 0.890625 0.21875q0.390625 0.203125 0.625 0.546875l0 -2.734375l0.9375 0l0 7.625l-0.875 0zm-2.953125 -2.75q0 1.046875 0.4375 1.578125q0.453125 0.53125 1.0625 0.53125q0.609375 0 1.03125 -0.5q0.4375 -0.515625 0.4375 -1.53125q0 -1.140625 -0.4375 -1.671875q-0.4375 -0.53125 -1.078125 -0.53125q-0.609375 0 -1.03125 0.515625q-0.421875 0.5 -0.421875 1.609375zm8.910889 0.71875l0.921875 0.125q-0.15625 0.953125 -0.78125 1.5q-0.625 0.53125 -1.53125 0.53125q-1.125 0 -1.8125 -0.734375q-0.6875 -0.75 -0.6875 -2.125q0 -0.90625 0.296875 -1.578125q0.296875 -0.671875 0.890625 -1.0q0.609375 -0.34375 1.328125 -0.34375q0.890625 0 1.46875 0.46875q0.578125 0.453125 0.734375 1.28125l-0.90625 0.140625q-0.140625 -0.546875 -0.46875 -0.828125q-0.328125 -0.28125 -0.796875 -0.28125q-0.703125 0 -1.15625 0.515625q-0.4375 0.5 -0.4375 1.59375q0 1.109375 0.421875 1.625q0.4375 0.5 1.125 0.5q0.546875 0 0.90625 -0.34375q0.375 -0.34375 0.484375 -1.046875zm1.375 -0.734375q0 -1.53125 0.84375 -2.265625q0.71875 -0.625 1.734375 -0.625q1.140625 0 1.859375 0.75q0.734375 0.75 0.734375 2.0625q0 1.0625 -0.328125 1.6875q-0.3125 0.609375 -0.921875 0.953125q-0.609375 0.328125 -1.34375 0.328125q-1.15625 0 -1.875 -0.734375q-0.703125 -0.75 -0.703125 -2.15625zm0.953125 0q0 1.0625 0.46875 1.59375q0.46875 0.53125 1.15625 0.53125q0.703125 0 1.15625 -0.53125q0.46875 -0.53125 0.46875 -1.625q0 -1.015625 -0.46875 -1.546875q-0.453125 -0.53125 -1.15625 -0.53125q-0.6875 0 -1.15625 0.53125q-0.46875 0.515625 -0.46875 1.578125zm5.3171387 2.765625l0 -5.53125l0.84375 0l0 0.78125q0.25 -0.40625 0.6875 -0.65625q0.4375 -0.25 0.984375 -0.25q0.609375 0 1.0 0.265625q0.390625 0.25 0.5625 0.703125q0.65625 -0.96875 1.703125 -0.96875q0.828125 0 1.265625 0.46875q0.4375 0.453125 0.4375 1.390625l0 3.796875l-0.921875 0l0 -3.484375q0 -0.5625 -0.09375 -0.796875q-0.09375 -0.25 -0.34375 -0.40625q-0.234375 -0.15625 -0.546875 -0.15625q-0.59375 0 -0.984375 0.390625q-0.375 0.390625 -0.375 1.25l0 3.203125l-0.9375 0l0 -3.59375q0 -0.625 -0.234375 -0.9375q-0.21875 -0.3125 -0.75 -0.3125q-0.390625 0 -0.734375 0.21875q-0.328125 0.203125 -0.484375 0.609375q-0.140625 0.390625 -0.140625 1.15625l0 2.859375l-0.9375 0zm8.876709 0l0 -5.53125l0.84375 0l0 0.78125q0.25 -0.40625 0.6875 -0.65625q0.4375 -0.25 0.984375 -0.25q0.609375 0 1.0 0.265625q0.390625 0.25 0.5625 0.703125q0.65625 -0.96875 1.703125 -0.96875q0.828125 0 1.265625 0.46875q0.4375 0.453125 0.4375 1.390625l0 3.796875l-0.921875 0l0 -3.484375q0 -0.5625 -0.09375 -0.796875q-0.09375 -0.25 -0.34375 -0.40625q-0.234375 -0.15625 -0.546875 -0.15625q-0.59375 0 -0.984375 0.390625q-0.375 0.390625 -0.375 1.25l0 3.203125l-0.9375 0l0 -3.59375q0 -0.625 -0.234375 -0.9375q-0.21875 -0.3125 -0.75 -0.3125q-0.390625 0 -0.734375 0.21875q-0.328125 0.203125 -0.484375 0.609375q-0.140625 0.390625 -0.140625 1.15625l0 2.859375l-0.9375 0zm12.486145 -0.6875q-0.53125 0.453125 -1.015625 0.640625q-0.46875 0.171875 -1.015625 0.171875q-0.921875 0 -1.40625 -0.4375q-0.484375 -0.453125 -0.484375 -1.140625q0 -0.40625 0.171875 -0.734375q0.1875 -0.34375 0.484375 -0.546875q0.3125 -0.203125 0.6875 -0.3125q0.265625 -0.0625 0.828125 -0.140625q1.125 -0.125 1.671875 -0.3125q0 -0.203125 0 -0.25q0 -0.578125 -0.265625 -0.8125q-0.359375 -0.3125 -1.0625 -0.3125q-0.65625 0 -0.984375 0.234375q-0.3125 0.234375 -0.453125 0.8125l-0.921875 -0.125q0.125 -0.578125 0.40625 -0.9375q0.296875 -0.375 0.828125 -0.5625q0.546875 -0.203125 1.25 -0.203125q0.71875 0 1.15625 0.171875q0.4375 0.171875 0.640625 0.421875q0.21875 0.25 0.296875 0.640625q0.046875 0.234375 0.046875 0.859375l0 1.25q0 1.296875 0.0625 1.65625q0.0625 0.34375 0.234375 0.65625l-0.96875 0q-0.15625 -0.296875 -0.1875 -0.6875zm-0.078125 -2.078125q-0.515625 0.203125 -1.53125 0.34375q-0.578125 0.078125 -0.828125 0.1875q-0.234375 0.109375 -0.359375 0.3125q-0.125 0.1875 -0.125 0.4375q0 0.375 0.28125 0.625q0.28125 0.25 0.828125 0.25q0.53125 0 0.953125 -0.234375q0.421875 -0.234375 0.625 -0.65625q0.15625 -0.3125 0.15625 -0.9375l0 -0.328125zm2.3952637 2.765625l0 -5.53125l0.84375 0l0 0.796875q0.609375 -0.921875 1.75 -0.921875q0.5 0 0.921875 0.1875q0.421875 0.171875 0.625 0.46875q0.21875 0.296875 0.296875 0.6875q0.046875 0.265625 0.046875 0.921875l0 3.390625l-0.9375 0l0 -3.359375q0 -0.578125 -0.109375 -0.859375q-0.109375 -0.28125 -0.390625 -0.453125q-0.265625 -0.171875 -0.640625 -0.171875q-0.59375 0 -1.03125 0.390625q-0.4375 0.375 -0.4375 1.4375l0 3.015625l-0.9375 0zm9.504578 0l0 -0.703125q-0.515625 0.828125 -1.546875 0.828125q-0.65625 0 -1.21875 -0.359375q-0.546875 -0.375 -0.859375 -1.015625q-0.296875 -0.65625 -0.296875 -1.5q0 -0.828125 0.28125 -1.5q0.28125 -0.6875 0.828125 -1.046875q0.546875 -0.359375 1.234375 -0.359375q0.5 0 0.890625 0.21875q0.390625 0.203125 0.625 0.546875l0 -2.734375l0.9375 0l0 7.625l-0.875 0zm-2.953125 -2.75q0 1.046875 0.4375 1.578125q0.453125 0.53125 1.0625 0.53125q0.609375 0 1.03125 -0.5q0.4375 -0.515625 0.4375 -1.53125q0 -1.140625 -0.4375 -1.671875q-0.4375 -0.53125 -1.078125 -0.53125q-0.609375 0 -1.03125 0.515625q-0.421875 0.5 -0.421875 1.609375zm7.0983887 5.0q-0.78125 -0.984375 -1.328125 -2.296875q-0.53125 -1.3125 -0.53125 -2.71875q0 -1.234375 0.40625 -2.375q0.46875 -1.3125 1.453125 -2.625l0.65625 0q-0.625 1.09375 -0.828125 1.546875q-0.3125 0.71875 -0.5 1.5q-0.21875 0.984375 -0.21875 1.96875q0 2.5 1.546875 5.0l-0.65625 0zm2.361145 0l-0.671875 0q1.5625 -2.5 1.5625 -5.0q0 -0.984375 -0.21875 -1.953125q-0.1875 -0.78125 -0.5 -1.5q-0.203125 -0.46875 -0.84375 -1.5625l0.671875 0q0.984375 1.3125 1.453125 2.625q0.390625 1.140625 0.390625 2.375q0 1.40625 -0.53125 2.71875q-0.53125 1.3125 -1.3125 2.296875z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m330.072 58.607414l314.9606 0l0 114.74015l-314.9606 0z" fill-rule="evenodd"/><path fill="#000000" d="m441.81894 85.52741l0 -11.09375l-3.953125 0l0 -2.265625l10.609375 0l0 2.265625l-3.953125 0l0 11.09375l-2.703125 0zm13.354309 0l0 -1.453125q-0.53125 0.78125 -1.390625 1.234375q-0.859375 0.4375 -1.8125 0.4375q-0.96875 0 -1.75 -0.421875q-0.765625 -0.4375 -1.125 -1.203125q-0.34375 -0.78125 -0.34375 -2.140625l0 -6.125l2.5625 0l0 4.4375q0 2.046875 0.140625 2.515625q0.140625 0.453125 0.515625 0.71875q0.375 0.265625 0.953125 0.265625q0.65625 0 1.171875 -0.359375q0.515625 -0.359375 0.703125 -0.890625q0.203125 -0.53125 0.203125 -2.609375l0 -4.078125l2.546875 0l0 9.671875l-2.375 0zm3.817871 -9.671875l2.71875 0l2.328125 6.859375l2.25 -6.859375l2.65625 0l-3.421875 9.3125l-0.609375 1.6875q-0.328125 0.84375 -0.640625 1.28125q-0.3125 0.453125 -0.703125 0.71875q-0.390625 0.28125 -0.96875 0.4375q-0.578125 0.15625 -1.3125 0.15625q-0.734375 0 -1.453125 -0.15625l-0.21875 -2.0q0.59375 0.125 1.078125 0.125q0.890625 0 1.3125 -0.53125q0.4375 -0.515625 0.671875 -1.328125l-3.6875 -9.703125zm13.500702 2.953125l-2.328125 -0.421875q0.40625 -1.40625 1.359375 -2.078125q0.953125 -0.671875 2.84375 -0.671875q1.703125 0 2.546875 0.40625q0.84375 0.40625 1.171875 1.03125q0.34375 0.625 0.34375 2.28125l-0.015625 3.0q0 1.265625 0.109375 1.875q0.125 0.609375 0.46875 1.296875l-2.53125 0q-0.109375 -0.25 -0.25 -0.75q-0.0625 -0.234375 -0.09375 -0.3125q-0.65625 0.640625 -1.40625 0.96875q-0.734375 0.3125 -1.59375 0.3125q-1.484375 0 -2.34375 -0.8125q-0.859375 -0.8125 -0.859375 -2.046875q0 -0.828125 0.390625 -1.46875q0.390625 -0.640625 1.09375 -0.96875q0.703125 -0.34375 2.03125 -0.609375q1.796875 -0.328125 2.484375 -0.625l0 -0.25q0 -0.75 -0.359375 -1.0625q-0.359375 -0.3125 -1.375 -0.3125q-0.6875 0 -1.078125 0.28125q-0.375 0.265625 -0.609375 0.9375zm3.421875 2.078125q-0.484375 0.15625 -1.5625 0.390625q-1.0625 0.21875 -1.390625 0.4375q-0.5 0.359375 -0.5 0.90625q0 0.53125 0.40625 0.9375q0.40625 0.390625 1.015625 0.390625q0.703125 0 1.328125 -0.46875q0.46875 -0.34375 0.609375 -0.84375q0.09375 -0.328125 0.09375 -1.25l0 -0.5zm18.793396 -0.265625l2.609375 0.828125q-0.59375 2.1875 -2.0 3.25q-1.390625 1.0625 -3.546875 1.0625q-2.65625 0 -4.375 -1.8125q-1.703125 -1.828125 -1.703125 -4.984375q0 -3.328125 1.71875 -5.171875q1.71875 -1.84375 4.515625 -1.84375q2.453125 0 3.984375 1.4375q0.921875 0.859375 1.375 2.46875l-2.671875 0.640625q-0.234375 -1.046875 -0.984375 -1.640625q-0.75 -0.609375 -1.828125 -0.609375q-1.484375 0 -2.421875 1.078125q-0.921875 1.0625 -0.921875 3.4375q0 2.53125 0.90625 3.609375q0.921875 1.078125 2.375 1.078125q1.078125 0 1.84375 -0.671875q0.78125 -0.6875 1.125 -2.15625zm4.9104614 4.90625l0 -13.359375l2.5625 0l0 13.359375l-2.5625 0zm4.5895386 -4.96875q0 -1.28125 0.625 -2.46875q0.625 -1.203125 1.78125 -1.828125q1.15625 -0.625 2.578125 -0.625q2.1875 0 3.59375 1.421875q1.40625 1.421875 1.40625 3.609375q0 2.1875 -1.421875 3.640625q-1.421875 1.4375 -3.5625 1.4375q-1.328125 0 -2.546875 -0.59375q-1.203125 -0.609375 -1.828125 -1.765625q-0.625 -1.171875 -0.625 -2.828125zm2.625 0.125q0 1.453125 0.671875 2.21875q0.6875 0.75 1.6875 0.75q1.0 0 1.671875 -0.75q0.6875 -0.765625 0.6875 -2.234375q0 -1.421875 -0.6875 -2.1875q-0.671875 -0.765625 -1.671875 -0.765625q-1.0 0 -1.6875 0.765625q-0.671875 0.765625 -0.671875 2.203125zm15.724121 4.84375l0 -1.453125q-0.53125 0.78125 -1.390625 1.234375q-0.859375 0.4375 -1.8125 0.4375q-0.96875 0 -1.75 -0.421875q-0.765625 -0.4375 -1.125 -1.203125q-0.34375 -0.78125 -0.34375 -2.140625l0 -6.125l2.5625 0l0 4.4375q0 2.046875 0.140625 2.515625q0.140625 0.453125 0.515625 0.71875q0.375 0.265625 0.953125 0.265625q0.65625 0 1.171875 -0.359375q0.515625 -0.359375 0.703125 -0.890625q0.203125 -0.53125 0.203125 -2.609375l0 -4.078125l2.546875 0l0 9.671875l-2.375 0zm13.91156 0l-2.390625 0l0 -1.421875q-0.59375 0.828125 -1.40625 1.234375q-0.796875 0.40625 -1.609375 0.40625q-1.671875 0 -2.859375 -1.34375q-1.1875 -1.34375 -1.1875 -3.75q0 -2.453125 1.15625 -3.734375q1.15625 -1.28125 2.921875 -1.28125q1.625 0 2.8125 1.34375l0 -4.8125l2.5625 0l0 13.359375zm-6.84375 -5.046875q0 1.546875 0.4375 2.234375q0.609375 1.015625 1.71875 1.015625q0.890625 0 1.5 -0.75q0.625 -0.765625 0.625 -2.25q0 -1.671875 -0.609375 -2.40625q-0.59375 -0.734375 -1.53125 -0.734375q-0.90625 0 -1.53125 0.734375q-0.609375 0.71875 -0.609375 2.15625z" fill-rule="nonzero"/><path fill="#000000" d="m450.91168 119.92053l1.390625 0.1875q-0.234375 1.421875 -1.171875 2.234375q-0.921875 0.8125 -2.28125 0.8125q-1.703125 0 -2.75 -1.109375q-1.03125 -1.125 -1.03125 -3.203125q0 -1.34375 0.4375 -2.34375q0.453125 -1.015625 1.359375 -1.515625q0.921875 -0.5 1.984375 -0.5q1.359375 0 2.21875 0.6875q0.859375 0.671875 1.09375 1.9375l-1.359375 0.203125q-0.203125 -0.828125 -0.703125 -1.25q-0.484375 -0.421875 -1.1875 -0.421875q-1.0625 0 -1.734375 0.765625q-0.65625 0.75 -0.65625 2.40625q0 1.671875 0.640625 2.4375q0.640625 0.75 1.671875 0.75q0.828125 0 1.375 -0.5q0.5625 -0.515625 0.703125 -1.578125zm2.5625 3.046875l0 -11.453125l1.40625 0l0 11.453125l-1.40625 0zm8.9921875 -1.03125q-0.78125 0.671875 -1.5 0.953125q-0.71875 0.265625 -1.546875 0.265625q-1.375 0 -2.109375 -0.671875q-0.734375 -0.671875 -0.734375 -1.703125q0 -0.609375 0.28125 -1.109375q0.28125 -0.515625 0.71875 -0.8125q0.453125 -0.3125 1.015625 -0.46875q0.421875 -0.109375 1.25 -0.203125q1.703125 -0.203125 2.515625 -0.484375q0 -0.296875 0 -0.375q0 -0.859375 -0.390625 -1.203125q-0.546875 -0.484375 -1.609375 -0.484375q-0.984375 0 -1.46875 0.359375q-0.46875 0.34375 -0.6875 1.21875l-1.375 -0.1875q0.1875 -0.875 0.609375 -1.421875q0.4375 -0.546875 1.25 -0.828125q0.8125 -0.296875 1.875 -0.296875q1.0625 0 1.71875 0.25q0.671875 0.25 0.984375 0.625q0.3125 0.375 0.4375 0.953125q0.078125 0.359375 0.078125 1.296875l0 1.875q0 1.96875 0.078125 2.484375q0.09375 0.515625 0.359375 1.0l-1.46875 0q-0.21875 -0.4375 -0.28125 -1.03125zm-0.109375 -3.140625q-0.765625 0.3125 -2.296875 0.53125q-0.875 0.125 -1.234375 0.28125q-0.359375 0.15625 -0.5625 0.46875q-0.1875 0.296875 -0.1875 0.65625q0 0.5625 0.421875 0.9375q0.4375 0.375 1.25 0.375q0.8125 0 1.4375 -0.34375q0.640625 -0.359375 0.9375 -0.984375q0.234375 -0.46875 0.234375 -1.40625l0 -0.515625zm3.0390625 1.6875l1.390625 -0.21875q0.109375 0.84375 0.640625 1.296875q0.546875 0.4375 1.5 0.4375q0.96875 0 1.4375 -0.390625q0.46875 -0.40625 0.46875 -0.9375q0 -0.46875 -0.40625 -0.75q-0.296875 -0.1875 -1.4375 -0.46875q-1.546875 -0.390625 -2.15625 -0.671875q-0.59375 -0.296875 -0.90625 -0.796875q-0.296875 -0.5 -0.296875 -1.109375q0 -0.5625 0.25 -1.03125q0.25 -0.46875 0.6875 -0.78125q0.328125 -0.25 0.890625 -0.40625q0.578125 -0.171875 1.21875 -0.171875q0.984375 0 1.71875 0.28125q0.734375 0.28125 1.078125 0.765625q0.359375 0.46875 0.5 1.28125l-1.375 0.1875q-0.09375 -0.640625 -0.546875 -1.0q-0.453125 -0.359375 -1.265625 -0.359375q-0.96875 0 -1.390625 0.328125q-0.40625 0.3125 -0.40625 0.734375q0 0.28125 0.171875 0.5q0.171875 0.21875 0.53125 0.375q0.21875 0.078125 1.25 0.359375q1.484375 0.390625 2.078125 0.65625q0.59375 0.25 0.921875 0.734375q0.34375 0.484375 0.34375 1.203125q0 0.703125 -0.421875 1.328125q-0.40625 0.609375 -1.1875 0.953125q-0.765625 0.34375 -1.734375 0.34375q-1.625 0 -2.46875 -0.671875q-0.84375 -0.671875 -1.078125 -2.0zm8.0 0l1.390625 -0.21875q0.109375 0.84375 0.640625 1.296875q0.546875 0.4375 1.5 0.4375q0.96875 0 1.4375 -0.390625q0.46875 -0.40625 0.46875 -0.9375q0 -0.46875 -0.40625 -0.75q-0.296875 -0.1875 -1.4375 -0.46875q-1.546875 -0.390625 -2.15625 -0.671875q-0.59375 -0.296875 -0.90625 -0.796875q-0.296875 -0.5 -0.296875 -1.109375q0 -0.5625 0.25 -1.03125q0.25 -0.46875 0.6875 -0.78125q0.328125 -0.25 0.890625 -0.40625q0.578125 -0.171875 1.21875 -0.171875q0.984375 0 1.71875 0.28125q0.734375 0.28125 1.078125 0.765625q0.359375 0.46875 0.5 1.28125l-1.375 0.1875q-0.09375 -0.640625 -0.546875 -1.0q-0.453125 -0.359375 -1.265625 -0.359375q-0.96875 0 -1.390625 0.328125q-0.40625 0.3125 -0.40625 0.734375q0 0.28125 0.171875 0.5q0.171875 0.21875 0.53125 0.375q0.21875 0.078125 1.25 0.359375q1.484375 0.390625 2.078125 0.65625q0.59375 0.25 0.921875 0.734375q0.34375 0.484375 0.34375 1.203125q0 0.703125 -0.421875 1.328125q-0.40625 0.609375 -1.1875 0.953125q-0.765625 0.34375 -1.734375 0.34375q-1.625 0 -2.46875 -0.671875q-0.84375 -0.671875 -1.078125 -2.0z" fill-rule="nonzero"/><path fill="#000000" d="m493.84137 118.74866l2.234375 0.71875q-0.515625 1.875 -1.71875 2.796875q-1.1875 0.90625 -3.03125 0.90625q-2.28125 0 -3.75 -1.5625q-1.46875 -1.5625 -1.46875 -4.265625q0 -2.859375 1.46875 -4.4375q1.484375 -1.59375 3.890625 -1.59375q2.09375 0 3.40625 1.25q0.78125 0.734375 1.171875 2.109375l-2.28125 0.546875q-0.203125 -0.890625 -0.859375 -1.40625q-0.640625 -0.515625 -1.5625 -0.515625q-1.265625 0 -2.0625 0.921875q-0.796875 0.90625 -0.796875 2.953125q0 2.171875 0.78125 3.09375q0.78125 0.921875 2.03125 0.921875q0.921875 0 1.578125 -0.578125q0.671875 -0.59375 0.96875 -1.859375zm4.2109375 4.21875l0 -11.453125l2.1875 0l0 11.453125l-2.1875 0zm3.9296875 -4.265625q0 -1.09375 0.53125 -2.109375q0.546875 -1.03125 1.53125 -1.5625q1.0 -0.546875 2.21875 -0.546875q1.875 0 3.078125 1.21875q1.203125 1.21875 1.203125 3.09375q0 1.875 -1.21875 3.125q-1.203125 1.234375 -3.046875 1.234375q-1.140625 0 -2.1875 -0.515625q-1.03125 -0.515625 -1.578125 -1.515625q-0.53125 -1.0 -0.53125 -2.421875zm2.25 0.109375q0 1.234375 0.578125 1.890625q0.59375 0.65625 1.453125 0.65625q0.859375 0 1.4375 -0.65625q0.59375 -0.65625 0.59375 -1.90625q0 -1.21875 -0.59375 -1.875q-0.578125 -0.65625 -1.4375 -0.65625q-0.859375 0 -1.453125 0.65625q-0.578125 0.65625 -0.578125 1.890625zm13.4921875 4.15625l0 -1.25q-0.453125 0.671875 -1.1875 1.0625q-0.734375 0.375 -1.5625 0.375q-0.828125 0 -1.5 -0.359375q-0.65625 -0.375 -0.953125 -1.03125q-0.296875 -0.671875 -0.296875 -1.84375l0 -5.25l2.1875 0l0 3.8125q0 1.75 0.125 2.140625q0.125 0.390625 0.4375 0.625q0.328125 0.234375 0.8125 0.234375q0.5625 0 1.0 -0.3125q0.453125 -0.3125 0.609375 -0.765625q0.171875 -0.453125 0.171875 -2.234375l0 -3.5l2.203125 0l0 8.296875l-2.046875 0zm11.9296875 0l-2.046875 0l0 -1.21875q-0.5 0.703125 -1.203125 1.0625q-0.6875 0.34375 -1.390625 0.34375q-1.421875 0 -2.453125 -1.15625q-1.015625 -1.15625 -1.015625 -3.21875q0 -2.109375 0.984375 -3.203125q1.0 -1.09375 2.515625 -1.09375q1.390625 0 2.40625 1.15625l0 -4.125l2.203125 0l0 11.453125zm-5.859375 -4.328125q0 1.328125 0.359375 1.921875q0.53125 0.859375 1.484375 0.859375q0.765625 0 1.296875 -0.640625q0.53125 -0.65625 0.53125 -1.9375q0 -1.421875 -0.515625 -2.046875q-0.515625 -0.640625 -1.328125 -0.640625q-0.78125 0 -1.3125 0.625q-0.515625 0.625 -0.515625 1.859375z" fill-rule="nonzero"/><path fill="#000000" d="m433.5188 140.8874l0 -9.25l-3.453125 0l0 -1.234375l8.3125 0l0 1.234375l-3.46875 0l0 9.25l-1.390625 0zm10.564606 0l0 -1.109375q-0.890625 1.28125 -2.421875 1.28125q-0.671875 0 -1.25 -0.25q-0.578125 -0.265625 -0.875 -0.65625q-0.28125 -0.390625 -0.390625 -0.953125q-0.078125 -0.375 -0.078125 -1.203125l0 -4.703125l1.28125 0l0 4.203125q0 1.015625 0.078125 1.359375q0.125 0.515625 0.515625 0.8125q0.40625 0.28125 0.984375 0.28125q0.578125 0 1.078125 -0.296875q0.515625 -0.296875 0.71875 -0.8125q0.21875 -0.515625 0.21875 -1.484375l0 -4.0625l1.28125 0l0 7.59375l-1.140625 0zm3.104248 2.921875l-0.140625 -1.203125q0.421875 0.109375 0.734375 0.109375q0.4375 0 0.6875 -0.140625q0.265625 -0.140625 0.421875 -0.40625q0.125 -0.1875 0.390625 -0.953125q0.046875 -0.109375 0.125 -0.3125l-2.890625 -7.609375l1.390625 0l1.578125 4.390625q0.3125 0.84375 0.546875 1.765625q0.234375 -0.890625 0.53125 -1.734375l1.625 -4.421875l1.296875 0l-2.890625 7.71875q-0.46875 1.25 -0.734375 1.734375q-0.34375 0.625 -0.78125 0.921875q-0.4375 0.296875 -1.0625 0.296875q-0.375 0 -0.828125 -0.15625zm12.34375 -3.859375q-0.71875 0.609375 -1.375 0.859375q-0.65625 0.25 -1.421875 0.25q-1.25 0 -1.921875 -0.609375q-0.671875 -0.609375 -0.671875 -1.5625q0 -0.5625 0.25 -1.015625q0.25 -0.46875 0.65625 -0.75q0.421875 -0.28125 0.9375 -0.421875q0.375 -0.09375 1.140625 -0.1875q1.5625 -0.1875 2.296875 -0.453125q0.015625 -0.265625 0.015625 -0.328125q0 -0.796875 -0.375 -1.109375q-0.484375 -0.4375 -1.453125 -0.4375q-0.921875 0 -1.359375 0.328125q-0.421875 0.3125 -0.625 1.109375l-1.265625 -0.171875q0.171875 -0.796875 0.5625 -1.296875q0.390625 -0.5 1.140625 -0.765625q0.75 -0.265625 1.71875 -0.265625q0.984375 0 1.59375 0.234375q0.609375 0.21875 0.890625 0.5625q0.28125 0.34375 0.40625 0.875q0.0625 0.328125 0.0625 1.1875l0 1.71875q0 1.796875 0.078125 2.28125q0.078125 0.46875 0.328125 0.90625l-1.34375 0q-0.203125 -0.40625 -0.265625 -0.9375zm-0.109375 -2.875q-0.703125 0.28125 -2.09375 0.484375q-0.796875 0.109375 -1.125 0.265625q-0.328125 0.140625 -0.515625 0.421875q-0.171875 0.265625 -0.171875 0.59375q0 0.515625 0.390625 0.859375q0.390625 0.34375 1.140625 0.34375q0.734375 0 1.3125 -0.3125q0.59375 -0.328125 0.859375 -0.890625q0.203125 -0.4375 0.203125 -1.296875l0 -0.46875zm7.7699585 3.8125l0 -10.484375l1.390625 0l0 10.484375l-1.390625 0zm3.196991 -3.796875q0 -2.109375 1.171875 -3.125q0.984375 -0.84375 2.390625 -0.84375q1.578125 0 2.5625 1.03125q1.0 1.015625 1.0 2.828125q0 1.46875 -0.4375 2.3125q-0.4375 0.828125 -1.28125 1.296875q-0.84375 0.46875 -1.84375 0.46875q-1.59375 0 -2.578125 -1.015625q-0.984375 -1.03125 -0.984375 -2.953125zm1.328125 0q0 1.453125 0.625 2.1875q0.640625 0.71875 1.609375 0.71875q0.96875 0 1.59375 -0.71875q0.640625 -0.734375 0.640625 -2.234375q0 -1.40625 -0.640625 -2.125q-0.640625 -0.734375 -1.59375 -0.734375q-0.96875 0 -1.609375 0.71875q-0.625 0.71875 -0.625 2.1875zm10.135468 3.796875l0 -9.25l-3.453125 0l0 -1.234375l8.3125 0l0 1.234375l-3.46875 0l0 9.25l-1.390625 0zm10.087769 0l0 -10.484375l3.96875 0q1.046875 0 1.59375 0.09375q0.765625 0.125 1.28125 0.484375q0.53125 0.359375 0.84375 1.015625q0.328125 0.65625 0.328125 1.4375q0 1.328125 -0.859375 2.265625q-0.84375 0.921875 -3.078125 0.921875l-2.6875 0l0 4.265625l-1.390625 0zm1.390625 -5.5l2.71875 0q1.34375 0 1.90625 -0.5q0.5625 -0.5 0.5625 -1.40625q0 -0.671875 -0.328125 -1.140625q-0.328125 -0.46875 -0.875 -0.609375q-0.359375 -0.09375 -1.296875 -0.09375l-2.6875 0l0 3.75zm8.197479 5.5l0 -10.484375l1.28125 0l0 10.484375l-1.28125 0zm8.240509 -0.9375q-0.71875 0.609375 -1.375 0.859375q-0.65625 0.25 -1.421875 0.25q-1.25 0 -1.921875 -0.609375q-0.671875 -0.609375 -0.671875 -1.5625q0 -0.5625 0.25 -1.015625q0.25 -0.46875 0.65625 -0.75q0.421875 -0.28125 0.9375 -0.421875q0.375 -0.09375 1.140625 -0.1875q1.5625 -0.1875 2.296875 -0.453125q0.015625 -0.265625 0.015625 -0.328125q0 -0.796875 -0.375 -1.109375q-0.484375 -0.4375 -1.453125 -0.4375q-0.921875 0 -1.359375 0.328125q-0.421875 0.3125 -0.625 1.109375l-1.265625 -0.171875q0.171875 -0.796875 0.5625 -1.296875q0.390625 -0.5 1.140625 -0.765625q0.75 -0.265625 1.71875 -0.265625q0.984375 0 1.59375 0.234375q0.609375 0.21875 0.890625 0.5625q0.28125 0.34375 0.40625 0.875q0.0625 0.328125 0.0625 1.1875l0 1.71875q0 1.796875 0.078125 2.28125q0.078125 0.46875 0.328125 0.90625l-1.34375 0q-0.203125 -0.40625 -0.265625 -0.9375zm-0.109375 -2.875q-0.703125 0.28125 -2.09375 0.484375q-0.796875 0.109375 -1.125 0.265625q-0.328125 0.140625 -0.515625 0.421875q-0.171875 0.265625 -0.171875 0.59375q0 0.515625 0.390625 0.859375q0.390625 0.34375 1.140625 0.34375q0.734375 0 1.3125 -0.3125q0.59375 -0.328125 0.859375 -0.890625q0.203125 -0.4375 0.203125 -1.296875l0 -0.46875zm6.1198425 2.65625l0.1875 1.140625q-0.546875 0.109375 -0.984375 0.109375q-0.6875 0 -1.078125 -0.21875q-0.390625 -0.21875 -0.546875 -0.578125q-0.15625 -0.359375 -0.15625 -1.515625l0 -4.375l-0.953125 0l0 -1.0l0.953125 0l0 -1.890625l1.28125 -0.765625l0 2.65625l1.296875 0l0 1.0l-1.296875 0l0 4.4375q0 0.546875 0.0625 0.71875q0.078125 0.15625 0.21875 0.25q0.15625 0.078125 0.453125 0.078125q0.203125 0 0.5625 -0.046875zm1.5719604 1.15625l0 -6.59375l-1.140625 0l0 -1.0l1.140625 0l0 -0.8125q0 -0.765625 0.125 -1.140625q0.1875 -0.5 0.65625 -0.8125q0.46875 -0.3125 1.3125 -0.3125q0.546875 0 1.203125 0.125l-0.1875 1.125q-0.40625 -0.0625 -0.765625 -0.0625q-0.578125 0 -0.828125 0.25q-0.234375 0.25 -0.234375 0.9375l0 0.703125l1.46875 0l0 1.0l-1.46875 0l0 6.59375l-1.28125 0zm3.2751465 -3.796875q0 -2.109375 1.171875 -3.125q0.984375 -0.84375 2.390625 -0.84375q1.578125 0 2.5625 1.03125q1.0 1.015625 1.0 2.828125q0 1.46875 -0.4375 2.3125q-0.4375 0.828125 -1.28125 1.296875q-0.84375 0.46875 -1.84375 0.46875q-1.59375 0 -2.578125 -1.015625q-0.984375 -1.03125 -0.984375 -2.953125zm1.328125 0q0 1.453125 0.625 2.1875q0.640625 0.71875 1.609375 0.71875q0.96875 0 1.59375 -0.71875q0.640625 -0.734375 0.640625 -2.234375q0 -1.40625 -0.640625 -2.125q-0.640625 -0.734375 -1.59375 -0.734375q-0.96875 0 -1.609375 0.71875q-0.625 0.71875 -0.625 2.1875zm7.291687 3.796875l0 -7.59375l1.15625 0l0 1.140625q0.453125 -0.796875 0.828125 -1.046875q0.375 -0.265625 0.8125 -0.265625q0.65625 0 1.328125 0.40625l-0.4375 1.203125q-0.46875 -0.28125 -0.953125 -0.28125q-0.421875 0 -0.765625 0.25q-0.328125 0.25 -0.46875 0.703125q-0.21875 0.6875 -0.21875 1.5l0 3.984375l-1.28125 0zm4.8963013 0l0 -7.59375l1.15625 0l0 1.0625q0.34375 -0.5625 0.9375 -0.890625q0.609375 -0.34375 1.359375 -0.34375q0.84375 0 1.375 0.34375q0.546875 0.34375 0.765625 0.984375q0.90625 -1.328125 2.359375 -1.328125q1.125 0 1.734375 0.625q0.609375 0.625 0.609375 1.921875l0 5.21875l-1.28125 0l0 -4.78125q0 -0.78125 -0.125 -1.109375q-0.125 -0.34375 -0.453125 -0.546875q-0.328125 -0.21875 -0.78125 -0.21875q-0.796875 0 -1.328125 0.53125q-0.53125 0.53125 -0.53125 1.703125l0 4.421875l-1.28125 0l0 -4.9375q0 -0.859375 -0.3125 -1.28125q-0.3125 -0.4375 -1.03125 -0.4375q-0.546875 0 -1.015625 0.296875q-0.453125 0.28125 -0.671875 0.828125q-0.203125 0.546875 -0.203125 1.59375l0 3.9375l-1.28125 0z" fill-rule="nonzero"/><path fill="#000000" d="m459.7584 158.4874l0 -10.484375l3.96875 0q1.046875 0 1.59375 0.09375q0.765625 0.125 1.28125 0.484375q0.53125 0.359375 0.84375 1.015625q0.328125 0.65625 0.328125 1.4375q0 1.328125 -0.859375 2.265625q-0.84375 0.921875 -3.078125 0.921875l-2.6875 0l0 4.265625l-1.390625 0zm1.390625 -5.5l2.71875 0q1.34375 0 1.90625 -0.5q0.5625 -0.5 0.5625 -1.40625q0 -0.671875 -0.328125 -1.140625q-0.328125 -0.46875 -0.875 -0.609375q-0.359375 -0.09375 -1.296875 -0.09375l-2.6875 0l0 3.75zm13.213104 5.5l0 -1.109375q-0.890625 1.28125 -2.421875 1.28125q-0.671875 0 -1.25 -0.25q-0.578125 -0.265625 -0.875 -0.65625q-0.28125 -0.390625 -0.390625 -0.953125q-0.078125 -0.375 -0.078125 -1.203125l0 -4.703125l1.28125 0l0 4.203125q0 1.015625 0.078125 1.359375q0.125 0.515625 0.515625 0.8125q0.40625 0.28125 0.984375 0.28125q0.578125 0 1.078125 -0.296875q0.515625 -0.296875 0.71875 -0.8125q0.21875 -0.515625 0.21875 -1.484375l0 -4.0625l1.28125 0l0 7.59375l-1.140625 0zm4.354248 0l-1.203125 0l0 -10.484375l1.296875 0l0 3.734375q0.8125 -1.015625 2.078125 -1.015625q0.703125 0 1.328125 0.28125q0.625 0.28125 1.03125 0.796875q0.40625 0.5 0.625 1.234375q0.234375 0.71875 0.234375 1.53125q0 1.96875 -0.96875 3.03125q-0.953125 1.0625 -2.3125 1.0625q-1.34375 0 -2.109375 -1.125l0 0.953125zm-0.015625 -3.859375q0 1.375 0.375 1.984375q0.609375 0.984375 1.640625 0.984375q0.84375 0 1.453125 -0.734375q0.625 -0.734375 0.625 -2.1875q0 -1.484375 -0.59375 -2.1875q-0.59375 -0.71875 -1.421875 -0.71875q-0.84375 0 -1.46875 0.734375q-0.609375 0.734375 -0.609375 2.125zm6.9479675 3.859375l0 -10.484375l1.28125 0l0 10.484375l-1.28125 0zm3.2874146 -9.015625l0 -1.46875l1.296875 0l0 1.46875l-1.296875 0zm0 9.015625l0 -7.59375l1.296875 0l0 7.59375l-1.296875 0zm8.209259 -2.78125l1.265625 0.15625q-0.203125 1.3125 -1.0625 2.0625q-0.84375 0.734375 -2.09375 0.734375q-1.5625 0 -2.515625 -1.015625q-0.9375 -1.03125 -0.9375 -2.921875q0 -1.234375 0.40625 -2.15625q0.40625 -0.921875 1.234375 -1.375q0.84375 -0.46875 1.8125 -0.46875q1.25 0 2.03125 0.625q0.78125 0.625 1.015625 1.765625l-1.265625 0.203125q-0.171875 -0.765625 -0.625 -1.15625q-0.453125 -0.390625 -1.09375 -0.390625q-0.984375 0 -1.59375 0.703125q-0.609375 0.703125 -0.609375 2.203125q0 1.53125 0.578125 2.234375q0.59375 0.6875 1.546875 0.6875q0.75 0 1.265625 -0.453125q0.515625 -0.46875 0.640625 -1.4375zm6.837616 2.78125l0 -10.484375l1.390625 0l0 10.484375l-1.390625 0zm3.8375854 0l0 -10.484375l3.96875 0q1.0469055 0 1.5937805 0.09375q0.765625 0.125 1.28125 0.484375q0.53125 0.359375 0.84375 1.015625q0.328125 0.65625 0.328125 1.4375q0 1.328125 -0.859375 2.265625q-0.84375 0.921875 -3.0781555 0.921875l-2.6875 0l0 4.265625l-1.390625 0zm1.390625 -5.5l2.71875 0q1.3437805 0 1.9062805 -0.5q0.5625 -0.5 0.5625 -1.40625q0 -0.671875 -0.328125 -1.140625q-0.328125 -0.46875 -0.875 -0.609375q-0.359375 -0.09375 -1.2969055 -0.09375l-2.6875 0l0 3.75z" fill-rule="nonzero"/></g></svg>

=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/Contrib/DoorbellDevice-example.py

# TinyTuya IRRemoteControlDevice Example
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya WiFi smart devices

 Author: JonesMeUp
 Tested: LSC-Bell 8S(AKV300_8M)
 Note: Without hack the device can't be used offline. 
       With hack the DoorbellDevice is useless.
        
 For more information see https://github.com/jasonacox/tinytuya
    https://github.com/jasonacox/tinytuya/issues/162 
    
"""
import tinytuya
from tinytuya.Contrib import DoorbellDevice

d = DoorbellDevice('abcdefghijklmnop123456', '192.168.178.25', 
    '1234567890123abc', 'device22')
d.set_version(3.3)
d.set_socketPersistent(True) # Keep socket connection open between commands

d.set_volume(3)
d.set_motion_area(0, 5, 50, 50)
d.set_motion_area_switch(True)

print(" > Begin Monitor Loop <")
while(True):
    # See if any data is available
    data = d.receive()
    print('Data: %r' % data)
    # Send keyalive heartbeat
    print(" > Send Heartbeat Ping < ")
    payload = d.generate_payload(tinytuya.HEART_BEAT)
    d.send(payload)

=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/Contrib/IRRemoteControlDevice-example.py


# TinyTuya IRRemoteControlDevice Example
# -*- coding: utf-8 -*-
"""
 Example script using the community-contributed Python module for Tuya WiFi smart universal remote control simulators

 Author: Alexey 'Cluster' Avdyukhin (https://github.com/clusterm)
 Rewritten by: uzlonewolf (https://github.com/uzlonewolf)
 For more information see https://github.com/jasonacox/tinytuya

"""
import sys
import tinytuya
from tinytuya import Contrib
from time import sleep

#tinytuya.set_debug(toggle=True, color=True)




# parsing and converting between data formats


# discrete on/off codes for Samsung in Pronto format
pronto_samsung_on = '0000 006D 0000 0022 00AC 00AC 0015 0040 0015 0040 0015 0040 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0040 0015 0040 0015 0040 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0040 0015 0015 0015 0015 0015 0040 0015 0040 0015 0015 0015 0015 0015 0040 0015 0015 0015 0040 0015 0040 0015 0015 0015 0015 0015 0040 0015 0040 0015 0015 0015 0689'
pronto_samsung_off = '0000 006D 0000 0022 00AC 00AC 0015 0040 0015 0040 0015 0040 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0040 0015 0040 0015 0040 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0040 0015 0040 0015 0015 0015 0015 0015 0040 0015 0040 0015 0040 0015 0040 0015 0015 0015 0015 0015 0040 0015 0040 0015 0015 0015 0689'

# convert the Pronto format into pulses
pulses_samsung_on = Contrib.IRRemoteControlDevice.pronto_to_pulses( pronto_samsung_on )
pulses_samsung_off = Contrib.IRRemoteControlDevice.pronto_to_pulses( pronto_samsung_off )

# decode the pulses as Samsung format (similar to NEC but with a half-width start burst)
# there may be more than one code in the data stream, so this returns a list of codes
samsung_on_code = Contrib.IRRemoteControlDevice.pulses_to_samsung( pulses_samsung_on )
samsung_off_code = Contrib.IRRemoteControlDevice.pulses_to_samsung( pulses_samsung_off )

# print only the first code
print( 'Samsung on code:', samsung_on_code[0] )
# Samsung on code: {'type': 'samsung', 'uint32': 3772815718, 'address': 7, 'data': 153, 'hex': 'E0E09966'}

print( 'Samsung off code:', samsung_off_code[0] )
# Samsung off code: {'type': 'samsung', 'uint32': 3772783078, 'address': 7, 'data': 152, 'hex': 'E0E019E6'}






# discrete on/off codes for LG
hex_lg_on = 0x20DF23DC
hex_lg_off = 0x20DFA35C

# convert the 32-bit integers into a stream of pulses
pulses_lg_on = Contrib.IRRemoteControlDevice.nec_to_pulses( hex_lg_on )
pulses_lg_off = Contrib.IRRemoteControlDevice.nec_to_pulses( hex_lg_off )

# decode the pulses to verify and print them like the above Samsung
lg_on_code = Contrib.IRRemoteControlDevice.pulses_to_nec( pulses_lg_on )
print( 'LG on code:', lg_on_code[0] )
# LG on code: {'type': 'nec', 'uint32': 551494620, 'address': 4, 'data': 196, 'hex': '20DF23DC'}

lg_off_code = Contrib.IRRemoteControlDevice.pulses_to_nec( pulses_lg_off )
print( 'LG off code:', lg_off_code[0] )
# LG off code: {'type': 'nec', 'uint32': 551527260, 'address': 4, 'data': 197, 'hex': '20DFA35C'}





# both Pronto codes and pulses can also be turned into head/key format
# Pronto will have the correct frequency in the data
headkey = Contrib.IRRemoteControlDevice.pronto_to_head_key( pronto_samsung_on )
if headkey:
    head, key = headkey
# but the pulses frequency needs to be specified manually if it is not 38 kHz
headkey = Contrib.IRRemoteControlDevice.pulses_to_head_key( pulses_samsung_on, freq=38 )
if headkey:
    head, key = headkey




# learned codes can also be converted
pulses = Contrib.IRRemoteControlDevice.base64_to_pulses('IyOvEToCZQI5AkoCOgJNAjYCTwI4AlACNQJMAjkCTQI2ApsGSwKZBkkClwZMAp8GLALLBhgC0wYRAtMGEwLRBhMCbgIdAmkCGwLKBhsCagIaAsoGGgJzAhACbwIWAnICFAJvAh0CxgYdAmoCFwLMBhoCcAIUAtAGFALRBhQC0QYUAtAGFQKXnBgjCAkXAiDL')
# default frequency is 38 kHz
headkey = Contrib.IRRemoteControlDevice.pulses_to_head_key( pulses )
if headkey:
    head, key = headkey




# now onto talking to the device!


# create the device.  this will connect to it to try and determine which DPS it uses
ir = Contrib.IRRemoteControlDevice( 'abcdefghijklmnop123456', '172.28.321.475', '1234567890123abc', persist=True )


print( 'Turning the Samsung tv on with pulses' )
ir.send_button( ir.pulses_to_base64( pulses_samsung_on ) )
sleep(0.5)
print( 'Turning the LG tv on with pulses' )
ir.send_button( ir.pulses_to_base64( pulses_lg_on ) )
sleep(0.5)


print( 'Turning the Samsung tv off with head/key' )
head, key = Contrib.IRRemoteControlDevice.pronto_to_head_key( pronto_samsung_off )
ir.send_key( head, key )
sleep(0.5)
print( 'Turning the LG tv off with head/key' )
head, key = Contrib.IRRemoteControlDevice.pulses_to_head_key( pulses_lg_off )
ir.send_key( head, key )
sleep(0.5)




# learn a new remote
print("Press button on your remote control")
button = ir.receive_button(timeout=15)
if (button == None):
    print("Timeout, button code is not received")
    sys.exit(1)

print("Received button:", button)
pulses = ir.base64_to_pulses(button)
print( Contrib.IRRemoteControlDevice.print_pulses( pulses ) )
headkey = Contrib.IRRemoteControlDevice.pulses_to_head_key( pulses )
if headkey:
    head, key = headkey
    print( 'Head:', head )
    print( 'Key:', key )

for i in range(10):
    print("Simulating button press...")
    # either works
    #ir.send_button(button)
    ir.send_key( head, key )
    sleep(1)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/Contrib/PresenceDetectorDevice-example.py

from tinytuya.Contrib import PresenceDetectorDevice
#from tinytuya import core
import time
import logging
import requests

log = logging.getLogger(__name__)
device_id = 'XXXX'                                                                  
device_ip = 'YYYY'                                                                           
local_key = 'ZZZZ'
iftt_url = "https://maker.ifttt.com/trigger/{webhook_name_here}/json/with/key/{key_here}"

def main():
   setup()
   run()

def setup():
    global device
    device = PresenceDetectorDevice.PresenceDetectorDevice(device_id, address=device_ip, local_key=local_key, version=3.3)

def run():
    log.info(" >>>> Begin Monitor Loop <<<< ")
    while(True):
        presence = device.get_presence_state()
        if (presence == 'presence'):
            log.info('ALERT! Presence detected!')
            presence_detected_steps()
        else:
            log.debug('no presence, sleep...') 
        time.sleep(20)

def presence_detected_steps():
    requests.post(iftt_url, json={})

if __name__ == "__main__":
    main()


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/Contrib/RFRemoteControlDevice-example.py

#import tinytuya
#tinytuya.set_debug()

from tinytuya.Contrib import RFRemoteControlDevice

d = RFRemoteControlDevice.RFRemoteControlDevice( 'abcdefghijklmnop123456', '172.28.321.475', '1234567890123abc', persist=True )

print( 'Please hold remote close to device and press and hold a button' )
print( 'Waiting for button press...' )

button = d.rf_receive_button()

if not button:
    print( 'No button received!' )
else:
    print( 'Learned button:', button )
    print( 'Decoded:', d.rf_print_button( button ) )
    print( 'Transmitting learned button...' )
    d.rf_send_button( button )
    print( 'Done!' )


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/Contrib/ThermostatDevice-example.py


# TinyTuya ThermostatDevice Example
# -*- coding: utf-8 -*-
"""
 Example script using the community-contributed Python module for Tuya WiFi smart thermostats

 Author: uzlonewolf (https://github.com/uzlonewolf)
 For more information see https://github.com/jasonacox/tinytuya

"""
from tinytuya import Contrib
import time

tstatdev = Contrib.ThermostatDevice( 'abcdefghijklmnop123456', '172.28.321.475', '1234567890123abc' )

## we do not need to set persistant or v3.3 as ThermostatDevice() does that for us

data = tstatdev.status()
print('Device status: %r' % data)

print(" > Begin Monitor Loop <")

# the thermostat will close the connection if it doesn't get a heartbeat message every ~28 seconds, so make sure to ping it.
# every 9 seconds, or roughly 3x that limit, is a good number to make sure we don't miss it due to received messages resetting the socket timeout
pingtime = time.time() + 9

show_all_attribs = True

while(True):
    if( pingtime <= time.time() ):
        tstatdev.sendPing()
        pingtime = time.time() + 9

    data = tstatdev.receive()

    if data:
        if show_all_attribs:
            show_all_attribs = False
            print( 'Data:', data )
            print( '' )
            print( 'All attribs:', dict(tstatdev) )
            print( '' )

            if tstatdev.isSingleSetpoint():
                print( 'Single Setpoint (Mode is "cool" or "heat")' )
            else:
                print( 'Dual Setpoints (Mode is "auto")' )

            print( 'Temperature is degrees C or F:', '°' + tstatdev.getCF().upper() )
            print( '' )

            ## hexadecimal dump of all sensors in a DPS:
            #for s in tstatdev.sensorlists:
            #    print( 'DPS', s.dps, '=', str(s) )

            ## Base64 dump of all sensors in a DPS:
            #for s in tstatdev.sensorlists:
            #    print( 'DPS', s.dps, '=', s.b64() )

            ## display info for every sensor:
            for s in tstatdev.sensors():
                ## print the DPS containing the sensor, the sensor ID, name, and temperature
                print( 'Sensor: DPS:%s ID:%s Name:"%s" Temperature:%r' % (s.parent_sensorlist.dps, s.id, s.name, s.temperature) )

                ## dump all data as a hexadecimal string
                print( str(s) )

        if 'changed_sensors' in data and len(data['changed_sensors']) > 0:
            for s in data['changed_sensors']:
                print( 'Sensor Changed! DPS:%s ID:%s Name:"%s" Changed:%r' % (s.parent_sensorlist.dps, s.id, s.name, s.changed) )
                #print(repr(s))
                #print(vars(s))

                for changed in s.changed:
                    print( 'Changed:', repr(changed), 'New Value:', getattr( s, changed ) )

                if( 'sensor_added' in s.changed ):
                    print( 'New sensor was added!' )
                    #print(repr(s.parent_sensorlist))
                    #print(str(s))

                if( 'sensor_added' in s.changed and s.id == '01234567' ):
                    print('Changing data for sensor', s.id)

                    ## by default every change will be sent immediately.  if multiple values are to be changed, it is much faster
                    ##  to call s.delayUpdates() first, make the changes, and then call s.sendUpdates() to send them
                    s.delayUpdates( )

                    ## make some changes
                    #s.setName( 'Bedroom Sensor 1' )
                    s.setEnabled( True )
                    #s.setEnabled( False )
                    #s.setOccupied( True )
                    s.setParticipation( 'wake', True )
                    #s.setParticipation( 'sleep', True )
                    #s.setParticipation( 0x0F )
                    #s.setUnknown2( 0x0A )

                    ## send the queued changes
                    s.sendUpdates( )

                    show_all_attribs = True

                if 'name' in s.changed:
                    print( 'Sensor was renamed!  New name:', s.name )

        if 'changed' in data and len(data['changed']) > 0:
            print( 'Changed:', data['changed'] )
            for c in data['changed']:
                print( 'Changed:', repr(c), 'New Value:', getattr( tstatdev, c ) )

            if 'cooling_setpoint_f' in data['changed']:
                if tstatdev.mode != 'heat' and tstatdev.cooling_setpoint_f < 65:
                    print( 'Cooling setpoint was set below 65, increasing to 72' )
                    tstatdev.setCoolSetpoint( 72 )

            if 'system' in data['changed'] and tstatdev.system == 'coolfanon':
                print( 'System now cooling to', tstatdev.cooling_setpoint_f )


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/Contrib/TuyaSmartPlug-example.py

# TinyTuya Smart Plug 1-Pack Example
# -*- coding: utf-8 -*-
"""
 Example script using the tinytuya Python module for Tuya Smart Plug 1-Pack
 and stores data in mysql database.

 Author: fajarmnrozaki (https://github.com/fajarmnrozaki)
 For more information see https://github.com/jasonacox/tinytuya
"""

# Import library
import datetime
import tinytuya # code packet for communication between Tuya devices
import time # RTC Real Time Clock
import pymysql # library for sql

# Specifications of Network scanner (the device Tuya must be turned "ON")
Device_Id = 'xxxxxxxxxxxxxxxxxx' # Device Id from Tuya device sensor
Address_Id = 'x.x.x.x' # IP Address connected to Tuya device sensor
Local_Key = 'xxxxxxxxxxxxxxxx' # Local Key generated from  python -m tinytuya wizard
Version = 3.3 #Version of Tuya protocol used

# Checking the connection "Tuya device - sensor"
try:
    smartplug = tinytuya.OutletDevice(Device_Id, Address_Id, Local_Key)
    smartplug.set_version(Version)
    print("Connected to Tuya device sensor")
except:
    print("Disconnected to Tuya device sensor")
    smartplug.close()

# Monitoring a Tuya Smart Plug Device Sensor 
while True:
    try:
        # Time
        timer = datetime.datetime.now()
        print("Time               :",timer.strftime("%Y-%m-%d %H:%M:%S"))
        # Get Status of Tuya device sensor
        data = smartplug.status()
        print("set_status() result", data)
        # Voltage # DPS (Data Points)
        print("Voltage            :", (data['dps']['20'])/10,"Voltage")
        # Current # DPS (Data Points)
        print("Current            :", (data['dps']['18'])/1000,"Ampere")
        # Power # DPS (Data Points)
        print("Power              :", (data['dps']['19'])/10,"Watt")
        print('')

        # Turn On
        smartplug.turn_on()

        # Database Connection
        # in thise example, the data is sent to RDS (Relational Database Service) MySQL
        # Change the [host],[user],[password], [db] and [querry] with your own version

        db = pymysql.connect(host='***',
                             user='***',
                             password='***',
                             db='****',
                             charset='utf8',
                             cursorclass=pymysql.cursors.DictCursor)
        cur = db.cursor()

        add_c0 = "INSERT INTO `tuya_smart_plug`(time, voltage, current, power) VALUES (%s,%s,%s,%s)"
        cur.execute(add_c0,((timer.strftime("%Y-%m-%d %H:%M:%S"),
                             (data['dps']['20'])/10,
                             (data['dps']['18'])/1000,
                             (data['dps']['19'])/10)))
        db.commit()

        time.sleep(60) # this python script example is set for monitoring a Tuya Smart Plug Device Sensor every 60 seconds

    except:
        print("============")
        print("Disconnected")
        print("============")
        # time.sleep(0)
        pass


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/Contrib/XmCosyStringLight-example.py

# Works with XmCosy+ RGBW string lights.
# Model # DMD-045-W3
# FCC ID: 2AI5T-DMD-045-W3
# Amazon SKU: B0B5D643VV
#
# Tested with the above mentioned RGBW string lights and a string of 6 RGBCW flood lights.
# Both use Tuya controllers and are made by the Shenzhen Bling Lighting Technologies Co., Ltd.
# FCC ID of the tested flood lights is 2AI5T-LSE-048-W3 and Amazon SKU is B0CFV8TGBH.
#
# Author: Glen Akins, https://github.com/bikerglen
# Date:   January 2024
#
# Format of the color tuple in main is 
#
# ( HSI Flag, Hue, Sat, Int, CW, WW )
#
# HSI Flag = 0 for CW/WW mixing, 1 for HSI mixing
#
# If HSI Flag is 1:
#   Hue is 0 to 359, 0 is red, 120 is green, 240 is blue
#   Sat is 0 to 100
#   Int is 0 to 100
#   CW is 0
#   WW is 0
#
# If HSI Flag is 0:
#   Hue is 0
#   Sat is 0
#   Int is 0
#   CW is 0 to 100
#   WW is 0 to 100
#
# When using the smart life app's diy feature to set WW, NW, or CW:
#
#   WW is   0, 100
#   NW is  50, 100
#   CW is 100, 100
#
# Hue is 2 bytes, MSB first. The rest are 1 byte each.
#

import tinytuya
import time
import base64

# replace the x's with the data for your light string, IP is the local IP, not the cloud IP
DEVICE_IP = "x.x.x.x"
DEVICE_ID = "xxxxxxxxxxxxxxxxxxxxxx"
DEVICE_KEY = "xxxxxxxxxxxxxxxx"
DEVICE_VER = 3.3

def xmcosy_string_lights_encode_colors (lights, colors, offset):

  # header is 8 bytes and always the same
  header = b'\x00\xff\x00\x00\x00\x80\x01\x00'

  # replicate the specified colors across the specified number of lights as many times as possible
  light = 0
  index = offset
  levels = []
  for light in range (lights):
    levels.append (colors[index])
    index += 1
    if index >= len(colors):
      index = 0

  # form the data byte string by combining the header and all the encoded light level tuples
  data = header
  for light in range (lights):
    encoded_level = levels[light][0].to_bytes (1, 'big')  # hsi/white flag
    encoded_level += levels[light][1].to_bytes (2, 'big') # hue, 2 bytes, MSB first
    encoded_level += levels[light][2].to_bytes (1, 'big') # saturation
    encoded_level += levels[light][3].to_bytes (1, 'big') # intensity
    encoded_level += levels[light][4].to_bytes (1, 'big') # cool white
    encoded_level += levels[light][5].to_bytes (1, 'big') # warm white
    data += encoded_level

  # base 64 encode the data string and convert to ascii
  b64 = base64.b64encode (data).decode ('ascii')

  return b64

if __name__ == '__main__':

  # 30 lights
  lights = 30

  # these 6 colors will be replicated 5 times across the 30 lights
  colors = [
    ( 1,   0, 100, 100,   0,   0 ), # RED
    ( 1,  60, 100, 100,   0,   0 ), # YELLOW
    ( 1, 120, 100, 100,   0,   0 ), # GREEN
    ( 1, 180, 100, 100,   0,   0 ), # CYAN
    ( 1, 240, 100, 100,   0,   0 ), # BLUE
    ( 1, 300, 100, 100,   0,   0 ), # MAGENTA
  ]

  """
  # these 3 color temps will be replicated 10 times across the 30 lights
  colors = [
    ( 0,   0,   0,   0,   0, 100 ), # WW
    ( 0,   0,   0,   0,  50, 100 ), # NW
    ( 0,   0,   0,   0, 100, 100 ), # CW
  ]
  """

  # make the colors chase down the string
  d = tinytuya.BulbDevice(DEVICE_ID, DEVICE_IP, DEVICE_KEY, version=DEVICE_VER, persist=False)
  while True:
    for i in range (len(colors)):
      d102 = xmcosy_string_lights_encode_colors (lights, colors, len(colors)-1-i)
      d.set_value (102, d102)
      time.sleep(1)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/Dockerfile

# Python base
FROM python:3.10

# Set the working directory
WORKDIR /app

# Update default packages
RUN apt-get update

# Get Ubuntu packages
RUN apt-get install -y \
    build-essential \
    curl

# Update new packages
RUN apt-get update

# Get Rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Install dependencies
COPY entrypoint.sh /bin/entrypoint.sh
RUN curl https://sh.rustup.rs -sSf |sh -s -- -y
RUN pip3 install --no-cache-dir tinytuya

# Allow UDP traffic 6666, 6667 and 7000
EXPOSE 6666/udp
EXPOSE 6667/udp
EXPOSE 7000/udp

# Run the application bash entrypoint.sh
ENTRYPOINT ["/bin/entrypoint.sh"]

# Example Docker build
# docker build -t jasonacox/tinytuya-cli:latest .

# Example Docker run but with host network
# docker run \
# -it --rm \
# -p 6666:6666/udp \
# -p 6667:6667/udp \
# -p 7000:7000/udp \
# -v $(pwd):/app \
# --name tinytuya-cli \
# jasonacox/tinytuya-cli:latest


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/README.md

# TinyTuya - Examples

Code examples using `tinytuya` module to control various Tuya devices.

## Read Tuya Device Status

[getstatus.py](getstatus.py) - This script will read the status of a Tuya device. 

## Smart Bulb (RGB) 

[bulb.py](bulb.py) - This script tests controlling Smart Bulb with RGB capabilities.  

[bulb-scenes.py](bulb-scenes.py) - This script tests out setting Scenes for the smart bulb 

Tested devices:  Peteme Smart Light Bulbs, Wi-Fi - [link](https://www.amazon.com/gp/product/B07MKDLV1V/)

[galaxy_projector.py](galaxy_projector.py) This script tests controlling a Galaxy Projector from [galaxylamps.co](https://eu.galaxylamps.co/collections/all/products/galaxy-projector)

## Continuous Monitor

[monitor.py](monitor.py) - This script uses a loop to listen to a Tuya device for any state changes.  

## Async Send and Receive

[async_send_receive.py](async_send_receive.py) - This demonstrates how you can make a persistent connection to a Tuya device, send commands and monitor for responses in an async way.

## Send Raw DPS Values

[send_raw_dps.py](send_raw_dps.py) - This script show how to send and set raw DPS values on a Tuya device. 

## Scan all Devices

[devices.py](devices.py) - Poll status of all devices in `devices.json`.

## Use snapshot.json to Manage Devices

[snapshot.py](snapshot.py) - Example of using `snapshot.json` to manage Tuya Devices

```python
# Load in snapshot.py and control by name
turn_off('Dining Room')
time.sleep(2)
turn_on('Dining Room')
```

## Tuya Cloud API Examples

[cloud.py](cloud.py) -  Example that uses the Tinytuya `Cloud` class and functions to access the Tuya Cloud API to pull device information and control the device via the cloud.

## Multi-Threaded Example

[threading.py](threading.py) - Example that uses python threading to connect to multiple devices and listen for updates.

## Multiple Device Select Example

[multi-select.py](multi-select.py) - Example that uses python select() to connect to multiple devices and listen for updates simultaneously. By using select(), the program avoids having to create separate threads for each device and can efficiently handle multiple device connections in a single loop.


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/async_send_receive.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Example showing async persistent connection to device with
 continual loop watching for device updates.

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

"""
import time
import tinytuya

# tinytuya.set_debug(True)

d = tinytuya.OutletDevice('DEVICEID', 'DEVICEIP', 'DEVICEKEY')
d.set_version(3.3)
d.set_socketPersistent(True)

# Devices will close the connection if they do not receve data every 30 seconds
# Sending heartbeat packets every 9 seconds gives some wiggle room for lost packets or loop lag
PING_TIME = 9

# Option - also poll
POLL_TIME = 60

print(" > Send Request for Status < ")
d.status(nowait=True)

print(" > Begin Monitor Loop <")
pingtime = time.time() + PING_TIME
polltime = time.time() + POLL_TIME
while(True):
    # See if any data is available
    data = d.receive()
    if data:
        print('Received Payload: %r' % data)

    if( pingtime <= time.time() ):
        pingtime = time.time() + PING_TIME
        # Send keep-alive heartbeat
        print(" > Send Heartbeat Ping < ")
        d.heartbeat(nowait=True)

    # Option - Poll for status
    if( polltime <= time.time() ):
        polltime = time.time() + POLL_TIME

        # Option - Some plugs require an UPDATEDPS command to update their power data points
        if False:
            print(" > Send DPS Update Request < ")

            # # Some Tuya devices require a list of DPs to update
            # payload = d.generate_payload(tinytuya.UPDATEDPS,['18','19','20'])
            # data = d.send(payload)
            # print('Received Payload: %r' % data)

            # # Other devices will not accept the DPS index values for UPDATEDPS - try:
            # payload = d.generate_payload(tinytuya.UPDATEDPS)
            # data = d.send(payload)
            # print('Received Payload: %r' % data)

        print(" > Send Request for Status < ")
        data = d.status()
        print('Received Payload: %r' % data)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/bulb-music.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Smart Bulb RGB Music Test

 TODO: Figure out what strings to send to the bulb to 
       represent real music data, beats, note, fades, etc.

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

"""
import tinytuya
import time

#tinytuya.set_debug()

# SmartBulb
DEVICEID = "01234567891234567890"
DEVICEIP = "10.0.1.99"
DEVICEKEY = "0123456789abcdef"
DEVICEVERS = "3.3"

print("TinyTuya - Smart Bulb Music Test [%s]\n" % tinytuya.__version__)
print('TESTING: Device %s at %s with key %s version %s' %
      (DEVICEID, DEVICEIP, DEVICEKEY, DEVICEVERS))

# Connect to Tuya BulbDevice
d = tinytuya.BulbDevice(DEVICEID, DEVICEIP, DEVICEKEY)
d.set_version(float(DEVICEVERS)) # IMPORTANT to always set version 
# Keep socket connection open between commands
d.set_socketPersistent(True)  

# Show status of device
data = d.status()
print('\nCurrent Status of Bulb: %r' % data)

# Music Test
print('Setting to Music')
d.set_mode('music')
data = d.status()

# Send example music data to bulb 
#  TODO: Figure out what the value does and how to use it to 
#        represent real music data, beats, colors, fades
x = 0
while (x<20):
    value = "%02d01" % x
    print (" > Sending %s" % value)
    payload = d.generate_payload(tinytuya.CONTROL, {"27": value})
    d.send(payload)
    if (x % 3):
        time.sleep(1)  # extend every 3 beat
    time.sleep(0.2)
    x = x + 1

# Done
print('\nDone')
d.set_white()


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/bulb-scenes.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - RGB SmartBulb - Scene Test for Bulbs with DPS Index 25

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

"""
import tinytuya
import time

DEVICEID = "01234567891234567890"
DEVICEIP = "10.0.1.99"
DEVICEKEY = "0123456789abcdef"
DEVICEVERS = "3.3"

print("TinyTuya - Smart Bulb String Scenes Test [%s]\n" % tinytuya.__version__)
print('TESTING: Device %s at %s with key %s version %s' %
      (DEVICEID, DEVICEIP, DEVICEKEY, DEVICEVERS))

# Connect to Tuya BulbDevice
d = tinytuya.BulbDevice(DEVICEID, DEVICEIP, DEVICEKEY)
d.set_version(float(DEVICEVERS)) # IMPORTANT to always set version 
# Keep socket connection open between commands
d.set_socketPersistent(True)  

# Show status of device
data = d.status()
print('\nCurrent Status of Bulb: %r' % data)

# Set Mode to Scenes
print('\nSetting bulb mode to Scenes')
d.set_mode('scene')

# Determine bulb type - if it has index 25 it uses strings to set scene
if("dps" in data):
    if("25" in data["dps"]):
        print('\n   [Bulb Type B] String based scenes compatible smartbulb detected.')

        # Example: Color rotation 
        print('    Scene - Color Rotation')
        d.set_value(25, '07464602000003e803e800000000464602007803e803e80000000046460200f003e803e800000000464602003d03e803e80000000046460200ae03e803e800000000464602011303e803e800000000')
        time.sleep(10)

        # Example: Read scene
        print('    Scene - Reading Light')
        d.set_value(25, '010e0d0000000000000003e803e8')
        time.sleep(5)

        # You can pull the scene strings from your smartbulb by running the async_send_receive.py script
        # and using the SmartLife app to change between scenes.  

    else:
        print('\n   [Bulb Type A] Your smartbulb does not appear to support string based scenes.')

        # Rotate through numeric scenes
        for n in range(1, 4):
            print('    Scene - %d' % n)
            d.set_scene(n)
            time.sleep(5)

# Done
print('\nDone')
d.set_white()


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/bulb.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Smart Bulb RGB Test

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

"""
import tinytuya
import time
import os
import random

DEVICEID = "01234567891234567890"
DEVICEIP = "10.0.1.99"
DEVICEKEY = "0123456789abcdef"
DEVICEVERS = "3.3"

# Check for environmental variables and always use those if available
DEVICEID = os.getenv("DEVICEID", DEVICEID)
DEVICEIP = os.getenv("DEVICEIP", DEVICEIP)
DEVICEKEY = os.getenv("DEVICEKEY", DEVICEKEY)
DEVICEVERS = os.getenv("DEVICEVERS", DEVICEVERS)

print("TinyTuya - Smart Bulb RGB Test [%s]\n" % tinytuya.__version__)
print('TESTING: Device %s at %s with key %s version %s' %
      (DEVICEID, DEVICEIP, DEVICEKEY, DEVICEVERS))

# Connect to Tuya BulbDevice
d = tinytuya.BulbDevice(DEVICEID, DEVICEIP, DEVICEKEY)
d.set_version(float(DEVICEVERS)) # IMPORTANT to always set version 
# Keep socket connection open between commands
d.set_socketPersistent(True)  

# Show status of device
data = d.status()
print('\nCurrent Status of Bulb: %r' % data)

# Set to full brightness warm white
print('\nWarm White Test')
d.set_white()
time.sleep(2)

# Power Control Test
print('\nPower Control Test')
print('    Turn off lamp')
d.turn_off()
time.sleep(2)
print('    Turn on lamp')
d.turn_on()
time.sleep(2)

# Dimmer Test
print('\nDimmer Control Test')
for level in range(11):
    print('    Level: %d%%' % (level*10))
    d.set_brightness_percentage(level*10)
    time.sleep(1)

# Colortemp Test
print('\nColortemp Control Test (Warm to Cool)')
for level in range(11):
    print('    Level: %d%%' % (level*10))
    d.set_colourtemp_percentage(level*10)
    time.sleep(1)

# Flip through colors of rainbow - set_colour(r, g, b):
print('\nColor Test - Cycle through rainbow')
rainbow = {"red": [255, 0, 0], "orange": [255, 127, 0], "yellow": [255, 200, 0],
           "green": [0, 255, 0], "blue": [0, 0, 255], "indigo": [46, 43, 95],
           "violet": [139, 0, 255]}
for x in range(2):
    for i in rainbow:
        r = rainbow[i][0]
        g = rainbow[i][1]
        b = rainbow[i][2]
        print('    %s (%d,%d,%d)' % (i, r, g, b))
        d.set_colour(r, g, b)
        time.sleep(2)
    print('')

# Turn off
d.turn_off()
time.sleep(1)

# Random Color Test
d.turn_on()
print('\nRandom Color Test')
for x in range(10):
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    print('    RGB (%d,%d,%d)' % (r, g, b))
    d.set_colour(r, g, b)
    time.sleep(2)

# Test Modes
print('\nTesting Bulb Modes')
print('    White')
d.set_mode('white')
time.sleep(2)
print('    Colour')
d.set_mode('colour')
time.sleep(2)
print('    Scene')
d.set_mode('scene')
time.sleep(2)
print('    Music')
d.set_mode('music')
time.sleep(2)

# Done
print('\nDone')
d.set_white()


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/cloud.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Tuya Cloud Functions

 This examples uses the Tinytuya Cloud class and functions
 to access the Tuya Cloud to pull device information and
 control the device via the cloud.

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

""" 
import tinytuya

# Turn on Debug Mode
tinytuya.set_debug(True)

# You can have tinytuya pull the API credentials
# from the tinytuya.json file created by the wizard
# c = tinytuya.Cloud()
# Alternatively you can specify those values here:
# Connect to Tuya Cloud
c = tinytuya.Cloud(
        apiRegion="us", 
        apiKey="xxxxxxxxxxxxxxxxxxxx", 
        apiSecret="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 
        apiDeviceID="xxxxxxxxxxxxxxxxxxID")

# Display list of devices
devices = c.getdevices()
print("Device List: %r" % devices)

# Select a Device ID to Test
id = "xxxxxxxxxxxxxxxxxxID"

# Display Properties of Device
result = c.getproperties(id)
print("Properties of device:\n", result)

# Display Functions of Device
result = c.getfunctions(id)
print("Functions of device:\n", result)

# Display DPS IDs of Device
result = c.getdps(id)
print("DPS IDs of device:\n", result)

# Display Status of Device
result = c.getstatus(id)
print("Status of device:\n", result)

# Send Command - This example assumes a basic switch
commands = {
	'commands': [{
		'code': 'switch_1',
		'value': True
	}, {
		'code': 'countdown_1',
		'value': 0
	}]
}
print("Sending command...")
result = c.sendcommand(id,commands)
print("Results\n:", result)

# Get device logs
# Note: the returned timestamps are unixtime*1000
# event_id 7 (data report) will probably be the most useful
# More information can be found at https://developer.tuya.com/en/docs/cloud/cbea13f274?id=Kalmcohrembze

# Get device logs from the last day
result = c.getdevicelog(id)
print("Device logs:\n", result)

# Get device logs from 7 days ago through 5 days ago (2 days worth)
#result = c.getdevicelog(id, start=-7, end=-5)
#print("Device logs:\n", result)

# Get device logs for one day ending an hour ago
#result = c.getdevicelog(id, end=time.time() - 3600)
#print("Device logs:\n", result)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/cloud_ir.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Tuya Cloud IR Functions

 This example uses the Tinytuya Cloud class and functions
 to send IR blaster commands

 Author: uzlonewolf
 For more information see https://github.com/jasonacox/tinytuya

""" 
import tinytuya
import colorsys
import time
import json

#tinytuya.set_debug()

# Set this to the actual blaster device, not a virtual remote
device_id = DEVICEID

# Connect to Tuya Cloud - uses tinytuya.json
c = tinytuya.Cloud()




# Raw IR commands can be sent directly
ir_cmd = {
    "control":"send_ir",
    "head":"010ed20000000000040015004000ad0730",
    "key1":"002$$0020E0E0E01F@%",
    "type":0,
    "delay":300
}

cloud_cmd = {
    "commands": [
        {
            "code": "ir_send",
            "value": json.dumps(ir_cmd)
        },
    ]
}

print('Send Raw result:')
res = c.sendcommand(device_id, cloud_cmd)
print( json.dumps(res, indent=2) )




# Keys from a virtual remote can also be sent
#
# See https://developer.tuya.com/en/docs/cloud/ir-control-hub-open-service?id=Kb3oe2mk8ya72
#   for API documentation


# First, get a listing of all programmed remotes
print('List of remotes:')
remote_list = c.cloudrequest( '/v2.0/infrareds/' + device_id + '/remotes' )
print( json.dumps(remote_list, indent=2) )

# Next, get a list of keys for a remote using remote_id from the list returned by the previous command
print('List of keys on 1st remote:')
remote_id = remote_list['result'][0]['remote_id'] # Grab the first remote for this example
remote_key_list = c.cloudrequest( '/v2.0/infrareds/%s/remotes/%s/keys' % (device_id, remote_id) )
print( json.dumps(remote_key_list, indent=2) )

# Finally, send the 'Power' key
post_data = {
    "key": "OK", #"Power",
    "category_id": remote_key_list['result']['category_id'],
    "remote_index": remote_key_list['result']['remote_index']
}
print('Send key result:')
res = c.cloudrequest( '/v2.0/infrareds/%s/remotes/%s/command' % (device_id, remote_id), post=post_data )
print( json.dumps(res, indent=2) )



# The actual value sent by the above key can be found by checking the device logs
print('Device logs:')
logs = c.getdevicelog(device_id, evtype='5', size=3, max_fetches=1)
print( json.dumps(logs, indent=2) )


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/cloud_rgb_bulb.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Tuya Cloud Functions

 This example uses the Tinytuya Cloud class and functions
 to access the Tuya Cloud to control an RGB Smart Bulb

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

""" 
import tinytuya
import colorsys
import time

# Set these values for your device
id = DEVICEID
cmd_code = 'colour_data_v2'  # look at c.getstatus(id) to see what code should be used

# Connect to Tuya Cloud - uses tinytuya.json 
c = tinytuya.Cloud()

# Function to set color via RGB values - Bulb type B
def set_color(rgb):
    hsv = colorsys.rgb_to_hsv(rgb[0] / 255.0, rgb[1] / 255.0, rgb[2] / 255.0)
    commands = {
        'commands': [{
            'code': cmd_code,
            'value': {
                "h": int(hsv[0] * 360),
                "s": int(hsv[1] * 1000),
                "v": int(hsv[2] * 1000)
            }
        }]
    }
    c.sendcommand(id, commands)

# Rainbow values
rainbow = {"red": (255, 0, 0), "orange": (255, 127, 0), "yellow": (255, 200, 0),
           "green": (0, 255, 0), "blue": (0, 0, 255), "indigo": (46, 43, 95),
           "violet": (139, 0, 255)}

# Rotate through the rainbow
for color in rainbow:
    print("Changing color to %s" % color)
    set_color(rainbow[color])
    time.sleep(5)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/cloudrequest.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - CloudRequest

 This examples uses the Tinytuya Cloud class and the cloudrequest function
 to access the Tuya Cloud to control a door lock.


 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

""" 
import tinytuya

# Turn on Debug Mode
tinytuya.set_debug(True)

# You can have tinytuya pull the API credentials
# from the tinytuya.json file created by the wizard
# c = tinytuya.Cloud()
# Alternatively you can specify those values here:
# Connect to Tuya Cloud
c = tinytuya.Cloud(
        apiRegion="us", 
        apiKey="xxxxxxxxxxxxxxxxxxxx", 
        apiSecret="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 
        apiDeviceID="xxxxxxxxxxxxxxxxxxID")

# Example: Door Lock
device_id = "xxxxxxxxxxxxxxxxxxID"

# Get a password ticket
ticket = c.cloudrequest( f'/v1.0/smart-lock/devices/{device_id}/password-ticket' )

# Unlock the door
unlock = c.cloudrequest( f'/v1.1/devices/{device_id}/door-lock/password-free/open-door', 
                        post={'ticket_id': ticket} )


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/devices.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Example to poll status of all devices in Devices.json

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

""" 
import tinytuya
import json
import time

DEVICEFILE = 'devices.json'
SNAPSHOTFILE = 'snapshot.json'
havekeys = False
tuyadevices = []

# Terminal Color Formatting
bold = "\033[0m\033[97m\033[1m"
subbold = "\033[0m\033[32m"
normal = "\033[97m\033[0m"
dim = "\033[0m\033[97m\033[2m"
alert = "\033[0m\033[91m\033[1m"
alertdim = "\033[0m\033[91m\033[2m"

# Lookup Tuya device info by (id) returning (name, key)
def tuyaLookup(deviceid):
    for i in tuyadevices:
        if (i['id'] == deviceid):
            return (i['name'], i['key'])
    return ("", "")

# Read Devices.json 
try:
    # Load defaults
    with open(DEVICEFILE) as f:
        tuyadevices = json.load(f)
        havekeys = True
except:
    # No Device info
    print(alert + "\nNo devices.json file found." + normal)
    exit()

# Scan network for devices and provide polling data
print(normal + "\nScanning local network for Tuya devices...")
devices = tinytuya.deviceScan(False, 30)
print("    %s%s local active devices discovered%s" %
        (dim, len(devices), normal))
print("")

def getIP(d, gwid):
    for ip in d:
        if (gwid == d[ip]['gwId']):
            return (ip, d[ip]['version'])
    return (0, 0)

polling = []
print("Polling local devices...")
for i in tuyadevices:
    item = {}
    name = i['name']
    (ip, ver) = getIP(devices, i['id'])
    item['name'] = name
    item['ip'] = ip
    item['ver'] = ver
    item['id'] = i['id']
    item['key'] = i['key']
    if (ip == 0):
        print("    %s[%s] - %s%s - %sError: No IP found%s" %
                (subbold, name, dim, ip, alert, normal))
    else:
        try:
            d = tinytuya.OutletDevice(i['id'], ip, i['key'])
            d.set_version(float(ver)) # IMPORTANT to always set version 
            data = d.status()
            if 'dps' in data:
                item['dps'] = data
                state = alertdim + "Off" + dim
                try:
                    if '1' in data['dps'] or '20' in data['dps']:
                        state = bold + "On" + dim
                        print("    %s[%s] - %s%s - %s - DPS: %r" %
                            (subbold, name, dim, ip, state, data['dps']))
                    else:
                        print("    %s[%s] - %s%s - DPS: %r" %
                            (subbold, name, dim, ip, data['dps']))
                except:
                    print("    %s[%s] - %s%s - %sNo Response" %
                            (subbold, name, dim, ip, alertdim))
            else:
                print("    %s[%s] - %s%s - %sNo Response" %
                        (subbold, name, dim, ip, alertdim))
        except:
            print("    %s[%s] - %s%s - %sNo Response" %
                    (subbold, name, dim, ip, alertdim))
    polling.append(item)
# for loop

# Save polling data snapshot.json
tinytuya.scanner.save_snapshotfile( SNAPSHOTFILE, polling, None )


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/entrypoint.sh

#!/bin/bash
#
# jasonacox/tinytuya-cli:latest
#
# TinyTuya entrypoint script for a Docker container
# This script will run the wizard or a scan based on user input
#
# Author: Jason A. Cox
# For more information see https://github.com/jasonacox/tinytuya

# Ask users if they want to run wizard or a scan
read -n 1 -r -p "TinyTuya (w)izard, (s)can or (b)ash shell? [w/s/B] " choice
echo ""
if [[ "$choice" =~ ^([wW])$ ]]; then
  echo "Running the wizard..."
  python -m tinytuya wizard
elif [[ "$choice" =~ ^([sS])$ ]]; then
  echo "Running a scan..."
  python -m tinytuya scan
else
  echo "Running bash shell..."
  /bin/bash
fi



=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/galaxy_projector.py

import colorsys
from dataclasses import dataclass
from typing import Tuple, List, Literal

import tinytuya

HSV = Tuple[float, float, float]

SCENE_CHANGE_MODES = {'static': '00', 'flash': '01', 'breath': '02'}
SCENE_NAMES = {'sleep': '04', 'romantic': '05', 'party': '06', 'relaxing': '07'}
SCENE_SPEED_MIN, SCENE_SPEED_MAX = 0x2828, 0x6464


class GalaxyProjector:
    """
    Works with the Galaxy Projector from galaxylamps.co:
    https://eu.galaxylamps.co/collections/all/products/galaxy-projector
    """

    def __init__(self, tuya_device_id: str, device_ip_addr: str, tuya_secret_key: str):
        self.device = tinytuya.BulbDevice(tuya_device_id, device_ip_addr, tuya_secret_key)
        self.device.set_version(3.3)
        self.state = GalaxyProjectorState()
        self.update_state()

    def set_device_power(self, *, on: bool):
        self.state.update(self.device.set_status(switch=20, on=on))

    def set_stars_power(self, *, on: bool):
        self.state.update(self.device.set_status(switch=102, on=on))

    def set_nebula_power(self, *, on: bool):
        self.state.update(self.device.set_status(switch=103, on=on))

    def set_rotation_speed(self, *, percent: float):
        value = int(10 + (1000 - 10) * min(max(percent, 0), 100) / 100)
        self.state.update(self.device.set_value(101, value))

    def set_stars_brightness(self, *, percent: float):
        self.state.update(self.device.set_white_percentage(percent))

    def set_nebula_color(self, *, hsv: HSV):
        """scene mode needs to be off to set static nebula color"""
        self.state.update(self.device.set_hsv(*hsv))

    def set_scene_mode(self, *, on: bool):
        self.state.update(self.device.set_mode('scene' if on else 'colour'))
        # differentiation between 'white' and 'colour' not relevant for this device

    def set_scene(self, parts: List["SceneTransition"]):
        """scene mode needs to be on"""
        output = SCENE_NAMES['party']  # scene name doesn't seem to matter
        for part in parts:
            output += hex(int(
                part.change_speed_percent / 100 * (SCENE_SPEED_MAX - SCENE_SPEED_MIN) + SCENE_SPEED_MIN))[2:]
            output += str(SCENE_CHANGE_MODES[part.change_mode])
            output += hsv2tuyahex(*part.nebula_hsv) + '00000000'
        self.device.set_value(25, output)
        self.update_state()  # return value of previous command is truncated and not usable for state update

    def update_state(self):
        self.state.update(self.device.status())


@dataclass
class SceneTransition:
    change_speed_percent: int
    change_mode: Literal['static', 'flash', 'breath']
    nebula_hsv: HSV


class GalaxyProjectorState:
    """
    Data Points (dps):
    20 device on/off
    21 work_mode: white(stars), colour (nebula), scene, music
    22 stars brightness 10-1000
    24 nebula hsv
    25 scene value
    26 shutdown timer
    101 stars speed 10-1000
    102 stars on/off
    103 nebula on/off
    """

    def __init__(self, dps=None):
        self.dps = dps or {}

    def update(self, payload):
        payload = payload or {'dps': {}}
        if 'Err' in payload:
            raise Exception(payload)
        self.dps.update(payload['dps'])

    @property
    def device_on(self) -> bool:
        return self.dps['20']

    @property
    def stars_on(self) -> bool:
        return self.dps['102']

    @property
    def nebula_on(self) -> bool:
        return self.dps['103']

    @property
    def scene_mode(self) -> bool:
        return self.dps['21'] == 'scene'

    @property
    def scene(self) -> List["SceneTransition"]:
        output = []
        hex_scene = self.dps['25']
        hex_scene_name = hex_scene[0:2]  # scene name doesn't seem to matter
        i = 2
        while i < len(hex_scene):
            hex_scene_speed = int(hex_scene[i:i + 4], 16)
            hex_scene_change = hex_scene[i + 4:i + 6]
            hex_scene_color = hex_scene[i + 6:i + 18]
            for k, v in SCENE_CHANGE_MODES.items():
                if v == hex_scene_change:
                    scene_change = k
                    break
            else:
                raise Exception(f'unknown scene change value: {hex_scene_change}')

            output.append(SceneTransition(
                change_speed_percent=round(
                    (hex_scene_speed - SCENE_SPEED_MIN) * 100 / (SCENE_SPEED_MAX - SCENE_SPEED_MIN)),
                change_mode=scene_change,
                nebula_hsv=tuyahex2hsv(hex_scene_color)
            ))
            i += 26
        return output

    @property
    def stars_brightness_percent(self):
        return int((self.dps['22'] - 10) * 100 / (1000 - 10))

    @property
    def rotation_speed_percent(self):
        return int((self.dps['101'] - 10) * 100 / (1000 - 10))

    @property
    def nebula_hsv(self) -> HSV:
        return tuyahex2hsv(self.dps['24'])

    def __repr__(self):
        return f'GalaxyProjectorState<{self.parsed_value}>'

    @property
    def parsed_value(self):
        return {k: getattr(self, k) for k in (
            'device_on', 'stars_on', 'nebula_on', 'scene_mode', 'scene', 'stars_brightness_percent',
            'rotation_speed_percent', 'nebula_hsv')}


def tuyahex2hsv(val: str):
    return tinytuya.BulbDevice._hexvalue_to_hsv(val, bulb="B")


def hsv2tuyahex(h: float, s: float, v: float):
    (r, g, b) = colorsys.hsv_to_rgb(h, s, v)
    hexvalue = tinytuya.BulbDevice._rgb_to_hexvalue(
        r * 255.0, g * 255.0, b * 255.0, bulb='B'
    )
    return hexvalue


if __name__ == '__main__':
    proj = GalaxyProjector(tuya_device_id=input('Tuya Device ID: '), device_ip_addr=input('Device IP Addr: '),
                           tuya_secret_key=input('Tuya Device Secret/Local Key: '))
    print()
    print('Current state:', proj.state.parsed_value)
    print()

    print('Press enter to continue')
    print()

    input('Turn stars off')
    proj.set_device_power(on=True)
    proj.set_stars_power(on=False)

    input('Turn stars on')
    proj.set_stars_power(on=True)

    input('Set stars brightness to 100%')
    proj.set_stars_brightness(percent=100)

    input('Set stars brightness to 0% (minimal)')
    proj.set_stars_brightness(percent=0)

    input('Set rotation speed to 100%')
    proj.set_rotation_speed(percent=100)

    input('Set rotation speed to 0%')
    proj.set_rotation_speed(percent=0)

    input('Set nebula color to red')
    proj.set_nebula_color(hsv=(0, 1, 1))

    input('Reduce nebula brightness')
    proj.set_nebula_color(hsv=(0, 1, .3))

    input('Show Scene')
    proj.set_scene([SceneTransition(change_speed_percent=80, change_mode='breath', nebula_hsv=(.5, 1, 1)),
                    SceneTransition(change_speed_percent=80, change_mode='breath', nebula_hsv=(0, 0, 1))])
    proj.set_scene_mode(on=True)

    input('Turn device off')
    proj.set_device_power(on=False)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/getstatus.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Example to fetch status of Tuya device

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

""" 
import tinytuya
import time

# Connect to the device - replace with real values
d=tinytuya.OutletDevice(DEVICEID, DEVICEIP, DEVICEKEY)
d.set_version(3.3)

# Alternative connection - for some devices with 22 character IDs they require a special handling
#    d=tinytuya.OutletDevice(DEVICEID, DEVICEIP, DEVICEKEY, 'device22')
#    d.set_dpsUsed({"1": None}) 
#    d.set_version(3.3)

# Option for Power Monitoring Smart Plugs - Some require UPDATEDPS to update power data points
# payload = d.generate_payload(tinytuya.UPDATEDPS,['18','19','20'])
# d.send(payload)
# sleep(1)

# Get the status of the device 
# e.g. {'devId': '0071299988f9376255b', 'dps': {'1': True, '3': 208, '101': False}}
data = d.status()
print(data)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/monitor.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Example script to monitor state changes with Tuya devices.

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

"""
import tinytuya
import time

# tinytuya.set_debug(True)

# Setting the address to 'Auto' or None will trigger a scan which will auto-detect both the address and version, but this can take up to 8 seconds
d = tinytuya.OutletDevice('DEVICEID', 'Auto', 'DEVICEKEY', persist=True)
# If you know both the address and version then supplying them is a lot quicker
# d = tinytuya.OutletDevice('DEVICEID', 'DEVICEIP', 'DEVICEKEY', version=DEVICEVERSION, persist=True)

STATUS_TIMER = 30
KEEPALIVE_TIMER = 12

print(" > Send Request for Status < ")
data = d.status()
print('Initial Status: %r' % data)
if data and 'Err' in data:
    print("Status request returned an error, is version %r and local key %r correct?" % (d.version, d.local_key))

print(" > Begin Monitor Loop <")
heartbeat_time = time.time() + KEEPALIVE_TIMER
status_time =  None

# Uncomment if you want the monitor to constantly request status - otherwise you
# will only get updates when state changes
#status_time = time.time() + STATUS_TIMER

while(True):
    if status_time and time.time() >= status_time:
        # Uncomment if your device provides power monitoring data but it is not updating
        # Some devices require a UPDATEDPS command to force measurements of power.
        # print(" > Send DPS Update Request < ")
        # Most devices send power data on DPS indexes 18, 19 and 20
        # d.updatedps(['18','19','20'], nowait=True)
        # Some Tuya devices will not accept the DPS index values for UPDATEDPS - try:
        # payload = d.generate_payload(tinytuya.UPDATEDPS)
        # d.send(payload)

        # poll for status
        print(" > Send Request for Status < ")
        data = d.status()
        status_time = time.time() + STATUS_TIMER
        heartbeat_time = time.time() + KEEPALIVE_TIMER
    elif time.time() >= heartbeat_time:
        # send a keep-alive
        data = d.heartbeat(nowait=False)
        heartbeat_time = time.time() + KEEPALIVE_TIMER
    else:
        # no need to send anything, just listen for an asynchronous update
        data = d.receive()

    print('Received Payload: %r' % data)

    if data and 'Err' in data:
        print("Received error!")
        # rate limit retries so we don't hammer the device
        time.sleep(5)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/multi-select.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Multi-select Example 
 
 This demonstrates how to use pythons socket select() to listen for status updates 
 from multiple Tuya devices.

 Setup:
    Set the config for each device and the script will open a socket connection for
    each device to listen for status updates. 

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

"""
import select
import time
import tinytuya

# Define the devices to control
config = {
    "TuyaDevices": [
        {
            "Address": "192.168.1.10",
            "Device ID": "00112233445566778899",
            "Local Key": "1234567890123abc",
            "Version": "3.3",
        },
        {
            "Address": "192.168.1.11",
            "Device ID": "10112233445566778899",
            "Local Key": "1234567890123abc",
            "Version": "3.3",
        },
        {
            "Address": "192.168.1.12",
            "Device ID": "20112233445566778899",
            "Local Key": "1234567890123abc",
            "Version": "3.3",
        },
        {
            "Address": "192.168.1.13",
            "Device ID": "30112233445566778899",
            "Local Key": "1234567890123abc",
            "Version": "3.3",
        }
    ]
}

# Settings
TTL_HEARTBEAT = 12  # Time in seconds between heartbeats

def create_device(i):
    print(f"Connecting to {i['Device ID']} at {i['Address']} with key {i['Local Key']}")
    device = tinytuya.Device(i["Device ID"], i["Address"], i["Local Key"], version=i["Version"])
    return device

def reconnect_device(device_info, index, statuses, cool_down_time=5):
    """
    Attempts to reconnect the device after a cool-down period and update the statuses.
    """
    time.sleep(cool_down_time)  # Cool-down before reconnection

    try:
        print(f"Reconnecting to {device_info['Device ID']}...")

        device = create_device(device_info)
        device.set_socketPersistent(True)
        initial_status = device.status()

        # Check if we successfully retrieved a valid status
        if "dps" in initial_status:
            print(f"Reconnected and got status from {device.id}: {initial_status}")
            statuses[index] = {"id": device.id, "status": initial_status["dps"]}
        else:
            raise Exception(f"Failed to get valid initial status after reconnect for {device.id}: {initial_status}")

        return device
    except Exception as e:
        print(f"Failed to reconnect to {device_info['Device ID']}: {e}")
        statuses[index] = {"id": device_info["Device ID"], "status": "Disconnected"}
        return None

def send_heartbeat(device):
    """
    Sends a heartbeat packet to keep the device connected.
    """
    try:
        # Send a heartbeat packet
        device.heartbeat(nowait=True)
        print(f"Sent heartbeat to {device.id}")
    except Exception as e:
        print(f"Failed to send heartbeat to {device.id}: {e}")

def getDeviceStatuses(devices, config):
    statuses = [None] * len(devices)  # Initialize statuses list to hold results for each device

    # Enable persistent socket connection for each device
    for index, device in enumerate(devices):
        try:
            device.set_socketPersistent(True)
            initial_status = device.status()
            if "dps" in initial_status:
                print(f"INITIAL status from {device.id}: {initial_status}")
                statuses[index] = {"id": device.id, "status": initial_status["dps"]}
            else:
                print(f"Failed to get initial status from {device.id}")
                statuses[index] = {"id": device.id, "status": {}}
        except Exception as e:
            print(f"Error getting initial status from {device.id}: {e}")
            statuses[index] = {"id": device.id, "status": {}}

    # Create a list of sockets to monitor
    sockets = [device.socket for device in devices]

    last_heartbeat_time = time.time()  # Track the last time a heartbeat was sent

    # Infinite loop to listen for status updates using select
    while True:
        # Send a heartbeat every 5 seconds to all devices
        if time.time() - last_heartbeat_time >= TTL_HEARTBEAT:
            for device in devices:
                send_heartbeat(device)
            last_heartbeat_time = time.time()  # Reset heartbeat timer

            # Use select to wait for any of the device sockets to have data
            try:
                readable, _, _ = select.select(sockets, [], [], 0.1)
            except Exception as e:
                print(f"Device disconnected: {e}")
                # Find the invalid socket and remove it
                for sock in sockets:
                    if sock.fileno() == -1:
                        # reconnect
                        device_info = config["TuyaDevices"][sockets.index(sock)]
                        new_device = reconnect_device(device_info, sockets.index(sock), statuses, cool_down_time=5)
                        if new_device:
                            devices[sockets.index(sock)] = new_device
                            sockets[sockets.index(sock)] = new_device.socket
                        else:
                            # Remove the invalid socket to avoid the negative file descriptor error
                            sockets.remove(sock)
                continue

            if readable:
                # Process each socket with incoming data
                for sock in readable:
                    # Find the corresponding device for this socket
                    device = next((d for d in devices if d.socket == sock), None)
                    if not device:
                        continue

                    updated_status = device.receive()

                    if updated_status:
                        print(f"UPDATE status from {device.id}: {updated_status}")
                        index = devices.index(device)
                        # We may only get one DPS, so just update that one item
                        if "dps" in updated_status:
                            for key in updated_status["dps"]:
                                statuses[index]["status"][key] = updated_status["dps"][key]
                                print(f" - Updated status for {device.id} DPS {key} to {updated_status['dps'][key]}")
                    else:
                        # Check if the device has disconnected
                        if not device.socket or device.socket.fileno() == -1:
                            # Device has disconnected
                            print(f"Device {device.id} has disconnected.")
                            # Reconnect logic with cool-down
                            device_info = config["TuyaDevices"][devices.index(device)]
                            new_device = reconnect_device(device_info, devices.index(device), statuses, cool_down_time=5)
                            if new_device:
                                devices[devices.index(device)] = new_device  # Replace the disconnected device
                                sockets[devices.index(device)] = new_device.socket  # Update the socket list
                            else:
                                # Remove the invalid socket to avoid the negative file descriptor error
                                sockets.remove(sock)
                        else:
                            print(f"Received empty status from {device.id}")

# Initialize devices
devices = [create_device(i) for i in config["TuyaDevices"]]

# Start the status listener
getDeviceStatuses(devices, config)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/send_raw_dps.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Example to send raw DPS values to Tuya devices

 You could also use set_value(dps_index,value) but would need to do that for each DPS value. 
 To send it in one packet, you build the payload yourself and send it using something simliar
 to this example.

 Note: Some devices will not accept multiple commands and require you to send two separate commands. 
 My Gosund dimmer switch is one of those and requires that I send two commands, 
 one for '1' for on/off and one for '3' for the dimmer. 

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

""" 
import tinytuya

# Connect to the device - replace with real values
d=tinytuya.OutletDevice(DEVICEID, DEVICEIP, DEVICEKEY)
d.set_version(3.3)

# Generate the payload to send - add all the DPS values you want to change here
payload=d.generate_payload(tinytuya.CONTROL, {'1': True, '2': 50})

# Optionally you can set separate gwId, devId and uid values 
# payload=d.generate_payload(tinytuya.CONTROL, data={'1': True, '2': 50}, gwId=DEVICEID, devId=DEVICEID, uid=DEVICEID)

# Send the payload to the device
d._send_receive(payload)

=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/snapshot.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Example script that uses the snapshot.json to manage Tuya Devices

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya
"""

import tinytuya
import json
import time

with open('snapshot.json') as json_file:
     data = json.load(json_file)

# Print a table with all devices
print("%-25s %-24s %-16s %-17s %-5s" % ("Name","ID", "IP","Key","Version"))
for item in data["devices"]:
    print("%-25.25s %-24s %-16s %-17s %-5s" % (
        item["name"],
        item["id"],
        item["ip"],
        item["key"],
        item["ver"]))

# Print status of everything
for item in data["devices"]:
    print("\nDevice: %s" % item["name"])
    if item["ip"] == "":
        print("No IP Address - Skipping")
    else:
        d = tinytuya.OutletDevice(item["id"], item["ip"], item["key"])
        d.set_version(float(item["ver"]))
        status = d.status()  
        print(status)

# Turn on a device by name
def turn_on(name):
    # find the right item that matches name
    for item in data["devices"]:
        if item["name"] == name:
            break
    print("\nTurning On: %s" % item["name"])
    d = tinytuya.OutletDevice(item["id"], item["ip"], item["key"])
    d.set_version(float(item["ver"]))
    d.set_status(True)

# Turn off a device by name
def turn_off(name):
    # find the right item that matches name
    for item in data["devices"]:
        if item["name"] == name:
            break
    print("\nTurning Off: %s" % item["name"])
    d = tinytuya.OutletDevice(item["id"], item["ip"], item["key"])
    d.set_version(float(item["ver"]))
    d.set_status(False)

# Test it
turn_off('Dining Room')
time.sleep(2)
turn_on('Dining Room')



=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/threading.py

# TinyTuya Example
# -*- coding: utf-8 -*-
"""
 TinyTuya - Multi-threaded Example 
 
 This demonstrates how to use threading to listen for status updates from multiple
 Tuya devices.

 Setup:
    Set the config for each device and the script will create a thread for each device
    to listen for status updates.  The main thread will continue to run and can be used
    to send commands to the devices.

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

"""

import threading
import time
import tinytuya

# Define the devices to control
config = {
    "TuyaDevices": [
        {
            "Address": "192.168.1.10",
            "Device ID": "00112233445566778899",
            "Local Key": "1234567890123abc",
            "Version": "3.3",
        },
        {
            "Address": "192.168.1.11",
            "Device ID": "10112233445566778899",
            "Local Key": "1234567890123abc",
            "Version": "3.3",
        },
        {
            "Address": "192.168.1.12",
            "Device ID": "20112233445566778899",
            "Local Key": "1234567890123abc",
            "Version": "3.3",
        },
        {
            "Address": "192.168.1.13",
            "Device ID": "30112233445566778899",
            "Local Key": "1234567890123abc",
            "Version": "3.3",
        }
    ]
}


# Settings
TTL_HEARTBEAT = 12  # Time in seconds between heartbeats

# Create array, devices, that is an array of tinytuya.Device objects
devices = []
for i in config["TuyaDevices"]:
    d = tinytuya.Device(i["Device ID"], i["Address"], i["Local Key"], version=i["Version"])
    devices.append(d)  # Add the device to the devices array

# Function to listen for status updates from each device
def getDeviceStatuses():
    global devices
    global statuses

    def listen_for_status_updates(device, index):
        """
        Thread function to continuously listen for status updates and send heartbeats.
        """
        # Enable persistent connection to the device
        def reconnect():
            time.sleep(5)  # Cool-down before reconnecting
            try:
                print(f"Reconnecting to {device.id}...")
                device.set_socketPersistent(True)
                initial_status = device.status()
                print(f"Reconnected and got status from {device.id}: {initial_status}")
                statuses[index] = {"id": device.id, "status": initial_status["dps"]}
                return True
            except Exception as e:
                print(f"Failed to reconnect to {device.id}: {e}")
                return False

        try:
            # Call status() once to establish connection and get initial status
            device.set_socketPersistent(True)
            initial_status = device.status()
            print(f"INITIAL status from {device.id}: {initial_status}")
            statuses[index] = {"id": device.id, "status": initial_status["dps"]}
        except Exception as e:
            print(f"Error getting initial status from {device.id}: {e}")
            statuses[index] = {"id": device.id, "status": "Disconnected"}
            return

        # Variables to track the last heartbeat
        last_heartbeat_time = time.time()

        # Infinite loop to listen for status updates
        while True:
            try:
                # Send a heartbeat every 5 seconds
                if time.time() - last_heartbeat_time >= TTL_HEARTBEAT:
                    try:
                        device.heartbeat()
                        print(f"Heartbeat sent to {device.id}")
                        last_heartbeat_time = time.time()
                    except Exception as hb_error:
                        print(f"Failed to send heartbeat to {device.id}: {hb_error}")
                        # Try to reconnect if the heartbeat fails
                        if not reconnect():
                            statuses[index]["status"] = "Disconnected"
                            break  # Exit the loop if reconnection fails

                # Listen for updates from the device
                updated_status = device.receive()

                if updated_status:
                    print(f"UPDATE status from {device.id}: {updated_status}")
                    # We may only get one DPS, so just update that one item
                    if "dps" in updated_status:
                        for key in updated_status["dps"]:
                            statuses[index]["status"][key] = updated_status["dps"][key]
                            print(f" - Updated status for {device.id} DPS {key} to {updated_status['dps'][key]}")

                # Small delay to avoid tight loops
                time.sleep(0.1)

            except Exception as e:
                print(f"Error receiving status from {device.id}: {e}")
                statuses[index]["status"] = "Disconnected"
                if not reconnect():
                    break  # Exit the loop if reconnection fails

    threads = []

    # Create and start a thread for each device
    for index, device in enumerate(devices):
        print(f"Starting thread for device {device.id}")
        thread = threading.Thread(target=listen_for_status_updates, args=(device, index))
        thread.daemon = True  # Daemon threads exit with the main program
        threads.append(thread)
        thread.start()

# Example usage
statuses = [None] * len(devices)  # Initialize statuses list to hold results for each device

getDeviceStatuses()

# Optionally, keep the main program running indefinitely
while True:
    time.sleep(1)  # Keep the main thread alive


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: examples/zigbee_gateway.py

import tinytuya
import time

# Zigbee Gateway support uses a parent/child model where a parent gateway device is
#  connected and then one or more children are added.

# configure the parent device
#   address=None will cause it to search the network for the device
gw = tinytuya.Device( 'eb...4', address=None, local_key='aabbccddeeffgghh', persist=True, version=3.3 )

print( 'GW IP found:', gw.address )

# configure one or more children.  Every dev_id must be unique!
#   cid is the "node_id" from devices.json
#   node_id can be used as an alias for cid
zigbee1 = tinytuya.OutletDevice( 'eb14...w', cid='0011223344556601', parent=gw )
zigbee2 = tinytuya.OutletDevice( 'eb04...l', cid='0011223344556689', parent=gw )

print(zigbee1.status())
print(zigbee2.status())

print(" > Begin Monitor Loop <")
pingtime = time.time() + 9

while(True):
    if( pingtime <= time.time() ):
        payload = gw.generate_payload(tinytuya.HEART_BEAT)
        gw.send(payload)
        pingtime = time.time() + 9

    # receive from the gateway object to get updates for all sub-devices
    print('recv:')
    data = gw.receive()
    print( data )

    # data['device'] contains a reference to the device object
    if data and 'device' in data and data['device'] == zigbee1:
        print('toggling device state')
        time.sleep(1)
        if data['dps']['1']:
            data['device'].turn_off(nowait=True)
        else:
            data['device'].turn_on(nowait=True)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: pyproject.toml

[build-system]
requires = ["setuptools", "colorama", "requests", "cryptography"]


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: requirements.txt

#
cryptography>=3.1   # Encryption - AES can also be provided via PyCryptodome or pyaes or pyca/cryptography
requests            # Used for Setup Wizard - Tuya IoT Platform calls
colorama            # Makes ANSI escape character sequences work under MS Windows.
#netifaces           # Used to get the IP address of the local machine for scanning for devices, mainly useful for multi-interface machines.


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: server/Dockerfile

FROM python:3.12-bookworm
WORKDIR /app
ENV PYTHONUNBUFFERED 1
ENV CRYPTOGRAPHY_DONT_BUILD_RUST=1
RUN pip3 install cryptography pycryptodome --no-build-isolation
RUN pip3 install --no-cache-dir netifaces tinytuya
COPY . .
CMD ["python3", "server.py"]
EXPOSE 8888
EXPOSE 6666/udp
EXPOSE 6667/udp
EXPOSE 7000/udp


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: server/README.md

# TinyTuya API Server

![Docker Pulls](https://img.shields.io/docker/pulls/jasonacox/tinytuya)

The TinyTuya API Server provides a central service to access all your Tuya devices on your network.  It continually listens for Tuya UDP discovery packets and updates the database of active devices. It uses `devices.json` to poll the devices for status or change their state.

**BETA**: This is under active development. Please reach out if you have suggestions or wish to contribute~

API Functions - The server listens for GET requests on local port 8888:

```
    /help                                      - List all available commands
    /devices                                   - List all devices discovered with metadata   
    /device/{DeviceID}|{DeviceName}            - List specific device metadata
    /numdevices                                - List current number of devices discovered
    /status/{DeviceID}|{DeviceName}            - List current device status
    /set/{DeviceID}|{DeviceName}/{Key}/{Value} - Set DPS {Key} with {Value} 
    /turnon/{DeviceID}/{SwitchNo}              - Turn on device, optional {SwtichNo}
    /turnoff/{DeviceID}/{SwitchNo}             - Turn off device, optional {SwtichNo}
    /delayedoff/{DeviceID}|{DeviceName}/{SwitchNo}/{Seconds} 
                                               - Turn off device with a delay, optional {SwitchNo}/{Delay}
    /sync                                      - Fetches the device list and local keys from the Tuya Cloud API
    /cloudconfig/{apiKey}/{apiSecret}/{apiRegion}/{apiDeviceID}   
                                               - Sets the Tuya Cloud API login info
    /offline                                   - List of registered devices that are offline
```

Note! If you use {DeviceName} instead of {DeviceID}, make sure your Device Names are absolutely unique! Otherwise you will get funny results.

## Quick Start

This folder contains the `server.py` script that runs a simple python based webserver that makes the TinyTuya API calls.  Make sure the `device.json` file is the same directory where you start the server.

```bash
# Start Server - use Control-C to Stop
python3 server.py

# Start Server in Debug Mode
python3 server.py -d
```

```
TinyTuya (Server) [1.10.0t4]

[Loaded devices.json - 39 devices]

Starting threads...
 - API and UI Endpoint on http://localhost:8888
```

## Docker Container

1. Run the Server as a Docker Container listening on port 8888. Make sure your Tinytuya `devices.json` file is located in the directory where you start the container. Set `HOST` to the primary IP address of your docker host, otherwise a request to Force Scan the network will scan every possible docker IP network on your host.

    ```bash
    docker run \
        -d \
        -p 8888:8888 \
        -p 6666:6666/udp \
        -p 6667:6667/udp \
        -p 7000:7000/udp \
        --network host \
        -e DEBUGMODE='no' \
        -e HOST='192.168.0.100' \
        -v $PWD/devices.json:/app/devices.json \
        -v $PWD/tinytuya.json:/app/tinytuya.json \
        --name tinytuya \
        --restart unless-stopped \
        jasonacox/tinytuya
    ```

2. Test the Server

You can load the Web Interface to view all your devices: http://localhost:8888/

Additionally you can use the API server to poll or mange your Tuya devices with simple web service calls:

```bash
# Get Tuya Device Information
curl -i http://localhost:8888/numdevices
curl -i http://localhost:8888/devices
curl -i http://localhost:8888/device/{deviceID}
curl -i http://localhost:8888/status/{deviceID}

# Command Tuya Devices
curl -i http://localhost:8888/turnon/{deviceID}
curl -i http://localhost:8888/turnoff/{deviceID}
curl -i http://localhost:8888/set/{deviceID}/{key}/{value}
```

### Troubleshooting Help

Check the logs. If you see python errors, make sure you entered your credentials correctly in the `server.py` file.  If you didn't, edit that file and restart docker:

```bash
# See the logs
docker logs tinytuya

# Stop the server
docker stop tinytuya

# Start the server
docker start tinytuya
```

## Control Panel

The UI at http://localhost:8888 allows you to view and control the devices.

![image](https://github.com/jasonacox/tinytuya/assets/836718/e00a1f9a-48e2-400c-afa1-7a81799efa89)

![image](https://user-images.githubusercontent.com/836718/227736057-e5392c13-554f-457e-9082-43c4d41a98ed.png)

## Release Notes

### p12 - Force Scan

* Added "Force Scan" button to cause server to run a network scan for devices not broadcasting.
* Minor updates to UI for a cleaner title and footer to accommodate button.
* Added logic to allow settings via environmental variables.
* Add broadcast request to local network for 3.5 devices. 
* Fix bug with cloud sync refresh losing device mappings.
* Added "Cloud Sync" button to poll cloud for updated device data.

### t11 - Minimize Container

* Reduce size of Docker container by removing rust build and using python:3.12-bookworm.
* Add signal handler for cleaner shutdown handling for `docker stop`.

### t10 - Remove Import

* Remove unused imports for Crypto.

### t9 - DeviceName Addition

* Use {DeviceName} instead of {DeviceID} alternatively for API commands

### t8 - Mappings

* Mapping for DP IDs in https://github.com/jasonacox/tinytuya/pull/353.

### t7 - Add Control by Name

* Use {`DeviceName`} in addition to {`DeviceID`} for API commands by @mschlenstedt in https://github.com/jasonacox/tinytuya/pull/352

```bash
# by DeviceID
$ curl http://localhost:8888/status/xxxxxxxxxxxxxxxxxx01
{"devId": "xxxxxxxxxxxxxxxxxx01", "dps": {"1": true, "9": 0}}

# by DeviceName
$ curl http://localhost:8888/status/Kitchen%20Light
{"devId": "xxxxxxxxxxxxxxxxxx01", "dps": {"1": true, "9": 0}}
$ curl http://localhost:8888/status/SmartBulb                                
{"devId": "xxxxxxxxxxxxxxxxxx02", "dps": {"20": true, "21": "white", "22": 1000, "24": "000003e803e8", "25":"07464602000003e803e800000000464602007803e803e80000000046460200f003e803e800000000464602003d03e803e80000000046460200ae03e803e800000000464602011303e803e800000000", "26": 0}}
```


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: server/mqtt/mqtt.json

{
   "broker" : "localhost",
   "port" : 1883,
   "username" : "Broker_Username",
   "password" : "Broker_Password",
   "topic" : "tinytuya",
   "pollingtime" : 5
}


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: server/mqtt/mqtt_gateway.py

# TinyTuya MQTT Gateway
# -*- coding: utf-8 -*-
"""
TinyTuya MQTT Gateway for API Server for Tuya based WiFi smart devices

Author: @mschlenstedt
Date: June 11, 2023
For more information see https://github.com/jasonacox/tinytuya

Description

"""

# Modules
import paho.mqtt.client as mqtt
import time
import logging
import json
try:
    import requests
except ImportError as impErr:
    print("WARN: Unable to import requests library, Cloud functions will not work.")
    print("WARN: Check dependencies. See https://github.com/jasonacox/tinytuya/issues/377")
    print("WARN: Error: {}.".format(impErr.args[0]))
import sys
import os
import copy
import concurrent.futures
import threading
from queue import Queue

BUILD = "t2"

# Defaults
DEBUGMODE = False
POLLINGTIME = 5
TOPIC = "tinytuya"
BROKER = "localhost"
BROKERPORT = "1883"
APIPORT = 8888

# Check for Environmental Overrides
debugmode = os.getenv("DEBUG", "no")
if debugmode.lower() == "yes":
    DEBUGMODE = True

# Logging
log = logging.getLogger(__name__)
if len(sys.argv) > 1 and sys.argv[1].startswith("-d"):
    DEBUGMODE = True
if DEBUGMODE:
    logging.basicConfig(
        format="\x1b[31;1m%(levelname)s [%(asctime)s]:%(message)s\x1b[0m", level=logging.DEBUG,
        datefmt='%d/%b/%y %H:%M:%S'
    )
    log.setLevel(logging.DEBUG)
    log.debug("TinyTuya (MQTT Gateway) [%s]", BUILD)
    print("\nTinyTuya (MQTT Gateway) [%s]\n" % BUILD)

# Global Variables
running = True
q=Queue()
mqttconfig = {}
last = 0
devices = {}

# Helpful Functions

def on_connect(client, userdata, flags, rc):
    if rc==0:
        client.connected_flag=True #set flag
        log.debug("Connected OK")
        try:
            client.publish(mqttconfig['topic'] + "/running", str("1"), retain=1)
        except:
            log.debug("Cannot set topic %s", mqttconfig['topic'] + "/running")
    else:
        log.debug("Bad connection, Returned code %s", rc)

def on_message(client, userdata, message):
    q.put(message)

def readconfig():
    config = {}
    try:
        with open('mqtt.json') as f:
            config = json.load(f)
    except:
        print("Cannot read mqtt config - using defaults.")
        log.debug("Cannot read mqtt config - using defaults.")
    if 'topic' not in config:
        config['topic'] = TOPIC
    if 'broker' not in config:
        config['broker'] = BROKER
    if 'port' not in config:
        config['port'] = BROKERPORT
    if 'pollingtime' not in config:
        config['pollingtime'] = POLLINGTIME
    log.debug("Config %s", config)
    return (config)

def getdevices():
    data = {}
    try:
        url = "http://localhost:" + str(APIPORT) + "/devices"
        with requests.get(url) as response:
            response.raise_for_status()
            data = response.json()
    except:
        log.debug("Cannot get devices list from server")
        data = {}
    return(data)

def get_session():
    if not hasattr(thread_local, "session"):
        thread_local.session = requests.Session()
    return thread_local.session

def get_status(id):
    session = get_session()
    try:
        url = "http://localhost:" + str(APIPORT) + "/status/" + id
        with session.get(url) as response:
            response.raise_for_status()
            data = response.json()
        status_raw = data['dps']
        status = copy.deepcopy(status_raw)
        if 'dps_mapping' in data:
            mapping = data['dps_mapping']
            keysList = list(status_raw.keys())
            for i in keysList:
                newname = ""
                for j in mapping:
                    if str(j) == str(i):
                        newname = mapping[j]['code']
                        break
                if newname != "":
                    status[newname] = status.pop(i)
        client.publish(mqttconfig['topic'] + "/" + id + "/status_raw", json.dumps(status_raw), retain=1)
        client.publish(mqttconfig['topic'] + "/" + id + "/status", json.dumps(status), retain=1)
        client.publish(mqttconfig['topic'] + "/" + id + "/last", str(int(time.time())), retain=1)
        for d in devices:
            if str(devices[d]['id']) == str(id):
                client.publish(mqttconfig['topic'] + "/" + id + "/device", json.dumps(devices[d]), retain=1)
                break
    except:
        log.debug("Cannot read status for device %s", str(id))

def get_status_all(sdevices):
    with concurrent.futures.ThreadPoolExecutor(max_workers=20) as executor:
        executor.map(get_status, sdevices)

def set_dps(url):
    try:
        url = "http://localhost:" + str(APIPORT) + "/set/" + url
        with requests.get(url) as response:
            response.raise_for_status()
            data = response.json()
    except:
        log.debug("Cannot read set dps %s", str(url))

# Main

if __name__ == "__main__":

    mqttconfig = readconfig()

    # Conncect to broker
    client = mqtt.Client()
    client.will_set(mqttconfig['topic'] + "/running", str("0"), 0, True)
    client.connected_flag=False
    client.on_connect = on_connect
    if 'username' in mqttconfig and 'password' in mqttconfig:
        if mqttconfig['username'] != "" and mqttconfig['password'] != "":
            client.username_pw_set(username = mqttconfig['username'],password = mqttconfig['password'])
    log.debug("Connecting to Broker %s on port %s." % (mqttconfig['broker'], str(mqttconfig['port'])))
    client.connect(mqttconfig['broker'], port = int(mqttconfig['port']))

    # Subscribe to the set topic
    stopic =  mqttconfig['topic'] + "/set/#"
    client.subscribe(stopic, qos=0)
    client.on_message = on_message
    client.loop_start()

    # Wait for MQTT connection
    counter=0
    while not client.connected_flag: #wait in loop
        time.sleep(1)
        counter+=1
        if counter > 60:
            print("Cannot connect to Broker %s on port %s." % (mqttconfig['broker'], str(mqttconfig['port'])))
            log.debug("Cannot connect to Broker %s on port %s." % (mqttconfig['broker'], str(mqttconfig['port'])))
            sys.exit(2)

    # Loop
    thread_local = threading.local()
    last = 0
    while(True):
        now = time.time()
        # Check for any subscribed messages in the queue
        while not q.empty():
            message = q.get()
            if message is None or str(message.payload.decode("utf-8")) == "":
                continue
            log.debug("Received: %s at topic %s" % ( str(message.payload.decode("utf-8")), str(message.topic) ))
            id, dpsKey = str(message.topic).replace(mqttconfig['topic'] + "/set/", "").split("/", 1)
            set_dps( str(message.topic).replace(mqttconfig['topic'] + "/set/", "") + "/" + str(message.payload.decode("utf-8")) )
            time.sleep(0.5)
            get_status(id)
        # Get status
        if last + int(mqttconfig['pollingtime']) < now:
            last = time.time()
            devices = getdevices()
            get_status_all(devices)
        # Slow down
        time.sleep(0.1)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: server/server.py

# TinyTuya API Server
# -*- coding: utf-8 -*-
"""
TinyTuya API Server for Tuya based WiFi smart devices

Author: Jason A. Cox
Date: June 11, 2023
For more information see https://github.com/jasonacox/tinytuya

Description
    Server continually listens for Tuya UDP discovery packets and updates the database of devices
    and uses devices.json to determine metadata about devices.
    Server listens for GET requests on local port 8888:
        /devices                        - List all devices discovered with metadata
        /device/{DeviceID}|{DeviceName} - List specific device metadata
        /numdevices                     - List current number of devices discovered
        /status/{DeviceID}|{DeviceName} - List current device status
        /set/{DeviceID}|{DeviceName}/{Key}|{Code}/{Value}
                                        - Set DPS {Key} or {Code} with {Value}
        /turnon/{DeviceID}|{DeviceName}/{SwitchNo}
                                        - Turn on device, optional {SwtichNo}
        /turnoff/{DeviceID}|{DeviceName}/{SwitchNo}
                                        - Turn off device, optional {SwtichNo}
        /sync                           - Fetches the device list and local keys from the Tuya Cloud API
        /cloudconfig/{apiKey}/{apiSecret}/{apiRegion}/{apiDeviceID}
                                        - Sets the Tuya Cloud API login info
        /offline                        - List of registered devices that are offline
        /delayoff/{DeviceID}|{DeviceName}/{Time}
                                        - Turn off device with delay

"""

# Modules
from __future__ import print_function
import threading
import time
import logging
import json
import socket
try:
    import requests
except ImportError as impErr:
    print("WARN: Unable to import requests library, Cloud functions will not work.")
    print("WARN: Check dependencies. See https://github.com/jasonacox/tinytuya/issues/377")
    print("WARN: Error: {}.".format(impErr.args[0]))
import resource
import signal
import sys
import os
import urllib.parse
from http.server import BaseHTTPRequestHandler, HTTPServer
from socketserver import ThreadingMixIn 
import ipaddress

# Terminal color capability for all platforms
try:
    from colorama import init
    init()
except:
    pass

import tinytuya
from tinytuya import scanner
import os

BUILD = "p13"

# Defaults from Environment
APIPORT = int(os.getenv("APIPORT", "8888"))
DEVICEFILE = os.getenv("DEVICEFILE", tinytuya.DEVICEFILE)
SNAPSHOTFILE = os.getenv("SNAPSHOTFILE", tinytuya.SNAPSHOTFILE)
CONFIGFILE = os.getenv("CONFIGFILE", tinytuya.CONFIGFILE)
TCPTIMEOUT = float(os.getenv("TCPTIMEOUT", str(tinytuya.TCPTIMEOUT)))
TCPPORT = int(os.getenv("TCPPORT", str(tinytuya.TCPPORT)))
MAXCOUNT = int(os.getenv("MAXCOUNT", str(tinytuya.MAXCOUNT)))
UDPPORT = int(os.getenv("UDPPORT", str(tinytuya.UDPPORT)))
UDPPORTS = int(os.getenv("UDPPORTS", str(tinytuya.UDPPORTS)))
UDPPORTAPP = int(os.getenv("UDPPORTAPP", str(tinytuya.UDPPORTAPP)))
TIMEOUT = float(os.getenv("TIMEOUT", str(tinytuya.TIMEOUT)))
RETRYTIME = int(os.getenv("RETRYTIME", "30"))
RETRYCOUNT = int(os.getenv("RETRYCOUNT", "5"))
SAVEDEVICEFILE = os.getenv("SAVEDEVICEFILE", "True").lower() == "true"
DEBUGMODE = os.getenv("DEBUGMODE", "no").lower() == "yes"
HOST = os.getenv("HOST", None)
BROADCAST = os.getenv("BROADCAST", None)
NETWORK = None

# If HOST specified, set up broadcast address and calculate network
if HOST:
    if not BROADCAST:
        BROADCAST = HOST.split('.')
        BROADCAST[3] = '255'
        BROADCAST = '.'.join(BROADCAST)
    host_ip = ipaddress.IPv4Address(HOST)
    broadcast_ip = ipaddress.IPv4Address(BROADCAST)
    host_bits = int(host_ip)
    broadcast_bits = int(broadcast_ip)
    mask_length = 32 - (broadcast_bits - host_bits).bit_length()
    NETWORK = str(ipaddress.IPv4Network(f"{host_ip}/{mask_length}", strict=False))

# Logging
log = logging.getLogger(__name__)
if len(sys.argv) > 1 and sys.argv[1].startswith("-d"):
    DEBUGMODE = True
if DEBUGMODE:
    logging.basicConfig(
        format="\x1b[31;1m%(levelname)s [%(asctime)s]:%(message)s\x1b[0m", level=logging.DEBUG, 
        datefmt='%d/%b/%y %H:%M:%S'
    )
    log.setLevel(logging.DEBUG)
    log.debug("TinyTuya Server [%s]", BUILD)
    tinytuya.set_debug(True)

# Signal handler - Exit on SIGTERM
def sig_term_handle(signum, frame):
    raise SystemExit

signal.signal(signal.SIGTERM, sig_term_handle)

# Static Assets
web_root = os.path.join(os.path.dirname(__file__), "web")

# Global Stats
serverstats = {}
serverstats['tinytuya'] = "%s%s" % (tinytuya.version, BUILD)
serverstats['gets'] = 0
serverstats['errors'] = 0
serverstats['timeout'] = 0
serverstats['api'] = {}
serverstats['ts'] = int(time.time())         # Timestamp for Now
serverstats['start'] = int(time.time())      # Timestamp for Start 

# Global Variables
running = True
tuyadevices = []
deviceslist = {}
newdevices = []
retrydevices = {}
retrytimer = 0
cloudconfig = {'apiKey':'', 'apiSecret':'', 'apiRegion':'', 'apiDeviceID':''}
forcescan = False
forcescandone = True
cloudsync = False
cloudsyncdone = True
cloudcreds = True

# Terminal formatting
(bold, subbold, normal, dim, alert, alertdim, cyan, red, yellow) = tinytuya.termcolor(True)

# Helpful Functions

def tuyaLookup(deviceid):
    #  Function to Lookup Tuya device info by (id) returning (name, key)
    for i in tuyadevices:
        if i["id"] == deviceid:
            if "mac" in i:
                return (i["name"], i["key"], i["mac"])
            else:
                return (i["name"], i["key"], "")
    return ("", "", "")

def appenddevice(newdevice, devices):
    if newdevice["id"] in devices:
        return True
    devices[newdevice["id"]] = newdevice
    return False

def offlineDevices():
    # return undiscovered devices
    offline={}
    for d in tuyadevices:
        if type(d) != dict:
            continue
        id = d["id"]
        if id not in deviceslist:
            offline[id] = {}
            offline[id]["name"] = d["name"] 
            if "mac" in d:
                offline[id]["mac"] = d["mac"]
    return offline

def formatreturn(value):
    if value is None:
        result = {"status": "OK"}
    elif type(value) is dict:
        result = value
    else:
        result = {"status": value}
    return(json.dumps(result))

def get_static(web_root, fpath):
    if fpath.split('?')[0] == "/":
        fpath = "index.html"
    if fpath.startswith("/"):
        fpath = fpath[1:]
    fpath = fpath.split("?")[0]
    freq = os.path.join(web_root, fpath)
    if os.path.exists(freq):
        if freq.lower().endswith(".js"):
            ftype = "application/javascript"
        elif freq.lower().endswith(".css"):
            ftype = "text/css"
        elif freq.lower().endswith(".png"):
            ftype = "image/png"
        elif freq.lower().endswith(".html"):
            ftype = "text/html"
        else:
            ftype = "text/plain"

        with open(freq, 'rb') as f:
            return f.read(), ftype

    return None, None

def tuyaLoadJson():
    # Check to see if we have additional Device info
    tdevices = []
    try:
        # Load defaults
        with open(DEVICEFILE) as f:
            tdevices = json.load(f)
        log.debug("loaded=%s [%d devices]", DEVICEFILE, len(tdevices))
    except:
        # No Device info
        log.debug("Device file %s could not be loaded", DEVICEFILE)

    return tdevices

def tuyaSaveJson():
    if not SAVEDEVICEFILE:
        return False

    try:
        with open(DEVICEFILE, 'w') as f:
            json.dump(tuyadevices, f, indent=4)
        log.debug("saved=%s [%d devices]", DEVICEFILE, len(tuyadevices))
    except:
        return False

    return True

def tuyaLoadConfig():
    # Check to see if we have Cloud account credentials from wizard
    config = {'apiKey':'', 'apiSecret':'', 'apiRegion':'', 'apiDeviceID':''}
    try:
        # Load defaults
        with open(CONFIGFILE) as f:
            config = json.load(f)
        log.debug("loaded config=%s", CONFIGFILE)
    except:
        # No Device info
        log.debug("No cloud config file found %s", CONFIGFILE)

    return config

tuyadevices = tuyaLoadJson()
cloudconfig = tuyaLoadConfig()

# Start with Cloud API credentials
if cloudconfig['apiKey'] == '' or cloudconfig['apiSecret'] == '' or cloudconfig['apiRegion'] == '' or cloudconfig['apiDeviceID'] == '':
    cloudcreds = False

def tuyaCloudRefresh():
    global tuyadevices
    print(" + Cloud Refresh Requested")
    log.debug("Calling Cloud Refresh")
    if cloudconfig['apiKey'] == '' or cloudconfig['apiSecret'] == '' or cloudconfig['apiRegion'] == '' or cloudconfig['apiDeviceID'] == '':
        log.debug("Cloud API config missing, not loading")
        return {'Error': 'Cloud API config missing'}

    cloud = tinytuya.Cloud( **cloudconfig )
    # on auth error, getdevices() will implode
    if cloud.error:
        return cloud.error
    tuyadevices = cloud.getdevices(verbose=False, oldlist=tuyadevices, include_map=True)
    tuyaSaveJson()
    print(f" - Cloud Refresh Complete: {len(tuyadevices)} devices")
    return {'devices': tuyadevices}

def getDeviceIdByName(name):
    id = False
    nameuq = urllib.parse.unquote(name)
    for key in deviceslist:
        if deviceslist[key]['name'] == nameuq:
            id = deviceslist[key]['id']
            break
    return (id)

# Threads
def tuyalisten(port):
    """
    Thread to listen for Tuya devices UDP broadcast on port 
    """
    global BROADCAST
    log.debug("Started tuyalisten thread on %d", port)
    print(" - tuyalisten %d Running" % port)
    last_broadcast = 0

    # Enable UDP listening broadcasting mode on UDP port 
    client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    client.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    try:
        client.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
    except AttributeError:
        # SO_REUSEPORT not available
        pass
    client.bind(("", port))
    client.settimeout(5)

    iface_list = None
    if HOST:
        iface_list = {}
        iface_list[HOST] = { 'broadcast': BROADCAST }
        log.debug("Using iface_list: %r", iface_list)

    while(running):
        if port == UDPPORTAPP and time.time() - last_broadcast > scanner.BROADCASTTIME:
            log.debug("Sending discovery request to all 3.5 devices on the network")
            if HOST:
                scanner.send_discovery_request(iface_list)
            else:
                scanner.send_discovery_request()
            last_broadcast = time.time()
        try:
            data, addr = client.recvfrom(4048)
        except (KeyboardInterrupt, SystemExit) as err:
            break
        except Exception as err:
            continue
        ip = addr[0]
        gwId = dname = dkey = mac = ""
        result = data
        try:
            result = tinytuya.decrypt_udp( data )
            result = json.loads(result)
            #log.debug("Received valid UDP packet: %r", result)
            ip = result["ip"]
            gwId = result["gwId"]
        except:
            result = {"ip": ip}
            #log.debug("Invalid UDP Packet: %r", result)
        try:
            # Try to pull name and key data
            (dname, dkey, mac) = tuyaLookup(gwId)
        except:
            pass
        if not gwId:
            continue
        # set values
        result["name"] = dname
        result["mac"] = mac
        result["key"] = dkey
        result["id"] = gwId
        result["forced"] = False

        # add device if new
        if not appenddevice(result, deviceslist):
            # Added device to list
            if dname == "" and dkey == "" and result["id"] not in newdevices:
                # If fetching the key failed, save it to retry later
                retrydevices[result["id"]] = RETRYCOUNT
                newdevices.append(result["id"])
    print(' - tuyalisten', port, 'Exit')
    log.debug("tuyalisten server thread on %d stopped", port)

class ThreadingHTTPServer(ThreadingMixIn, HTTPServer):
    daemon_threads = True

def delayoff(d, sw):
    d.turn_off(switch=sw, nowait=True)
    d.close()

class handler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        if DEBUGMODE:
            sys.stderr.write("%s - - [%s] %s\n" %
                         (self.address_string(),
                          self.log_date_time_string(),
                          format%args))
        else:
            pass

    def address_string(self):
        # replace function to avoid lookup delays
        host, hostport = self.client_address[:2]
        return host

    def do_POST(self):
        self.send_response(200)
        message = "Error"
        contenttype = 'application/json'
        # Send headers and payload  
        self.send_header('Content-type',contenttype)
        self.send_header('Content-Length', str(len(message)))
        self.end_headers()
        self.wfile.write(bytes(message, "utf8"))

    def do_GET(self):
        # pylint: disable=global-variable-not-assigned
        global retrytimer, retrydevices
        global cloudconfig, deviceslist
        global forcescan, forcescandone
        global serverstats, running
        global cloudcreds, cloudsync, cloudsyncdone
        global tuyadevices, newdevices

        self.send_response(200)
        message = "Error"
        contenttype = 'application/json'
        if self.path == '/devices':
            message = json.dumps(deviceslist)
        elif self.path == '/help':
            # show available commands
            cmds = [("/devices","List all devices discovered with metadata"),
                    ("/device/{DeviceID}|{DeviceName}", "List specific device metadata"),
                    ("/numdevices", "List current number of devices discovered"),
                    ("/status/{DeviceID}|{DeviceName}", "List current device status"),
                    ("/set/{DeviceID}|{DeviceName}/{Key}|{Code}/{Value}", "Set DPS {Key} or {Code} with {Value}"),
                    ("/turnon/{DeviceID}|{DeviceName}/{SwitchNo}", "Turn on device, optional {SwtichNo}"),
                    ("/turnoff/{DeviceID}|{DeviceName}/{SwitchNo}", "Turn off device, optional {SwtichNo}"),
                    ("/delayoff/{DeviceID}|{DeviceName}/{SwitchNo}/{Time}", "Turn off device with delay of 10 secs, optional {SwitchNo}/{Time}"),
                    ("/sync", "Fetches the device list and local keys from the Tuya Cloud API"),
                    ("/cloudconfig/{apiKey}/{apiSecret}/{apiRegion}/{apiDeviceID}", "Sets the Tuya Cloud API login info"),
                    ("/offline", "List of registered devices that are offline")]
            message = json.dumps(cmds)
        elif self.path == '/stats':
            # Give Internal Stats
            serverstats['ts'] = int(time.time())
            serverstats['mem'] = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
            serverstats['cloudcreds'] = cloudcreds
            serverstats['cloudsync'] = cloudsync
            serverstats['cloudsyncdone'] = cloudsyncdone
            serverstats['forcescan'] = forcescan
            serverstats['forcescandone'] = forcescandone
            message = json.dumps(serverstats)
        elif self.path.startswith('/set/'):
            try:
                # ['', 'set', 'deviceid', 'key', 'value']
                (ignore1, ignore2, id, dpsKey, dpsValue) = self.path.split('/')
                # convert to correct types
                dpsValue = urllib.parse.unquote(dpsValue)
                if dpsValue.lower() == "true":
                    dpsValue = True
                elif dpsValue.lower() == "false":
                    dpsValue = False
                elif dpsValue.startswith('"'):
                    dpsValue = dpsValue.split('"')[1]
                elif dpsValue.isnumeric():
                    dpsValue = int(dpsValue)
                if(id not in deviceslist):
                    id = getDeviceIdByName(id)
                if not dpsKey.isnumeric():
                    for x in tuyadevices:
                        if x['id'] == id:
                            if 'mapping' in x:
                                for i in x['mapping']:
                                    if x['mapping'][i]['code'] == str(dpsKey):
                                        dpsKey = i
                                        break
                log.debug("Set dpsKey: %s dpsValue: %s" % (dpsKey,dpsValue))
                if(id in deviceslist):
                    d = tinytuya.OutletDevice(id, deviceslist[id]["ip"], deviceslist[id]["key"])
                    d.set_version(float(deviceslist[id]["version"]))
                    message = formatreturn(d.set_value(dpsKey,dpsValue,nowait=True))
                    d.close()
                else:
                    message = json.dumps({"Error": "Device ID not found.", "id": id})
                    log.debug("Device ID not found: %s" % id)
            except:
                message = json.dumps({"Error": "Syntax error in set command URL.", "url": self.path})
                log.debug("Syntax error in set command URL: %s" % self.path)
        elif self.path.startswith('/device/'):
            id = self.path.split('/device/')[1]
            if(id not in deviceslist):
                id = getDeviceIdByName(id)
            if(id in deviceslist):
                message = json.dumps(deviceslist[id])
            else:
                jout={}
                [name, key, mac] = tuyaLookup(id) 
                if name != "":
                    jout["name"] = name
                    jout["mac"] = mac
                    jout["key"] = key
                    jout["id"] = id
                    message = json.dumps(jout)
                else:
                    message = json.dumps({"Error": "Device ID not found.", "id": id})
                    log.debug("Device ID not found: %s" % id)
        elif self.path.startswith('/turnoff/'):
            id = self.path.split('/turnoff/')[1]
            sw = 1
            if "/" in id:
                try:
                    (id, sw) = id.split("/")
                except:
                    id = ""
                    message = json.dumps({"Error": "Invalid syntax in turnoff command.", "url": self.path})
                    log.debug("Syntax error in in turnoff command: %s" % self.path)
            if(id not in deviceslist):
                id = getDeviceIdByName(id)
            if id in deviceslist:
                try:
                    d = tinytuya.OutletDevice(id, deviceslist[id]["ip"], deviceslist[id]["key"])
                    d.set_version(float(deviceslist[id]["version"]))
                    message = formatreturn(d.turn_off(switch=sw, nowait=True))
                    d.close()
                except:
                    message = json.dumps({"Error": "Error sending command to device.", "id": id})
                    log.debug("Error sending command to device: %s" % id)
            elif id != "":
                message = json.dumps({"Error": "Device ID not found.", "id": id})      
                log.debug("Device ID not found: %s" % id)      
        elif self.path.startswith('/delayoff/'):
            id = self.path.split('/delayoff/')[1]
            sw = 1
            delay = 10
            if "/" in id:
                try:
                    (id, sw, delay) = id.split("/")
                except:
                    id = ""
                    message = json.dumps({"Error": "Invalid syntax in delayoff command.", "url": self.path})
                    log.debug("Syntax error in in delayoff command: %s" % self.path)
            if(id not in deviceslist):
                id = getDeviceIdByName(id)
            if id in deviceslist:
                try:
                    d = tinytuya.OutletDevice(id, deviceslist[id]["ip"], deviceslist[id]["key"])
                    d.set_version(float(deviceslist[id]["version"]))

                    timer = threading.Timer(int(delay), delayoff, args = (d, sw))
                    timer.start()

                    message = json.dumps({"OK": "Turning of in %s seconds." % (delay), "url": self.path})
                except:
                    message = json.dumps({"Error": "Error sending command to device.", "id": id})
                    log.debug("Error sending command to device %s" % id)
            elif id != "":
                message = json.dumps({"Error": "Device ID not found.", "id": id})
                log.debug("Device ID not found: %s" % id)
        elif self.path.startswith('/turnon/'):
            id = self.path.split('/turnon/')[1]
            sw = 1
            if "/" in id:
                try:
                    (id, sw) = id.split("/")
                except:
                    id = ""
                    message = json.dumps({"Error": "Invalid syntax in turnon command.", "url": self.path})
                    log.debug("Syntax error in turnon command URL: %s" % self.path)
            if(id not in deviceslist):
                id = getDeviceIdByName(id)
            if id in deviceslist:
                try:
                    d = tinytuya.OutletDevice(id, deviceslist[id]["ip"], deviceslist[id]["key"])
                    d.set_version(float(deviceslist[id]["version"]))
                    message = formatreturn(d.turn_on(switch=sw, nowait=True))
                    d.close()
                except:
                    message = json.dumps({"Error": "Error sending command to device.", "id": id})
                    log.debug("Error sending command to device %s" % id)
            elif id != "":
                message = json.dumps({"Error": "Device ID not found.", "id": id})     
                log.debug("Device ID not found: %s" % id)        
        elif self.path == '/numdevices':
            jout = {}
            jout["found"] = len(deviceslist)
            jout["registered"] = len(tuyadevices)
            jout["forcescan"] = forcescan
            jout["forcescandone"] = forcescandone
            jout["cloudsync"] = cloudsync
            jout["cloudsyncdone"] = cloudsyncdone
            jout["cloudcreds"] = cloudcreds
            message = json.dumps(jout)
        elif self.path.startswith('/status/'):
            id = self.path.split('/status/')[1]
            if(id not in deviceslist):
                id = getDeviceIdByName(id)
            if(id in deviceslist):
                try:
                    d = tinytuya.OutletDevice(id, deviceslist[id]["ip"], deviceslist[id]["key"])
                    d.set_version(float(deviceslist[id]["version"]))
                    response = d.status()
                    for x in tuyadevices:
                        if x['id'] == id:
                            if 'mapping' in x:
                                response["dps_mapping"] = x['mapping']
                            else:
                                response["dps_mapping"] = []
                            break
                    message = formatreturn(response)
                    d.close()
                except:
                    message = json.dumps({"Error": "Error polling device.", "id": id})
                    log.debug("Error polling device %s" % id)
            else:
                message = json.dumps({"Error": "Device ID not found.", "id": id})
                log.debug("Device ID not found: %s" % id)  
        elif self.path == '/sync':
            if cloudconfig['apiKey'] == '' or cloudconfig['apiSecret'] == '' or cloudconfig['apiRegion'] == '' or cloudconfig['apiDeviceID'] == '':
                message = json.dumps({"Error": "Cloud API config missing."})
                log.debug("Cloud API config missing")
            else:
                message = json.dumps({"OK": "Cloud Sync Started."})
            cloudsync = True
            cloudsyncdone = False
            retrytimer = 0
            retrydevices['*'] = 1
        elif self.path.startswith('/cloudconfig/'):
            cfgstr = self.path.split('/cloudconfig/')[1]
            cfg = cfgstr.split('/')
            if len(cfg) != 4:
                message = json.dumps({"Error": "Syntax error in cloud config command URL."})
                log.debug("Syntax error in cloud config command URL %s" % self.path)
            else:
                cloudconfig['apiKey'] = cfg[0]
                cloudconfig['apiSecret'] = cfg[1]
                cloudconfig['apiRegion'] = cfg[2]
                cloudconfig['apiDeviceID'] = cfg[3]
                message = json.dumps(tuyaCloudRefresh())
                retrytimer = time.time() + RETRYTIME
                retrydevices['*'] = 1
                cloudcreds = all(cfg)
        elif self.path == '/offline':
            message = json.dumps(offlineDevices())
        elif self.path == '/scan':
            # Force Scan for new devices
            forcescan = True
            forcescandone = False
            message = json.dumps({"OK": "Forcing a scan for new devices."})
        else:
            # Serve static assets from web root first, if found.
            fcontent, ftype = get_static(web_root, self.path)
            if fcontent:
                self.send_header('Content-type','{}'.format(ftype))
                self.send_header('Content-Length', str(len(fcontent)))
                self.end_headers()
                self.wfile.write(fcontent)
                return

        # Counts
        if "Error" in message:
            serverstats['errors'] = serverstats['errors'] + 1
        serverstats['gets'] = serverstats['gets'] + 1

        # Send headers and payload
        self.send_header('Content-type',contenttype)
        self.send_header('Content-Length', str(len(message)))
        self.end_headers()
        self.wfile.write(bytes(message, "utf8"))

def api(port):
    """
    API Server - Thread to listen for commands on port 
    """
    log.debug("Started api server thread on %d", port)
    print(" - api %d Running" % port)

    with ThreadingHTTPServer(('', port), handler) as server:
        try:
            # server.serve_forever()
            while running:
                server.handle_request()
        except:
            print(' CANCEL \n')
    print(' - api', port, 'Exit')
    log.debug("API server thread on %d stopped", port)

# MAIN Thread
if __name__ == "__main__":
    # creating thread
    tuyaUDP = threading.Thread(target=tuyalisten, args=(UDPPORT,))
    tuyaUDPs = threading.Thread(target=tuyalisten, args=(UDPPORTS,))
    tuyaUDP7 = threading.Thread(target=tuyalisten, args=(UDPPORTAPP,))
    apiServer = threading.Thread(target=api, args=(APIPORT,))

    print(
        "\n%sTinyTuya %s(Server)%s [%s%s]\n"
        % (bold, normal, dim, tinytuya.__version__, BUILD)
    )

    # IP Address
    print("%sConfiguration Settings:" % dim)
    if HOST:
        print("   Using Host IP: %s%s%s" % (cyan, HOST, dim))
    if BROADCAST:
        print("   Using Broadcast IP: %s%s%s" % (cyan, BROADCAST, dim))
    if NETWORK:
        print("   Using Network: %s%s%s" % (cyan, NETWORK, dim))
    print("   UDP Ports: %s%d%s, %s%d%s, %s%d%s" % (cyan, UDPPORT, dim, cyan, UDPPORTS, dim, cyan, UDPPORTAPP, dim))
    print("   TCP Port: %s%d%s" % (cyan, TCPPORT, dim))
    print("   API Port: %s%d%s" % (cyan, APIPORT, dim))
    print("   Device File: %s%s%s" % (cyan, DEVICEFILE, dim))
    print("   Snapshot File: %s%s%s" % (cyan, SNAPSHOTFILE, dim))
    print("   Config File: %s%s%s" % (cyan, CONFIGFILE, dim))
    print("   TCP Timeout: %s%s%s" % (cyan, TCPTIMEOUT, dim))
    print("   UDP Timeout: %s%s%s" % (cyan, TIMEOUT, dim))
    print("   Max Devices: %s%s%s" % (cyan, MAXCOUNT, dim))
    print("   Retry Time: %s%s%s" % (cyan, RETRYTIME, dim))
    print("   Retry Count: %s%s%s" % (cyan, RETRYCOUNT, dim))
    print("   Save Device File: %s%s%s" % (cyan, SAVEDEVICEFILE, dim))
    print("   Debug Mode: %s%s%s" % (cyan, DEBUGMODE, dim))
    print("")

    if len(tuyadevices) > 0:
        print("%s[Loaded devices.json - %d devices]%s\n" % (dim, len(tuyadevices), normal))
    else:
        print("%sWARNING: No devices.json found - limited functionality.%s\n" % (alertdim,normal))

    # start threads
    print("Starting threads...")
    log.debug("Starting threads")
    tuyaUDP.start()
    tuyaUDPs.start()
    tuyaUDP7.start()
    apiServer.start()

    print(" * API and UI Endpoint on http://localhost:%d" % APIPORT)
    log.debug("Server URL http://localhost:%d" % APIPORT)

    try:
        while(True):
            log.debug("Discovered Devices: %d   " % len(deviceslist))
            if forcescan:
                print(" + ForceScan: Scan for new devices started...")
                forcescan = False
                retrytimer = time.time() + RETRYTIME
                # def devices(verbose=False, scantime=None, color=True, poll=True, forcescan=False, byID=False, show_timer=None, 
                #   discover=True, wantips=None, wantids=None, snapshot=None, assume_yes=False, tuyadevices=[], 
                #   maxdevices=0)
                try:
                    if NETWORK:
                        found = scanner.devices(forcescan=[NETWORK], verbose=False, discover=False, assume_yes=True, tuyadevices=tuyadevices)
                    else:
                        found = scanner.devices(forcescan=True, verbose=False, discover=False, assume_yes=True, tuyadevices=tuyadevices)
                except Exception as err:
                    log.error(f"Error during scanner.devices() {err}")
                    found = []
                forcescandone = True
                print(f" - ForceScan: Found {len(found)} devices")
                for f in found:
                    log.debug(f"   - {found[f]}")
                    gwId = found[f]["id"]
                    result = {}
                    dname = dkey = mac = ""
                    try:
                        # Try to pull name and key data
                        (dname, dkey, mac) = tuyaLookup(gwId)
                    except:
                        pass
                    # set values
                    result["name"] = dname
                    result["mac"] = mac
                    result["key"] = dkey
                    result["id"] = gwId
                    result["ip"] = found[f]["ip"]
                    result["version"] = found[f]["version"]
                    result["forced"] = True

                    # add device if new
                    if not appenddevice(result, deviceslist):
                        # Added device to list
                        if dname == "" and dkey == "" and result["id"] not in newdevices:
                            # If fetching the key failed, save it to retry later
                            retrydevices[result["id"]] = RETRYCOUNT
                            newdevices.append(result["id"])

            if cloudsync:
                cloudsync = False
                cloudsyncdone = False
                tuyaCloudRefresh()
                cloudsyncdone = True
                print(" - Cloud Sync Complete")
                retrytimer = time.time() + RETRYTIME
                retrydevices['*'] = 1

            if retrytimer <= time.time() or '*' in retrydevices:
                if len(retrydevices) > 0:
                    # only refresh the cloud if we are not here because /sync was called
                    if '*' not in retrydevices:
                        cloudsyncdone = False
                        tuyaCloudRefresh()
                        retrytimer = time.time() + RETRYTIME
                        cloudsyncdone = True
                    found = []
                    # Try all unknown devices, even if the retry count expired
                    for devid in newdevices:
                        dname = dkey = mac = ""
                        try:
                            (dname, dkey, mac) = tuyaLookup(devid)
                        except:
                            pass

                        if dname != "" or dkey != "":
                            #print('found!', devid, dname, dkey)
                            deviceslist[devid]['name'] = dname
                            deviceslist[devid]['key'] = dkey
                            deviceslist[devid]['mac'] = mac
                            found.append(devid)
                            if devid in retrydevices:
                                del retrydevices[devid]
                    for devid in found:
                        newdevices.remove(devid)

                    # Decrement retry count
                    expired = []
                    for devid in retrydevices:
                        retrydevices[devid] -= 1
                        if retrydevices[devid] < 1:
                            expired.append(devid)
                    for devid in expired:
                        del retrydevices[devid]
            time.sleep(2)
    except (KeyboardInterrupt, SystemExit):
        running = False
        # Close down API thread
        print("Stopping threads...")
        log.debug("Stoppping threads")
        requests.get('http://localhost:%d/stop' % APIPORT, timeout=5)
    except Exception as err:
        log.error(f"Error in main loop: {err}")
        running = False
        # Close down API thread
        print("Stopping threads...")
        log.debug("Stoppping threads")
        requests.get('http://localhost:%d/stop' % APIPORT, timeout=5)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: server/web/device.html

<!DOCTYPE html>
<html lang="en">
<head>
<title>TinyTuya API Server - Device Details</title>
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
</head>

<body>
    <div class="title"></div>
    <p>Device Details</p>
    <div class="device"></div>
    <p>Device Status</p>
    <div class="status"></div>

    <script>

    // Get Version
    function showversion() {
        var pwurl = window.location.protocol + "//" + window.location.host + "/stats";
        $.getJSON(pwurl, function(data) {
            var text = `TinyTuya API Server ${data.tinytuya}`
            $(".title").html(text);
        });
        setTimeout(showversion, 10000);
    }

    // Device Details
    function devicedetails() {
        // Grab the GET variables
        var $_GET = {};
        if(document.location.toString().indexOf('?') !== -1) {
            var query = document.location
                        .toString()
                        // get the query string
                        .replace(/^.*?\?/, '')
                        // and remove any existing hash string (thanks, @vrijdenker)
                        .replace(/#.*$/, '')
                        .split('&');

            for(var i=0, l=query.length; i<l; i++) {
            var aux = decodeURIComponent(query[i]).split('=');
            $_GET[aux[0]] = aux[1];
            }
        }
        id = $_GET['id'];

        // Device Metadata
        var pwurl = window.location.protocol + "//" + window.location.host + "/device/" + id;
        $.getJSON(pwurl, function(data) {
            var ip = data.ip;
            var name = data.name;
            var version = data.version;
            var key = data.key;
            var product = data.productKey;
            var mac = data.mac;
            var output = 
                "Name: " + name + "<br>" +
                "Device ID: " + id + "<br>" +
                "IP: " + ip + "<br>" +
                "MAC: " + mac + "<br>" +
                "Version: " + version + "<br>" +
                "Key: " + key + "<br>" +
                "Product: " + product + "<br>";
            $(".device").html(output);
        });

        // Device Status
        var pwurl = window.location.protocol + "//" + window.location.host + "/status/" + id;
        $.getJSON(pwurl, function(data,textStatus,jqXHR) {

            var output = 
                "Direct URL: " + pwurl + "<br>" +
                "Device Response: " + jqXHR.responseText;
            $(".status").html(output);
        });

        //setTimeout(devicelist, 1000);
    }

    // Display
    showversion();
    devicedetails();
    
    </script>

<div class="controls">
    <p><a href="/">Back</a></p>
</div>

</body>
</html>


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: server/web/device_dps.html

<!DOCTYPE html>
<html lang="en">
<head>
<title>TinyTuya API Server - Device Details</title>
  <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
  <link rel="stylesheet" href="tinytuya.css">
</head>

<body>
    <div class="title"></div>
    <p>Device Details</p>
    <div class="device"></div>
    <p>Device DPS</p>
    <div class="dps"></div>

    <script>

    $(document).on('click', '.edit', function() {
      $(this).parent().siblings('td.data').each(function() {
        var content = $(this).html();
        $(this).html('<input value="' + content + '" />');
      });

      $(this).siblings('.save').show();
      $(this).hide();
    });

    $(document).on('click', '.save', function() {
      var key = $(this).parent().siblings('td.key').html();
      var val = "";

      $('input').each(function() {
        var content = $(this).val();
        $(this).html(content);
        $(this).contents().unwrap();

        val = $(this).val()
      });

      $(this).siblings('.edit').show();
      $(this).hide();

      updateDPS(key,val);
    });

    function buildHtmlTable(json,jsonscheme) {
      var table = "<table class=\"table data\">";

      table = table + "<th>Index</th><th>Code</th><th>Value</th>";

      for (var key in json) {
        table = table + "<tr>";

        var cellValue = key;
        table = table + "<td class=\"key\">" + cellValue + "</td>";

        var CellValue;
        for (var i in jsonscheme) {
          if (i === key) {
            CellValue = jsonscheme[i]['code'];
            break;
          }
        }
        table = table + "<td class=\"code\">" + CellValue + "</td>";

        var cellValue = json[key];
        table = table + "<td class=\"data\">" + cellValue + "</td>";
        table = table + "<td><button class=\"edit\">Edit</button><button class=\"save\" hidden>Save</button></td>";
        table = table + "<tr>";
      }

      table = table + "</table>";
      return table;
    }

    // Get Version
    function showversion() {
        var pwurl = window.location.protocol + "//" + window.location.host + "/stats";
        $.getJSON(pwurl, function(data) {
            var text = `TinyTuya API Server ${data.tinytuya}`
            $(".title").html(text);
        });
        setTimeout(showversion, 10000);
    }

    // Device DPS Details
    function device_dps() {
        // Grab the GET variables
        var $_GET = {};
        if(document.location.toString().indexOf('?') !== -1) {
            var query = document.location
                        .toString()
                        // get the query string
                        .replace(/^.*?\?/, '')
                        // and remove any existing hash string (thanks, @vrijdenker)
                        .replace(/#.*$/, '')
                        .split('&');

            for(var i=0, l=query.length; i<l; i++) {
            var aux = decodeURIComponent(query[i]).split('=');
            $_GET[aux[0]] = aux[1];
            }
        }
        id = $_GET['id'];

        // Device Metadata
        var pwurl = window.location.protocol + "//" + window.location.host + "/device/" + id;
        $.getJSON(pwurl, function(data) {
            var ip = data.ip;
            var name = data.name;
            var version = data.version;
            var key = data.key;
            var product = data.productKey;
            var mac = data.mac;
            var output = "<table>" +
                "<tr><td>Name</td><td><div class='value'>" + name + "</div></td><tr>" +
                "<tr><td>Device ID</td><td><div class='value'>" + id + "</div></td><tr>" +
                "<tr><td>IP</td><td><div class='value'>" + ip + "</div></td><tr>" +
                "<tr><td>MAC</td><td><div class='value'>" + mac + "</div></td><tr>" +
                "<tr><td>Version</td><td><div class='value'>" + version + "</div></td><tr>" +
                "<tr><td>Key</td><td><div class='value'>" + key + "</div></td><tr>" +
                "<tr><td>Product</td><td><div class='value'>" + product + "</div></td><tr>";
            $(".device").html(output);
        });

        // Device DPS
        var pwurl = window.location.protocol + "//" + window.location.host + "/status/" + id;
        $.getJSON(pwurl, function(data,textStatus,jqXHR) {
            var dps_json = jqXHR.responseJSON["dps"];
            var dps_scheme_json = jqXHR.responseJSON["dps_mapping"];
            $(".dps").html(buildHtmlTable(dps_json,dps_scheme_json));
        });
    }

    // Get Version
    function updateDPS(key, val) {
        var pwurl = window.location.protocol + "//" + window.location.host + "/set/" + id + "/" + key + "/" + val;
        $.getJSON(pwurl, function(data) {
            window.location.reload();
        });
    }

    // Display
    showversion();
    device_dps();

    </script>

<div class="controls">
    <p><a href="/">Back</a></p>
</div>

</body>
</html>


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: server/web/index.html

<!DOCTYPE html>
<html lang="en">
<head>
<title>TinyTuya API Server</title>
    <script src="jquery-3.7.1.min.js"></script>
    <link rel="stylesheet" href="tinytuya.css">
</head>

<body>  
    <div class="title"></div>
    <div class="row">
        <div class="lcolumn">
            <p class="onlinetext">Devices Online</p>
            <div class="devices"></div>
        </div>
        <div class = "rcolumn">
            <p class="offlinetext">Devices Offline</p>
            <div class="offline"></div>
        </div>
    </div>
    <div class="button">
        <div class="number"></div>
        <input id='forcescan' type='button' value='Force Scan' onclick='forcescan()'>
        <input id='cloudsync' type='button' value='Cloud Sync' onclick='cloudsync()'>
    </div>
    <script>

    // Get Version
    function showversion() {
        var pwurl = window.location.protocol + "//" + window.location.host + "/stats";
        $.getJSON(pwurl, function(data) {
            var text = `TinyTuya API Server ${data.tinytuya}`;
            $(".title").html(text);
        });
        setTimeout(showversion, 10000);
    }

    // Force Scan
    function forcescan() {
        // Change button text and disable - restore on scan completion
        // via numdevices() function
        $("#forcescan").prop('value', 'Scanning...');
        $("#forcescan").prop('disabled', true);
        // Call the scan API
        var pwurl = window.location.protocol + "//" + window.location.host + "/scan";
        $.getJSON(pwurl, function(data) {
            console.log(data);
        });        
    }

    // Cloud Sync
    function cloudsync() {
        // Change button text and disable - restore on sync completion
        // via numdevices() function
        $("#cloudsync").prop('value', 'Syncing...');
        $("#cloudsync").prop('disabled', true);
        // Call the sync API
        var pwurl = window.location.protocol + "//" + window.location.host + "/sync";
        $.getJSON(pwurl, function(data) {
            console.log(data);
        });        
    }

    // Number of Devices
    function numdevices() {
        var pwurl = window.location.protocol + "//" + window.location.host + "/numdevices";
        $.getJSON(pwurl, function(data) {
            var text = `Number of Devices Found: ${data.found}` + 
            ` - Registered: ${data.registered}`;
            var online = `Devices Online: ${data.found}`;
            var numoff = data.registered - data.found;
            var forcescandone = data.forcescandone;
            var cloudsyncdone = data.cloudsyncdone;
            var cloudcreds = data.cloudcreds;
            if(numoff<0) numoff = 0;
            var offline = `Devices Offline: ${numoff}`;
            $(".onlinetext").html(online)
            $(".offlinetext").html(offline)
            $(".number").html(text);
            // Update Force Scan button based on scan status
            if(forcescandone) {
                $("#forcescan").prop('value', 'Force Scan');
                $("#forcescan").prop('disabled', false);
            } else {
                $("#forcescan").prop('value', 'Scanning...');
                $("#forcescan").prop('disabled', true);
            }
            if(cloudsyncdone) {
                if(cloudcreds) {
                    $("#cloudsync").prop('value', 'Cloud Sync');
                    $("#cloudsync").prop('disabled', false);
                } else {
                    $("#cloudsync").prop('value', 'Cloud Sync (No Credentials)');
                    $("#cloudsync").prop('disabled', true);
                }
                $("#cloudsync").prop('value', 'Cloud Sync');
                $("#cloudsync").prop('disabled', false);
            } else {
                $("#cloudsync").prop('value', 'Syncing...');
                $("#cloudsync").prop('disabled', true);
            }
        });
        setTimeout(numdevices, 1000);
    }

    // Device List
    function devicelist() {
        var pwurl = window.location.protocol + "//" + window.location.host + "/devices";
        $.getJSON(pwurl, function(data) {
            // store entire array in deviceDB
            let deviceDB = [];
            // 
            var output = "";
            var id = "";
            var ip = "";
            var name = "";
            var ver = "";
            var forced = "";
            for (let x in data) {
                //console.log(x + ": "+ data[x])
                let device = {
                    "name": data[x].name,
                    "id": x,
                    "ip": data[x].ip,
                    "version": data[x].version,
                    "forced": data[x].forced
                }
                deviceDB.push(device)
            }
            
            // print sorted list
            let sortedDevices = deviceDB.sort((c1, c2) => (c1.name > c2.name) ? 1 : (c1.name < c2.name) ? -1 : 0);
            let rownum = 1;
            output = "<table><thead>\n<tr>\n<th>#</th><th>Device Name</th><th>Device ID</th>" +
                "<th>IP Address</th><th>Version</th><th>Control</th>\n</tr></thead>\n<tbody>";
            for (let x in sortedDevices) {
                if (sortedDevices[x].forced) {
                    forced = " (F)";
                } else {
                    forced = "";
                }
                output = output + "<tr>\n<td>" + rownum + "</td>" + 
                    " <td> <a href='device_dps.html?id=" + sortedDevices[x].id + "'>" +
                    (sortedDevices[x].name.length > 0 ? sortedDevices[x].name : '[' + sortedDevices[x].id + ']') +
                    "</a> </td><td>" + 
                    "<div class='id'>" + sortedDevices[x].id + "</div></td><td>" +
                    "<div class='address'>" + sortedDevices[x].ip + forced + "</div></td><td>" +
                    "<div class='version'>" + sortedDevices[x].version + "</div></td>" +  
                    " <td> <a href='device_dps.html?id=" + sortedDevices[x].id + "'>View</a></td>"
                    "\n</tr>\n";
                rownum++;
            }
            output = output + "</tbody>\n</table>\n";

            $(".devices").html(output);
            
            // TODO - convert to table
            // var tbl = `Number of Devices Found: ${data.numdevices}`
            // $("#devicetable").html("<tr><td>name</td></tr>");
        });
        setTimeout(devicelist, 1000);
    }

    // Device Offline List
    function offlinelist() {
        var pwurl = window.location.protocol + "//" + window.location.host + "/offline";
        $.getJSON(pwurl, function(data) {
            // store entire array in deviceDB
            let deviceDB = [];
            // 
            var output = "";
            var id = "";
            var name = "";
            for (let x in data) {
                let device = {
                    "name": data[x].name,
                    "id": x,
                }
                deviceDB.push(device)
            }
            
            // print sorted list
            let sortedDevices = deviceDB.sort((c1, c2) => (c1.name > c2.name) ? 1 : (c1.name < c2.name) ? -1 : 0);
            let rownum = 1;
            output = "<table><thead>\n<tr>\n<th>#</th><th>Device Name</th><th>Device ID</th>" +
                "</tr></thead>\n<tbody>";
            for (let x in sortedDevices) {
                output = output + "<tr>\n<td>" + rownum + "</td>" + 
                    " <td> <a href='device_dps.html?id=" + sortedDevices[x].id + "'>" +
                    (sortedDevices[x].name.length > 0 ? sortedDevices[x].name : '[' + sortedDevices[x].id + ']') +
                    "</a> </td><td>" + 
                    "<div class='id'>" + sortedDevices[x].id + "</div></td>" +
                    "\n</tr>\n";
                rownum++;
            }
            output = output + "</tbody>\n</table>\n";
            
            $(".offline").html(output);
        });
        setTimeout(offlinelist, 1000);
    }

    // Display
    showversion();
    numdevices();
    devicelist();
    offlinelist();
    
    </script>

</body>
</html>


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: server/web/jquery-3.7.1.min.js

/*! jQuery v3.7.1 | (c) OpenJS Foundation and other contributors | jquery.org/license */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(ie,e){"use strict";var oe=[],r=Object.getPrototypeOf,ae=oe.slice,g=oe.flat?function(e){return oe.flat.call(e)}:function(e){return oe.concat.apply([],e)},s=oe.push,se=oe.indexOf,n={},i=n.toString,ue=n.hasOwnProperty,o=ue.toString,a=o.call(Object),le={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},C=ie.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function m(e,t,n){var r,i,o=(n=n||C).createElement("script");if(o.text=e,t)for(r in u)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[i.call(e)]||"object":typeof e}var t="3.7.1",l=/HTML$/i,ce=function(e,t){return new ce.fn.init(e,t)};function c(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}function fe(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}ce.fn=ce.prototype={jquery:t,constructor:ce,length:0,toArray:function(){return ae.call(this)},get:function(e){return null==e?ae.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=ce.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return ce.each(this,e)},map:function(n){return this.pushStack(ce.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(ae.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(ce.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(ce.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:oe.sort,splice:oe.splice},ce.extend=ce.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(ce.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||ce.isPlainObject(n)?n:{},i=!1,a[t]=ce.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},ce.extend({expando:"jQuery"+(t+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==i.call(e))&&(!(t=r(e))||"function"==typeof(n=ue.call(t,"constructor")&&t.constructor)&&o.call(n)===a)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){m(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(c(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},text:function(e){var t,n="",r=0,i=e.nodeType;if(!i)while(t=e[r++])n+=ce.text(t);return 1===i||11===i?e.textContent:9===i?e.documentElement.textContent:3===i||4===i?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(c(Object(e))?ce.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!l.test(t||n&&n.nodeName||"HTML")},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(c(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g(a)},guid:1,support:le}),"function"==typeof Symbol&&(ce.fn[Symbol.iterator]=oe[Symbol.iterator]),ce.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var pe=oe.pop,de=oe.sort,he=oe.splice,ge="[\\x20\\t\\r\\n\\f]",ve=new RegExp("^"+ge+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ge+"+$","g");ce.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var f=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function p(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}ce.escapeSelector=function(e){return(e+"").replace(f,p)};var ye=C,me=s;!function(){var e,b,w,o,a,T,r,C,d,i,k=me,S=ce.expando,E=0,n=0,s=W(),c=W(),u=W(),h=W(),l=function(e,t){return e===t&&(a=!0),0},f="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",t="(?:\\\\[\\da-fA-F]{1,6}"+ge+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",p="\\["+ge+"*("+t+")(?:"+ge+"*([*^$|!~]?=)"+ge+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+t+"))|)"+ge+"*\\]",g=":("+t+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+p+")*)|.*)\\)|)",v=new RegExp(ge+"+","g"),y=new RegExp("^"+ge+"*,"+ge+"*"),m=new RegExp("^"+ge+"*([>+~]|"+ge+")"+ge+"*"),x=new RegExp(ge+"|>"),j=new RegExp(g),A=new RegExp("^"+t+"$"),D={ID:new RegExp("^#("+t+")"),CLASS:new RegExp("^\\.("+t+")"),TAG:new RegExp("^("+t+"|[*])"),ATTR:new RegExp("^"+p),PSEUDO:new RegExp("^"+g),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ge+"*(even|odd|(([+-]|)(\\d*)n|)"+ge+"*(?:([+-]|)"+ge+"*(\\d+)|))"+ge+"*\\)|)","i"),bool:new RegExp("^(?:"+f+")$","i"),needsContext:new RegExp("^"+ge+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ge+"*((?:-\\d)?\\d*)"+ge+"*\\)|)(?=[^-]|$)","i")},N=/^(?:input|select|textarea|button)$/i,q=/^h\d$/i,L=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,H=/[+~]/,O=new RegExp("\\\\[\\da-fA-F]{1,6}"+ge+"?|\\\\([^\\r\\n\\f])","g"),P=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},M=function(){V()},R=J(function(e){return!0===e.disabled&&fe(e,"fieldset")},{dir:"parentNode",next:"legend"});try{k.apply(oe=ae.call(ye.childNodes),ye.childNodes),oe[ye.childNodes.length].nodeType}catch(e){k={apply:function(e,t){me.apply(e,ae.call(t))},call:function(e){me.apply(e,ae.call(arguments,1))}}}function I(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&(V(e),e=e||T,C)){if(11!==p&&(u=L.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return k.call(n,a),n}else if(f&&(a=f.getElementById(i))&&I.contains(e,a)&&a.id===i)return k.call(n,a),n}else{if(u[2])return k.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&e.getElementsByClassName)return k.apply(n,e.getElementsByClassName(i)),n}if(!(h[t+" "]||d&&d.test(t))){if(c=t,f=e,1===p&&(x.test(t)||m.test(t))){(f=H.test(t)&&U(e.parentNode)||e)==e&&le.scope||((s=e.getAttribute("id"))?s=ce.escapeSelector(s):e.setAttribute("id",s=S)),o=(l=Y(t)).length;while(o--)l[o]=(s?"#"+s:":scope")+" "+Q(l[o]);c=l.join(",")}try{return k.apply(n,f.querySelectorAll(c)),n}catch(e){h(t,!0)}finally{s===S&&e.removeAttribute("id")}}}return re(t.replace(ve,"$1"),e,n,r)}function W(){var r=[];return function e(t,n){return r.push(t+" ")>b.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function F(e){return e[S]=!0,e}function $(e){var t=T.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function B(t){return function(e){return fe(e,"input")&&e.type===t}}function _(t){return function(e){return(fe(e,"input")||fe(e,"button"))&&e.type===t}}function z(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&R(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function X(a){return F(function(o){return o=+o,F(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function U(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function V(e){var t,n=e?e.ownerDocument||e:ye;return n!=T&&9===n.nodeType&&n.documentElement&&(r=(T=n).documentElement,C=!ce.isXMLDoc(T),i=r.matches||r.webkitMatchesSelector||r.msMatchesSelector,r.msMatchesSelector&&ye!=T&&(t=T.defaultView)&&t.top!==t&&t.addEventListener("unload",M),le.getById=$(function(e){return r.appendChild(e).id=ce.expando,!T.getElementsByName||!T.getElementsByName(ce.expando).length}),le.disconnectedMatch=$(function(e){return i.call(e,"*")}),le.scope=$(function(){return T.querySelectorAll(":scope")}),le.cssHas=$(function(){try{return T.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}}),le.getById?(b.filter.ID=function(e){var t=e.replace(O,P);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&C){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(O,P);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&C){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},b.find.CLASS=function(e,t){if("undefined"!=typeof t.getElementsByClassName&&C)return t.getElementsByClassName(e)},d=[],$(function(e){var t;r.appendChild(e).innerHTML="<a id='"+S+"' href='' disabled='disabled'></a><select id='"+S+"-\r\\' disabled='disabled'><option selected=''></option></select>",e.querySelectorAll("[selected]").length||d.push("\\["+ge+"*(?:value|"+f+")"),e.querySelectorAll("[id~="+S+"-]").length||d.push("~="),e.querySelectorAll("a#"+S+"+*").length||d.push(".#.+[+~]"),e.querySelectorAll(":checked").length||d.push(":checked"),(t=T.createElement("input")).setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),r.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&d.push(":enabled",":disabled"),(t=T.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||d.push("\\["+ge+"*name"+ge+"*="+ge+"*(?:''|\"\")")}),le.cssHas||d.push(":has"),d=d.length&&new RegExp(d.join("|")),l=function(e,t){if(e===t)return a=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!le.sortDetached&&t.compareDocumentPosition(e)===n?e===T||e.ownerDocument==ye&&I.contains(ye,e)?-1:t===T||t.ownerDocument==ye&&I.contains(ye,t)?1:o?se.call(o,e)-se.call(o,t):0:4&n?-1:1)}),T}for(e in I.matches=function(e,t){return I(e,null,null,t)},I.matchesSelector=function(e,t){if(V(e),C&&!h[t+" "]&&(!d||!d.test(t)))try{var n=i.call(e,t);if(n||le.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){h(t,!0)}return 0<I(t,T,null,[e]).length},I.contains=function(e,t){return(e.ownerDocument||e)!=T&&V(e),ce.contains(e,t)},I.attr=function(e,t){(e.ownerDocument||e)!=T&&V(e);var n=b.attrHandle[t.toLowerCase()],r=n&&ue.call(b.attrHandle,t.toLowerCase())?n(e,t,!C):void 0;return void 0!==r?r:e.getAttribute(t)},I.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ce.uniqueSort=function(e){var t,n=[],r=0,i=0;if(a=!le.sortStable,o=!le.sortStable&&ae.call(e,0),de.call(e,l),a){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)he.call(e,n[r],1)}return o=null,e},ce.fn.uniqueSort=function(){return this.pushStack(ce.uniqueSort(ae.apply(this)))},(b=ce.expr={cacheLength:50,createPseudo:F,match:D,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(O,P),e[3]=(e[3]||e[4]||e[5]||"").replace(O,P),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||I.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&I.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return D.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&j.test(n)&&(t=Y(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(O,P).toLowerCase();return"*"===e?function(){return!0}:function(e){return fe(e,t)}},CLASS:function(e){var t=s[e+" "];return t||(t=new RegExp("(^|"+ge+")"+e+"("+ge+"|$)"))&&s(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=I.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(v," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(d,e,t,h,g){var v="nth"!==d.slice(0,3),y="last"!==d.slice(-4),m="of-type"===e;return 1===h&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u=v!==y?"nextSibling":"previousSibling",l=e.parentNode,c=m&&e.nodeName.toLowerCase(),f=!n&&!m,p=!1;if(l){if(v){while(u){o=e;while(o=o[u])if(m?fe(o,c):1===o.nodeType)return!1;s=u="only"===d&&!s&&"nextSibling"}return!0}if(s=[y?l.firstChild:l.lastChild],y&&f){p=(a=(r=(i=l[S]||(l[S]={}))[d]||[])[0]===E&&r[1])&&r[2],o=a&&l.childNodes[a];while(o=++a&&o&&o[u]||(p=a=0)||s.pop())if(1===o.nodeType&&++p&&o===e){i[d]=[E,a,p];break}}else if(f&&(p=a=(r=(i=e[S]||(e[S]={}))[d]||[])[0]===E&&r[1]),!1===p)while(o=++a&&o&&o[u]||(p=a=0)||s.pop())if((m?fe(o,c):1===o.nodeType)&&++p&&(f&&((i=o[S]||(o[S]={}))[d]=[E,p]),o===e))break;return(p-=g)===h||p%h==0&&0<=p/h}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||I.error("unsupported pseudo: "+e);return a[S]?a(o):1<a.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?F(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=se.call(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:F(function(e){var r=[],i=[],s=ne(e.replace(ve,"$1"));return s[S]?F(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:F(function(t){return function(e){return 0<I(t,e).length}}),contains:F(function(t){return t=t.replace(O,P),function(e){return-1<(e.textContent||ce.text(e)).indexOf(t)}}),lang:F(function(n){return A.test(n||"")||I.error("unsupported lang: "+n),n=n.replace(O,P).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=ie.location&&ie.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===r},focus:function(e){return e===function(){try{return T.activeElement}catch(e){}}()&&T.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:z(!1),disabled:z(!0),checked:function(e){return fe(e,"input")&&!!e.checked||fe(e,"option")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return q.test(e.nodeName)},input:function(e){return N.test(e.nodeName)},button:function(e){return fe(e,"input")&&"button"===e.type||fe(e,"button")},text:function(e){var t;return fe(e,"input")&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:X(function(){return[0]}),last:X(function(e,t){return[t-1]}),eq:X(function(e,t,n){return[n<0?n+t:n]}),even:X(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:X(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:X(function(e,t,n){var r;for(r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:X(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=B(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=_(e);function G(){}function Y(e,t){var n,r,i,o,a,s,u,l=c[e+" "];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=y.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=m.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(ve," ")}),a=a.slice(n.length)),b.filter)!(r=D[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?I.error(e):c(e,s).slice(0)}function Q(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function J(a,e,t){var s=e.dir,u=e.next,l=u||s,c=t&&"parentNode"===l,f=n++;return e.first?function(e,t,n){while(e=e[s])if(1===e.nodeType||c)return a(e,t,n);return!1}:function(e,t,n){var r,i,o=[E,f];if(n){while(e=e[s])if((1===e.nodeType||c)&&a(e,t,n))return!0}else while(e=e[s])if(1===e.nodeType||c)if(i=e[S]||(e[S]={}),u&&fe(e,u))e=e[s]||e;else{if((r=i[l])&&r[0]===E&&r[1]===f)return o[2]=r[2];if((i[l]=o)[2]=a(e,t,n))return!0}return!1}}function K(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Z(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function ee(d,h,g,v,y,e){return v&&!v[S]&&(v=ee(v)),y&&!y[S]&&(y=ee(y,e)),F(function(e,t,n,r){var i,o,a,s,u=[],l=[],c=t.length,f=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)I(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),p=!d||!e&&h?f:Z(f,u,d,n,r);if(g?g(p,s=y||(e?d:c||v)?[]:t,n,r):s=p,v){i=Z(s,l),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(s[l[o]]=!(p[l[o]]=a))}if(e){if(y||d){if(y){i=[],o=s.length;while(o--)(a=s[o])&&i.push(p[o]=a);y(null,s=[],i,r)}o=s.length;while(o--)(a=s[o])&&-1<(i=y?se.call(e,a):u[o])&&(e[i]=!(t[i]=a))}}else s=Z(s===t?s.splice(c,s.length):s),y?y(null,t,s,r):k.apply(t,s)})}function te(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[" "],s=o?1:0,u=J(function(e){return e===i},a,!0),l=J(function(e){return-1<se.call(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!=w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[J(K(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[S]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return ee(1<s&&K(c),1<s&&Q(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(ve,"$1"),t,s<n&&te(e.slice(s,n)),n<r&&te(e=e.slice(n)),n<r&&Q(e))}c.push(t)}return K(c)}function ne(e,t){var n,v,y,m,x,r,i=[],o=[],a=u[e+" "];if(!a){t||(t=Y(e)),n=t.length;while(n--)(a=te(t[n]))[S]?i.push(a):o.push(a);(a=u(e,(v=o,m=0<(y=i).length,x=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l="0",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG("*",i),h=E+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t==T||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument==T||(V(o),n=!C);while(s=v[a++])if(s(o,t||T,n)){k.call(r,o);break}i&&(E=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=pe.call(r));f=Z(f)}k.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&ce.uniqueSort(r)}return i&&(E=h,w=p),c},m?F(r):r))).selector=e}return a}function re(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,c=!r&&Y(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&C&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(O,P),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=D.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(O,P),H.test(o[0].type)&&U(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&Q(o)))return k.apply(n,r),n;break}}}return(l||ne(e,c))(r,t,!C,n,!t||H.test(e)&&U(t.parentNode)||t),n}G.prototype=b.filters=b.pseudos,b.setFilters=new G,le.sortStable=S.split("").sort(l).join("")===S,V(),le.sortDetached=$(function(e){return 1&e.compareDocumentPosition(T.createElement("fieldset"))}),ce.find=I,ce.expr[":"]=ce.expr.pseudos,ce.unique=ce.uniqueSort,I.compile=ne,I.select=re,I.setDocument=V,I.tokenize=Y,I.escape=ce.escapeSelector,I.getText=ce.text,I.isXML=ce.isXMLDoc,I.selectors=ce.expr,I.support=ce.support,I.uniqueSort=ce.uniqueSort}();var d=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&ce(e).is(n))break;r.push(e)}return r},h=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},b=ce.expr.match.needsContext,w=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function T(e,n,r){return v(n)?ce.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?ce.grep(e,function(e){return e===n!==r}):"string"!=typeof n?ce.grep(e,function(e){return-1<se.call(n,e)!==r}):ce.filter(n,e,r)}ce.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?ce.find.matchesSelector(r,e)?[r]:[]:ce.find.matches(e,ce.grep(t,function(e){return 1===e.nodeType}))},ce.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(ce(e).filter(function(){for(t=0;t<r;t++)if(ce.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)ce.find(e,i[t],n);return 1<r?ce.uniqueSort(n):n},filter:function(e){return this.pushStack(T(this,e||[],!1))},not:function(e){return this.pushStack(T(this,e||[],!0))},is:function(e){return!!T(this,"string"==typeof e&&b.test(e)?ce(e):e||[],!1).length}});var k,S=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(ce.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||k,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:S.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof ce?t[0]:t,ce.merge(this,ce.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),w.test(r[1])&&ce.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=C.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(ce):ce.makeArray(e,this)}).prototype=ce.fn,k=ce(C);var E=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function A(e,t){while((e=e[t])&&1!==e.nodeType);return e}ce.fn.extend({has:function(e){var t=ce(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(ce.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&ce(e);if(!b.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&ce.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?ce.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?se.call(ce(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ce.uniqueSort(ce.merge(this.get(),ce(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ce.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return d(e,"parentNode")},parentsUntil:function(e,t,n){return d(e,"parentNode",n)},next:function(e){return A(e,"nextSibling")},prev:function(e){return A(e,"previousSibling")},nextAll:function(e){return d(e,"nextSibling")},prevAll:function(e){return d(e,"previousSibling")},nextUntil:function(e,t,n){return d(e,"nextSibling",n)},prevUntil:function(e,t,n){return d(e,"previousSibling",n)},siblings:function(e){return h((e.parentNode||{}).firstChild,e)},children:function(e){return h(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(fe(e,"template")&&(e=e.content||e),ce.merge([],e.childNodes))}},function(r,i){ce.fn[r]=function(e,t){var n=ce.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=ce.filter(t,n)),1<this.length&&(j[r]||ce.uniqueSort(n),E.test(r)&&n.reverse()),this.pushStack(n)}});var D=/[^\x20\t\r\n\f]+/g;function N(e){return e}function q(e){throw e}function L(e,t,n,r){var i;try{e&&v(i=e.promise)?i.call(e).done(t).fail(n):e&&v(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}ce.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},ce.each(e.match(D)||[],function(e,t){n[t]=!0}),n):ce.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:"")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){ce.each(e,function(e,t){v(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&"string"!==x(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return ce.each(arguments,function(e,t){var n;while(-1<(n=ce.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<ce.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t="",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},ce.extend({Deferred:function(e){var o=[["notify","progress",ce.Callbacks("memory"),ce.Callbacks("memory"),2],["resolve","done",ce.Callbacks("once memory"),ce.Callbacks("once memory"),0,"resolved"],["reject","fail",ce.Callbacks("once memory"),ce.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return ce.Deferred(function(r){ce.each(o,function(e,t){var n=v(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&v(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,v(t)?s?t.call(e,l(u,o,N,s),l(u,o,q,s)):(u++,t.call(e,l(u,o,N,s),l(u,o,q,s),l(u,o,N,o.notifyWith))):(a!==N&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){ce.Deferred.exceptionHook&&ce.Deferred.exceptionHook(e,t.error),u<=i+1&&(a!==q&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(ce.Deferred.getErrorHook?t.error=ce.Deferred.getErrorHook():ce.Deferred.getStackHook&&(t.error=ce.Deferred.getStackHook()),ie.setTimeout(t))}}return ce.Deferred(function(e){o[0][3].add(l(0,e,v(r)?r:N,e.notifyWith)),o[1][3].add(l(0,e,v(t)?t:N)),o[2][3].add(l(0,e,v(n)?n:q))}).promise()},promise:function(e){return null!=e?ce.extend(e,a):a}},s={};return ce.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=ae.call(arguments),o=ce.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?ae.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(L(e,o.done(a(t)).resolve,o.reject,!n),"pending"===o.state()||v(i[t]&&i[t].then)))return o.then();while(t--)L(i[t],a(t),o.reject);return o.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ce.Deferred.exceptionHook=function(e,t){ie.console&&ie.console.warn&&e&&H.test(e.name)&&ie.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},ce.readyException=function(e){ie.setTimeout(function(){throw e})};var O=ce.Deferred();function P(){C.removeEventListener("DOMContentLoaded",P),ie.removeEventListener("load",P),ce.ready()}ce.fn.ready=function(e){return O.then(e)["catch"](function(e){ce.readyException(e)}),this},ce.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--ce.readyWait:ce.isReady)||(ce.isReady=!0)!==e&&0<--ce.readyWait||O.resolveWith(C,[ce])}}),ce.ready.then=O.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?ie.setTimeout(ce.ready):(C.addEventListener("DOMContentLoaded",P),ie.addEventListener("load",P));var M=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===x(n))for(s in i=!0,n)M(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,v(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(ce(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},R=/^-ms-/,I=/-([a-z])/g;function W(e,t){return t.toUpperCase()}function F(e){return e.replace(R,"ms-").replace(I,W)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function B(){this.expando=ce.expando+B.uid++}B.uid=1,B.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[F(t)]=n;else for(r in t)i[F(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][F(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(F):(t=F(t))in r?[t]:t.match(D)||[]).length;while(n--)delete r[t[n]]}(void 0===t||ce.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ce.isEmptyObject(t)}};var _=new B,z=new B,X=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,U=/[A-Z]/g;function V(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(U,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:X.test(i)?JSON.parse(i):i)}catch(e){}z.set(e,t,n)}else n=void 0;return n}ce.extend({hasData:function(e){return z.hasData(e)||_.hasData(e)},data:function(e,t,n){return z.access(e,t,n)},removeData:function(e,t){z.remove(e,t)},_data:function(e,t,n){return _.access(e,t,n)},_removeData:function(e,t){_.remove(e,t)}}),ce.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=z.get(o),1===o.nodeType&&!_.get(o,"hasDataAttrs"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=F(r.slice(5)),V(o,r,i[r]));_.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof n?this.each(function(){z.set(this,n)}):M(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=z.get(o,n))?t:void 0!==(t=V(o,n))?t:void 0;this.each(function(){z.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){z.remove(this,e)})}}),ce.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=_.get(e,t),n&&(!r||Array.isArray(n)?r=_.access(e,t,ce.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=ce.queue(e,t),r=n.length,i=n.shift(),o=ce._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){ce.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return _.get(e,n)||_.access(e,n,{empty:ce.Callbacks("once memory").add(function(){_.remove(e,[t+"queue",n])})})}}),ce.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?ce.queue(this[0],t):void 0===n?this:this.each(function(){var e=ce.queue(this,t,n);ce._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&ce.dequeue(this,t)})},dequeue:function(e){return this.each(function(){ce.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=ce.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=_.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var G=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Y=new RegExp("^(?:([+-])=|)("+G+")([a-z%]*)$","i"),Q=["Top","Right","Bottom","Left"],J=C.documentElement,K=function(e){return ce.contains(e.ownerDocument,e)},Z={composed:!0};J.getRootNode&&(K=function(e){return ce.contains(e.ownerDocument,e)||e.getRootNode(Z)===e.ownerDocument});var ee=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&K(e)&&"none"===ce.css(e,"display")};function te(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return ce.css(e,t,"")},u=s(),l=n&&n[3]||(ce.cssNumber[t]?"":"px"),c=e.nodeType&&(ce.cssNumber[t]||"px"!==l&&+u)&&Y.exec(ce.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)ce.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,ce.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ne={};function re(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=_.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&ee(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ne[s])||(o=a.body.appendChild(a.createElement(s)),u=ce.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ne[s]=u)))):"none"!==n&&(l[c]="none",_.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}ce.fn.extend({show:function(){return re(this,!0)},hide:function(){return re(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ee(this)?ce(this).show():ce(this).hide()})}});var xe,be,we=/^(?:checkbox|radio)$/i,Te=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ce=/^$|^module$|\/(?:java|ecma)script/i;xe=C.createDocumentFragment().appendChild(C.createElement("div")),(be=C.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),xe.appendChild(be),le.checkClone=xe.cloneNode(!0).cloneNode(!0).lastChild.checked,xe.innerHTML="<textarea>x</textarea>",le.noCloneChecked=!!xe.cloneNode(!0).lastChild.defaultValue,xe.innerHTML="<option></option>",le.option=!!xe.lastChild;var ke={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Se(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&fe(e,t)?ce.merge([e],n):n}function Ee(e,t){for(var n=0,r=e.length;n<r;n++)_.set(e[n],"globalEval",!t||_.get(t[n],"globalEval"))}ke.tbody=ke.tfoot=ke.colgroup=ke.caption=ke.thead,ke.th=ke.td,le.option||(ke.optgroup=ke.option=[1,"<select multiple='multiple'>","</select>"]);var je=/<|&#?\w+;/;function Ae(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===x(o))ce.merge(p,o.nodeType?[o]:o);else if(je.test(o)){a=a||f.appendChild(t.createElement("div")),s=(Te.exec(o)||["",""])[1].toLowerCase(),u=ke[s]||ke._default,a.innerHTML=u[1]+ce.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;ce.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&-1<ce.inArray(o,r))i&&i.push(o);else if(l=K(o),a=Se(f.appendChild(o),"script"),l&&Ee(a),n){c=0;while(o=a[c++])Ce.test(o.type||"")&&n.push(o)}return f}var De=/^([^.]*)(?:\.(.+)|)/;function Ne(){return!0}function qe(){return!1}function Le(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Le(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=qe;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return ce().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=ce.guid++)),e.each(function(){ce.event.add(this,t,i,r,n)})}function He(e,r,t){t?(_.set(e,r,!1),ce.event.add(e,r,{namespace:!1,handler:function(e){var t,n=_.get(this,r);if(1&e.isTrigger&&this[r]){if(n)(ce.event.special[r]||{}).delegateType&&e.stopPropagation();else if(n=ae.call(arguments),_.set(this,r,n),this[r](),t=_.get(this,r),_.set(this,r,!1),n!==t)return e.stopImmediatePropagation(),e.preventDefault(),t}else n&&(_.set(this,r,ce.event.trigger(n[0],n.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=Ne)}})):void 0===_.get(e,r)&&ce.event.add(e,r,Ne)}ce.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=_.get(t);if($(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&ce.find.matchesSelector(J,i),n.guid||(n.guid=ce.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof ce&&ce.event.triggered!==e.type?ce.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(D)||[""]).length;while(l--)d=g=(s=De.exec(e[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=ce.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=ce.event.special[d]||{},c=ce.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ce.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),ce.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=_.hasData(e)&&_.get(e);if(v&&(u=v.events)){l=(t=(t||"").match(D)||[""]).length;while(l--)if(d=g=(s=De.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d){f=ce.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||ce.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)ce.event.remove(e,d+t[l],n,r,!0);ce.isEmptyObject(u)&&_.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=ce.event.fix(e),l=(_.get(this,"events")||Object.create(null))[u.type]||[],c=ce.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=ce.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((ce.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<ce(i,this).index(l):ce.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(ce.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[ce.expando]?e:new ce.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return we.test(t.type)&&t.click&&fe(t,"input")&&He(t,"click",!0),!1},trigger:function(e){var t=this||e;return we.test(t.type)&&t.click&&fe(t,"input")&&He(t,"click"),!0},_default:function(e){var t=e.target;return we.test(t.type)&&t.click&&fe(t,"input")&&_.get(t,"click")||fe(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ce.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},ce.Event=function(e,t){if(!(this instanceof ce.Event))return new ce.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ne:qe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&ce.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[ce.expando]=!0},ce.Event.prototype={constructor:ce.Event,isDefaultPrevented:qe,isPropagationStopped:qe,isImmediatePropagationStopped:qe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ne,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ne,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ne,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ce.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},ce.event.addProp),ce.each({focus:"focusin",blur:"focusout"},function(r,i){function o(e){if(C.documentMode){var t=_.get(this,"handle"),n=ce.event.fix(e);n.type="focusin"===e.type?"focus":"blur",n.isSimulated=!0,t(e),n.target===n.currentTarget&&t(n)}else ce.event.simulate(i,e.target,ce.event.fix(e))}ce.event.special[r]={setup:function(){var e;if(He(this,r,!0),!C.documentMode)return!1;(e=_.get(this,i))||this.addEventListener(i,o),_.set(this,i,(e||0)+1)},trigger:function(){return He(this,r),!0},teardown:function(){var e;if(!C.documentMode)return!1;(e=_.get(this,i)-1)?_.set(this,i,e):(this.removeEventListener(i,o),_.remove(this,i))},_default:function(e){return _.get(e.target,r)},delegateType:i},ce.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=C.documentMode?this:e,n=_.get(t,i);n||(C.documentMode?this.addEventListener(i,o):e.addEventListener(r,o,!0)),_.set(t,i,(n||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=C.documentMode?this:e,n=_.get(t,i)-1;n?_.set(t,i,n):(C.documentMode?this.removeEventListener(i,o):e.removeEventListener(r,o,!0),_.remove(t,i))}}}),ce.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){ce.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||ce.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),ce.fn.extend({on:function(e,t,n,r){return Le(this,e,t,n,r)},one:function(e,t,n,r){return Le(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,ce(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=qe),this.each(function(){ce.event.remove(this,e,n,t)})}});var Oe=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,Me=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Re(e,t){return fe(e,"table")&&fe(11!==t.nodeType?t:t.firstChild,"tr")&&ce(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function We(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Fe(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(_.hasData(e)&&(s=_.get(e).events))for(i in _.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)ce.event.add(t,i,s[i][n]);z.hasData(e)&&(o=z.access(e),a=ce.extend({},o),z.set(t,a))}}function $e(n,r,i,o){r=g(r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=v(d);if(h||1<f&&"string"==typeof d&&!le.checkClone&&Pe.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),$e(t,r,i,o)});if(f&&(t=(e=Ae(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=ce.map(Se(e,"script"),Ie)).length;c<f;c++)u=e,c!==p&&(u=ce.clone(u,!0,!0),s&&ce.merge(a,Se(u,"script"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,ce.map(a,We),c=0;c<s;c++)u=a[c],Ce.test(u.type||"")&&!_.access(u,"globalEval")&&ce.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?ce._evalUrl&&!u.noModule&&ce._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},l):m(u.textContent.replace(Me,""),u,l))}return n}function Be(e,t,n){for(var r,i=t?ce.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||ce.cleanData(Se(r)),r.parentNode&&(n&&K(r)&&Ee(Se(r,"script")),r.parentNode.removeChild(r));return e}ce.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=K(e);if(!(le.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ce.isXMLDoc(e)))for(a=Se(c),r=0,i=(o=Se(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(l=u.nodeName.toLowerCase())&&we.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||Se(e),a=a||Se(c),r=0,i=o.length;r<i;r++)Fe(o[r],a[r]);else Fe(e,c);return 0<(a=Se(c,"script")).length&&Ee(a,!f&&Se(e,"script")),c},cleanData:function(e){for(var t,n,r,i=ce.event.special,o=0;void 0!==(n=e[o]);o++)if($(n)){if(t=n[_.expando]){if(t.events)for(r in t.events)i[r]?ce.event.remove(n,r):ce.removeEvent(n,r,t.handle);n[_.expando]=void 0}n[z.expando]&&(n[z.expando]=void 0)}}}),ce.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return M(this,function(e){return void 0===e?ce.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return $e(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Re(this,e).appendChild(e)})},prepend:function(){return $e(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Re(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return $e(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return $e(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ce.cleanData(Se(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ce.clone(this,e,t)})},html:function(e){return M(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Oe.test(e)&&!ke[(Te.exec(e)||["",""])[1].toLowerCase()]){e=ce.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(ce.cleanData(Se(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return $e(this,arguments,function(e){var t=this.parentNode;ce.inArray(this,n)<0&&(ce.cleanData(Se(this)),t&&t.replaceChild(e,this))},n)}}),ce.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){ce.fn[e]=function(e){for(var t,n=[],r=ce(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),ce(r[o])[a](t),s.apply(n,t.get());return this.pushStack(n)}});var _e=new RegExp("^("+G+")(?!px)[a-z%]+$","i"),ze=/^--/,Xe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=ie),t.getComputedStyle(e)},Ue=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Ve=new RegExp(Q.join("|"),"i");function Ge(e,t,n){var r,i,o,a,s=ze.test(t),u=e.style;return(n=n||Xe(e))&&(a=n.getPropertyValue(t)||n[t],s&&a&&(a=a.replace(ve,"$1")||void 0),""!==a||K(e)||(a=ce.style(e,t)),!le.pixelBoxStyles()&&_e.test(a)&&Ve.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function Ye(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",J.appendChild(u).appendChild(l);var e=ie.getComputedStyle(l);n="1%"!==e.top,s=12===t(e.marginLeft),l.style.right="60%",o=36===t(e.right),r=36===t(e.width),l.style.position="absolute",i=12===t(l.offsetWidth/3),J.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=C.createElement("div"),l=C.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",le.clearCloneStyle="content-box"===l.style.backgroundClip,ce.extend(le,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=C.createElement("table"),t=C.createElement("tr"),n=C.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="box-sizing:content-box;border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",J.appendChild(e).appendChild(t).appendChild(n),r=ie.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,J.removeChild(e)),a}}))}();var Qe=["Webkit","Moz","ms"],Je=C.createElement("div").style,Ke={};function Ze(e){var t=ce.cssProps[e]||Ke[e];return t||(e in Je?e:Ke[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=Qe.length;while(n--)if((e=Qe[n]+t)in Je)return e}(e)||e)}var et=/^(none|table(?!-c[ea]).+)/,tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"};function rt(e,t,n){var r=Y.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function it(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=ce.css(e,n+Q[a],!0,i)),r?("content"===n&&(u-=ce.css(e,"padding"+Q[a],!0,i)),"margin"!==n&&(u-=ce.css(e,"border"+Q[a]+"Width",!0,i))):(u+=ce.css(e,"padding"+Q[a],!0,i),"padding"!==n?u+=ce.css(e,"border"+Q[a]+"Width",!0,i):s+=ce.css(e,"border"+Q[a]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u+l}function ot(e,t,n){var r=Xe(e),i=(!le.boxSizingReliable()||n)&&"border-box"===ce.css(e,"boxSizing",!1,r),o=i,a=Ge(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(_e.test(a)){if(!n)return a;a="auto"}return(!le.boxSizingReliable()&&i||!le.reliableTrDimensions()&&fe(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===ce.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===ce.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+it(e,t,n||(i?"border":"content"),o,r,a)+"px"}function at(e,t,n,r,i){return new at.prototype.init(e,t,n,r,i)}ce.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ge(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=F(t),u=ze.test(t),l=e.style;if(u||(t=Ze(s)),a=ce.cssHooks[t]||ce.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=typeof n)&&(i=Y.exec(n))&&i[1]&&(n=te(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(ce.cssNumber[s]?"":"px")),le.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=F(t);return ze.test(t)||(t=Ze(s)),(a=ce.cssHooks[t]||ce.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ge(e,t,r)),"normal"===i&&t in nt&&(i=nt[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),ce.each(["height","width"],function(e,u){ce.cssHooks[u]={get:function(e,t,n){if(t)return!et.test(ce.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ot(e,u,n):Ue(e,tt,function(){return ot(e,u,n)})},set:function(e,t,n){var r,i=Xe(e),o=!le.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===ce.css(e,"boxSizing",!1,i),s=n?it(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-it(e,u,"border",!1,i)-.5)),s&&(r=Y.exec(t))&&"px"!==(r[3]||"px")&&(e.style[u]=t,t=ce.css(e,u)),rt(0,t,s)}}}),ce.cssHooks.marginLeft=Ye(le.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ge(e,"marginLeft"))||e.getBoundingClientRect().left-Ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ce.each({margin:"",padding:"",border:"Width"},function(i,o){ce.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+Q[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(ce.cssHooks[i+o].set=rt)}),ce.fn.extend({css:function(e,t){return M(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Xe(e),i=t.length;a<i;a++)o[t[a]]=ce.css(e,t[a],!1,r);return o}return void 0!==n?ce.style(e,t,n):ce.css(e,t)},e,t,1<arguments.length)}}),((ce.Tween=at).prototype={constructor:at,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||ce.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ce.cssNumber[n]?"":"px")},cur:function(){var e=at.propHooks[this.prop];return e&&e.get?e.get(this):at.propHooks._default.get(this)},run:function(e){var t,n=at.propHooks[this.prop];return this.options.duration?this.pos=t=ce.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):at.propHooks._default.set(this),this}}).init.prototype=at.prototype,(at.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ce.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){ce.fx.step[e.prop]?ce.fx.step[e.prop](e):1!==e.elem.nodeType||!ce.cssHooks[e.prop]&&null==e.elem.style[Ze(e.prop)]?e.elem[e.prop]=e.now:ce.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=at.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ce.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ce.fx=at.prototype.init,ce.fx.step={};var st,ut,lt,ct,ft=/^(?:toggle|show|hide)$/,pt=/queueHooks$/;function dt(){ut&&(!1===C.hidden&&ie.requestAnimationFrame?ie.requestAnimationFrame(dt):ie.setTimeout(dt,ce.fx.interval),ce.fx.tick())}function ht(){return ie.setTimeout(function(){st=void 0}),st=Date.now()}function gt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=Q[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function vt(e,t,n){for(var r,i=(yt.tweeners[t]||[]).concat(yt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function yt(o,e,t){var n,a,r=0,i=yt.prefilters.length,s=ce.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=st||ht(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:ce.extend({},e),opts:ce.extend(!0,{specialEasing:{},easing:ce.easing._default},t),originalProperties:e,originalOptions:t,startTime:st||ht(),duration:t.duration,tweens:[],createTween:function(e,t){var n=ce.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=F(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=ce.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=yt.prefilters[r].call(l,o,c,l.opts))return v(n.stop)&&(ce._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return ce.map(c,vt,l),v(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),ce.fx.timer(ce.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}ce.Animation=ce.extend(yt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return te(n.elem,e,Y.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(D);for(var n,r=0,i=e.length;r<i;r++)n=e[r],yt.tweeners[n]=yt.tweeners[n]||[],yt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ee(e),v=_.get(e,"fxshow");for(r in n.queue||(null==(a=ce._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,ce.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],ft.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||ce.style(e,r)}if((u=!ce.isEmptyObject(t))||!ce.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=v&&v.display)&&(l=_.get(e,"display")),"none"===(c=ce.css(e,"display"))&&(l?c=l:(re([e],!0),l=e.style.display||l,c=ce.css(e,"display"),re([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===ce.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?"hidden"in v&&(g=v.hidden):v=_.access(e,"fxshow",{display:l}),o&&(v.hidden=!g),g&&re([e],!0),p.done(function(){for(r in g||re([e]),_.remove(e,"fxshow"),d)ce.style(e,r,d[r])})),u=vt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?yt.prefilters.unshift(e):yt.prefilters.push(e)}}),ce.speed=function(e,t,n){var r=e&&"object"==typeof e?ce.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return ce.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in ce.fx.speeds?r.duration=ce.fx.speeds[r.duration]:r.duration=ce.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&ce.dequeue(this,r.queue)},r},ce.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ee).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=ce.isEmptyObject(t),o=ce.speed(e,n,r),a=function(){var e=yt(this,ce.extend({},t),o);(i||_.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=ce.timers,r=_.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&pt.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||ce.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=_.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=ce.timers,o=n?n.length:0;for(t.finish=!0,ce.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),ce.each(["toggle","show","hide"],function(e,r){var i=ce.fn[r];ce.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(gt(r,!0),e,t,n)}}),ce.each({slideDown:gt("show"),slideUp:gt("hide"),slideToggle:gt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){ce.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),ce.timers=[],ce.fx.tick=function(){var e,t=0,n=ce.timers;for(st=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||ce.fx.stop(),st=void 0},ce.fx.timer=function(e){ce.timers.push(e),ce.fx.start()},ce.fx.interval=13,ce.fx.start=function(){ut||(ut=!0,dt())},ce.fx.stop=function(){ut=null},ce.fx.speeds={slow:600,fast:200,_default:400},ce.fn.delay=function(r,e){return r=ce.fx&&ce.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=ie.setTimeout(e,r);t.stop=function(){ie.clearTimeout(n)}})},lt=C.createElement("input"),ct=C.createElement("select").appendChild(C.createElement("option")),lt.type="checkbox",le.checkOn=""!==lt.value,le.optSelected=ct.selected,(lt=C.createElement("input")).value="t",lt.type="radio",le.radioValue="t"===lt.value;var mt,xt=ce.expr.attrHandle;ce.fn.extend({attr:function(e,t){return M(this,ce.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){ce.removeAttr(this,e)})}}),ce.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?ce.prop(e,t,n):(1===o&&ce.isXMLDoc(e)||(i=ce.attrHooks[t.toLowerCase()]||(ce.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void ce.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=ce.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!le.radioValue&&"radio"===t&&fe(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(D);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?ce.removeAttr(e,n):e.setAttribute(n,n),n}},ce.each(ce.expr.match.bool.source.match(/\w+/g),function(e,t){var a=xt[t]||ce.find.attr;xt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=xt[o],xt[o]=r,r=null!=a(e,t,n)?o:null,xt[o]=i),r}});var bt=/^(?:input|select|textarea|button)$/i,wt=/^(?:a|area)$/i;function Tt(e){return(e.match(D)||[]).join(" ")}function Ct(e){return e.getAttribute&&e.getAttribute("class")||""}function kt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(D)||[]}ce.fn.extend({prop:function(e,t){return M(this,ce.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[ce.propFix[e]||e]})}}),ce.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ce.isXMLDoc(e)||(t=ce.propFix[t]||t,i=ce.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=ce.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),le.optSelected||(ce.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ce.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ce.propFix[this.toLowerCase()]=this}),ce.fn.extend({addClass:function(t){var e,n,r,i,o,a;return v(t)?this.each(function(e){ce(this).addClass(t.call(this,e,Ct(this)))}):(e=kt(t)).length?this.each(function(){if(r=Ct(this),n=1===this.nodeType&&" "+Tt(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=Tt(n),r!==a&&this.setAttribute("class",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return v(t)?this.each(function(e){ce(this).removeClass(t.call(this,e,Ct(this)))}):arguments.length?(e=kt(t)).length?this.each(function(){if(r=Ct(this),n=1===this.nodeType&&" "+Tt(r)+" "){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(" "+i+" "))n=n.replace(" "+i+" "," ")}a=Tt(n),r!==a&&this.setAttribute("class",a)}}):this:this.attr("class","")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return v(t)?this.each(function(e){ce(this).toggleClass(t.call(this,e,Ct(this),n),n)}):"boolean"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=kt(t),this.each(function(){if(s)for(o=ce(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=Ct(this))&&_.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":_.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&-1<(" "+Tt(Ct(n))+" ").indexOf(t))return!0;return!1}});var St=/\r/g;ce.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=v(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,ce(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=ce.map(t,function(e){return null==e?"":e+""})),(r=ce.valHooks[this.type]||ce.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=ce.valHooks[t.type]||ce.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(St,""):null==e?"":e:void 0}}),ce.extend({valHooks:{option:{get:function(e){var t=ce.find.attr(e,"value");return null!=t?t:Tt(ce.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!fe(n.parentNode,"optgroup"))){if(t=ce(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=ce.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<ce.inArray(ce.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),ce.each(["radio","checkbox"],function(){ce.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<ce.inArray(ce(e).val(),t)}},le.checkOn||(ce.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Et=ie.location,jt={guid:Date.now()},At=/\?/;ce.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new ie.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||ce.error("Invalid XML: "+(n?ce.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t};var Dt=/^(?:focusinfocus|focusoutblur)$/,Nt=function(e){e.stopPropagation()};ce.extend(ce.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||C],d=ue.call(e,"type")?e.type:e,h=ue.call(e,"namespace")?e.namespace.split("."):[];if(o=f=a=n=n||C,3!==n.nodeType&&8!==n.nodeType&&!Dt.test(d+ce.event.triggered)&&(-1<d.indexOf(".")&&(d=(h=d.split(".")).shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,(e=e[ce.expando]?e:new ce.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:ce.makeArray(t,[e]),c=ce.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!y(n)){for(s=c.delegateType||d,Dt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||C)&&p.push(a.defaultView||a.parentWindow||ie)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(_.get(o,"events")||Object.create(null))[e.type]&&_.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&$(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!$(n)||u&&v(n[d])&&!y(n)&&((a=n[u])&&(n[u]=null),ce.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,Nt),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,Nt),ce.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=ce.extend(new ce.Event,n,{type:e,isSimulated:!0});ce.event.trigger(r,null,t)}}),ce.fn.extend({trigger:function(e,t){return this.each(function(){ce.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return ce.event.trigger(e,t,n,!0)}});var qt=/\[\]$/,Lt=/\r?\n/g,Ht=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;function Pt(n,e,r,i){var t;if(Array.isArray(e))ce.each(e,function(e,t){r||qt.test(n)?i(n,t):Pt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==x(e))i(n,e);else for(t in e)Pt(n+"["+t+"]",e[t],r,i)}ce.param=function(e,t){var n,r=[],i=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!ce.isPlainObject(e))ce.each(e,function(){i(this.name,this.value)});else for(n in e)Pt(n,e[n],t,i);return r.join("&")},ce.fn.extend({serialize:function(){return ce.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ce.prop(this,"elements");return e?ce.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ce(this).is(":disabled")&&Ot.test(this.nodeName)&&!Ht.test(e)&&(this.checked||!we.test(e))}).map(function(e,t){var n=ce(this).val();return null==n?null:Array.isArray(n)?ce.map(n,function(e){return{name:t.name,value:e.replace(Lt,"\r\n")}}):{name:t.name,value:n.replace(Lt,"\r\n")}}).get()}});var Mt=/%20/g,Rt=/#.*$/,It=/([?&])_=[^&]*/,Wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ft=/^(?:GET|HEAD)$/,$t=/^\/\//,Bt={},_t={},zt="*/".concat("*"),Xt=C.createElement("a");function Ut(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(D)||[];if(v(t))while(n=i[r++])"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Vt(t,i,o,a){var s={},u=t===_t;function l(e){var r;return s[e]=!0,ce.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s["*"]&&l("*")}function Gt(e,t){var n,r,i=ce.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&ce.extend(!0,e,r),e}Xt.href=Et.href,ce.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":ce.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Gt(Gt(e,ce.ajaxSettings),t):Gt(ce.ajaxSettings,e)},ajaxPrefilter:Ut(Bt),ajaxTransport:Ut(_t),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,v=ce.ajaxSetup({},t),y=v.context||v,m=v.context&&(y.nodeType||y.jquery)?ce(y):ce.event,x=ce.Deferred(),b=ce.Callbacks("once memory"),w=v.statusCode||{},a={},s={},u="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Wt.exec(p))n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2])}t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),v.url=((e||v.url||Et.href)+"").replace($t,Et.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(D)||[""],null==v.crossDomain){r=C.createElement("a");try{r.href=v.url,r.href=r.href,v.crossDomain=Xt.protocol+"//"+Xt.host!=r.protocol+"//"+r.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=ce.param(v.data,v.traditional)),Vt(Bt,v,t,T),h)return T;for(i in(g=ce.event&&v.global)&&0==ce.active++&&ce.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Ft.test(v.type),f=v.url.replace(Rt,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Mt,"+")):(o=v.url.slice(f.length),v.data&&(v.processData||"string"==typeof v.data)&&(f+=(At.test(f)?"&":"?")+v.data,delete v.data),!1===v.cache&&(f=f.replace(It,"$1"),o=(At.test(f)?"&":"?")+"_="+jt.guid+++o),v.url=f+o),v.ifModified&&(ce.lastModified[f]&&T.setRequestHeader("If-Modified-Since",ce.lastModified[f]),ce.etag[f]&&T.setRequestHeader("If-None-Match",ce.etag[f])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+zt+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(y,T,v)||h))return T.abort();if(u="abort",b.add(v.complete),T.done(v.success),T.fail(v.error),c=Vt(_t,v,t,T)){if(T.readyState=1,g&&m.trigger("ajaxSend",[T,v]),h)return T;v.async&&0<v.timeout&&(d=ie.setTimeout(function(){T.abort("timeout")},v.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&ie.clearTimeout(d),c=void 0,p=r||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(v,T,n)),!i&&-1<ce.inArray("script",v.dataTypes)&&ce.inArray("json",v.dataTypes)<0&&(v.converters["text script"]=function(){}),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(v,s,T,i),i?(v.ifModified&&((u=T.getResponseHeader("Last-Modified"))&&(ce.lastModified[f]=u),(u=T.getResponseHeader("etag"))&&(ce.etag[f]=u)),204===e||"HEAD"===v.type?l="nocontent":304===e?l="notmodified":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l="error",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+"",i?x.resolveWith(y,[o,l,T]):x.rejectWith(y,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?"ajaxSuccess":"ajaxError",[T,v,i?o:a]),b.fireWith(y,[T,l]),g&&(m.trigger("ajaxComplete",[T,v]),--ce.active||ce.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return ce.get(e,t,n,"json")},getScript:function(e,t){return ce.get(e,void 0,t,"script")}}),ce.each(["get","post"],function(e,i){ce[i]=function(e,t,n,r){return v(t)&&(r=r||n,n=t,t=void 0),ce.ajax(ce.extend({url:e,type:i,dataType:r,data:t,success:n},ce.isPlainObject(e)&&e))}}),ce.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),ce._evalUrl=function(e,t,n){return ce.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){ce.globalEval(e,t,n)}})},ce.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=ce(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return v(n)?this.each(function(e){ce(this).wrapInner(n.call(this,e))}):this.each(function(){var e=ce(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=v(t);return this.each(function(e){ce(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){ce(this).replaceWith(this.childNodes)}),this}}),ce.expr.pseudos.hidden=function(e){return!ce.expr.pseudos.visible(e)},ce.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},ce.ajaxSettings.xhr=function(){try{return new ie.XMLHttpRequest}catch(e){}};var Yt={0:200,1223:204},Qt=ce.ajaxSettings.xhr();le.cors=!!Qt&&"withCredentials"in Qt,le.ajax=Qt=!!Qt,ce.ajaxTransport(function(i){var o,a;if(le.cors||Qt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Yt[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&ie.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),ce.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),ce.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ce.globalEval(e),e}}}),ce.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ce.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=ce("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(r[0])},abort:function(){i&&i()}}});var Jt,Kt=[],Zt=/(=)\?(?=&|$)|\?\?/;ce.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Kt.pop()||ce.expando+"_"+jt.guid++;return this[e]=!0,e}}),ce.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Zt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Zt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Zt,"$1"+r):!1!==e.jsonp&&(e.url+=(At.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||ce.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=ie[r],ie[r]=function(){o=arguments},n.always(function(){void 0===i?ce(ie).removeProp(r):ie[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Kt.push(r)),o&&v(i)&&i(o[0]),o=i=void 0}),"script"}),le.createHTMLDocument=((Jt=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Jt.childNodes.length),ce.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(le.createHTMLDocument?((r=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(r)):t=C),o=!n&&[],(i=w.exec(e))?[t.createElement(i[1])]:(i=Ae([e],t,o),o&&o.length&&ce(o).remove(),ce.merge([],i.childNodes)));var r,i,o},ce.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=Tt(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&ce.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?ce("<div>").append(ce.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},ce.expr.pseudos.animated=function(t){return ce.grep(ce.timers,function(e){return t===e.elem}).length},ce.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=ce.css(e,"position"),c=ce(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=ce.css(e,"top"),u=ce.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),v(t)&&(t=t.call(e,n,ce.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):c.css(f)}},ce.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ce.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===ce.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===ce.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=ce(e).offset()).top+=ce.css(e,"borderTopWidth",!0),i.left+=ce.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-ce.css(r,"marginTop",!0),left:t.left-i.left-ce.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===ce.css(e,"position"))e=e.offsetParent;return e||J})}}),ce.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;ce.fn[t]=function(e){return M(this,function(e,t,n){var r;if(y(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),ce.each(["top","left"],function(e,n){ce.cssHooks[n]=Ye(le.pixelPosition,function(e,t){if(t)return t=Ge(e,n),_e.test(t)?ce(e).position()[n]+"px":t})}),ce.each({Height:"height",Width:"width"},function(a,s){ce.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){ce.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return M(this,function(e,t,n){var r;return y(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?ce.css(e,t,i):ce.style(e,t,n,i)},s,n?e:void 0,n)}})}),ce.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ce.fn[t]=function(e){return this.on(t,e)}}),ce.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.on("mouseenter",e).on("mouseleave",t||e)}}),ce.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){ce.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var en=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;ce.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=ae.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(ae.call(arguments)))}).guid=e.guid=e.guid||ce.guid++,i},ce.holdReady=function(e){e?ce.readyWait++:ce.ready(!0)},ce.isArray=Array.isArray,ce.parseJSON=JSON.parse,ce.nodeName=fe,ce.isFunction=v,ce.isWindow=y,ce.camelCase=F,ce.type=x,ce.now=Date.now,ce.isNumeric=function(e){var t=ce.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},ce.trim=function(e){return null==e?"":(e+"").replace(en,"$1")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return ce});var tn=ie.jQuery,nn=ie.$;return ce.noConflict=function(e){return ie.$===ce&&(ie.$=nn),e&&ie.jQuery===ce&&(ie.jQuery=tn),ce},"undefined"==typeof e&&(ie.jQuery=ie.$=ce),ce});


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: server/web/tinytuya.css


body {
    font-family: sans-serif;
    font-size: small;
}
.title {
    /* Center the title  at top with blue background white text */
    background-color: blue;
    color: white;
    text-align: center;
    padding: 5px;
    font-size: large;
    font-weight: bold;
}
.address, .onlinetext {
    color: green;
}
.id {
    color: blue;
}
.offlinetext {
    color: red;
}
.version {
    color: rgb(195, 172, 89);
}
table {
    border-collapse: collapse;
}
tr {
    border: 1px solid black;
}
td, th {
    text-align: left;
    padding-left: 5px;
    padding-right: 5px;
}
tbody tr:nth-child(even) {
    background-color: #eeeeee;
}
thead {
    background-color: gray;
    color: white;
    text-align: left;
    padding: auto;
}
a:link, a:visited {
    color: black;
    text-decoration: underline;
}
a:hover, a:active {
    background-color: black;
    color: white;
}
.lcolumn {
    flex: 60%;
    padding: 5px;
}
.rcolumn {
    flex: 40%;
    padding: 5px;
}
.row {
    /* Full window height minus title and button */
    height: calc(100vh - 100px);
    /* Allow scroll */
    overflow: auto;
    display: flex;
  }
/* Clear floats after the columns */
.row:after {
    content: "";
    display: table;
    clear: both;
}
.value {
    color: rgb(73, 73, 73);
}
.button {
    /* put button a bottom of the page */
    position: fixed;
    bottom: 0;
    left: 0;
    height: 40px;
    width: 100%;
    /* make it look like a button */
    background-color: #4CAF50;
    border: none;
    color: white;
    padding: 5px 5px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 14px;
    margin: 4px 2px;
    cursor: pointer;
}


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: setup.cfg

[egg_info]
tag_build = 
tag_date = 0
tag_svn_revision = 0



=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: setup.py

import setuptools
from pkg_resources import DistributionNotFound, get_distribution

from tinytuya import __version__

with open("README.md", "r") as fh:
    long_description = fh.read()

INSTALL_REQUIRES = [
    'requests',      # Used for Setup Wizard - Tuya IoT Platform calls
    'colorama',      # Makes ANSI escape character sequences work under MS Windows.
    #'netifaces',     # Used for device discovery, mainly required on multi-interface machines
]

CHOOSE_CRYPTO_LIB = [
    'cryptography',  # pyca/cryptography - https://cryptography.io/en/latest/
    'pycryptodome',  # PyCryptodome      - https://pycryptodome.readthedocs.io/en/latest/
    'pyaes',         # pyaes             - https://github.com/ricmoo/pyaes
    'pycrypto',      # PyCrypto          - https://www.pycrypto.org/
]

pref_lib = CHOOSE_CRYPTO_LIB[0]
for cryptolib in CHOOSE_CRYPTO_LIB:
    try:
        get_distribution(cryptolib)
        pref_lib = cryptolib
        break
    except DistributionNotFound:
        pass

INSTALL_REQUIRES.append( pref_lib )

setuptools.setup(
    name="tinytuya",
    version=__version__,
    author="Jason Cox",
    author_email="jason@jasonacox.com",
    description="Python module to interface with Tuya WiFi smart devices",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url='https://github.com/jasonacox/tinytuya',
    packages=setuptools.find_packages(exclude=("sandbox",)),
    install_requires=INSTALL_REQUIRES,
    entry_points={"console_scripts": ["tinytuya=tinytuya.__main__:dummy"]},
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
    ],
)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: test.py

#!/usr/bin/env python3
"""
 TinyTuya test for OutletDevice

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya
"""
import sys
import os
import time
import tinytuya

# Read command line options or set defaults
if (len(sys.argv) < 2) and not (("PLUGID" in os.environ) or ("PLUGIP" in os.environ)):
    print("TinyTuya (Tuya Interface) [%s]"%tinytuya.__version__)
    print("Usage: %s <DEVICEID> <DEVICEIP> <DEVICEKEY> <DEVICEVERS>\n" % sys.argv[0])
    print("    Required: <DEVICEID> is the Device ID e.g. 01234567891234567890")
    print("              <DEVICEIP> is the IP address of the smart plug e.g. 10.0.1.99")
    print("    Optional: <DEVICEKEY> is the Local Device Key (default 0123456789abcdef)")
    print("              <DEVICEVERS> is the Protocol Version 3.1 (default) or 3.3\n")
    print("    Note: You may also send values via Environmental variables: ")
    print("              DEVICEID, DEVICEIP, DEVICEKEY, DEVICEVERS\n")
    exit()
DEVICEID = sys.argv[1] if len(sys.argv) >= 2 else "01234567891234567890"
DEVICEIP = sys.argv[2] if len(sys.argv) >= 3 else "10.0.1.99"
DEVICEKEY = sys.argv[3] if len(sys.argv) >= 4 else "0123456789abcdef"
DEVICEVERS = sys.argv[4] if len(sys.argv) >= 5 else "3.1"

# Check for environmental variables and always use those if available 
DEVICEID = os.getenv("DEVICEID", DEVICEID)
DEVICEIP = os.getenv("DEVICEIP", DEVICEIP)
DEVICEKEY = os.getenv("DEVICEKEY", DEVICEKEY)
DEVICEVERS = os.getenv("DEVICEVERS", DEVICEVERS)

print("TinyTuya (Tuya Interface) [%s]\n"%tinytuya.__version__)
print('TESTING: Device %s at %s with key %s version %s' % (DEVICEID, DEVICEIP, DEVICEKEY,DEVICEVERS))

# Connect to device and fetch state
RETRY = 2
watchdog = 0
while True:
    try:
        d = tinytuya.OutletDevice(DEVICEID, DEVICEIP, DEVICEKEY)
        d.set_version(float(DEVICEVERS))
        data = d.status()
        if data:
            print("\nREADING TEST: Response %r" % data)
            print("State (bool, True is ON) %r\n" % data['dps']['1'])  
            break
        else:
            print("Incomplete response from device %s [%s]." % (DEVICEID,DEVICEIP))
    except:
        watchdog += 1
        if watchdog > RETRY:
            print(
                "TIMEOUT: No response from plug %s [%s] after %s attempts."
                % (DEVICEID,DEVICEIP, RETRY)
            )

# Toggle switch state
print("CONTROL TEST: Attempting to toggle power state of device")
switch_state = data['dps']['1']
for x in [(not switch_state), switch_state]:
    try:
        print("Setting state to: %r" % x)
        data = d.set_status(x)  # This requires a valid key
        time.sleep(2)
    except:
        print("TIMEOUT trying to toggle device power.")






=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: testcontrib.py

#!/usr/bin/env python3
"""
 TinyTuya test for Contrib

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya
"""
import tinytuya
from tinytuya import Contrib

print("TinyTuya (Contrib Import Test) [%s]\n" % tinytuya.__version__)

print("   Contrib Devices Loaded: ")
for i in Contrib.DeviceTypes:
    print("      * %s" % i)

print("   Test ThermostatDevice init(): ")
d = Contrib.ThermostatDevice("abcdefghijklmnop123456", "172.28.321.475", "1234567890123abc")

import time
import os

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ModuleNotFoundError:
    pass # dotenv not installed, ignore

IHP_DEVICEID = os.getenv("IHP_DEVICEID", None)
IHP_DEVICEIP = os.getenv("IHP_DEVICEIP", None)
IHP_DEVICEKEY = os.getenv("IHP_DEVICEKEY", None)
IHP_DEVICEVERS = os.getenv("IHP_DEVICEVERS", None)

if IHP_DEVICEID and IHP_DEVICEIP and IHP_DEVICEKEY and IHP_DEVICEVERS:
    print("   Test InverterHeatPumpDevice: ")
    print("      * Device ID: %s" % IHP_DEVICEID)
    print("      * Device IP: %s" % IHP_DEVICEIP)
    print("      * Device Key: %s" % IHP_DEVICEKEY)
    print("      * Device Version: %s" % IHP_DEVICEVERS)
    print()

    device = Contrib.InverterHeatPumpDevice(
        dev_id=IHP_DEVICEID, address=IHP_DEVICEIP, local_key=IHP_DEVICEKEY, version=IHP_DEVICEVERS
    )

    is_on = device.is_on()
    unit = device.get_unit()
    target_water_temp = device.get_target_water_temp()
    lower_limit_target_water_temp = device.get_lower_limit_target_water_temp()
    is_silence_mode = device.is_silence_mode()

    print("      * is_on(): %r" % is_on)
    print("      * get_unit(): %r" % unit)
    print("      * get_inlet_water_temp(): %r" % device.get_inlet_water_temp())
    print("      * get_target_water_temp(): %r" % target_water_temp)
    print("      * get_lower_limit_target_water_temp(): %r" % lower_limit_target_water_temp)
    print("      * get_upper_limit_target_water_temp(): %r" % device.get_upper_limit_target_water_temp())
    print("      * get_heating_capacity_percent(): %r" % device.get_heating_capacity_percent())
    print("      * get_mode(): %r" % device.get_mode())
    print("      * get_mode(raw=True): %r" % device.get_mode(raw=True))
    print("      * get_fault(): %r" % device.get_fault())
    print("      * get_fault(raw=True): %r" % device.get_fault(raw=True))
    print("      * is_silence_mode(): %r" % is_silence_mode)

    time.sleep(10)

    print("    Toggle ON/OFF")
    for power_state in [not is_on, is_on]:
        print("      * Turning %s" % ("ON" if power_state else "OFF"))
        device.turn_on() if power_state else device.turn_off()
        time.sleep(5)
        print("      * is_on(): %r" % device.is_on())
        time.sleep(10)
    
    print("    Toggle unit")
    for unit_value in [not unit.value, unit.value]:
        print("      * Setting unit to %r" % Contrib.TemperatureUnit(unit_value))
        device.set_unit(Contrib.TemperatureUnit(unit_value))
        time.sleep(5)
        print("      * get_unit(): %r" % device.get_unit())
        time.sleep(5)
    
    print("    Set target water temperature to lower limit and previous value")
    for target_water_temp_value in [lower_limit_target_water_temp, target_water_temp]:
        print("      * Setting target water temperature to %r" % target_water_temp_value)
        device.set_target_water_temp(target_water_temp_value)
        time.sleep(5)
        print("      * get_target_water_temp(): %r" % device.get_target_water_temp())
        time.sleep(5)
    
    print("    Toggle silence mode")
    for silence_mode in [not is_silence_mode, is_silence_mode]:
        print("      * Setting silence mode to %r" % silence_mode)
        device.set_silence_mode(silence_mode)
        time.sleep(5)
        print("      * is_silence_mode(): %r" % device.is_silence_mode())
        time.sleep(5)

exit()


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tests.py

#!/usr/bin/env python3

import logging

import unittest
try:
    from unittest.mock import MagicMock  # Python 3
except ImportError:
    from mock import MagicMock  # py2 use https://pypi.python.org/pypi/mock
from hashlib import md5
import json
import logging
import struct

# Enable info logging to see version information
log = logging.getLogger('tinytuya')
logging.basicConfig()  # TODO include function name/line numbers in log
log.setLevel(level=logging.INFO)
log.setLevel(level=logging.DEBUG)  # Debug hack!

import tinytuya

LOCAL_KEY = '0123456789abcdef'

mock_byte_encoding = 'utf-8'

def compare_json_strings(json1, json2, ignoring_keys=None):
    json1 = json.loads(json1)
    json2 = json.loads(json2)

    if ignoring_keys is not None:
        for key in ignoring_keys:
            json1[key] = json2[key]

    return json.dumps(json1, sort_keys=True) == json.dumps(json2, sort_keys=True)

def check_data_frame(data, expected_prefix, encrypted=True):
    prefix = data[:15]
    suffix = data[-8:]
    
    if encrypted:
        payload_len = struct.unpack(">B",data[15:16])[0]  # big-endian, unsigned char
        version = data[16:19]
        checksum = data[19:35]
        encrypted_json = data[35:-8]
        
        json_data = tinytuya.AESCipher(LOCAL_KEY.encode(mock_byte_encoding)).decrypt(encrypted_json)
    else:
        json_data = data[16:-8].decode(mock_byte_encoding)
    
    frame_ok = True
    if prefix != tinytuya.hex2bin(expected_prefix):
        frame_ok = False
    elif suffix != tinytuya.hex2bin("000000000000aa55"):
        frame_ok = False
    elif encrypted:
        if payload_len != len(version) + len(checksum) + len(encrypted_json) + len(suffix):
            frame_ok = False
        elif version != b"3.1":
            frame_ok = False
    
    return json_data, frame_ok
            
def mock_send_receive_set_timer(data):
    if mock_send_receive_set_timer.call_counter == 0:
        ret = 20*chr(0x0) + '{"devId":"DEVICE_ID","dps":{"1":false,"2":0}}' + 8*chr(0x0)
    elif mock_send_receive_set_timer.call_counter == 1:
        expected = '{"uid":"DEVICE_ID_HERE","devId":"DEVICE_ID_HERE","t":"","dps":{"2":6666}}'
        json_data, frame_ok = check_data_frame(data, "000055aa0000000000000007000000")
        
        if frame_ok and compare_json_strings(json_data, expected, ['t']):
            ret = '{"test_result":"SUCCESS"}'
        else:
            ret = '{"test_result":"FAIL"}'

    ret = ret.encode(mock_byte_encoding)
    mock_send_receive_set_timer.call_counter += 1
    return ret
    
def mock_send_receive_set_status(data):
    expected = '{"dps":{"1":true},"uid":"DEVICE_ID_HERE","t":"1516117564","devId":"DEVICE_ID_HERE"}'
    json_data, frame_ok = check_data_frame(data, "000055aa0000000000000007000000")

    if frame_ok and compare_json_strings(json_data, expected, ['t']):
        ret = '{"test_result":"SUCCESS"}'
    else:
        logging.error("json data not the same: {} != {}".format(json_data, expected))
        ret = '{"test_result":"FAIL"}'

    ret = ret.encode(mock_byte_encoding)
    return ret

def mock_send_receive_status(data):
    expected = '{"devId":"DEVICE_ID_HERE","gwId":"DEVICE_ID_HERE"}'
    json_data, frame_ok = check_data_frame(data, "000055aa000000000000000a000000", False)

    # FIXME dead code block
    if frame_ok and compare_json_strings(json_data, expected):
        ret = '{"test_result":"SUCCESS"}'
    else:
        logging.error("json data not the same: {} != {}".format(json_data, expected))
        ret = '{"test_result":"FAIL"}'

    ret = 20*chr(0) + ret + 8*chr(0)
    ret = ret.encode(mock_byte_encoding)
    return ret

def mock_send_receive_set_colour(data):
    expected = '{"dps":{"2":"colour", "5":"ffffff000000ff"}, "devId":"DEVICE_ID_HERE","uid":"DEVICE_ID_HERE", "t":"1516117564"}'

    json_data, frame_ok = check_data_frame(data, "000055aa0000000000000007000000")

    if frame_ok and compare_json_strings(json_data, expected, ['t']):
        ret = '{"test_result":"SUCCESS"}'
    else:
        logging.error("json data not the same: {} != {}".format(json_data, expected))
        ret = '{"test_result":"FAIL"}'

    ret = ret.encode(mock_byte_encoding)
    return ret

def mock_send_receive_set_white(data):
    expected = '{"dps":{"2":"white", "3":255, "4":255}, "devId":"DEVICE_ID_HERE","uid":"DEVICE_ID_HERE", "t":"1516117564"}'
    json_data, frame_ok = check_data_frame(data, "000055aa0000000000000007000000")

    if frame_ok and compare_json_strings(json_data, expected, ['t']):
        ret = '{"test_result":"SUCCESS"}'
    else:
        logging.error("json data not the same: {} != {}".format(json_data, expected))
        ret = '{"test_result":"FAIL"}'

    ret = ret.encode(mock_byte_encoding)
    return ret

class TestXenonDevice(unittest.TestCase):
    def test_set_timer(self):
        d = tinytuya.OutletDevice('DEVICE_ID_HERE', 'IP_ADDRESS_HERE', LOCAL_KEY)
        d.set_version(3.1)
        d._send_receive = MagicMock(side_effect=mock_send_receive_set_timer)

        # Reset call_counter and start test
        mock_send_receive_set_timer.call_counter = 0
        result = d.set_timer(6666)
        result = result[result.find(b'{'):result.rfind(b'}')+1]
        result = result.decode(mock_byte_encoding)  # Python 3 (3.5.4 and earlier) workaround to json stdlib "behavior" https://docs.python.org/3/whatsnew/3.6.html#json
        result = json.loads(result)

        # Make sure mock_send_receive_set_timer() has been called twice with correct parameters
        self.assertEqual(result['test_result'], "SUCCESS")

    def test_set_status(self):
        d = tinytuya.OutletDevice('DEVICE_ID_HERE', 'IP_ADDRESS_HERE', LOCAL_KEY)
        d.set_version(3.1)
        d._send_receive = MagicMock(side_effect=mock_send_receive_set_status)

        result = d.set_status(True, 1)
        result = result.decode(mock_byte_encoding)  # Python 3 (3.5.4 and earlier) workaround to json stdlib "behavior" https://docs.python.org/3/whatsnew/3.6.html#json
        result = json.loads(result)

        # Make sure mock_send_receive_set_timer() has been called twice with correct parameters
        self.assertEqual(result['test_result'], "SUCCESS")

    def test_status(self):
        d = tinytuya.OutletDevice('DEVICE_ID_HERE', 'IP_ADDRESS_HERE', LOCAL_KEY)
        d.set_version(3.1)
        d._send_receive = MagicMock(side_effect=mock_send_receive_status)

        result = d.status()

        # Make sure mock_send_receive_set_timer() has been called twice with correct parameters
        self.assertEqual(result['test_result'], "SUCCESS")
        
    def test_set_colour(self):
        d = tinytuya.BulbDevice('DEVICE_ID_HERE', 'IP_ADDRESS_HERE', LOCAL_KEY)
        d.set_version(3.1)
        d._send_receive = MagicMock(side_effect=mock_send_receive_set_colour)

        result = d.set_colour(255,255,255)
        result = result.decode(mock_byte_encoding)
        result = json.loads(result)

        self.assertEqual(result['test_result'], "SUCCESS")

    def test_set_white(self):
        d = tinytuya.BulbDevice('DEVICE_ID_HERE', 'IP_ADDRESS_HERE', LOCAL_KEY)
        d.set_version(3.1)
        d._send_receive = MagicMock(side_effect=mock_send_receive_set_white)

        result = d.set_white(255, 255)
        result = result.decode(mock_byte_encoding)
        result = json.loads(result)

        self.assertEqual(result['test_result'], "SUCCESS")

if __name__ == '__main__':
    unittest.main()


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/BulbDevice.py

# TinyTuya Bulb Device
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya WiFi smart devices

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

 Local Control Classes
    BulbDevice(...)
        See OutletDevice() for constructor arguments

 Functions
    BulbDevice
        set_colour(r, g, b, nowait):
        set_hsv(h, s, v, nowait):
        set_white(brightness, colourtemp, nowait):
        set_white_percentage(brightness=100, colourtemp=0, nowait):
        set_brightness(brightness, nowait):
        set_brightness_percentage(brightness=100, nowait):
        set_colourtemp(colourtemp, nowait):
        set_colourtemp_percentage(colourtemp=100, nowait):
        set_scene(scene, nowait):             # 1=nature, 3=rave, 4=rainbow
        set_mode(mode='white', nowait):       # white, colour, scene, music
        result = brightness():
        result = colourtemp():
        (r, g, b) = colour_rgb():
        (h,s,v) = colour_hsv()
        result = state():

    Inherited
        json = status()                    # returns json payload
        set_version(version)               # 3.1 [default] or 3.3
        set_socketPersistent(False/True)   # False [default] or True
        set_socketNODELAY(False/True)      # False or True [default]
        set_socketRetryLimit(integer)      # retry count limit [default 5]
        set_socketTimeout(timeout)         # set connection timeout in seconds [default 5]
        set_dpsUsed(dps_to_request)        # add data points (DPS) to request
        add_dps_to_request(index)          # add data point (DPS) index set to None
        set_retry(retry=True)              # retry if response payload is truncated
        set_status(on, switch=1, nowait)   # Set status of switch to 'on' or 'off' (bool)
        set_value(index, value, nowait)    # Set int value of any index.
        heartbeat(nowait)                  # Send heartbeat to device
        updatedps(index=[1], nowait)       # Send updatedps command to device
        turn_on(switch=1, nowait)          # Turn on device / switch #
        turn_off(switch=1, nowait)         # Turn off
        set_timer(num_secs, nowait)        # Set timer for num_secs
        set_debug(toggle, color)           # Activate verbose debugging output
        set_sendWait(num_secs)             # Time to wait after sending commands before pulling response
        detect_available_dps()             # Return list of DPS available from device
        generate_payload(command, data)    # Generate TuyaMessage payload for command with data
        send(payload)                      # Send payload to device (do not wait for response)
        receive()                          # Receive payload from device
"""

import colorsys

from .core import * # pylint: disable=W0401, W0614

class BulbDevice(Device):
    """
    Represents a Tuya based Smart Light/Bulb.

    This class supports two types of bulbs with different DPS mappings and functions:
        Type A - Uses DPS index 1-5
        Type B - Uses DPS index 20-27 (no index 1)
        Type C - Same as Type A except that it is using DPS 2 for brightness, which ranges from 0-1000.  These are the Feit branded dimmers found at Costco.
    """

    # Two types of Bulbs - TypeA uses DPS 1-5, TypeB uses DPS 20-24
    DPS_INDEX_ON = {"A": "1", "B": "20", "C": "1"}
    DPS_INDEX_MODE = {"A": "2", "B": "21", "C": "1"}
    DPS_INDEX_BRIGHTNESS = {"A": "3", "B": "22", "C": "2"}
    DPS_INDEX_COLOURTEMP = {"A": "4", "B": "23", "C": None}
    DPS_INDEX_COLOUR = {"A": "5", "B": "24", "C": None}
    DPS_INDEX_SCENE = {"A": "2", "B": "25", "C": None}
    DPS_INDEX_TIMER = {"A": None, "B": "26", "C": None}
    DPS_INDEX_MUSIC = {"A": None, "B": "27", "C": None}
    DPS = "dps"
    DPS_MODE_WHITE = "white"
    DPS_MODE_COLOUR = "colour"
    DPS_MODE_SCENE = "scene"
    DPS_MODE_MUSIC = "music"
    DPS_MODE_SCENE_1 = "scene_1"  # nature
    DPS_MODE_SCENE_2 = "scene_2"
    DPS_MODE_SCENE_3 = "scene_3"  # rave
    DPS_MODE_SCENE_4 = "scene_4"  # rainbow

    DPS_2_STATE = {
        "1": "is_on",
        "2": "mode",
        "3": "brightness",
        "4": "colourtemp",
        "5": "colour",
        "20": "is_on",
        "21": "mode",
        "22": "brightness",
        "23": "colourtemp",
        "24": "colour",
    }

    # Set Default Bulb Types
    bulb_type = "A"
    has_brightness = False
    has_colourtemp = False
    has_colour = False

    def __init__(self, *args, **kwargs):
        # set the default version to None so we do not immediately connect and call status()
        if 'version' not in kwargs or not kwargs['version']:
            kwargs['version'] = None
        super(BulbDevice, self).__init__(*args, **kwargs)

    @staticmethod
    def _rgb_to_hexvalue(r, g, b, bulb="A"):
        """
        Convert an RGB value to the hex representation expected by Tuya Bulb.

        Index (DPS_INDEX_COLOUR) is assumed to be in the format:
            (Type A) Index: 5 in hex format: rrggbb0hhhssvv
            (Type B) Index: 24 in hex format: hhhhssssvvvv

        While r, g and b are just hexadecimal values of the corresponding
        Red, Green and Blue values, the h, s and v values (which are values
        between 0 and 1) are scaled:
            Type A: 360 (h) and 255 (s and v)
            Type B: 360 (h) and 1000 (s and v)

        Args:
            r(int): Value for the colour red as int from 0-255.
            g(int): Value for the colour green as int from 0-255.
            b(int): Value for the colour blue as int from 0-255.
        """
        rgb = [r, g, b]
        hsv = colorsys.rgb_to_hsv(rgb[0] / 255.0, rgb[1] / 255.0, rgb[2] / 255.0)

        # Bulb Type A
        if bulb == "A":
            # h:0-360,s:0-255,v:0-255|hsv|
            hexvalue = ""
            for value in rgb:
                temp = str(hex(int(value))).replace("0x", "")
                if len(temp) == 1:
                    temp = "0" + temp
                hexvalue = hexvalue + temp

            hsvarray = [int(hsv[0] * 360), int(hsv[1] * 255), int(hsv[2] * 255)]
            hexvalue_hsv = ""
            for value in hsvarray:
                temp = str(hex(int(value))).replace("0x", "")
                if len(temp) == 1:
                    temp = "0" + temp
                hexvalue_hsv = hexvalue_hsv + temp
            if len(hexvalue_hsv) == 7:
                hexvalue = hexvalue + "0" + hexvalue_hsv
            else:
                hexvalue = hexvalue + "00" + hexvalue_hsv

        # Bulb Type B
        if bulb == "B":
            # h:0-360,s:0-1000,v:0-1000|hsv|
            hexvalue = ""
            hsvarray = [int(hsv[0] * 360), int(hsv[1] * 1000), int(hsv[2] * 1000)]
            for value in hsvarray:
                temp = str(hex(int(value))).replace("0x", "")
                while len(temp) < 4:
                    temp = "0" + temp
                hexvalue = hexvalue + temp

        return hexvalue

    @staticmethod
    def _hexvalue_to_rgb(hexvalue, bulb="A"):
        """
        Converts the hexvalue used by Tuya for colour representation into
        an RGB value.

        Args:
            hexvalue(string): The hex representation generated by BulbDevice._rgb_to_hexvalue()
        """
        if bulb == "A":
            r = int(hexvalue[0:2], 16)
            g = int(hexvalue[2:4], 16)
            b = int(hexvalue[4:6], 16)
        elif bulb == "B":
            # hexvalue is in hsv
            h = float(int(hexvalue[0:4], 16) / 360.0)
            s = float(int(hexvalue[4:8], 16) / 1000.0)
            v = float(int(hexvalue[8:12], 16) / 1000.0)
            rgb = colorsys.hsv_to_rgb(h, s, v)
            r = int(rgb[0] * 255)
            g = int(rgb[1] * 255)
            b = int(rgb[2] * 255)
        else:
            # Unsupported bulb type
            raise ValueError(f"Unsupported bulb type {bulb} - unable to determine RGB values.")

        return (r, g, b)

    @staticmethod
    def _hexvalue_to_hsv(hexvalue, bulb="A"):
        """
        Converts the hexvalue used by Tuya for colour representation into
        an HSV value.

        Args:
            hexvalue(string): The hex representation generated by BulbDevice._rgb_to_hexvalue()
        """
        if bulb == "A":
            h = int(hexvalue[7:10], 16) / 360.0
            s = int(hexvalue[10:12], 16) / 255.0
            v = int(hexvalue[12:14], 16) / 255.0
        elif bulb == "B":
            # hexvalue is in hsv
            h = int(hexvalue[0:4], 16) / 360.0
            s = int(hexvalue[4:8], 16) / 1000.0
            v = int(hexvalue[8:12], 16) / 1000.0
        else:
            # Unsupported bulb type
            raise ValueError(f"Unsupported bulb type {bulb} - unable to determine HSV values.")
        
        return (h, s, v)

    def set_version(self, version): # pylint: disable=W0621
        """
        Set the Tuya device version 3.1 or 3.3 for BulbDevice
        Attempt to determine BulbDevice Type: A or B based on:
            Type A has keys 1-5 (default)
            Type B has keys 20-29
            Type C is Feit type bulbs from costco
        """
        super(BulbDevice, self).set_version(version)

        # Try to determine type of BulbDevice Type based on DPS indexes
        status = self.status()
        if status is not None:
            if "dps" in status:
                if "1" not in status["dps"]:
                    self.bulb_type = "B"
                if self.DPS_INDEX_BRIGHTNESS[self.bulb_type] in status["dps"]:
                    self.has_brightness = True
                if self.DPS_INDEX_COLOURTEMP[self.bulb_type] in status["dps"]:
                    self.has_colourtemp = True
                if self.DPS_INDEX_COLOUR[self.bulb_type] in status["dps"]:
                    self.has_colour = True
            else:
                self.bulb_type = "B"
        else:
            # response has no dps
            self.bulb_type = "B"
        log.debug("bulb type set to %s", self.bulb_type)

    def turn_on(self, switch=0, nowait=False):
        """Turn the device on"""
        if switch == 0:
            switch = self.DPS_INDEX_ON[self.bulb_type]
        self.set_status(True, switch, nowait=nowait)

    def turn_off(self, switch=0, nowait=False):
        """Turn the device on"""
        if switch == 0:
            switch = self.DPS_INDEX_ON[self.bulb_type]
        self.set_status(False, switch, nowait=nowait)

    def set_bulb_type(self, type):
        self.bulb_type = type

    def set_mode(self, mode="white", nowait=False):
        """
        Set bulb mode

        Args:
            mode(string): white,colour,scene,music
            nowait(bool): True to send without waiting for response.
        """
        payload = self.generate_payload(
            CONTROL, {self.DPS_INDEX_MODE[self.bulb_type]: mode}
        )
        data = self._send_receive(payload, getresponse=(not nowait))
        return data

    def set_scene(self, scene, nowait=False):
        """
        Set to scene mode

        Args:
            scene(int): Value for the scene as int from 1-4.
            nowait(bool): True to send without waiting for response.
        """
        if not 1 <= scene <= 4:
            return error_json(
                ERR_RANGE, "set_scene: The value for scene needs to be between 1 and 4."
            )

        if scene == 1:
            s = self.DPS_MODE_SCENE_1
        elif scene == 2:
            s = self.DPS_MODE_SCENE_2
        elif scene == 3:
            s = self.DPS_MODE_SCENE_3
        else:
            s = self.DPS_MODE_SCENE_4

        payload = self.generate_payload(
            CONTROL, {self.DPS_INDEX_MODE[self.bulb_type]: s}
        )
        data = self._send_receive(payload, getresponse=(not nowait))
        return data

    def set_colour(self, r, g, b, nowait=False):
        """
        Set colour of an rgb bulb.

        Args:
            r(int): Value for the colour Red as int from 0-255.
            g(int): Value for the colour Green as int from 0-255.
            b(int): Value for the colour Blue as int from 0-255.
            nowait(bool): True to send without waiting for response.
        """
        if not self.has_colour:
            log.debug("set_colour: Device does not appear to support color.")
            # return error_json(ERR_FUNCTION, "set_colour: Device does not support color.")
        if not 0 <= r <= 255:
            return error_json(
                ERR_RANGE,
                "set_colour: The value for red needs to be between 0 and 255.",
            )
        if not 0 <= g <= 255:
            return error_json(
                ERR_RANGE,
                "set_colour: The value for green needs to be between 0 and 255.",
            )
        if not 0 <= b <= 255:
            return error_json(
                ERR_RANGE,
                "set_colour: The value for blue needs to be between 0 and 255.",
            )

        hexvalue = BulbDevice._rgb_to_hexvalue(r, g, b, self.bulb_type)

        payload = self.generate_payload(
            CONTROL,
            {
                self.DPS_INDEX_MODE[self.bulb_type]: self.DPS_MODE_COLOUR,
                self.DPS_INDEX_COLOUR[self.bulb_type]: hexvalue,
            },
        )
        data = self._send_receive(payload, getresponse=(not nowait))
        return data

    def set_hsv(self, h, s, v, nowait=False):
        """
        Set colour of an rgb bulb using h, s, v.

        Args:
            h(float): colour Hue as float from 0-1
            s(float): colour Saturation as float from 0-1
            v(float): colour Value as float from 0-1
            nowait(bool): True to send without waiting for response.
        """
        if not self.has_colour:
            log.debug("set_hsv: Device does not appear to support color.")
            # return error_json(ERR_FUNCTION, "set_hsv: Device does not support color.")
        if not 0 <= h <= 1.0:
            return error_json(
                ERR_RANGE, "set_hsv: The value for Hue needs to be between 0 and 1."
            )
        if not 0 <= s <= 1.0:
            return error_json(
                ERR_RANGE,
                "set_hsv: The value for Saturation needs to be between 0 and 1.",
            )
        if not 0 <= v <= 1.0:
            return error_json(
                ERR_RANGE,
                "set_hsv: The value for Value needs to be between 0 and 1.",
            )

        (r, g, b) = colorsys.hsv_to_rgb(h, s, v)
        hexvalue = BulbDevice._rgb_to_hexvalue(
            r * 255.0, g * 255.0, b * 255.0, self.bulb_type
        )

        payload = self.generate_payload(
            CONTROL,
            {
                self.DPS_INDEX_MODE[self.bulb_type]: self.DPS_MODE_COLOUR,
                self.DPS_INDEX_COLOUR[self.bulb_type]: hexvalue,
            },
        )
        data = self._send_receive(payload, getresponse=(not nowait))
        return data

    def set_white_percentage(self, brightness=100, colourtemp=0, nowait=False):
        """
        Set white coloured theme of an rgb bulb.

        Args:
            brightness(int): Value for the brightness in percent (0-100)
            colourtemp(int): Value for the colour temperature in percent (0-100)
            nowait(bool): True to send without waiting for response.
        """
        # Brightness
        if not 0 <= brightness <= 100:
            return error_json(
                ERR_RANGE,
                "set_white_percentage: Brightness percentage needs to be between 0 and 100.",
            )

        b = int(25 + (255 - 25) * brightness / 100)

        if self.bulb_type == "B":
            b = int(10 + (1000 - 10) * brightness / 100)

        # Colourtemp
        if not 0 <= colourtemp <= 100:
            return error_json(
                ERR_RANGE,
                "set_white_percentage: Colourtemp percentage needs to be between 0 and 100.",
            )

        c = int(255 * colourtemp / 100)

        if self.bulb_type == "B":
            c = int(1000 * colourtemp / 100)

        data = self.set_white(b, c, nowait=nowait)
        return data

    def set_white(self, brightness=-1, colourtemp=-1, nowait=False):
        """
        Set white coloured theme of an rgb bulb.

        Args:
            brightness(int): Value for the brightness (A:25-255 or B:10-1000)
            colourtemp(int): Value for the colour temperature (A:0-255, B:0-1000).
            nowait(bool): True to send without waiting for response.

            Default: Max Brightness and Min Colourtemp
        """
        # Brightness (default Max)
        if brightness < 0:
            brightness = 255
            if self.bulb_type == "B":
                brightness = 1000
        if self.bulb_type == "A" and not 25 <= brightness <= 255:
            return error_json(
                ERR_RANGE, "set_white: The brightness needs to be between 25 and 255."
            )
        if self.bulb_type == "B" and not 10 <= brightness <= 1000:
            return error_json(
                ERR_RANGE, "set_white: The brightness needs to be between 10 and 1000."
            )

        # Colourtemp (default Min)
        if colourtemp < 0:
            colourtemp = 0
        if self.bulb_type == "A" and not 0 <= colourtemp <= 255:
            return error_json(
                ERR_RANGE,
                "set_white: The colour temperature needs to be between 0 and 255.",
            )
        if self.bulb_type == "B" and not 0 <= colourtemp <= 1000:
            return error_json(
                ERR_RANGE,
                "set_white: The colour temperature needs to be between 0 and 1000.",
            )

        payload = self.generate_payload(
            CONTROL,
            {
                self.DPS_INDEX_MODE[self.bulb_type]: self.DPS_MODE_WHITE,
                self.DPS_INDEX_BRIGHTNESS[self.bulb_type]: brightness,
                self.DPS_INDEX_COLOURTEMP[self.bulb_type]: colourtemp,
            },
        )

        data = self._send_receive(payload, getresponse=(not nowait))
        return data

    def set_brightness_percentage(self, brightness=100, nowait=False):
        """
        Set the brightness value of an rgb bulb.

        Args:
            brightness(int): Value for the brightness in percent (0-100)
            nowait(bool): True to send without waiting for response.
        """
        if not 0 <= brightness <= 100:
            return error_json(
                ERR_RANGE,
                "set_brightness_percentage: Brightness percentage needs to be between 0 and 100.",
            )
        b = int(25 + (255 - 25) * brightness / 100)
        if self.bulb_type == "B":
            b = int(10 + (1000 - 10) * brightness / 100)

        data = self.set_brightness(b, nowait=nowait)
        return data

    def set_brightness(self, brightness, nowait=False):
        """
        Set the brightness value of an rgb bulb.

        Args:
            brightness(int): Value for the brightness (25-255).
            nowait(bool): True to send without waiting for response.
        """
        if self.bulb_type == "A" and not 25 <= brightness <= 255:
            return error_json(
                ERR_RANGE,
                "set_brightness: The brightness needs to be between 25 and 255.",
            )
        if self.bulb_type == "B" and not 10 <= brightness <= 1000:
            return error_json(
                ERR_RANGE,
                "set_brightness: The brightness needs to be between 10 and 1000.",
            )

        # Determine which mode bulb is in and adjust accordingly
        state = self.state()
        data = None

        if "mode" in state:
            if state["mode"] == "white":
                # for white mode use DPS for brightness
                if not self.has_brightness:
                    log.debug("set_brightness: Device does not appear to support brightness.")
                    # return error_json(ERR_FUNCTION, "set_brightness: Device does not support brightness.")
                payload = self.generate_payload(
                    CONTROL, {self.DPS_INDEX_BRIGHTNESS[self.bulb_type]: brightness}
                )
                data = self._send_receive(payload, getresponse=(not nowait))

            if state["mode"] == "colour":
                # for colour mode use hsv to increase brightness
                if self.bulb_type == "A":
                    value = brightness / 255.0
                else:
                    value = brightness / 1000.0
                (h, s, v) = self.colour_hsv()
                data = self.set_hsv(h, s, value, nowait=nowait)

        if data is not None or nowait is True:
            return data
        else:
            return error_json(ERR_STATE, "set_brightness: Unknown bulb state.")

    def set_colourtemp_percentage(self, colourtemp=100, nowait=False):
        """
        Set the colour temperature of an rgb bulb.

        Args:
            colourtemp(int): Value for the colour temperature in percentage (0-100).
            nowait(bool): True to send without waiting for response.
        """
        if not 0 <= colourtemp <= 100:
            return error_json(
                ERR_RANGE,
                "set_colourtemp_percentage: Colourtemp percentage needs to be between 0 and 100.",
            )
        c = int(255 * colourtemp / 100)
        if self.bulb_type == "B":
            c = int(1000 * colourtemp / 100)

        data = self.set_colourtemp(c, nowait=nowait)
        return data

    def set_colourtemp(self, colourtemp, nowait=False):
        """
        Set the colour temperature of an rgb bulb.

        Args:
            colourtemp(int): Value for the colour temperature (0-255).
            nowait(bool): True to send without waiting for response.
        """
        if not self.has_colourtemp:
            log.debug("set_colourtemp: Device does not appear to support colortemp.")
            # return error_json(ERR_FUNCTION, "set_colourtemp: Device does not support colortemp.")
        if self.bulb_type == "A" and not 0 <= colourtemp <= 255:
            return error_json(
                ERR_RANGE,
                "set_colourtemp: The colour temperature needs to be between 0 and 255.",
            )
        if self.bulb_type == "B" and not 0 <= colourtemp <= 1000:
            return error_json(
                ERR_RANGE,
                "set_colourtemp: The colour temperature needs to be between 0 and 1000.",
            )

        payload = self.generate_payload(
            CONTROL, {self.DPS_INDEX_COLOURTEMP[self.bulb_type]: colourtemp}
        )
        data = self._send_receive(payload, getresponse=(not nowait))
        return data

    def brightness(self):
        """Return brightness value"""
        return self.status()[self.DPS][self.DPS_INDEX_BRIGHTNESS[self.bulb_type]]

    def colourtemp(self):
        """Return colour temperature"""
        return self.status()[self.DPS][self.DPS_INDEX_COLOURTEMP[self.bulb_type]]

    def colour_rgb(self):
        """Return colour as RGB value"""
        hexvalue = self.status()[self.DPS][self.DPS_INDEX_COLOUR[self.bulb_type]]
        return BulbDevice._hexvalue_to_rgb(hexvalue, self.bulb_type)

    def colour_hsv(self):
        """Return colour as HSV value"""
        hexvalue = self.status()[self.DPS][self.DPS_INDEX_COLOUR[self.bulb_type]]
        return BulbDevice._hexvalue_to_hsv(hexvalue, self.bulb_type)

    def state(self):
        """Return state of Bulb"""
        status = self.status()
        state = {}
        if not status:
            return error_json(ERR_JSON, "state: empty response")

        if "Error" in status.keys():
            return error_json(ERR_JSON, status["Error"])

        if self.DPS not in status.keys():
            return error_json(ERR_JSON, "state: no data points")

        for key in status[self.DPS].keys():
            if key in self.DPS_2_STATE:
                state[self.DPS_2_STATE[key]] = status[self.DPS][key]

        return state


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Cloud.py

# TinyTuya Cloud Module
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya WiFi smart devices

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

 Local Control Classes
    Cloud(apiRegion, apiKey, apiSecret, apiDeviceID, new_sign_algorithm)

 Functions
    Cloud
        setregion(apiRegion)
        cloudrequest(url, action=[POST if post else GET], post={}, query={})
        getdevices(verbose=False)
        getstatus(deviceid)
        getfunctions(deviceid)
        getproperties(deviceid)
        getdps(deviceid)
        sendcommand(deviceid, commands [, uri])
        getconnectstatus(deviceid)
        getdevicelog(deviceid, start=[now - 1 day], end=[now], evtype="1,2,3,4,5,6,7,8,9,10", size=100, params={})
          -> when start or end are negative, they are the number of days before "right now"
             i.e. "start=-1" is 1 day ago, "start=-7" is 7 days ago

 Reference
    * https://developer.tuya.com/en/docs/cloud/device-connection-service?id=Kb0b8geg6o761

"""

import hashlib
import hmac
import json
import time
try:
    import requests
except ImportError as impErr:
    print("WARN: Unable to import requests library, Cloud functions will not work.")
    print("WARN: Check dependencies. See https://github.com/jasonacox/tinytuya/issues/377")
    print("WARN: Error: {}.".format(impErr.args[0]))

from .core import * # pylint: disable=W0401, W0614

########################################################
#             Cloud Classes and Functions
########################################################

class Cloud(object):
    def __init__(self, apiRegion=None, apiKey=None, apiSecret=None, apiDeviceID=None, new_sign_algorithm=True, initial_token=None, **extrakw):
        """
        Tuya Cloud IoT Platform Access

        Args:
            initial_token: The auth token from a previous run.  It will be refreshed if it has expired

        Playload Construction - Header Data:
            Parameter 	  Type    Required	Description
            client_id	  String     Yes	client_id
            signature     String     Yes	HMAC-SHA256 Signature (see below)
            sign_method	  String	 Yes	Message-Digest Algorithm of the signature: HMAC-SHA256.
            t	          Long	     Yes	13-bit standard timestamp (now in milliseconds).
            lang	      String	 No	    Language. It is zh by default in China and en in other areas.
            access_token  String     *      Required for service management calls

        Signature Details:
            * OAuth Token Request: signature = HMAC-SHA256(KEY + t, SECRET).toUpperCase()
            * Service Management: signature = HMAC-SHA256(KEY + access_token + t, SECRET).toUpperCase()

        URIs:
            * Get Token = https://openapi.tuyaus.com/v1.0/token?grant_type=1
            * Get UserID = https://openapi.tuyaus.com/v1.0/devices/{DeviceID}
            * Get Devices = https://openapi.tuyaus.com/v1.0/users/{UserID}/devices

        REFERENCE:
            * https://images.tuyacn.com/smart/docs/python_iot_code_sample.py
            * https://iot.tuya.com/cloud/products/detail
        """
        # Class Variables
        self.CONFIGFILE = 'tinytuya.json'
        self.apiRegion = apiRegion
        self.apiKey = apiKey
        self.apiSecret = apiSecret
        self.apiDeviceID = apiDeviceID
        self.urlhost = ''
        self.uid = None     # Tuya Cloud User ID
        self.token = initial_token
        self.error = None
        self.new_sign_algorithm = new_sign_algorithm
        self.server_time_offset = 0
        self.use_old_device_list = True
        self.mappings = None

        if (not apiKey) or (not apiSecret):
            try:
                # Load defaults from config file if available
                config = {}
                with open(self.CONFIGFILE) as f:
                    config = json.load(f)
                    self.apiRegion = config['apiRegion']
                    self.apiKey = config['apiKey']
                    self.apiSecret = config['apiSecret']
                    if 'apiDeviceID' in config:
                        self.apiDeviceID = config['apiDeviceID']
            except:
                self.error = error_json(
                    ERR_CLOUDKEY,
                    "Tuya Cloud Key and Secret required",
                )
                #return self.error
                raise TypeError('Tuya Cloud Key and Secret required') # pylint: disable=W0707

        self.setregion(apiRegion)

        if not self.token:
            # Attempt to connect to cloud and get token
            self._gettoken()

    def setregion(self, apiRegion=None):
        # Set hostname based on apiRegion
        if apiRegion is None:
            apiRegion = self.apiRegion
        self.apiRegion = apiRegion.lower()
        self.urlhost = "openapi.tuyacn.com"          # China Data Center
        if self.apiRegion == "us":
            self.urlhost = "openapi.tuyaus.com"      # Western America Data Center
        if self.apiRegion == "us-e":
            self.urlhost = "openapi-ueaz.tuyaus.com" # Eastern America Data Center
        if self.apiRegion == "eu":
            self.urlhost = "openapi.tuyaeu.com"      # Central Europe Data Center
        if self.apiRegion == "eu-w":
            self.urlhost = "openapi-weaz.tuyaeu.com" # Western Europe Data Center
        if self.apiRegion == "in":
            self.urlhost = "openapi.tuyain.com"      # India Datacenter

    def _tuyaplatform(self, uri, action='GET', post=None, ver='v1.0', recursive=False, query=None, content_type=None):
        """
        Handle GET and POST requests to Tuya Cloud
        """
        # Build URL and Header
        if ver:
            url = "https://%s/%s/%s" % (self.urlhost, ver, uri)
        elif uri[0] == '/':
            url = "https://%s%s" % (self.urlhost, uri)
        else:
            url = "https://%s/%s" % (self.urlhost, uri)
        headers = {}
        body = {}
        sign_url = url
        if post is not None:
            body = json.dumps(post)
        if action not in ('GET', 'POST', 'PUT', 'DELETE'):
            action = 'POST' if post else 'GET'
        if action == 'POST' and content_type is None:
            content_type = 'application/json'
        if content_type:
            headers['Content-type'] = content_type
        if query:
            # note: signature must be calculated before URL-encoding!
            if type(query) == str:
                # if it's a string then assume no url-encoding is needed
                if query[0] == '?':
                    url += query
                else:
                    url += '?' + query
                sign_url = url
            else:
                # dicts are unsorted, however Tuya requires the keys to be in alphabetical order for signing
                #  as per https://developer.tuya.com/en/docs/iot/singnature?id=Ka43a5mtx1gsc
                if type(query) == dict:
                    sorted_query = []
                    for k in sorted(query.keys()):
                        sorted_query.append( (k, query[k]) )
                    query = sorted_query
                    # calculate signature without url-encoding
                    sign_url += '?' + '&'.join( [str(x[0]) + '=' + str(x[1]) for x in query] )
                    req = requests.Request(action, url, params=query).prepare()
                    url = req.url
                else:
                    req = requests.Request(action, url, params=query).prepare()
                    sign_url = url = req.url
        now = int(time.time()*1000)
        headers = dict(list(headers.items()) + [('Signature-Headers', ":".join(headers.keys()))]) if headers else {}
        if self.token is None:
            payload = self.apiKey + str(now)
            headers['secret'] = self.apiSecret
        else:
            payload = self.apiKey + self.token + str(now)

        # If running the post 6-30-2021 signing algorithm update the payload to include it's data
        if self.new_sign_algorithm:
            payload += ('%s\n' % action +                                                # HTTPMethod
                hashlib.sha256(bytes((body or "").encode('utf-8'))).hexdigest() + '\n' + # Content-SHA256
                ''.join(['%s:%s\n'%(key, headers[key])                                   # Headers
                            for key in headers.get("Signature-Headers", "").split(":")
                            if key in headers]) + '\n' +
                '/' + sign_url.split('//', 1)[-1].split('/', 1)[-1])
        # Sign Payload
        signature = hmac.new(
            self.apiSecret.encode('utf-8'),
            msg=payload.encode('utf-8'),
            digestmod=hashlib.sha256
        ).hexdigest().upper()

        # Create Header Data
        headers['client_id'] = self.apiKey
        headers['sign'] = signature
        headers['t'] = str(now)
        headers['sign_method'] = 'HMAC-SHA256'
        headers['mode'] = 'cors'

        if self.token is not None:
            headers['access_token'] = self.token

        # Send Request to Cloud and Get Response
        if action == 'GET':
            response = requests.get(url, headers=headers)
            log.debug(
                "GET: URL=%s HEADERS=%s response code=%d text=%s token=%s", url, headers, response.status_code, response.text, self.token
            )
        else:
            log.debug(
                "POST: URL=%s HEADERS=%s DATA=%s", url, headers, body,
            )
            response = requests.post(url, headers=headers, data=body)
            log.debug(
                "POST RESPONSE: code=%d text=%s token=%s", response.status_code, response.text, self.token
            )

        # Check to see if token is expired
        if "token invalid" in response.text:
            if recursive is True:
                log.debug("Failed 2nd attempt to renew token - Aborting")
                return None
            log.debug("Token Expired - Try to renew")
            self._gettoken()
            if not self.token:
                log.debug("Failed to renew token")
                return None
            else:
                return self._tuyaplatform(uri, action, post, ver, True)

        try:
            response_dict = json.loads(response.content.decode())
            self.error = None
        except:
            try:
                response_dict = json.loads(response.content)
            except:
                self.error = error_json(
                    ERR_CLOUDKEY,
                    "Cloud _tuyaplatform() invalid response: %r" % response.content,
                )
                return self.error
        # Check to see if token is expired
        return response_dict

    def _gettoken(self):
        # Get Oauth Token from tuyaPlatform
        self.token = None
        response_dict = self._tuyaplatform('token?grant_type=1')

        if not response_dict or 'success' not in response_dict or not response_dict['success']:
            self.error = error_json(
                ERR_CLOUDTOKEN,
                "Cloud _gettoken() failed: %r" % response_dict['msg'],
            )
            return self.error

        if 't' in response_dict:
            # round it to 2 minutes to try and factor out any processing delays
            self.server_time_offset = round( ((response_dict['t'] / 1000.0) - time.time()) / 120 )
            self.server_time_offset *= 120
            log.debug("server_time_offset: %r", self.server_time_offset)

        self.token = response_dict['result']['access_token']
        return self.token

    def _getuid(self, deviceid=None):
        # Get user ID (UID) for deviceid
        if not self.token:
            return self.error
        if not deviceid:
            return error_json(
                ERR_PARAMS,
                "_getuid() requires deviceID parameter"
            )
        uri = 'devices/%s' % deviceid
        response_dict = self._tuyaplatform(uri)

        if not response_dict['success']:
            if 'code' not in response_dict:
                response_dict['code'] = -1
            if 'msg' not in response_dict:
                response_dict['msg'] = 'Unknown Error'
            log.debug(
                "Error from Tuya Cloud: %r", response_dict['msg'],
            )
            return error_json(
                ERR_CLOUD,
                "Error from Tuya Cloud: Code %r: %r" % (response_dict['code'], response_dict['msg'])
            )

        uid = response_dict['result']['uid']
        return uid

    def cloudrequest(self, url, action=None, post=None, query=None):
        """
        Make a generic cloud request and return the results.

        Args:
          url:    Required.  The URL to fetch, i.e. "/v1.0/devices/0011223344556677/logs"
          action: Optional.  GET, POST, DELETE, or PUT.  Defaults to GET, unless POST data is supplied.
          post:   Optional.  POST body data.  Will be fed into json.dumps() before posting.
          query:  Optional.  A dict containing query string key/value pairs.
        """
        if not self.token:
            return self.error
        if action is None:
            action = 'POST' if post else 'GET'
        return self._tuyaplatform(url, action=action, post=post, ver=None, query=query)

    # merge device list 'result2' into 'result1'
    # if result2 has a device which is not in result1 then it will be added
    # if result2 has a key which does not exist or is empty in result1 then that key will be copied over
    def _update_device_list( self, result1, result2 ):
        for new_device in result2:
            if 'id' not in new_device or not new_device['id']:
                continue
            found = False
            for existing_device in result1:
                if 'id' in existing_device and existing_device['id'] == new_device['id']:
                    found = True
                    for k in new_device:
                        if k not in existing_device or not existing_device[k]:
                            existing_device[k] = new_device[k]
            if not found:
                result1.append( new_device )

    def _get_all_devices( self, uid=None, device_ids=None ):
        fetches = 0
        our_result = { 'result': [] }
        last_row_key = None
        has_more = True
        total = 0

        if uid:
            # get device list for specified user id
            query = {'page_size':'75', 'source_type': 'tuyaUser', 'source_id': uid}
            # API docu: https://developer.tuya.com/en/docs/cloud/dc413408fe?id=Kc09y2ons2i3b
            uri = '/v1.3/iot-03/devices'
            if device_ids:
                if isinstance( device_ids, tuple ) or isinstance( device_ids, list ):
                    query['device_ids'] = ','.join(device_ids)
                else:
                    query['device_ids'] = device_ids
        else:
            # get all devices
            query = {'size':'50'}
            # API docu: https://developer.tuya.com/en/docs/cloud/fc19523d18?id=Kakr4p8nq5xsc
            uri = '/v1.0/iot-01/associated-users/devices'

        while has_more:
            result = self.cloudrequest( uri, query=query )
            fetches += 1
            has_more = False

            if type(result) == dict:
                log.debug( 'Cloud response:' )
                log.debug( json.dumps( result, indent=2 ) )
            else:
                log.debug( 'Cloud response: %r', result )

            # format it the same as before, basically just moves result->devices into result
            for i in result:
                if i == 'result':
                    # by-user-id has the result in 'list' while all-devices has it in 'devices'
                    if 'list' in result[i] and 'devices' not in result[i]:
                        our_result[i] += result[i]['list']
                    elif 'devices' in result[i]:
                        our_result[i] += result[i]['devices']

                    if 'total' in result[i]: total = result[i]['total']
                    if 'last_row_key' in result[i]:
                        query['last_row_key'] = result[i]['last_row_key']
                    if 'has_more' in result[i]:
                        has_more = result[i]['has_more']
                else:
                    our_result[i] = result[i]

        our_result['fetches'] = fetches
        our_result['total'] = total

        return our_result

    def getdevices(self, verbose=False, oldlist=[], include_map=False):
        """
        Return dictionary of all devices.

        Args: 
            verbose - Returns raw JSON data from Tuya Cloud
            oldlist - List of devices from previous run
            include_map - Include the DPS mapping in the device list
        """
        old_devices = {}
        if oldlist:
            for dev in oldlist:
                dev_id = dev['id']
                old_devices[dev_id] = dev

        if self.apiDeviceID and self.use_old_device_list:
            json_data = {}
            uid_list = {}

            # apiDeviceID can be a comma-separated list, so process them all
            for dev_id in self.apiDeviceID.split(','):
                dev_id = dev_id.strip()
                if not dev_id:
                    continue
                uid = self._getuid( dev_id )
                if not uid:
                    # no user for this device?
                    continue
                if isinstance( uid, dict ):
                    # it's an error_json dict
                    return uid
                else:
                    uid_list[uid] = True

            if not uid_list:
                return error_json(
                    ERR_CLOUD,
                    "Unable to get uid for device list"
                )

            for uid in uid_list:
                # Use UID to get list of all Devices for User
                uri = 'users/%s/devices' % uid
                json_run = self._tuyaplatform(uri)
                # merge the dicts
                for k in json_run:
                    if (k not in json_data) or (k != 'result'):
                        # replace if key is not 'result'
                        json_data[k] = json_run[k]
                    else:
                        # merge 'result' keys
                        json_data[k] += json_run[k]
        else:
            json_data = self._get_all_devices()
            users = {}
            # loop through all devices and build a list of user IDs
            for dev in json_data['result']:
                if 'uid' in dev:
                    users[dev['uid']] = True
            if users:
                # we have at least 1 user id, so fetch the device list again to make sure we have the local key
                # this also gets us the gateway_id for child devices
                for uid in users.keys():
                    json_data2 = self._get_all_devices( uid=uid )
                    self._update_device_list( json_data['result'], json_data2['result'] )

        if verbose:
            return json_data
        elif not json_data or 'result' not in json_data:
            return error_json(
                ERR_CLOUD,
                "Unable to get device list"
            )

        self.getdevices_raw = json_data
        devs = json_data['result']
        changed_devices = []
        unchanged_devices = []

        # check to see if anything has changed.  if so, re-download factory-infos and DP mapping
        for dev in devs:
            dev_id = dev['id']
            if dev_id not in old_devices:
                # newly-added device
                changed_devices.append( dev )
                continue
            old = old_devices[dev_id]
            if 'key' not in old or old['key'] != dev['local_key']:
                # local key changed
                changed_devices.append( dev )
                continue
            if (('icon' not in old) and ('icon' in dev)) or (include_map and ('mapping' not in old or old['mapping'] is None)):
                # icon or mapping added
                changed_devices.append( dev )
                continue
            is_same = True
            for k in DEVICEFILE_SAVE_VALUES:
                if k in dev and k != 'icon' and k != 'last_ip' and (k not in old or old[k] != dev[k]):
                    is_same = False
                    break
            if not is_same:
                changed_devices.append( dev )
                continue
            unchanged_devices.append( old )

        if include_map:
            mappings = self.getmappings( changed_devices )
            for productid in mappings:
                for dev in changed_devices:
                    if 'product_id' in dev and dev['product_id'] == productid:
                        dev['mapping'] = mappings[productid]
                # also set unchanged devices just in case the mapping changed
                for dev in unchanged_devices:
                    if 'product_id' in dev and dev['product_id'] == productid:
                        dev['mapping'] = mappings[productid]

        log.debug( 'changed: %d', len(changed_devices) )
        log.debug( 'unchanged: %d', len(unchanged_devices) )

        # Filter to only Name, ID and Key
        return self.filter_devices( changed_devices ) + unchanged_devices

    def _get_hw_addresses( self, maclist, devices ):
        while devices:
            # returns id, mac, uuid (and sn if available)
            uri = 'devices/factory-infos?device_ids=%s' % (",".join(devices[:50]))
            result = self._tuyaplatform(uri)
            log.debug( json.dumps( result, indent=2 ) )
            if 'result' in result:
                for dev in result['result']:
                    if 'id' in dev:
                        dev_id = dev['id']
                        del dev['id']
                        maclist[dev_id] = dev
            devices = devices[50:]

    def filter_devices( self, devs, ip_list=None ):
        json_mac_data = {}
        # mutable json_mac_data will be modified
        self._get_hw_addresses( json_mac_data, [i['id'] for i in devs] )

        tuyadevices = []
        icon_host = 'https://images.' + self.urlhost.split( '.', 1 )[1] + '/'

        for i in devs:
            dev_id = i['id']
            item = {
                'name': '' if 'name' not in i else i['name'].strip(),
                'id': dev_id,
                'key': '' if 'local_key' not in i else i['local_key'],
                'mac': '' if 'mac' not in i else i['mac']
            }

            if dev_id in json_mac_data:
                for k in ('mac','uuid','sn'):
                    if k in json_mac_data[dev_id]:
                        item[k] = json_mac_data[dev_id][k]

            if ip_list and 'mac' in item and item['mac'] in ip_list:
                item['ip'] = ip_list[item['mac']]

            for k in DEVICEFILE_SAVE_VALUES:
                if k in i:
                    if k == 'icon':
                        item[k] = icon_host + i[k]
                    else:
                        item[k] = i[k]

            if 'gateway_id' in i:
                k = 'gateway_id'
                item[k] = i[k]

            tuyadevices.append(item)

        return tuyadevices

    def _getdevice(self, param='status', deviceid=None):
        if not self.token:
            return self.error
        if not deviceid:
            return error_json(
                ERR_PARAMS,
                "Missing DeviceID Parameter"
            )
        uri = 'iot-03/devices/%s/%s' % (deviceid, param)
        response_dict = self._tuyaplatform(uri)

        if not response_dict['success']:
            log.debug(
                "Error from Tuya Cloud: %r", response_dict['msg'],
            )
        return response_dict

    def getstatus(self, deviceid=None):
        """
        Get the status of the device.
        """
        return self._getdevice('status', deviceid)

    def getfunctions(self, deviceid=None):
        """
        Get the functions of the device.
        """
        return self._getdevice('functions', deviceid)

    def getproperties(self, deviceid=None):
        """
        Get the properties of the device.
        """
        return self._getdevice('specification', deviceid)

    def getdps(self, deviceid=None):
        """
        Get the specifications including DPS IDs of the device.
        """
        if not self.token:
            return self.error
        if not deviceid:
            return error_json(
                ERR_PARAMS,
                "Missing DeviceID Parameter"
            )
        uri = 'devices/%s/specifications' % (deviceid)
        response_dict = self._tuyaplatform(uri, ver='v1.1')

        if not response_dict['success']:
            log.debug(
                "Error from Tuya Cloud: %r", response_dict['msg'],
            )
        return response_dict

    def sendcommand(self, deviceid=None, commands=None, uri='iot-03/devices/'):
        """
        Send a command to the device
        """
        if not self.token:
            return self.error
        if (not deviceid) or (not commands):
            return error_json(
                ERR_PARAMS,
                "Missing DeviceID and/or Command Parameters"
            )
        uri += '%s/commands' % (deviceid)
        response_dict = self._tuyaplatform(uri,action='POST',post=commands)

        if not response_dict['success']:
            log.debug(
                "Error from Tuya Cloud: %r", response_dict['msg'],
            )
        return response_dict

    def getconnectstatus(self, deviceid=None):
        """
        Get the device Cloud connect status.
        """
        if not self.token:
            return self.error
        if not deviceid:
            return error_json(
                ERR_PARAMS,
                "Missing DeviceID Parameter"
            )
        uri = 'devices/%s' % (deviceid)
        response_dict = self._tuyaplatform(uri, ver='v1.0')

        if not response_dict['success']:
            log.debug("Error from Tuya Cloud: %r", response_dict['msg'])
        return(response_dict["result"]["online"])

    def getdevicelog(self, deviceid=None, start=None, end=None, evtype=None, size=0, max_fetches=50, start_row_key=None, params=None):
        """
        Get the logs for a device.
        https://developer.tuya.com/en/docs/cloud/0a30fc557f?id=Ka7kjybdo0jse

        Note: The cloud only returns logs for DPs in the "official" DPS list.
          If the device specifications are wrong then not all logs will be returned!
          This is a limitation of Tuya's servers and there is nothing we can do about it.

        Args:
          devid:  Required.  Device ID
          start:  Optional.  Get logs starting from this time.  Defaults to yesterday
          end:    Optional.  Get logs until this time.  Defaults to the current time
          evtype: Optional.  Limit to events of this type.  1 = Online, 7 = DP Reports.  Defaults to all events.
          size:   Optional.  Target number of log entries to return.  Defaults to 0 (all, up to max_fetches*100).
                               Actual number of log entries returned will be between "0" and "size * 2 - 1"
          max_fetches: Optional. Maximum number of queries to send to the server.  Tuya's server has a hard limit
                               of 100 records per query, so the maximum number of logs returned is "max_fetches * 100"
          start_row_key: Optional. The "next_row_key" from a previous run.
          params: Optional.  Additional values to include in the query string.  Defaults to an empty dict.

        Returns:
          Response from server
        """
        if not deviceid:
            return error_json(
                ERR_PARAMS,
                "Missing DeviceID Parameter"
            )

        # server expects times as unixtime * 1000
        if not end:
            end = int((time.time() + self.server_time_offset) * 1000)
        elif end < 0:
            end = int(((time.time() + self.server_time_offset) + (end * 86400) ) * 1000)
        else:
            end = Cloud.format_timestamp( end )
        if not start:
            start = end - (86400*1000)
        elif start < 0:
            start = int(((time.time() + self.server_time_offset) + (start * 86400) ) * 1000)
        else:
            start = Cloud.format_timestamp( start )
        if start > end:
            tmp = start
            start = end
            end = tmp
        if not evtype:
            # get them all by default
            # 1 = device online, 7 = DP report
            evtype = '1,2,3,4,5,6,7,8,9,10'
        elif type(evtype) == str:
            pass
        elif type(evtype) == bytes:
            evtype = evtype.decode('utf8')
        elif type(evtype) == int:
            evtype = str(evtype)
        elif type(evtype) == list or type(evtype) == tuple:
            evtype = ','.join( [str(i) for i in evtype] )
        else:
            raise ValueError( "Unhandled 'evtype' type %s - %r" % (type(evtype), evtype) )
        want_size = size
        if not size:
            size = 100
        elif size > 100:
            size = 100
            #if (want_size / size) * 2 > max_fetches:
            #    max_fetches = round( (want_size / size) * 2 ) + 1
        if not max_fetches or max_fetches < 1:
            max_fetches = 50
        params = {} if type(params) != dict else params.copy()
        if 'start_time' not in params:
            params['start_time'] = start
        if 'end_time' not in params:
            params['end_time'] = end
        if 'type' not in params:
            params['type'] = evtype
        if 'size' not in params:
            params['size'] = size
        if 'query_type' not in params:
            params['query_type'] = 1
        if start_row_key:
            params['start_row_key'] = start_row_key

        ret = self.cloudrequest( '/v1.0/devices/%s/logs' % deviceid, query=params)
        max_fetches -= 1
        fetches = 1

        if ret and 'result' in ret:
            # ret['result'] is a dict so the 'result' below will be a reference, not a copy
            result = ret['result']
            again = True
            next_row_key = ''
            while (
                    again and max_fetches and
                    'logs' in result and
                    'has_next' in result and result['has_next'] and
                    (not want_size or len(result['logs']) < size) and
                    'next_row_key' in result and result['next_row_key'] and next_row_key != result['next_row_key']
            ):
                again =	False
                max_fetches -= 1
                fetches += 1
                params['start_row_key'] = result['next_row_key']
                next_row_key = result['next_row_key']
                result['next_row_key'] = None
                result['has_next'] = False
                res = self.cloudrequest( '/v1.0/devices/%s/logs' % deviceid, query=params)
                if res and 'result' in res:
                    result2 = res['result']
                    if 'logs' in result2:
                        result['logs'] += result2['logs']
                        again = True
                    if 'has_next' in result2:
                        result['has_next'] = result2['has_next']
                    if 'next_row_key' in result2:
                        result['next_row_key'] = result2['next_row_key']
                else:
                    break

            ret['fetches'] = fetches

        return ret

    @staticmethod
    def format_timestamp( ts ):
        # converts a 10-digit unix timestamp to the 13-digit stamp the servers expect
        if type(ts) != int:
            if len(str(int(ts))) == 10:
                ts = int( ts * 1000 )
            else:
                ts = int( ts )
        elif len(str(ts)) == 10:
            ts *= 1000
        return ts

    @staticmethod
    def _build_mapping( src, dst ):
        # merge multiple DPS sets from result['status'] and result['functions'] into a single result
        for mapp in src:
            try:
                code = mapp['code']
                dp_id = code if 'dp_id' not in mapp else str(mapp['dp_id'])
                if dp_id in dst:
                    continue
                data = { 'code': code, 'type': mapp['type'] }
                if mapp['type'].lower() == 'string':
                    values = mapp['values']
                else:
                    try:
                        values = json.loads( mapp['values'] )
                    except:
                        values = mapp['values']
                if values and type(values) == dict and 'unit' in values:
                    if values['unit']:
                        # normalize some unicode and temperature units
                        # not sure what a good replacement for '份' is (seen in a pet feeder)
                        values['unit'] = values['unit'].replace('℉','°F').replace('℃','°C').replace('f','°F').replace('c','°C').replace('秒','s')

                # Tuya's 'JSON' mapping type is an ordered dict, but python's dict is not!  so, save the raw value as well
                if mapp['type'].lower() == 'json':
                    data['raw_values'] = mapp['values']
                data['values'] = values
                dst[dp_id] = data
            except:
                log.debug( 'Parse mapping item failed!', exc_info=True )

    def getmapping( self, productid, deviceid=None ):
        # return a mapping for the given product id, or download it from the cloud using a device id
        # Return value: None on failure, or a dict on success (may be an empty dict if device does not have DPs)
        if not self.mappings:
            self.mappings = {} #load_mappings()

        if productid in self.mappings:
            # already have this product id, so just return it
            return self.mappings[productid]

        if deviceid:
            # we do not have this product id yet, so download it via this device id
            result = self.getdps(deviceid)

            if result:
                if 'result' in result:
                    result = result['result']
                    dps = {}
                    # merge result['status'] and result['functions'] into a single result
                    if 'status' in result:
                        self._build_mapping( result['status'], dps )
                    if 'functions' in result:
                        self._build_mapping( result['functions'], dps )
                    self.mappings[productid] = dps
                    log.debug( 'Downloaded mapping for device %r: %r', deviceid, dps)
                elif ('code' in result and result['code'] == 2009) or ('msg' in result and result['msg'] == 'not support this device'):
                    # this device does not have any DPs!
                    self.mappings[productid] = {}

        if productid in self.mappings:
            # download success, so return it
            return self.mappings[productid]

        # no device id, or download failed
        return None

    def setmappings( self, mappings ):
        # sets an initial mapping set so we do not need to download everything
        if type(mappings) == dict:
            self.mappings = mappings

    def getmappings( self, devices ):
        # get all mappings for all tuya devices
        # returns a dict with product ids as keys
        if not self.mappings:
            self.mappings = {}

        for dev in devices:
            try:
                devid = dev['id']
                productid = dev['product_id']
            except:
                # we need both the device id and the product id to download mappings!
                continue

            if productid not in self.mappings:
                self.getmapping( productid, devid )

        return self.mappings


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/AtorchTemperatureControllerDevice.py

# TinyTuya Outlet Device
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya ATORCH-Temperature Controller (S1TW)

 Author: Benjamin DUPUIS
 For more information see https://github.com/poil

 Local Control Classes
    AtorchTemperatureController(...)
        See OutletDevice() for constructor arguments

 Functions
    AtorchTemperatureControllerDevice:
        get_energy_consumption()
        get_current()
        get_power()
        get_get_voltage()
        get_state()
        get_temp()
    Inherited
        json = status()                    # returns json payload
        set_version(version)               # 3.1 [default] or 3.3
        set_socketPersistent(False/True)   # False [default] or True
        set_socketNODELAY(False/True)      # False or True [default]
        set_socketRetryLimit(integer)      # retry count limit [default 5]
        set_socketTimeout(timeout)         # set connection timeout in seconds [default 5]
        set_dpsUsed(dps_to_request)        # add data points (DPS) to request
        add_dps_to_request(index)          # add data point (DPS) index set to None
        set_retry(retry=True)              # retry if response payload is truncated
        set_status(on, switch=1, nowait)   # Set status of switch to 'on' or 'off' (bool)
        set_value(index, value, nowait)    # Set int value of any index.
        heartbeat(nowait)                  # Send heartbeat to device
        updatedps(index=[1], nowait)       # Send updatedps command to device
        turn_on(switch=1, nowait)          # Turn on device / switch #
        turn_off(switch=1, nowait)         # Turn off
        set_timer(num_secs, nowait)        # Set timer for num_secs
        set_debug(toggle, color)           # Activate verbose debugging output
        set_sendWait(num_secs)             # Time to wait after sending commands before pulling response
        detect_available_dps()             # Return list of DPS available from device
        generate_payload(command, data)    # Generate TuyaMessage payload for command with data
        send(payload)                      # Send payload to device (do not wait for response)
        receive()
"""

from ..core import Device


class AtorchTemperatureControllerDevice(Device):
    """
    Represents a Tuya based Socket
    """

    DPS_MODE = '101'
    DPS_CUR_TEMP = '102'
    DPS_SWITCH_STATE = '103'
    DPS_CURRENT = '108'
    DPS_POWER = '109'
    DPS_VOLTAGE = '110'
    DPS_TEMP_UNIT = '118'
    DPS_TOTAL_POWER = '111' # kwh
    # TODO
    # DPS_HEATING_START_TEMP = 104
    # DPS_COOLING_START_TEMP = 105
    # DPS_HEATING_STOP_TEMP = 106
    # DPS_COOLING_STOP_TEMP = 107
    # DPS_POWER_COST = 112
    # DPS_OVER_VOLTAGE_LIMIT = 113
    # DPS_OVER_INTENSITY_LIMIT = 114
    # DPS_OVER_POWER_LIMIT = 115
    # DPS_CHILD_LOCK = 116 # bool
    # DPS_TEMP_CALIBRATION = 117
    # DPS_CURRENT_COST = 125

    def get_energy_consumption(self):
        data = self.status()
        return {**self.get_current(data), **self.get_power(data), **self.get_voltage(data)}

    def get_current(self, status_data=None):
        if status_data is None:
            status_data = self.status()

        current = status_data['dps'][self.DPS_CURRENT]

        return {'current_raw': current,
                'current_fmt': str(current) + ' mA', }

    def get_power(self, status_data=None):
        if status_data is None:
            status_data = self.status()

        power = status_data['dps'][self.DPS_POWER] / 100

        return {'power_raw': power,
                'power_fmt': str(power) + ' W', }

    def get_total_power(self, status_data=None):
        if status_data is None:
            status_data = self.status()

        power = status_data['dps'][self.DPS_TOTAL_POWER]

        return {'total_power_raw': power,
                'total_power_fmt': str(power) + ' W', }

    def get_voltage(self, status_data=None):
        if status_data is None:
            status_data = self.status()

        voltage = status_data['dps'][self.DPS_VOLTAGE] / 100

        return {'voltage_raw': voltage,
                'voltage_fmt': str(voltage) + ' V'}

    def get_temp_unit(self, status_data=None):
        if status_data is None:
            status_data = self.status()

        unit = status_data['dps'][self.DPS_TEMP_UNIT]
        return unit

    def get_temp(self, status_data=None):
        if status_data is None:
            status_data = self.status()

        temp = status_data['dps'][self.DPS_CUR_TEMP] / 10

        return {'cur_temp_raw': temp,
                'cur_temp_fmt': f"{str(temp)} {self.get_temp_unit()}"}

    def get_state(self):
        cur_mode = self.status()['dps'][self.DPS_MODE]
        if cur_mode == 'socket':
            return {
                    'mode': cur_mode,
                    'status': "on" if self.status()['dps'][self.DPS_SWITCH_STATE] else "off"
            }
        else:
            return {'mode': cur_mode}


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/BlanketDevice.py

# TinyTuya Outlet Device
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya Electric Heating Blanket

 Author: Leo Denham (https://github.com/leodenham)
 Tested: Goldair Platinum Electric Blanket GPFAEB-Q

 Local Control Classes
    BlanketDevice(...)
        See OutletDevice() for constructor arguments

 Functions
    BlanketDevice:
        get_feet_level()
        get_body_level()
        set_feet_level()
        set_body_level()
        get_feet_time()
        get_body_time()
        set_feet_time()
        set_body_time()
        get_feet_countdown()
        get_body_countdown()


    Inherited
        json = status()                    # returns json payload
        set_version(version)               # 3.1 [default] or 3.3
        set_socketPersistent(False/True)   # False [default] or True
        set_socketNODELAY(False/True)      # False or True [default]
        set_socketRetryLimit(integer)      # retry count limit [default 5]
        set_socketTimeout(timeout)         # set connection timeout in seconds [default 5]
        set_dpsUsed(dps_to_request)        # add data points (DPS) to request
        add_dps_to_request(index)          # add data point (DPS) index set to None
        set_retry(retry=True)              # retry if response payload is truncated
        set_status(on, switch=1, nowait)   # Set status of switch to 'on' or 'off' (bool)
        set_value(index, value, nowait)    # Set int value of any index.
        heartbeat(nowait)                  # Send heartbeat to device
        updatedps(index=[1], nowait)       # Send updatedps command to device
        turn_on(switch=1, nowait)          # Turn on device / switch #
        turn_off(switch=1, nowait)         # Turn off
        set_timer(num_secs, nowait)        # Set timer for num_secs
        set_debug(toggle, color)           # Activate verbose debugging output
        set_sendWait(num_secs)             # Time to wait after sending commands before pulling response
        detect_available_dps()             # Return list of DPS available from device
        generate_payload(command, data)    # Generate TuyaMessage payload for command with data
        send(payload)                      # Send payload to device (do not wait for response)
        receive()
"""

from ..core import Device, error_json, ERR_RANGE


class BlanketDevice(Device):
    """
    Represents a Tuya based Electric Blanket Device
    """
    DPS = 'dps'
    DPS_BODY_LEVEL = '14'
    DPS_FEET_LEVEL = '15'
    DPS_BODY_TIME = '16'
    DPS_FEET_TIME = '17'
    DPS_BODY_COUNTDOWN = '18'
    DPS_FEET_COUNTDOWN = '19'
    LEVEL_PREFIX = 'level_'

    def _number_to_level(self, num):
        return f'{self.LEVEL_PREFIX}{num+1}'
    
    def _level_to_number(self, level):
        return int(level.split(self.LEVEL_PREFIX)[1]) - 1

    def get_feet_level(self, status_data=None):
        if status_data is None:
            status_data = self.status()
        
        current = self._level_to_number(status_data[self.DPS][self.DPS_FEET_LEVEL])
        return current

    def get_body_level(self, status_data=None):
        if status_data is None:
            status_data = self.status()
        
        current = self._level_to_number(status_data[self.DPS][self.DPS_BODY_LEVEL])
        return current

    def set_feet_level(self, num):
        if (num < 0 or num > 6):
            return error_json(
                ERR_RANGE, "set_feet_level: The value for the level needs to be between 0 and 6."
            )
        return self.set_value(self.DPS_FEET_LEVEL, self._number_to_level(num))

    def set_body_level(self, num):
        if (num < 0 or num > 6):
            return error_json(
                ERR_RANGE, "set_body_level: The value for the level needs to be between 0 and 6."
            )
        return self.set_value(self.DPS_BODY_LEVEL, self._number_to_level(num))

    def get_feet_time(self, status_data=None):
        if status_data is None:
            status_data = self.status()
        
        current = status_data[self.DPS][self.DPS_FEET_TIME]
        return current.replace('h', '')

    def get_body_time(self, status_data=None):
        if status_data is None:
            status_data = self.status()
        
        current = status_data[self.DPS][self.DPS_BODY_TIME]
        return current.replace('h', '')

    def set_feet_time(self, num):
        if (num < 1 or num > 12):
            return error_json(
                ERR_RANGE, "set_feet_time: The value for the time needs to be between 1 and 12."
            )
        return self.set_value(self.DPS_FEET_TIME, f"{num}h")

    def set_body_time(self, num):
        if (num < 1 or num > 12):
            return error_json(
                ERR_RANGE, "set_body_time: The value for the time needs to be between 1 and 12."
            )
        return self.set_value(self.DPS_BODY_TIME, f"{num}h")

    def get_feet_countdown(self, status_data=None):
        if status_data is None:
            status_data = self.status()
        
        current = status_data[self.DPS][self.DPS_FEET_COUNTDOWN]
        return current

    def get_body_countdown(self, status_data=None):
        if status_data is None:
            status_data = self.status()
        
        current = status_data[self.DPS][self.DPS_BODY_COUNTDOWN]
        return current



=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/ClimateDevice.py

from tinytuya.core import Device

"""
 Python module to interface with Tuya Portable Air Conditioner devices

 Local Control Classes
    ClimateDevice(..., version=3.3)
        This class uses a default version of 3.3
        See OutletDevice() for the other constructor arguments

 Functions
    ClimateDevice:
        status_json()
        get_room_temperature()
        get_target_temperature()
        set_target_temperature()
        get_operating_mode()
        set_operating_mode()
        get_fan_speed()
        set_fan_speed()
        get_current_state()
        get_timer()
        set_timer()
        get_temperature_unit()
        set_temperature_unit()
    Inherited
        json = status()                    # returns json payload
        set_version(version)               # 3.1 [default] or 3.3
        set_socketPersistent(False/True)   # False [default] or True
        set_socketNODELAY(False/True)      # False or True [default]
        set_socketRetryLimit(integer)      # retry count limit [default 5]
        set_socketTimeout(timeout)         # set connection timeout in seconds [default 5]
        set_dpsUsed(dps_to_request)        # add data points (DPS) to request
        add_dps_to_request(index)          # add data point (DPS) index set to None
        set_retry(retry=True)              # retry if response payload is truncated
        set_status(on, switch=1, nowait)   # Set status of switch to 'on' or 'off' (bool)
        set_value(index, value, nowait)    # Set int value of any index.
        heartbeat(nowait)                  # Send heartbeat to device
        updatedps(index=[1], nowait)       # Send updatedps command to device
        turn_on(switch=1, nowait)          # Turn on device / switch #
        turn_off(switch=1, nowait)         # Turn off
        set_timer(num_secs, nowait)        # Set timer for num_secs
        set_debug(toggle, color)           # Activate verbose debugging output
        set_sendWait(num_secs)             # Time to wait after sending commands before pulling response
        detect_available_dps()             # Return list of DPS available from device
        generate_payload(command, data)    # Generate TuyaMessage payload for command with data
        send(payload)                      # Send payload to device (do not wait for response)
        receive()
"""


class ClimateDevice(Device):
    """
    Represents a Tuya based Air Conditioner
    """

    DPS_POWER = "1"
    DPS_SET_TEMP = "2"
    DPS_CUR_TEMP = "3"
    DPS_MODE = "4"
    DPS_FAN = "5"
    DPS_TEMP_UNIT = "19"
    DPS_TIMER = "22"
    DPS_SLEEP_PRESET = "25"
    DPS_SWING = "30"
    DPS_STATE = "101"

    def __init__(self, *args, **kwargs):
        # set the default version to 3.3 as there are no 3.1 devices
        if 'version' not in kwargs or not kwargs['version']:
            kwargs['version'] = 3.3
        super(ClimateDevice, self).__init__(*args, **kwargs)

    def status_json(self):
        """Wrapper around status() that replace DPS indices with human readable labels."""
        status = self.status()["dps"]
        return {
            "Power On": status[self.DPS_POWER],
            "Set temperature": status[self.DPS_SET_TEMP],
            "Current temperature": status[self.DPS_CUR_TEMP],
            "Fan speed": status[self.DPS_FAN],
            "Temperature unit": status[self.DPS_TEMP_UNIT],
            "Sleep preset On": status[self.DPS_SLEEP_PRESET],
            "Swing On": status[self.DPS_SWING],
            "Operating mode": status[self.DPS_STATE],
            "Timer left": status[self.DPS_TIMER],
        }

    def get_room_temperature(self):
        status = self.status()["dps"]
        return status[self.DPS_CUR_TEMP]

    def get_target_temperature(self):
        status = self.status()["dps"]
        return status[self.DPS_SET_TEMP]

    def set_target_temperature(self, t):
        def is_float(f):
            try:
                float(f)
                return True
            except ValueError:
                return False

        # non numeric values can confuse the unit
        if not is_float(t):
            return

        self.set_value(self.DPS_SET_TEMP, t)

    def get_operating_mode(self):
        status = self.status()["dps"]
        return status[self.DPS_MODE]

    def set_operating_mode(self, mode):
        if mode not in ("cold", "hot", "dehumidify"):
            return
        self.set_value(self.DPS_MODE, mode)

    def get_fan_speed(self):
        status = self.status()["dps"]
        return status[self.DPS_FAN]

    def set_fan_speed(self, value):
        if value not in ("auto", "low", "middle", "high"):
            return
        self.set_value(self.DPS_FAN, value)

    def get_current_state(self):
        status = self.status()["dps"]
        return "On" if status[self.DPS_POWER] else "Off"

    def get_timer(self):
        status = self.status()["dps"]
        return status[self.DPS_TIMER]

    def set_timer(self, delay):
        if delay < 0 or delay > 24:
            return
        self.set_value(self.DPS_TIMER, delay)

    def get_temperature_unit(self):
        status = self.status()["dps"]
        return status[self.DPS_TEMP_UNIT]

    def set_temperature_unit(self, unit):
        # no matter what the unit is, the Fral Supercool 19.2SC report temperatures in Celsius. The unit seems to influence only the display on the unit.
        self.set_value(self.DPS_TEMP_UNIT, unit)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/ColorfulX7Device.py

# TinyTuya LED Music Controller Device
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya Colorful-X7:
 Tuya Smart WiFi Zigbee BT Colorful X7 LED Music Controller SP107E 
 Matrix 1024 Pixels LED Panel Light Music Spectrum Controller

 Author: Ahmed Chehaibi (https://github.com/CheAhMeD)

 Local Control Classes
    ColorfulX7Device(...)
        See OutletDevice() for constructor arguments

 Functions
    ColorfulX7Device:
        is_on()                            # returns the state of the device (True=On, False=Off)
        switch_off()                       # turns off the device
        switch_on()                        # turns on the device
        set_mode(mode)                     # sets the mode to white | colour | scene | music | screen
        set_color(r, g, b)                 # sets the colour 
        set_countdown(value)               # sets the countdown timer value (max 86400)
        set_segments_number(number)        # sets the number of segments in led strip|matrix (1 to 64)
        set_leds_PerSegment(number)        # sets the number of leds per segment in led strip|matrix (1 to 150)
        set_rgb_order(order)               # sets the RGB order of the leds to  ORDER_RGB | ORDER_RBG | ORDER_GRB | ORDER_GBR | ORDER_BRG | ORDER_BGR
        set_work_mode(mode)                # sets the work mode to CLOSE | FIX_COLOR | DYNAMIC | MUSIC | SCREEN
        set_color_rgb(r, g, b)             # sets the colour in CLOSE | FIX_COLOR | DYNAMIC work modes
        set_brightness(value)              # sets the brightness in CLOSE | FIX_COLOR | DYNAMIC work modes
        set_speed(value)                   # sets the speed in DYNAMIC work mode
        set_dynamic_mode(mode)             # sets the scene type in DYNAMIC work mode
        set_music_mode(mode)               # sets the scene type in MUSIC work mode
        set_sensitivity(value)             # sets the MIC sensitivity in MUSIC | SCREEN work modes
        set_music_RGBColor(r, g, b)        # sets the colour in some scenes in MUSIC | SCREEN work modes
        set_led_brand(brand)               # sets the Leds brand to WS2811 | DMX512 | FW1935
        set_screen_mode(mode)              # sets the scene type in SCREEN work mode
        set_fallingDot_color(r, g, b)      # sets the falling dot color in some scenes in MUSIC work mode

    Inherited
        json = status()                    # returns json payload
        set_version(version)               # 3.1 [default] or 3.5
        set_socketPersistent(False/True)   # False [default] or True
        set_socketNODELAY(False/True)      # False or True [default]
        set_socketRetryLimit(integer)      # retry count limit [default 5]
        set_socketTimeout(timeout)         # set connection timeout in seconds [default 5]
        set_dpsUsed(dps_to_request)        # add data points (DPS) to request
        add_dps_to_request(index)          # add data point (DPS) index set to None
        set_retry(retry=True)              # retry if response payload is truncated
        set_status(on, switch=1, nowait)   # Set status of switch to 'on' or 'off' (bool)
        set_value(index, value, nowait)    # Set int value of any index.
        heartbeat(nowait)                  # Send heartbeat to device
        updatedps(index=[1], nowait)       # Send updatedps command to device
        turn_on(switch=1, nowait)          # Turn on device / switch #
        turn_off(switch=1, nowait)         # Turn off
        set_timer(num_secs, nowait)        # Set timer for num_secs
        set_debug(toggle, color)           # Activate verbose debugging output
        set_sendWait(num_secs)             # Time to wait after sending commands before pulling response
        detect_available_dps()             # Return list of DPS available from device
        generate_payload(command, data)    # Generate TuyaMessage payload for command with data
        send(payload)                      # Send payload to device (do not wait for response)
        receive()
"""

from ..core import *
import colorsys

class ColorfulX7Device(Device):
    """
    Represents a Tuya based LED Music Controller
    """
    DPS_MODEL = "Colorful-X7"
    DPS = 'dps'
    DPS_INDEX_ON             = "20"
    DPS_INDEX_MODE           = "21"
    DPS_INDEX_MODE_ENUM      = ["white","colour","scene","music","screen"]
    DPS_INDEX_COLOUR         = "24"
    DPS_INDEX_COUNTDOWN      = "26"
    DPS_INDEX_SEG_NUM        = "101"
    DPS_INDEX_SEG_LED_NUM    = "102"
    DPS_INDEX_RGB_ORDER      = "103"
    DPS_INDEX_RGB_ORDER_ENUM = ["ORDER_RGB","ORDER_RBG","ORDER_GRB","ORDER_GBR","ORDER_BRG","ORDER_BGR"]
    DPS_INDEX_WORKMODE       = "104"
    DPS_INDEX_WORKMODE_ENUM  = ["CLOSE","FIX_COLOR","DYNAMIC","MUSIC","SCREEN"]
    DPS_INDEX_COLOUR_RGB     = "105"
    DPS_INDEX_BRIGHTNESS     = "106"
    DPS_INDEX_DYNAMIC_INTV   = "107"
    DPS_INDEX_DYNAMIC_MODE   = "108"
    DPS_INDEX_MUSIC_MODE     = "109"
    DPS_INDEX_SENSITIVITY    = "110"
    DPS_INDEX_MUSIC_COLOR    = "111"
    DPS_INDEX_LED_BRAND      = "112"
    #NOTE: the Brand ENUM should contain more brands but Tuya Smart App only shows
    #the following brands:
    DPS_INDEX_LED_BRAND_ENUM = ["WS2811","DMX512","FW1935"]
    DPS_INDEX_SCREEN_POINT_COLOR = "113"
    DPS_INDEX_SCREEN_MODE    = "114"
    DPS_INDEX_MUSIC_DATA     = "27"

    def __init__(self, *args, **kwargs):
        # set the default version to None so we do not immediately connect and call status()
        if 'version' not in kwargs or not kwargs['version']:
            kwargs['version'] = None
        super(ColorfulX7Device, self).__init__(*args, **kwargs)

    @staticmethod
    def _hsv_to_hexValue(hsvValue):
        '''
        Convert an HSV value to the hex representation expected by Colorful-X7
        in hhhhssssvvvv format.

        '''
        hexValue = ""
        hsvArray = [int(hsvValue[0] * 360), int(hsvValue[1] * 1000), int(hsvValue[2] * 1000)]
        for value in hsvArray:
            temp = str(hex(int(value))).replace("0x", "")
            while len(temp) < 4:
                temp = "0" + temp
            hexValue = hexValue + temp
        return hexValue

    @staticmethod
    def _rgb_to_hexValue(r, g, b):
        '''
        Convert an RGB value to the hex representation expected by Colorful-X7
        in #RRGGBB format.

        '''
        return '#{:02x}{:02x}{:02x}'.format(r, g, b)
    
    def switch_off(self):
        self.turn_off(self.DPS_INDEX_ON)

    def switch_on(self):
        self.turn_on(self.DPS_INDEX_ON)
        
    def is_on(self):
        data = self.status()
        return data[self.DPS][self.DPS_INDEX_ON]

    def set_mode(self, mode):
        if mode not in self.DPS_INDEX_MODE_ENUM:
            log.error(
                "set_mode: Unsupporetd mode {}. Supported modes {}".format(mode, self.DPS_INDEX_MODE_ENUM)
            )
            return None
        
        self.set_value(self.DPS_INDEX_MODE, mode)
    
    def set_color(self, r, g, b):
        if not 0 <= r <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for red needs to be between 0 and 255.",
            )
        if not 0 <= g <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for green needs to be between 0 and 255.",
            )
        if not 0 <= b <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for blue needs to be between 0 and 255.",
            )

        hsv = colorsys.rgb_to_hsv(r / 255.0, g / 255.0, b / 255.0)

        self.set_value(self.DPS_INDEX_COLOUR, ColorfulX7Device._hsv_to_hexValue(hsv))
    
    def set_countdown(self, value):
        if not 0 <= value <= 86400:
            return error_json(
                ERR_RANGE,
                "set_countdown: The value for countdown needs to be between 0 and 86400 (s)."
            )
        self.set_value(self.DPS_INDEX_COUNTDOWN, value)
    
    def set_segments_number(self, number):
        if not 1 <= number <= 64:
            return error_json(
                ERR_RANGE,
                "set_segments_number: The number of segments needs to be between 1 and 64."
            )
        self.set_value(self.DPS_INDEX_SEG_NUM, number)
    
    def set_leds_PerSegment(self, number):
        if not 1 <= number <= 150:
            return error_json(
                ERR_RANGE,"set_leds_PerSegment: The number of Leds per segment needs to be between 1 and 150."
            )
        self.set_value(self.DPS_INDEX_SEG_LED_NUM, number)
    
    def set_rgb_order(self, order):
        if order not in self.DPS_INDEX_RGB_ORDER_ENUM:
            log.error(
                "set_rgb_order: Unsupporetd RGB Order {}. Supported RGB Orders {}".format(order, self.DPS_INDEX_RGB_ORDER_ENUM)
            )
            return
        self.set_value(self.DPS_INDEX_RGB_ORDER, order)

    def set_work_mode(self, mode):
        if mode not in self.DPS_INDEX_WORKMODE_ENUM:
            log.error(
                "set_work_mode: Unsupporetd work mode {}. Supported modes {}".format(mode, self.DPS_INDEX_WORKMODE_ENUM)
            )
            return
        
        self.set_value(self.DPS_INDEX_WORKMODE, mode)
    
    def set_color_rgb(self, r, g, b):
        if not 0 <= r <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for red needs to be between 0 and 255.",
            )
        if not 0 <= g <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for green needs to be between 0 and 255.",
            )
        if not 0 <= b <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for blue needs to be between 0 and 255.",
            )
        
        rgbHexValue = ColorfulX7Device._rgb_to_hexValue(r, g, b)
        self.set_value(self.DPS_INDEX_COLOUR_RGB, rgbHexValue)

    def set_brightness(self, value):
        if not 0 <= value <= 100:
            return error_json(
                ERR_RANGE,
                "set_brightness: The value for brightness needs to be between 0 and 100 (%)."
            )
            
        self.set_value(self.DPS_INDEX_BRIGHTNESS, value)

    def set_speed(self, value):
        if not 0 <= value <= 100:
            return error_json(
                ERR_RANGE,
                "set_speed: The value for speed needs to be between 0 and 100 (ms)."
            )
        self.set_value(self.DPS_INDEX_DYNAMIC_INTV, value)

    def set_dynamic_mode(self, mode):
        '''
        Dynamic Mode:
        choose between 180 available modes (in the App)
        modes don't have a name they are represented by numbers (1 to 180)

        If dynamic mode is enabled (workmode = DYNAMIC)
        you can use set_dynamic_mode, set_speed and set_brightness
        using the other functions won't have any effect

        '''
        if not 1 <= mode <= 180:
            return error_json(
                ERR_RANGE,
                "set_dynamic_mode: The dynamic mode needs to be between 1 and 180."
            )
        self.set_value(self.DPS_INDEX_DYNAMIC_MODE, mode)

    def set_music_mode(self, mode):
        '''
        Music Mode:
        chooses between 22 available strip modes
        modes don't have a name they are represented by numbers

        If music mode is enabled (workmode = MUSIC)
        we can use set_music_mode, set_sensitivity and set_music_RGBColor (only for some modes!!)
        using the other functions won't have any effect

        '''
        if not 1 <= mode <= 22:
            return error_json(
                ERR_RANGE,
                "set_music_mode: The music mode needs to be between 1 and 22."
            )
        self.set_value(self.DPS_INDEX_MUSIC_MODE, mode)

    def set_sensitivity(self, value):
        if not 0 <= value <= 100:
            return error_json(
                ERR_RANGE,
                "set_sensitivity: The music sensitivity needs to be between 0 and 100."
            )
        self.set_value(self.DPS_INDEX_SENSITIVITY, value)

    def set_music_RGBColor(self, r, g, b):
        if not 0 <= r <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for red needs to be between 0 and 255.",
            )
        if not 0 <= g <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for green needs to be between 0 and 255.",
            )
        if not 0 <= b <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for blue needs to be between 0 and 255.",
            )
        
        rgbHexValue = ColorfulX7Device._rgb_to_hexValue(r, g, b)
        self.set_value(self.DPS_INDEX_MUSIC_COLOR, rgbHexValue)

    def set_led_brand(self, brand):
        if brand not in self.DPS_INDEX_LED_BRAND_ENUM:
            log.error(
                "set_led_brand: Unsupporetd LED brand {}. Supported brands {}".format(brand, self.DPS_INDEX_LED_BRAND)
            )
            return
        self.set_value(self.DPS_INDEX_LED_BRAND, brand)

    def set_screen_mode(self, mode):
        '''
        Screen Mode: 
        Like Music mode but for matrix display
        choose between 30 available matrix modes
        modes don't have a name they are represented by numbers

        If Screen mode is enabled (workmode = SCREEN)
        we can use set_screen_mode, set_sensitivity and set_fallingDot_color
        using the other functions won't have any effect

        '''
        if not 1 <= mode <= 30:
            return error_json(
                ERR_RANGE,
                "set_screen_mode: The screen mode needs to be between 1 and 30."
            )
        self.set_value(self.DPS_INDEX_SCREEN_MODE, mode)

    def set_fallingDot_color(self, r, g, b):
        if not 0 <= r <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for red needs to be between 0 and 255.",
            )
        if not 0 <= g <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for green needs to be between 0 and 255.",
            )
        if not 0 <= b <= 255:
            return error_json(
                ERR_RANGE,
                "set_color: The value for blue needs to be between 0 and 255.",
            )

        hsv = colorsys.rgb_to_hsv(r / 255.0, g / 255.0, b / 255.0)
        self.set_value(self.DPS_INDEX_SCREEN_POINT_COLOR, ColorfulX7Device._hsv_to_hexValue(hsv))


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/DoorbellDevice.py

# TinyTuya Doorbell Device
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya WiFi smart devices

 Author: JonesMeUp
 Tested: LSC-Bell 8S(AKV300_8M)
 Note: Without hack the device can't be used offline. 
       With hack the DoorbellDevice is useless.
        
 For more information see https://github.com/jasonacox/tinytuya
    https://github.com/jasonacox/tinytuya/issues/162 

Offline Device
    This DoorbellDevice works only if the device is online. Most stay
    offline to preserve the battery.

 Local Control Classes
    DoorbellDevice(...)
        See OutletDevice() for constructor arguments

 Functions
    DoorbellDevice:
        set_basic_indicator(bool):
        set_volume(1-10):
        set_motion_area(x,y,lenX, lenY)
        set_motion_area_switch(bool)
"""

from ..core import Device

class DoorbellDevice(Device):
    """
    Represents a Tuya based Video-Doorbell.
    """
    DPS_2_STATE = {
        "101": "basic_indicator",     # Boolean                                                (status indicator)
        "103": "basic_flip",          # Boolean                                                (flip video vertically)
        "104": "basic_osd",           # Boolean                                                (timestap on video)
        "106": "motion_sensitivity",  # Enum ["0","1","2"]                                     (low, medium, high)
        "108": "basic_nightvision",   # Enum ["0","1","2"]                                     (auto, off, on)
        "109": "sd_storge",           # String ["maxlen":255]                                  (capacity|used|free) e.g: '258048|50176|207872'
        "110": "sd_status",           # Integer ["min":1,"max": 5,"scale":1,"step":1]
        "111": "sd_format",           # Boolean
        "115": "movement_detect_pic", # Raw
        "117": "sd_format_state",     # Integer ["min":-20000,"max":20000,"scale":1,"step":1]
        "134": "motion_switch",       # Boolean                                               (alarm on motion detection)
        "136": "doorbell_active",     # String ["maxlen":255]                                 (doorbell was pressed)
        "150": "record_switch",       # Boolean                                               (false = no recording)
        "151": "record_mode",         # Enum ["1","2"]                                        (1=on event, 2=always)
        "154": "doorbell_pic",        # Raw                                                   (picture of the device)
        "155": "doorbell_ring_exist", # Enum ["0","1"]
        "156": "chime_ring_tune",     # Enum ["1","2","3","4"]
        "157": "chime_ring_volume",   # Integer ["min":0,"max":100,"scale":1,"step":1]        (chime is an extrenal gong [433MhZ])
        "160": "basic_device_volume", # Integer ["min":1,"max": 10,"scale":0,"step":1]
        "165": "chime_settings",      # Enum ["0","2","3"]
        "168": "motion_area_switch",  # Boolean                                               (false = use full area)
        "169": "motion_area",         # String ["maxlen":255]                                 (x, y, xlen, ylen)
        "185": "alarm_message",       # String
    }
    DPS_2_FUNC = {
        "101": "basic_indicator",     # Boolean
        "103": "basic_flip",          # Boolean
        "104": "basic_osd",           # Boolean
        "106": "motion_sensitivity",  # Enum ["0","1","2"]
        "108": "basic_nightvision",   # Enum ["0","1","2"]
        "111": "sd_format",           # Boolean
        "134": "motion_switch",       # Boolean
        "150": "record_switch",       # Boolean
        "151": "record_mode",         # Enum ["1","2"]
        "155": "doorbell_ring_exist", # Enum ["0","1"]
        "156": "chime_ring_tune",     # Enum ["1","2","3","4"]
        "157": "chime_ring_volume",   # Integer ["min":0,"max":100,"scale":1,"step":1]
        "160": "basic_device_volume", # Integer ["min":1,"max": 10,"scale":0,"step":1]
        "165": "chime_settings",      # Enum ["0","2","3"]
        "168": "motion_area_switch",  # Boolean
        "169": "motion_area",         # String ["maxlen":255]
    }

    def set_basic_indicator(self, val=True, nowait=False):
        """ Set the basic incicator """
        self.set_value(101, bool(val), nowait)

    def set_volume(self, vol=10, nowait=False):
        """ Set the doorbell volume """
        if vol < 3:
            vol = 3 # Nothing to hear below 3
        if vol > 10:
            vol = 10        
        self.set_value(160, int(vol), nowait)

    def set_motion_area(self, x=0,y=0,xlen=50, ylen=100, nowait=False):
        """ set the area of motion detection [%] """
        if x <   0: x = 0
        if y <   0: y = 0
        if x > 100: x = 100
        if y > 100: y = 100
        if xlen <   0: xlen =   0
        if ylen <   0: ylen =   0
        if xlen > 100: xlen = 100
        if ylen > 100: ylen = 100
        if x+xlen >100: 
           x    = 25
           xlen = 75
        if y+ylen >100: 
           y    = 25
           ylen = 75
        data = '{"num":1,"region0":{"x":'+str(x)+',"y":'+str(y)+',"xlen":'+str(xlen)+',"ylen":'+str(ylen)+'}}'
        self.set_value(169, data, nowait)

    def set_motion_area_switch(self, useArea=False, nowait=False):
        """ use the area of motion detection on/off """
        self.set_value(168, bool(useArea), nowait)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/IRRemoteControlDevice.py

# TinyTuya Contrib IRRemoteControlDevice Module
# -*- coding: utf-8 -*-
"""
 A community-contributed Python module to add support for Tuya WiFi smart universal remote control simulators

 This module attempts to provide everything needed so there is no need to import the base tinytuya module

 Module Author: Alexey 'Cluster' Avdyukhin (https://github.com/clusterm)
 Rewritten by uzlonewolf (https://github.com/uzlonewolf) for new devices and IR format conversion

 Local Control Classes
    IRRemoteControlDevice(..., version=3.3)
        This class uses a default version of 3.3
        See OutletDevice() for the other constructor arguments

    Functions:
        ir = IRRemoteControlDevice(..., control_type=None)
            -> will immediately connect to the device to try and detect the control type if control_type is not provided
               control_type=1 for older devices using DPS 201/202
               control_type=2 for newer devices using DPS 1-13

        ir.detect_control_type()
            -> polls device status to try and detect the control type

        ir.send_command( mode, data={} )
            -> sends a command to the device
               when mode is 'send', data is parsed for the data to send
                   data = { "base64_code": "..." } or
                   data = { "head": "...", "key": "..." }
               all other commands are sent though as-is without data

        ir.study_start()
        ir.study_end()
            -> start or end a study session

        ir.receive_button( timeout )
            -> call this method and press button on real remote control to read its code in Base64 format
               timeout - maximum time to wait for button press

        ir.send_button( base64_code )
            -> simulate a learned (raw base64-encoded) button press

        ir.send_key( head, key )
            -> send a head/key pair

        ir.build_head( freq=38, bit_time=0, zero_time=0, one_time=0, bit_time_type=1, timings=[], convert_time=True )
            -> build a 'head' section
               'freq' is in kHz
               if bit_time, zero_time, or one_time evaluate to False, timings are taken from timings[] as needed
               if convert_time is True, timings are in microseconds and converted as needed.
                   when False, timings are sent as-is

        IRRemoteControlDevice.print_pulses ( pulses )
            -> pretty-print a sequence of pulses and gaps length

        IRRemoteControlDevice.base64_to_pulses ( code_base_64 )
            -> convert Base64-encoded button code to sequence of pulses and gaps length

        IRRemoteControlDevice.pulses_to_base64 ( pulses )
            -> convert sequence of pulses and gaps length to Base64-encoded button code

        IRRemoteControlDevice.head_key_to_pulses ( head='...', key='...' )
            -> convert head/key pair to sequence of pulses and gaps
               'head' can be None when the key is raw bytes in base64
               'key' must begin with '00' through 'FF' when it is not raw bytes in base64

        IRRemoteControlDevice.pulses_to_head_key ( pulses, fudge=0.1, freq=38 )
            -> attempts to pack a sequence of pulses and gaps into a head/key pair
               pulses/gaps within 10% (fudge=0.1) are assumed to be the same and are merged together

        IRRemoteControlDevice.hex_to_pulses ( code_hex )
            -> convert HEX-encoded button code to sequence of pulses and gaps length
               HEX-encoded codes are used in the Cloud API

        IRRemoteControlDevice.pulses_to_hex ( pulses )
            -> convert sequence of pulses and gaps length to HEX-encoded button code
               HEX-encoded codes are used in the Cloud API

        IRRemoteControlDevice.nec_to_pulses ( address, data=None )
            -> convert a 32-bit NEC button code (when data=None) or a 8/16-bit address and 8-bit data to sequence of pulses and gaps length
               address - a 32-bit NEC button code (when data=None), or a 8-bit or 16-bit address
               data - 8-bit data when address is 8-bit or 16-bit

        IRRemoteControlDevice.pulses_to_nec ( pulses )
            -> convert sequence of pulses and gaps length to a NEC button code
               returns an array of dicts containing 'type'="nec", 'address' and 'data' (if valid), 'uint32' raw data, and 'hex' hex-encoded data

        IRRemoteControlDevice.samsung_to_pulses ( address, data=None )
            -> similar to nec_to_pulses() but for the Samsung format (start pulse 4.5ms instead of 9ms)

        IRRemoteControlDevice.pulses_to_samsung ( pulses )
            -> similar to pulses_to_nec() but for the Samsung format
               returns same array of dict as pulses_to_nec() but with 'type'="samsung"

        IRRemoteControlDevice.pronto_to_pulses ( pronto )
            -> convert a Pronto code string to sequence of pulses and gaps length

        IRRemoteControlDevice.pulses_to_pronto ( pulses )
            -> convert sequence of pulses and gaps length to a Pronto code string

        IRRemoteControlDevice.width_encoded_to_pulses ( uint32, start_mark=9000, start_space=4500, pulse_one=563, pulse_zero=563,
          space_one=1688, space_zero=563, trailing_pulse=563, trailing_space=30000 )
            -> flexible uint32 to sequence of pulses encoder
               default values are for NEC format, set start_mark=4500 for Samsung format

        IRRemoteControlDevice.pulses_to_width_encoded ( pulses, start_mark=None, start_space=None, pulse_threshold=None, space_threshold=None )
            -> flexible space-width or pulse-width to uint32 decoder
               converts sequence of pulses to a 32-bit unsigned integer
               recommended *_threshold is `(length_of_zero + length_of_one) / 2`

"""

import base64
import json
import logging
import struct
import time

from ..core import Device, log, CONTROL

class IRRemoteControlDevice(Device):
    CMD_SEND_KEY_CODE = "send_ir"   # Command to start sending a key
    DP_SEND_IR        = "201"       # ir_send, send and report (read-write)
    DP_LEARNED_ID     = "202"       # ir_study_code, report only (read-only)
    DP_MODE           =   "1"
    DP_LEARNED_REPORT =   "2"
    DP_HEAD           =   "3"
    DP_KEY_CODE       =   "4"
    DP_KEY_CODE2      =   "5"
    DP_KEY_CODE3      =   "6"
    DP_KEY_CODE4      =  "11"
    DP_KEY_STUDY      =   "7"
    DP_KEY_STUDY2     =   "8"
    DP_KEY_STUDY3     =   "9"
    DP_KEY_STUDY4     =  "12"
    DP_SEND_DELAY     =  "10"
    DP_CODE_TYPE      =  "13"
    NSDP_CONTROL = "control"       # The control commands
    NSDP_STUDY_CODE = "study_code" # Report learned IR codes
    NSDP_IR_CODE = "ir_code"       # IR signal decoding2
    NSDP_KEY_CODE = "key_code"     # Remote key code
    NSDP_KEY_CODE2 = "key_code2"   # Remote key code 2
    NSDP_KEY_CODE3 = "key_code3"   # Remote key code 3
    NSDP_KEY_CODE4 = "key_code4"   # Remote key code 4
    NSDP_KEY_STUDY = "key_study"   # Send the learning code 1
    NSDP_KEY_STUDY2 = "key_study2" # Send the learning code 2
    NSDP_KEY_STUDY3 = "key_study3" # Send the learning code 3
    NSDP_KEY_STUDY4 = "key_study4" # Send the learning code 4
    NSDP_DELAY_TIME = "delay_time" # IR code transmission delay
    NSDP_TYPE = "type"             # The identifier of an IR library
    NSDP_DELAY = "delay"           # Actually used but not documented
    NSDP_HEAD = "head"             # Actually used but not documented
    NSDP_KEY1 = "key1"             # Actually used but not documented
    KEY1_SYMBOL_LIST = "@#$%^&*()QWRLTXKVNM{}[]JUP<>|=HS~" # Timing symbols used in key1

    def __init__(self, *args, **kwargs):
        # set the default version to 3.3 as there are no 3.1 devices
        if 'version' not in kwargs or not kwargs['version']:
            kwargs['version'] = 3.3

        control_type = 0
        if 'control_type' in kwargs:
            control_type = kwargs['control_type']
            del kwargs['control_type']

        super(IRRemoteControlDevice, self).__init__(*args, **kwargs)

        self.disabledetect = True
        self.control_type = control_type
        if not self.control_type:
            self.detect_control_type()

    def detect_control_type( self ):
        # This is more difficult than it seems.  Neither device responds to status() after
        #   a reboot until after a command is sent.  201 devices do not respond to study_end
        #   if they are already in that mode.
        old_timeout = self.connection_timeout
        old_persist = self.socketPersistent
        self.set_socketTimeout( 1 )
        self.set_socketPersistent( True )
        self.control_type = 1
        self.study_end()
        self.control_type = 2
        self.study_end()
        self.control_type = 0
        status = self.status()
        while status and 'dps' in status:
            # original devices using DPS 201/202
            if self.DP_SEND_IR in status['dps']:
                log.debug( 'Detected control type 1' )
                self.control_type = 1
            # newer devices using DPS 1-13
            elif self.DP_MODE in status['dps']:
                log.debug( 'Detected control type 2' )
                self.control_type = 2
            status = self._send_receive(None)
        if not self.control_type:
            log.warning( 'Detect control type failed! control_type= must be set manually' )
        self.set_socketTimeout( old_timeout )
        self.set_socketPersistent( old_persist )

    def send_command( self, mode, data={} ):
        if mode == 'send':
            if self.control_type == 1:
                command = {
                    IRRemoteControlDevice.NSDP_CONTROL: "send_ir",
                    IRRemoteControlDevice.NSDP_TYPE: 0,
                }

                if 'base64_code' in data:
                    command[IRRemoteControlDevice.NSDP_HEAD] = ''
                    command[IRRemoteControlDevice.NSDP_KEY1] = '1' + data['base64_code']
                elif 'head' in data and 'key' in data:
                    command[IRRemoteControlDevice.NSDP_HEAD] = data['head']
                    command[IRRemoteControlDevice.NSDP_KEY1] = '0' + data['key']
                self.set_value( IRRemoteControlDevice.DP_SEND_IR, json.dumps(command), nowait=True )
            elif self.control_type == 2:
                mode = 'study_key' if 'base64_code' in data else 'send_ir'
                command = {
                    IRRemoteControlDevice.DP_MODE: mode,
                    IRRemoteControlDevice.DP_CODE_TYPE: 0,
                }
                if 'base64_code' in data:
                    command[IRRemoteControlDevice.DP_KEY_STUDY] = data['base64_code']
                elif 'head' in data and 'key' in data:
                    command[IRRemoteControlDevice.DP_HEAD] = data['head']
                    command[IRRemoteControlDevice.DP_KEY_CODE] = data['key']
                self.set_multiple_values( command, nowait=True )
        elif self.control_type == 1:
            command = { IRRemoteControlDevice.NSDP_CONTROL: mode }
            self.set_value( IRRemoteControlDevice.DP_SEND_IR, json.dumps(command), nowait=True )
        elif self.control_type == 2:
            self.set_value( IRRemoteControlDevice.DP_MODE, mode, nowait=True )

    def study_start( self ):
        self.send_command( 'study' )

    def study_end( self ):
        self.send_command( 'study_exit' )

    def receive_button( self, timeout=30 ):
        log.debug("Receiving button")
        # Exit study mode in case it's enabled
        self.study_end()
        # Enable study mode
        self.study_start()

        # Receiving button code
        response = None
        response_code = None
        found = False
        # Remember old timeout and set new timeout
        old_timeout = self.connection_timeout
        end_at_time = time.time() + timeout
        try:
            while end_at_time > time.time():
                timeo = round(time.time() - end_at_time)
                if timeo < 1: timeo = 1
                self.set_socketTimeout(timeo)

                log.debug("Waiting for button...")
                response = self._send_receive(None)
                if response == None:
                    # Nothing received
                    log.debug("Timeout")
                elif type(response) != dict or "dps" not in response:
                    # Some unexpected result
                    log.debug("Unexpected response: %r", response)
                    response_code = response # Some error message? Pass it.
                    break
                elif self.DP_LEARNED_ID in response["dps"]:
                    # Button code received, extracting it as Base64 string
                    response_code = response["dps"][self.DP_LEARNED_ID]
                    found = True
                    break
                elif self.DP_LEARNED_REPORT in response["dps"]:
                    response_code = response["dps"][self.DP_LEARNED_REPORT]
                    found = True
                    break
                else:
                    # Unknown DPS
                    log.debug("Unknown DPS in response: %r", response)
                    response_code = response # Pass it if we do not get a response we like
                    # try again
        finally:
            # Revert timeout
            self.set_socketTimeout(old_timeout)

        if found:
            self.print_pulses( response_code )

        # Exit study mode
        self.study_end()

        return response_code

    def send_button( self, base64_code ):
        log.debug( 'Sending Learned Button: ' + base64_code)
        self.print_pulses( base64_code )
        return self.send_command( 'send', {'base64_code': base64_code} )

    def send_key( self, head, key ):
        log.debug( 'Sending Key: %r / %r', head, key )
        return self.send_command( 'send', { 'head': head, 'key': key } )

    @staticmethod
    def build_head( freq=38, bit_time=0, zero_time=0, one_time=0, bit_time_type=1, timings=[], convert_time=True ):
        timings = list(timings)
        freq = round( freq * 100)
        if not bit_time and len(timings) > 0:
            bit_time = timings[0]
            timings = timings[1:]
        if not zero_time and len(timings) > 0:
            zero_time = timings[0]
            timings = timings[1:]
        if not one_time and len(timings) > 0:
            one_time = timings[0]
            timings = timings[1:]

        if convert_time:
            time_base = 100000.0 / freq
            bit_time = round( bit_time / time_base )
            zero_time = round( zero_time / time_base )
            one_time = round( one_time / time_base )
            for i in range(len(timings)):
                timings[i] = round( timings[i] / time_base )

        head = '%02X%04X0000000000' % (bit_time_type, freq)
        head += '%02X%04X%04X%04X' % (len(timings) + 3, bit_time, zero_time, one_time)
        for i in timings:
            head += '%04X' % i

        return head

    @staticmethod
    def print_pulses( base64_code, use_log=None ):
        if not use_log: use_log = log
        if type(base64_code) == list:
            pulses = base64_code
        else:
            pulses = IRRemoteControlDevice.base64_to_pulses(base64_code)
        message = "Pulses and gaps (microseconds): " + ' '.join([f'{"p" if i % 2 == 0 else "g"}{pulses[i]}' for i in range(len(pulses))])
        if log.getEffectiveLevel() <= logging.DEBUG:
            log.debug( message )
        return message

    @staticmethod
    def base64_to_pulses( code_base_64 ):
        if len(code_base_64) % 4 == 1 and code_base_64.startswith("1"):
            # code can be padded with "1"
            code_base_64 = code_base_64[1:]
        raw_bytes = base64.b64decode(code_base_64)
        fmt = '<%dH' % (len(raw_bytes) >> 1)
        return list(struct.unpack(fmt, raw_bytes))

    @staticmethod
    def pulses_to_base64( pulses ):
        fmt = '<' + str(len(pulses)) + 'H'
        return base64.b64encode( struct.pack(fmt, *pulses) ).decode("ascii")

    @staticmethod
    def head_key_to_pulses( head, key ):
        if len(key) < 4:
            raise ValueError( '"key" must be at least 4 characters' )

        if not head:
            return IRRemoteControlDevice.base64_to_pulses( key )

        if len(head) < 18:
            raise ValueError( '"head" must be at least 18 characters' )

        head = bytearray.fromhex( head )
        headtype, timescale, unused1, unused2, num_timings = struct.unpack( '>BHHHH', head[:9] )
        headlen = num_timings * 2 # times are 16-bit
        timebase = 100000.0 / timescale
        symbols = IRRemoteControlDevice.KEY1_SYMBOL_LIST[:num_timings]
        try:
            repeat = int( key[:2], 16 )
        except:
            raise ValueError( 'First 2 digit of "key" must be a hexidecimal byte' )
        key = key[2:]

        # 'head' type 1 uses '@' for 0 and '#' for 1
        # 'head' type 2 uses '#' for 0 and '$' for 1

        if headtype == 1:
            bit_timimgs = ( '@@', '@#' )
        elif headtype == 2:
            bit_timimgs = ( '@#', '@$' )
        else:
            raise ValueError( 'Unhandled "head" type: %d' % headtype )

        if len(head) != (headlen+9):
            raise ValueError( '"head" must be %d characters' % ((headlen+9)*2) )

        # unpack the timing values, however many there are
        fmt = '>%dH' % num_timings
        timings = struct.unpack( fmt, head[9:] )
        symbol_timings = {}

        for i in range(num_timings):
            symbol_timings[symbols[i]] = round(timebase * timings[i])

        if False:
            print( 'Head:' )
            print( 'Frequency: %r kHz, Time Base: %r' % (timescale / 100.0, timebase) )
            print( 'Bit Symbols: 0 = %s, 1 = %s' % bit_timimgs)
            print( 'Symbol Timings:' )
            for i in range(num_timings):
                print( '  %s = %r microseconds' % (symbols[i], symbol_timings[symbols[i]]) )
            print( '' )
            print( 'Key:' )
            print( 'Send count:', repeat )
            print( 'Code:', key )

        # although it's not as effiecient, it's easier to see what's going on if
        #  you first unpack the packed bits into their symbol pairs, and then
        #  expand those symbols to their timing times

        expanded = ''
        while key:
            cnt = 0
            # first, copy symbols as-is
            for c in key:
                if c not in symbols:
                    break

                expanded += c
                cnt += 1

            key = key[cnt:]
            if not key:
                # all finished
                break

            # next, expand packed bits
            #print( 'Unpacking:', key[:4] )
            byts, bits = struct.unpack( '>BB', bytearray.fromhex( key[:4] ) )
            key = key[4:]
            if byts != 0:
                # if the first byte is not 0, read in and transmit bytes until a symbol is encountered
                cnt = 0
                bits = 0
                data = ''
                for c in key:
                    c2 = ord(c.upper())
                    if c2 < 0x30 or c2 > 0x46 or (c2 > 0x39 and c2 < 0x41):
                        # it's a symbol, we're done
                        break
                    data += c
                    cnt += 1
                    bits += 4
                if (len(data) % 2):
                    data += '0'
            else:
                # if the first byte is 0, the next byte is how many bits to transmit
                byts = int( (bits + 7) / 8 )
                cnt = byts * 2
                data = key[:cnt]

            key = key[cnt:]
            byts = bytearray.fromhex( data )
            # unpack the bits into symbol pairs
            while bits:
                d = byts[0]
                byts = byts[1:]
                for i in range(8):
                    if not bits:
                        break
                    # devices transmit MSB first
                    if (d & 0x80) == 0x80:
                        expanded += bit_timimgs[1]
                    else:
                        expanded += bit_timimgs[0]
                    d <<= 1
                    bits -= 1

        if False:
            print( 'Expanded Code:', expanded )
            print( '' )
            print( 'Pulse train:' )

            # expand the symbols into their pulses
            for c in expanded:
                print( symbol_timings[c], end=' ' )
            print( '' )

        return [symbol_timings[c] for c in expanded]


    @staticmethod
    def pulses_to_head_key( pulses, fudge=0.1, freq=38 ):
        mylog = log.getChild( 'pulses_to_head_key' )

        if len(pulses) < 2:
            return None

        if len(pulses) % 2 == 1:
            pulses = list(pulses)
            pulses.append(pulses[0])

        ps_count = { }
        for current_ps_time in pulses:
            if current_ps_time not in ps_count:
                ps_count[current_ps_time] = 1
            else:
                ps_count[current_ps_time] += 1
        ps_map = IRRemoteControlDevice._merge_similar_pulse_times( ps_count, fudge )

        # should we process the pulses and spaces separately?
        # combining them seems to give good results
        if False:
            p_count = { }
            s_count = { }
            is_pulse = False
            for current_ps_time in pulses:
                is_pulse = not is_pulse

                if current_ps_time in ps_map:
                    current_ps_time = ps_map[current_ps_time]

                if is_pulse:
                    if current_ps_time not in p_count:
                        p_count[current_ps_time] = 1
                    else:
                        p_count[current_ps_time] += 1
                else:
                    if current_ps_time not in s_count:
                        s_count[current_ps_time] = 1
                    else:
                        s_count[current_ps_time] += 1

            mylog.debug( 'p_count: %r, s_count: %r', p_count, s_count )
            p_map = IRRemoteControlDevice._merge_similar_pulse_times( p_count, fudge )
            s_map = IRRemoteControlDevice._merge_similar_pulse_times( s_count, fudge )
            mylog.debug('merged pulse map: %r', p_map)
            mylog.debug('merged space map: %r', s_map)
        else:
            p_map = s_map = ps_map
            mylog.debug('merged pulse+space map: %r', ps_map)

        # convert the list of pulse and space lengths into a string to
        #  make it easier to group and count unique sequences.
        # the first unique pulse will get the symbol 'A' while
        #  the first space becomes 'a'.  The next is 'B' and 'b'.
        # all pulses/spaces of the same length get the same letter
        # I.e. [ 4523 4523 552 1683 552 1683 552 552 552 552 ] becomes
        #        A    a    B   b    B   b    B   c   B   c   -> AaBbBbBcBc
        # we can then substring count 'Bb' and 'Bc'
        symbol_pattern = ''
        symbol_list = { }
        p_key_map = { }
        s_key_map = { }
        is_pulse = False
        for current_ps_time in pulses:
            is_pulse = not is_pulse
            if is_pulse:
                #if this length was combined, use the new (averaged) value
                k = p_map[current_ps_time] if current_ps_time in p_map else current_ps_time

                # if this length has not been seen yet, assign it a letter
                if k not in p_key_map:
                    next_letter = chr(len(p_key_map) + 0x41) # A-Z
                    #mylog.debug('adding pulse %r %r', k, next_letter)
                    p_key_map[k] = { 'count': 1, 'char': next_letter }
                    if next_letter not in symbol_list:
                        symbol_list[next_letter] = [k, False]
                else:
                    p_key_map[k]['count'] += 1
                symbol_pattern += p_key_map[k]['char']
            else:
                #if this length was combined, use the new (averaged) value
                k = s_map[current_ps_time] if current_ps_time in s_map else current_ps_time

                # if this length has not been seen yet, assign it a letter
                if k not in s_key_map:
                    next_letter = chr(len(s_key_map) + 0x61) # a-z
                    #mylog.debug('adding SPACE %r %r', k, next_letter)
                    s_key_map[k] = { 'count': 1, 'char': next_letter }
                    if next_letter not in symbol_list:
                        symbol_list[next_letter] = [k, False]
                else:
                    s_key_map[k]['count'] += 1
                symbol_pattern += s_key_map[k]['char']

        mylog.debug( 'symbol pattern: %r', symbol_pattern )
        mylog.debug( 'symbol list: %r', symbol_list )

        # find the most-commonly-ocurring pulse and space lengths
        pmax = { 'count': 0, 'time': 0 }
        smax = { 'count': 0, 'time': 0 }
        for k in p_key_map:
            if p_key_map[k]['count'] > pmax['count']:
                pmax['count'] = p_key_map[k]['count']
                pmax['time'] = k
        for k in s_key_map:
            if s_key_map[k]['count'] > smax['count']:
                smax['count'] = s_key_map[k]['count']
                smax['time'] = k

        k = smax['time']
        space_letter = s_key_map[k]['char']

        k = pmax['time']
        pulse_letter = p_key_map[k]['char']

        mylog.debug( 'most common space: %r %r', space_letter, smax )
        mylog.debug( 'most common pulse: %r %r', pulse_letter, pmax )

        encoding_type_shortest = [None, None]
        encoding_type_symbol_list = [{}, {}]
        bit_time_types = [0, 0]
        # calculate the head and key for both space-width and pulse-width encoding
        # we will use the shorter of the 2 as the final head/key
        for encoding_type in range( 2 ):
            mylog.debug( '' )
            current_letter = pulse_letter if encoding_type == 0 else space_letter
            encoding_type_name = 'pulse' if not encoding_type else 'space'
            mylog.debug( 'Trying encoding_type %r - character %r', encoding_type_name, current_letter )
            pat_counts = {}
            for i in range( encoding_type, len(symbol_pattern), 2 ):
                if symbol_pattern[i] == current_letter:
                    k = symbol_pattern[i:i+2]
                    if len(k) == 2:
                        if k not in pat_counts:
                            pat_counts[k] = 1
                        else:
                            pat_counts[k] += 1

            mylog.debug( 'pat_counts: %r', pat_counts )

            # find the most-common and next-most-common pattern pair
            pat_max = [0, '']
            pat_next_max = [0, '']
            for k in pat_counts:
                if pat_counts[k] > pat_max[0]:
                    pat_max[0] = pat_counts[k]
                    pat_max[1] = k
            for k in pat_counts:
                if k != pat_max[1] and pat_counts[k] > pat_next_max[0]:
                    pat_next_max[0] = pat_counts[k]
                    pat_next_max[1] = k

            mylog.debug( 'pat_max: %r, pat_next_max: %r', pat_max, pat_next_max)

            # reset from the previous 'encoding_type' loop
            for k in symbol_list:
                symbol_list[k][1] = False

            try_bitfield = True
            bit_symbol_pattern = ''
            full_symbol_pattern = symbol_pattern

            if pat_max[0] and not pat_next_max[0]:
                a = pat_max[1][0]
                symbol_list[a][1] = '@'
                a2 = pat_max[1][1]
                symbol_list[a2][1] = '#'
                zero_symbol = pat_max[1]
                one_symbol = 'DEADBEEF'
            # assign timing symbols to the most-common and next-most-common lengths
            elif pat_max[0] and pat_next_max[0]:
                a = pat_max[1][0]
                b = pat_next_max[1][0]
                if symbol_list[a][0] == symbol_list[b][0]:
                    # pulses are the same, it might be space-width encoded
                    symbol_list[a][1] = symbol_list[b][1] = '@'
                    a2 = pat_max[1][1]
                    b2 = pat_next_max[1][1]
                    if symbol_list[a2][0] < symbol_list[b2][0]:
                        symbol_list[a2][1] = '#'
                        symbol_list[b2][1] = '$'
                        zero_symbol = pat_max[1]
                        one_symbol = pat_next_max[1]
                    else:
                        symbol_list[a2][1] = '$'
                        symbol_list[b2][1] = '#'
                        zero_symbol = pat_next_max[1]
                        one_symbol = pat_max[1]
                else:
                    # pulses are not the same
                    if symbol_list[a][0] < symbol_list[b][0]:
                        symbol_list[a][1] = '#'
                        symbol_list[b][1] = '$'
                        zero_symbol = pat_max[1]
                        one_symbol = pat_next_max[1]
                    else:
                        symbol_list[a][1] = '$'
                        symbol_list[b][1] = '#'
                        zero_symbol = pat_next_max[1]
                        one_symbol = pat_max[1]

                    a = pat_max[1][1]
                    b = pat_next_max[1][1]
                    if symbol_list[a][0] == symbol_list[b][0]:
                        # but all spaces are the same, probably pulse-width encoded
                        symbol_list[a][1] = symbol_list[b][1] = '@'
                        bit_symbol_pattern = symbol_pattern[0]
                        full_symbol_pattern = symbol_pattern[1:]
                    else:
                        symbol_list[a][1] = '@'
                        try_bitfield = False

            mylog.debug('initial symbol list: %r', symbol_list)

            # if the common length and the zero length are the same, combine them as 'head type 1'
            # first find the symbols for '@' and '#'
            bit_start_symbol = bit_zero_symbol = None
            for k in symbol_list:
                if symbol_list[k][1] == '@':
                    bit_start_symbol = k
                elif symbol_list[k][1] == '#':
                    bit_zero_symbol = k

            # they are the same, combine them into 'head type 1'
            if bit_start_symbol and bit_zero_symbol and symbol_list[bit_start_symbol][0] == symbol_list[bit_zero_symbol][0]:
                bit_time_types[encoding_type] = 1
                symbols_available = list(IRRemoteControlDevice.KEY1_SYMBOL_LIST[2:])
                symbol_list[bit_zero_symbol][1] = '@'
                for k in symbol_list:
                    if symbol_list[k][1] == '$':
                        symbol_list[k][1] = '#'
            # they are different, use 'head type 2'
            else:
                bit_time_types[encoding_type] = 2
                symbols_available = list(IRRemoteControlDevice.KEY1_SYMBOL_LIST[2:])

            # start assigning times to symbols
            # the common/0/1 symbols were already set above
            time_symbols = { }
            for k in symbol_list:
                if symbol_list[k][1]:
                    c = symbol_list[k][0]
                    time_symbols[c] = symbol_list[k][1]

            # assign symbols to the remaining pulse/space times
            need_abort = False
            mylog.debug('symbol list before assignment: %r', symbol_list )
            for k in symbol_list:
                if not symbol_list[k][1]:
                    t = symbol_list[k][0]
                    if t in time_symbols:
                        symbol_list[k][1] = time_symbols[t]
                        continue
                    if not symbols_available:
                        #raise ValueError( 'Cannot convert pulses to head/key, too many unique pulse/space values' )
                        mylog.debug( 'Cannot convert pulses to head/key, too many unique pulse/space values!' )
                        #return None
                        need_abort = True
                        break
                    s = symbols_available.pop( 0 )
                    symbol_list[k][1] = s
                    time_symbols[t] = s
            mylog.debug('symbol list after assignment:  %r', symbol_list )
            mylog.debug('unique time symbols: %r', time_symbols)
            if need_abort:
                mylog.debug('!! need_abort !!')
                continue

            mylog.debug( 'zero sequence: %r, one sequence: %r', zero_symbol, one_symbol )

            raw_symbol_pattern = ''
            for c in symbol_pattern:
                raw_symbol_pattern += symbol_list[c][1]
            mylog.debug( 'raw symbol pattern: %r', raw_symbol_pattern )

            # see if we can condense bitfields into len+data
            if try_bitfield:
                if encoding_type:
                    c = full_symbol_pattern[0]
                    bit_symbol_pattern += symbol_list[c][1]

                bits = data = 0
                byts = []
                removed = ''
                # the len+2 is to make sure we catch any trailing bits
                for i in range( encoding_type, len(full_symbol_pattern)+2, 2 ):
                    k = full_symbol_pattern[i:i+2]
                    k_symbol_pattern = ''
                    for c in k:
                        k_symbol_pattern += symbol_list[c][1]
                    if k == zero_symbol:
                        removed += k_symbol_pattern
                        bits += 1
                        if bits == 8:
                            byts.append( data )
                            bits = data = 0
                    elif k == one_symbol:
                        removed += k_symbol_pattern
                        bits += 1
                        data |= 1 << (8 - bits)
                        if bits == 8:
                            byts.append( data )
                            bits = data = 0
                    else:
                        if bits or byts:
                            new_bitfield = IRRemoteControlDevice._build_key_bitfield( bits, data, byts )
                            # if the new bitfield is longer than the original timing symbols, don't use it
                            if len(new_bitfield) < len(removed):
                                bit_symbol_pattern += new_bitfield
                            else:
                                bit_symbol_pattern += removed
                        bits = data = 0
                        byts = []
                        removed = ''
                        bit_symbol_pattern += k_symbol_pattern
                mylog.debug( 'bit symbol pattern: %r', bit_symbol_pattern )

                # this should not be needed due to the check in the loop above, but make sure anyway
                if len(bit_symbol_pattern) > len(raw_symbol_pattern):
                    mylog.debug( 'Bitfield pattern is longer than pulse/space symbol lists, using shorter symbol list' )
                    bit_symbol_pattern = raw_symbol_pattern
            else:
                mylog.debug( 'Not attempting bitfield' )
                bit_symbol_pattern = raw_symbol_pattern

            # save the results to see which one is better
            encoding_type_shortest[encoding_type] = bit_symbol_pattern
            encoding_type_symbol_list[encoding_type] = { }
            for k in symbol_list:
                j = symbol_list[k][1]
                encoding_type_symbol_list[encoding_type][j] = symbol_list[k][0]

        mylog.debug( '' )

        if not encoding_type_shortest[0]:
            key1 = encoding_type_shortest[1]
            new_symbol_list = encoding_type_symbol_list[1]
            bit_time_type = bit_time_types[1]
        elif not encoding_type_shortest[1]:
            key1 = encoding_type_shortest[0]
            new_symbol_list = encoding_type_symbol_list[0]
            bit_time_type = bit_time_types[0]
        elif len(encoding_type_shortest[0]) <= len(encoding_type_shortest[1]):
            key1 = encoding_type_shortest[0]
            new_symbol_list = encoding_type_symbol_list[0]
            bit_time_type = bit_time_types[0]
        else:
            key1 = encoding_type_shortest[1]
            new_symbol_list = encoding_type_symbol_list[1]
            bit_time_type = bit_time_types[1]
        #mylog.debug(new_symbol_list)

        # copy over the symbol times, making sure they're in the correct order
        time_symbols = []
        for c in IRRemoteControlDevice.KEY1_SYMBOL_LIST:
            if c in new_symbol_list:
                time_symbols.append( new_symbol_list[c] )
            elif len(time_symbols) < 3:
                time_symbols.append( 100 )
            else:
                break

        header = IRRemoteControlDevice.build_head( freq=freq, bit_time_type=bit_time_type, timings=time_symbols )

        mylog.debug( 'Space-Width Encoded: %r Timings: %r', encoding_type_shortest[0], encoding_type_symbol_list[0] )
        mylog.debug( 'Pulse-Width Encoded: %r Timings: %r', encoding_type_shortest[1], encoding_type_symbol_list[1] )
        mylog.debug( 'new pattern: %r / %r', header, key1 )
        mylog.debug( p_key_map )
        mylog.debug( s_key_map )
        #mylog.debug( symbol_pattern )
        return header, '01' + key1

    @staticmethod
    def _merge_similar_pulse_times( p_count, fudge ):
        p_map = { }
        mod = True
        while mod:
            mod = False
            merge = None
            for current_ps_time in p_count:
                pfudge = current_ps_time * fudge
                pmin = current_ps_time - pfudge
                pmax = current_ps_time + pfudge
                for p_check in p_count:
                    if current_ps_time == p_check:
                        continue
                    if p_check >= pmin and p_check <= pmax:
                        merge = (current_ps_time, p_check)
                        #print( 'merging', merge )
                        break
                    #else:
                    #    print('not merging, pmin < p_check < pmax', pmin, p_check, pmax)
                if merge:
                    break
            if merge:
                mod = True
                a = merge[0]
                b = merge[1]
                new_count = p_count[a] + p_count[b]
                #new_p = round(((p_count[a] * a) + (p_count[b] * b)) / new_count)
                new_p = round((a + b) / 2)
                del p_count[a]
                del p_count[b]
                p_count[new_p] = new_count
                p_map[a] = new_p
                p_map[b] = new_p
                for i in p_map:
                    if p_map[i] == a or p_map[i] == b:
                        p_map[i] = new_p # pylint: disable=E4702

        return p_map

    @staticmethod
    def pulses_to_space_encoded_head_key( pulses ):
        results = []
        bits = 0
        data = 0
        byts = []
        start_pulse = 0
        start_space = 0
        last_space = 0

        is_pulse = False
        fail_if_again = False
        for current_ps_time in pulses:
            if fail_if_again:
                return None
            is_pulse = not is_pulse
            if is_pulse:
                print( 'p', current_ps_time )
                if current_ps_time >= 7900 and current_ps_time <= 10100:
                    # NEC protocol start pulse
                    if start_pulse > 0:
                        if not start_space:
                            return None
                        bits2 = (len(byts) * 8) + bits
                        if bits2 == 0 and start_space == 2250:
                            # repeat code
                            pass
                        elif bits2 < 8 or bits2 > 100:
                            return None
                        results.append( (start_pulse, start_space, byts, bits, data, last_space) )
                    start_pulse = 9000
                    bits = data = start_space = last_space = 0
                    byts = []
                elif current_ps_time >= 3400 and current_ps_time <= 5600:
                    # Samsung procol start pulse
                    if start_pulse > 0:
                        if not start_space:
                            return None
                        bits2 = (len(byts) * 8) + bits
                        if bits2 == 0 and start_space == 2250:
                            # repeat code
                            pass
                        elif bits2 < 8 or bits2 > 100:
                            return None
                        results.append( (start_pulse, start_space, byts, bits, data, last_space) )
                    start_pulse = 4500
                    bits = data = start_space = last_space = 0
                    byts = []
                elif current_ps_time > 665 or current_ps_time < 400:
                    # not NEC/Samsung
                    return None
                elif start_space == 0:
                    # not NEC/Samsung
                    return None
            else: # not is_pulse
                print( 's', current_ps_time )
                if start_space == 0:
                    if current_ps_time >= 3400 and current_ps_time <= 5600:
                        # normal start space
                        start_space = 4500
                    elif current_ps_time >= 1150 and current_ps_time <= 3350:
                        # repeat code
                        start_space = 2250
                    else:
                        # not NEC/Samsung
                        return None
                else:
                    if current_ps_time > 3350:
                        # gap between transmissions
                        if start_pulse > 0:
                            if not start_space:
                                return None
                            bits2 = (len(byts) * 8) + bits
                            #if bits2 < 8 or bits2 > 100:
                            #    return None
                            results.append( (start_pulse, start_space, byts, bits, data, last_space) )
                            start_pulse = 9000
                            bits = data = start_space = last_space = 0
                            byts = []
                    elif current_ps_time >= 400 and current_ps_time <= 665:
                        # zero
                        bits += 1
                        if bits == 8:
                            byts.append(data)
                            bits = data = 0
                    elif current_ps_time >= 1400 and current_ps_time <= 1800:
                        # one
                        bits += 1
                        data |= (1 << (8 - bits))
                        if bits == 8:
                            byts.append(data)
                            bits = data = 0
                    else:
                        fail_if_again = True
        if start_pulse > 0:
            if not start_space:
                return None
            bits2 = (len(byts) * 8) + bits
            if bits2 == 0 and start_space == 2250:
                # repeat code
                pass
            elif bits2 < 8 or bits2 > 100:
                return None
            results.append( (start_pulse, start_space, byts, bits, data, last_space) )

        if not results:
            return None

        count = -1
        for r in results:
            count += 1
            if count == 0:
                continue
            # make sure start pulse is the same
            if r[0] != results[0][0]:
                return None

        result_string = ''
        symbols = { results[0][0]: '%', 4500: '^', 2250: '&', results[0][5]: '*' }
        for r in results:
            if r[0] not in symbols or r[1] not in symbols:
                return None
            result_string += symbols[r[0]] + symbols[r[1]]
            result_string += IRRemoteControlDevice._build_key_bitfield( r[3], r[4], r[2] )
            result_string += '@*'

        return result_string

    @staticmethod
    def _build_key_bitfield( bits, bitdata, byts ):
        numbits = bits + (len(byts) * 8)
        result_string = '%02X%02X' % (0, numbits)
        for b in byts:
            result_string += '%02X' % b
        if bits:
            result_string += '%02X' % bitdata
        #print('bitfield:', result_string)
        return result_string

    @staticmethod
    def hex_to_pulses( code_hex ):
        raw_bytes = bytes.fromhex(code_hex)
        return [int.from_bytes(raw_bytes[x:x+2], byteorder="little") for x in range(0, len(raw_bytes), 2)]

    @staticmethod
    def pulses_to_hex( pulses ):
        return "".join([f"{((x >> 8) | (x << 8)) & 0xFFFF:04x}" for x in pulses])

    @staticmethod
    def width_encoded_to_pulses( uint32, start_mark=9000, start_space=4500, pulse_one=563, pulse_zero=563, space_one=1688, space_zero=563, trailing_pulse=563, trailing_space=30000 ):
        pulses = [ start_mark, start_space ]
        one = [ pulse_one, space_one ]
        zero =  [ pulse_zero, space_zero ]
        for i in range(31, -1, -1):
            pulses += one if uint32 & (1 << i) else zero
        pulses.append( trailing_pulse )
        pulses.append( trailing_space )
        return pulses

    @staticmethod
    def pulses_to_width_encoded( pulses, start_mark=None, start_space=None, pulse_threshold=None, space_threshold=None ):
        ret = [ ]
        if len(pulses) < 68:
            log.debug('Length of pulses must be a multiple of 68! (2 start + 64 data + 2 trailing)')
            return ret
        if (pulse_threshold is None) and (space_threshold is None):
            log.debug('"pulse_threshold" and/or "space_threshold" must be supplied!')
            return ret

        if start_mark is not None:
            while( len(pulses) >= 68 and (pulses[0] < (start_mark * 0.75) or pulses[0] > (start_mark * 1.25)) ):
                pulses = pulses[1:]

        while( len(pulses) >= 68 ):
            if start_mark is not None:
                if pulses[0] < (start_mark * 0.75) or pulses[0] > (start_mark * 1.25):
                    log.debug('The start mark is not the correct length')
                    return ret
            if start_space is not None:
                if pulses[1] < (start_space * 0.75) or pulses[1] > (start_space * 1.25):
                    log.debug('The start space is not the correct length')
                    return ret

            pulses = pulses[2:]
            uint32 = 0

            for i in range(31, -1, -1):
                pulse_match = space_match = None
                if pulse_threshold is not None:
                    if pulses[0] >= pulse_threshold:
                        pulse_match = 1
                    else:
                        pulse_match = 0

                if space_threshold is not None:
                    if pulses[1] >= space_threshold:
                        space_match = 1
                    else:
                        space_match = 0

                if (pulse_match is not None) and (space_match is not None):
                    if pulse_match != space_match:
                        log.debug('Both "pulse_threshold" and "space_threshold" are supplied and bit %d conflicts with both!' % i)
                        return ret
                    res = space_match
                elif pulse_match is None:
                    res = space_match
                else:
                    res = pulse_match

                uint32 |= res << i
                pulses = pulses[2:]

            pulses = pulses[2:]

            if ret is None:
                ret = [ uint32 ]
            elif uint32 not in ret:
                ret.append( uint32 )

        return ret

    @staticmethod
    def _mirror_bits( data, bits=8 ):
        shift = bits - 1
        out = 0
        for i in range(bits):
            if data & (1 << i):
                out |= 1 << shift
            shift -= 1
        return out

    @staticmethod
    def nec_to_pulses( address, data=None ):
        # address can be 8-bit or 16-bit
        # if 8, it is repeated after complementing (just like the data)
        if data is None:
            uint32 = address
        else:
            if address < 256:
                address = IRRemoteControlDevice._mirror_bits(address)
                address = (address << 8) | (address ^ 0xFF)
            else:
                address = (IRRemoteControlDevice._mirror_bits( (address >> 8) & 0xFF) << 8) | IRRemoteControlDevice._mirror_bits(address & 0xFF)
            data = IRRemoteControlDevice._mirror_bits(data)
            data = (data << 8) | (data ^ 0xFF)
            uint32 = (address << 16) | data
        return IRRemoteControlDevice.width_encoded_to_pulses( uint32 )

    @staticmethod
    def pulses_to_nec( pulses ):
        ret = [ ]
        res = IRRemoteControlDevice.pulses_to_width_encoded( pulses, start_mark=9000, space_threshold=1125 )
        for code in res:
            addr = IRRemoteControlDevice._mirror_bits((code >> 24) & 0xFF)
            addr_not = IRRemoteControlDevice._mirror_bits((code >> 16) & 0xFF)
            data = IRRemoteControlDevice._mirror_bits((code >> 8) & 0xFF)
            data_not = IRRemoteControlDevice._mirror_bits(code & 0xFF)
            # if the address is 8-bit, it is repeated after complementing (just like the data)
            if addr != (addr_not ^ 0xFF):
                addr = (addr << 8) | addr_not
            d = { 'type': 'nec', 'uint32': code, 'address': None, 'data': None, 'hex': '%08X' % code }
            if data == (data_not ^ 0xFF):
                d['address'] = addr
                d['data'] = data
            ret.append(d)
        return ret

    @staticmethod
    def samsung_to_pulses( address, data=None ):
        if data is None:
            uint32 = address
        else:
            address = IRRemoteControlDevice._mirror_bits(address)
            data = IRRemoteControlDevice._mirror_bits(data)
            uint32 = (address << 24) + (address << 16) + (data << 8) + (data ^ 0xFF)
        return IRRemoteControlDevice.width_encoded_to_pulses( uint32, start_mark=4500 )

    @staticmethod
    def pulses_to_samsung( pulses ):
        ret = [ ]
        res = IRRemoteControlDevice.pulses_to_width_encoded( pulses, start_mark=4500, space_threshold=1125 )
        for code in res:
            addr = (code >> 24) & 0xFF
            addr_not = (code >> 16) & 0xFF
            data = (code >> 8) & 0xFF
            data_not = code & 0xFF
            d = { 'type': 'samsung', 'uint32': code, 'address': None, 'data': None, 'hex': '%08X' % code }
            # samsung repeats the 8-bit address but complements the 8-bit data
            if addr == addr_not and data == (data_not ^ 0xFF):
                d['address'] = IRRemoteControlDevice._mirror_bits(addr)
                d['data'] = IRRemoteControlDevice._mirror_bits(data)
            ret.append(d)
        return ret

    @staticmethod
    def pronto_to_pulses( pronto ):
        ret = [ ]
        pronto = [int(x, 16) for x in pronto.split(' ')]
        ptype = pronto[0]
        timebase = pronto[1]
        pair1_len = pronto[2]
        pair2_len = pronto[3]
        if ptype != 0:
            # only raw (learned) codes are handled
            return ret
        if timebase < 90 or timebase > 139:
            # only 38 kHz is supported?
            return ret
        pronto = pronto[4:]
        timebase *= 0.241246
        for i in range(0, pair1_len*2, 2):
            ret += [round(pronto[i] * timebase), round(pronto[i+1] * timebase)]
        pronto = pronto[pair1_len*2:]
        for i in range(0, pair2_len*2, 2):
            ret += [round(pronto[i] * timebase), round(pronto[i+1] * timebase)]
        return ret

    @staticmethod
    def pulses_to_pronto( pulses ):
        # only 38 kHz is supported?
        freq = 38000.0
        scale = (1 / freq) * 1000000.0
        ret = '%04X %04X %04X %04X' % (0, round(scale/0.241246), 0, len(pulses) >> 1)
        for i in pulses:
            ret += ' %04X' % round(i/scale)
        return ret

    @staticmethod
    def pronto_to_head_key( pronto ):
        ret = [ ]
        pronto = [int(x, 16) for x in pronto.split(' ')]
        ptype = pronto[0]
        timebase = pronto[1]
        pair1_len = pronto[2]
        pair2_len = pronto[3]
        if ptype != 0:
            # only raw (learned) codes are handled
            return None

        # 4,145,152 is 32,768 * 506 / 4
        freq = round(4145152.0 / timebase / 100) / 10

        pronto = pronto[4:]
        timebase *= 0.241246
        for i in range(0, pair1_len*2, 2):
            ret += [round(pronto[i] * timebase), round(pronto[i+1] * timebase)]
        pronto = pronto[pair1_len*2:]
        for i in range(0, pair2_len*2, 2):
            ret += [round(pronto[i] * timebase), round(pronto[i+1] * timebase)]

        return IRRemoteControlDevice.pulses_to_head_key( ret, freq=freq )


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/InverterHeatPumpDevice.py

"""
 Python module to interface with Tuya WiFi smart inverter heat pump

 Author: Valentin Dusollier (https://github.com/valentindusollier)
 Tested: Fairland Inverter+ 21kW (IPHR55)
 
 Local Control Classes
    InverterHeatPumpDevice(...)
        See Device() for constructor arguments

    Functions
        InverterHeatPumpDevice:
            is_on()                             # Returns True if the inverter is on
            get_unit()                          # Returns the unit of the temperature
                                                # (TemperatureUnit.CELSIUS or TemperatureUnit.FAHRENHEIT)
            get_inlet_water_temp()              # Returns the inlet water temperature
            get_target_water_temp()             # Returns the target water temperature
            get_lower_limit_target_water_temp() # Returns the lower limit of the target water temperature
            get_upper_limit_target_water_temp() # Returns the upper limit of the target water temperature
            get_heating_capacity_percent()      # Returns the heating capacity in percent
            get_mode(raw=True/False)            # Returns the current InverterHeatPumpMode(Enum) if raw=False
                                                # (default value), otherwise returns the string mode
            get_fault(raw=True/False)           # Returns the current InverterHeatPumpFault(Enum) if raw=False
                                                # (default value), otherwise returns the integer fault code
            is_silence_mode()                   # Returns True if the silence mode is on
            
            set_unit(TemperatureUnit)           # Set the unit of the temperature
                                                # (TemperatureUnit.CELSIUS or TemperatureUnit.FAHRENHEIT)
            set_target_water_temp(integer)      # Set the target water temperature. Must be between
                                                # get_lower_limit_target_water_temp() and
                                                # get_upper_limit_target_water_temp()
            set_silence_mode(True/False)        # Set the silence mode on (True) or off (False)
            
        Inherited
            json = status()                     # returns json payload
            set_version(version)                # 3.1 [default] or 3.3
            set_socketPersistent(False/True)    # False [default] or True
            set_socketNODELAY(False/True)       # False or True [default]
            set_socketRetryLimit(integer)       # retry count limit [default 5]
            set_socketTimeout(timeout)          # set connection timeout in seconds [default 5]
            set_dpsUsed(dps_to_request)         # add data points (DPS) to request
            add_dps_to_request(index)           # add data point (DPS) index set to None
            set_retry(retry=True)               # retry if response payload is truncated
            set_status(on, switch=1, nowait)    # Set status of switch to 'on' or 'off' (bool)
            set_value(index, value, nowait)     # Set int value of any index.
            heartbeat(nowait)                   # Send heartbeat to device
            updatedps(index=[1], nowait)        # Send updatedps command to device
            turn_on(switch=1, nowait)           # Turn on device / switch #
            turn_off(switch=1, nowait)          # Turn off
            set_timer(num_secs, nowait)         # Set timer for num_secs
            set_debug(toggle, color)            # Activate verbose debugging output
            set_sendWait(num_secs)              # Time to wait after sending commands before pulling response
            detect_available_dps()              # Return list of DPS available from device
            generate_payload(command, data)     # Generate TuyaMessage payload for command with data
            send(payload)                       # Send payload to device (do not wait for response)
            receive()

 Additional Classes
    TemperatureUnit(Enum)
        Enum to represent the unit of the temperature (C° or F°)
        
    ExtendedEnum(Enum)
        Internal use only.
        
    InverterHeatPumpMode(ExtendedEnum)
        Enum to represent the mode of the inverter. There is no documentation
        about the modes, therefore only the known ones are listed. Feel free
        to contribute if you know more about these modes.
    
    InverterHeatPumpFault(ExtendedEnum)
        Enum to represent the fault of the inverter. There is no documentation
        about the fault codes, therefore only the known ones are listed. Feel
        free to contribute if you know more about these codes.
"""

from enum import Enum
from ..core import Device


class InverterHeatPumpDevice(Device):

    DPS = "dps"
    ON_DP = "1"
    INLET_WATER_TEMP_DP = "102"
    UNIT_DP = "103"
    HEATING_CAPACITY_PERCENT_DP = "104"
    MODE_DP = "105"
    TARGET_WATER_TEMP_DP = "106"
    LOWER_LIMIT_TARGET_WATER_TEMP_DP = "107"
    UPPER_LIMIT_TARGET_WATER_TEMP_DP = "108"
    FAULT_DP = "115"
    FAULT2_DP = "116"
    SILENCE_MODE_DP = "117"

    def is_on(self):
        return self.status()[self.DPS][self.ON_DP]

    def get_unit(self):
        return TemperatureUnit(self.status()[self.DPS][self.UNIT_DP])

    def get_inlet_water_temp(self):
        return self.status()[self.DPS][self.INLET_WATER_TEMP_DP]

    def get_target_water_temp(self):
        return self.status()[self.DPS][self.TARGET_WATER_TEMP_DP]

    def get_lower_limit_target_water_temp(self):
        return self.status()[self.DPS][self.LOWER_LIMIT_TARGET_WATER_TEMP_DP]

    def get_upper_limit_target_water_temp(self):
        return self.status()[self.DPS][self.UPPER_LIMIT_TARGET_WATER_TEMP_DP]

    def get_heating_capacity_percent(self):
        return self.status()[self.DPS][self.HEATING_CAPACITY_PERCENT_DP]

    def get_mode(self, raw=False):
        """There is no documentation about the modes. Therefore, your device
        could push unkown modes and this method will return
        InverterHeatPumpMode.UNKNOWN. You can use raw=True to get pushed value.
        Feel free to contribute if you get unknown modes.
        """
        string_mode = self.status()[self.DPS][self.MODE_DP]

        if raw:
            return string_mode

        if InverterHeatPumpMode.is_known(string_mode):
            return InverterHeatPumpMode(string_mode)

        return InverterHeatPumpMode.UNKNOWN

    def get_fault(self, raw=False):
        """There is no documentation about the fault codes. Therefore, your
        device could push unkown fault codes and this method will return
        InverterHeatPumpFault.UNKNOWN. You can use raw=True to get pushed value.
        Feel free to contribute if you get unknown fault codes.
        """
        fault = self.status()[self.DPS][self.FAULT_DP]

        if raw:
            return fault

        if InverterHeatPumpFault.is_known(fault):
            return InverterHeatPumpFault(fault)

        return InverterHeatPumpFault.UNKNOWN

    def is_silence_mode(self):
        """Paradoxically, the silence mode is on when SILENCE_MODE_DP is False"""
        return not self.status()[self.DPS][self.SILENCE_MODE_DP]

    def set_unit(self, unit):
        self.set_value(self.UNIT_DP, unit.value)

    def set_target_water_temp(self, target_water_temp):
        sts = self.status()[self.DPS]
        lower_limit, upper_limit = (
            sts[self.LOWER_LIMIT_TARGET_WATER_TEMP_DP],
            sts[self.UPPER_LIMIT_TARGET_WATER_TEMP_DP],
        )
        if lower_limit <= target_water_temp <= upper_limit:
            self.set_value(self.TARGET_WATER_TEMP_DP, target_water_temp)
        else:
            raise ValueError("Target water temperature must be between {} and {}".format(lower_limit, upper_limit))

    def set_silence_mode(self, silence_mode):
        """Paradoxically, the silence mode is on when SILENCE_MODE_DP is False"""
        self.set_value(self.SILENCE_MODE_DP, not silence_mode)

class TemperatureUnit(Enum):
    CELSIUS = True
    FAHRENHEIT = False
    
class ExtendedEnum(Enum):
    @classmethod
    def is_known(self, value):
        return value in self._value2member_map_

class InverterHeatPumpMode(ExtendedEnum):
    UNKNOWN = "unknown"
    HEATING = "warm"


class InverterHeatPumpFault(ExtendedEnum):
    UNKNOWN = -1
    NOMINAL = 0
    NO_WATER_FLOW = 4


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/PresenceDetectorDevice.py

from ..core import Device
import time
import json

class PresenceDetectorDevice(Device):
    """
    Represents a Tuya-based Presence Detector.
    """

    DPS_KEY = "dps"
    PRESENCE_KEY = "1"
    SENSITIVITY_KEY = "2"
    NEAR_DETECTION_KEY = "3"
    FAR_DETECTION_KEY = "4"
    AUTO_DETECT_RESULT_KEY = "6"
    TARGET_DISTANCE_KEY = "9"
    DETECTION_DELAY_KEY = "101"
    FADING_TIME_KEY = "102"
    LIGHT_SENSE_KEY = "104"

    def __init__(self, *args, **kwargs):
        # set the default version to 3.3 as there are no 3.1 devices
        if 'version' not in kwargs or not kwargs['version']:
            kwargs['version'] = 3.3
        super(PresenceDetectorDevice, self).__init__(*args, **kwargs)

    def status_json(self):
        """Wrapper around status() that replace DPS indices with human readable labels."""
        status = self.status()
        if "Error" in status:
           return status
        dps = status[self.DPS_KEY]
        json_string = json.dumps({
            "Presence": dps[self.PRESENCE_KEY],
            "Sensitivity": dps[self.SENSITIVITY_KEY],
            "Near detection": dps[self.NEAR_DETECTION_KEY],
            "Far detection": dps[self.FAR_DETECTION_KEY],
            "Checking result": dps[self.AUTO_DETECT_RESULT_KEY],
            "Target distance": dps[self.TARGET_DISTANCE_KEY],
            "Detection delay": dps[self.DETECTION_DELAY_KEY],
            "Fading time": dps[self.FADING_TIME_KEY],
            "Light sense": dps[self.LIGHT_SENSE_KEY]
        })
        return json_string

    def status(self):
        """In some cases the status json we received is not the standard one with all the proper keys. We will re-try 5 to get the expected one"""
        status = super().status()
        if "Error" in status:
           return status
        dps = status[self.DPS_KEY]
        retry = 5
        while(retry > 0 and not self.PRESENCE_KEY in dps):
            retry = retry - 1
            status = super().status()
            dps = status[self.DPS_KEY]
            time.sleep(5)
        return status

    def get_presence_state(self):
        """Get the presence state of the Presence Detector.

        Returns:
            str: Presence state ("none" or "presence").
        """
        status = self.status()
        if "Error" in status:
           return status
        return status[self.DPS_KEY][self.PRESENCE_KEY]

    def get_sensitivity(self):
        """Get the sensitivity level of the Presence Detector.

        Returns:
            int: Sensitivity level (0 to 9).
        """
        status = self.status()
        if "Error" in status:
            return satus
        return status[self.DPS_KEY][self.SENSITIVITY_KEY]

    def set_sensitivity(self, sensitivity):
        self.set_value(self.SENSITIVITY_KEY, sensitivity)

    def get_near_detection(self):
        """Get the near detection distance of the Presence Detector.

        Returns:
            int: Near detection distance in meters.
        """
        status = self.status()
        if "Error" in status:
            return satus
        return status[self.DPS_KEY][self.NEAR_DETECTION_KEY]

    def set_near_detection(self, distance):
        self.set_value(self.NEAR_DETECTION_KEY, distance)

    def get_far_detection(self):
        """Get the far detection distance of the Presence Detector.

        Returns:
            int: Far detection distance in meters.
        """
        status = self.status()
        if "Error" in status:
            return satus
        return status[self.DPS_KEY][self.FAR_DETECTION_KEY]

    def set_far_detection(self, distance):
        self.set_value(self.FAR_DETECTION_KEY, distance)

    def get_checking_result(self):
        """Get the checking result of the Presence Detector.

        Returns:
            str: Checking result (one of ["checking", "check_success", "check_failure", "others", "comm_fault", "radar_fault"]).
        """
        status = self.status()
        if "Error" in status:
            return satus
        return status[self.DPS_KEY][self.AUTO_DETECT_RESULT_KEY]

    def get_target_distance(self):
        """Get the closest target distance of the Presence Detector.

        Returns:
            int: Closest target distance in meters.
        """
        status = self.status()
        if "Error" in status:
            return satus
        return status[self.DPS_KEY][self.TARGET_DISTANCE_KEY]


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/README.md

# User Contributed Device Modules

[![Contrib Test](https://github.com/jasonacox/tinytuya/actions/workflows/contrib.yml/badge.svg)](https://github.com/jasonacox/tinytuya/actions/workflows/contrib.yml)

In addition to the built-in `OutletDevice`, `BulbDevice` and `CoverDevice` device support, the community is encourage to submit additional device modules which are available here.

## Devices

### ThermostatDevice

*  ThermostatDevice - A community-contributed Python module to add support for Tuya WiFi smart thermostats
* Author: [uzlonewolf](https://github.com/uzlonewolf)
* Example: [examples/ThermostatDevice-example.py](https://github.com/jasonacox/tinytuya/blob/master/examples/Contrib/ThermostatDevice-example.py)

    ```python
    # Example usage of community contributed device modules
    from tinytuya import Contrib

    thermo = Contrib.ThermostatDevice( 'abcdefghijklmnop123456', '172.28.321.475', '1234567890123abc' )
    ```

### IRRemoteControlDevice

* IRRemoteControlDevice - A community-contributed Python module to add support for Tuya WiFi smart universal remote control simulators
* Author: [Alexey 'Cluster' Avdyukhin](https://github.com/clusterm)
* Example: [examples/IRRemoteControlDevice-example.py](https://github.com/jasonacox/tinytuya/blob/master/examples/Contrib/IRRemoteControlDevice-example.py)

    ```python
    # Example 1 -usage of community contributed device modules
    from tinytuya import Contrib

    ir = Contrib.IRRemoteControlDevice( 'abcdefghijklmnop123456', '10.2.3.4', '1234567890123abc' )
    button = ir.receive_button(timeout=15)
    ir.send_button(button)
    ```

    ```python
    # Example 2 - Aubess WiFi IR Controller S16 for Sony TV - Issue #492
    from tinytuya import Contrib

    # Pull the Device Log from Tuya cloud while using Tuya Smart App and pressing PWR button on controller:
    # SONY Tuya Device Debug Log: IR send{"control":"send_ir","head":"xxxx","key1":"003xxx)","type":0,"delay":300}
    head = 'xxx'
    key1 = '003xxx'

    ir = Contrib.IRRemoteControlDevice( 'abcdefghijklmnop123456', '10.2.3.4', '1234567890123abc', persist=True )
    ir.send_key( head, key1 )

    # NOTE: If it doesn't work, try removing a leading zero from key1. Depending on what DPS set the device 
    # uses the key1 from the debug logs could have an extra 0.
    ```

### SocketDevice

* SocketDevice - A community-contributed Python module to add support for Tuya WiFi smart sockets
* Author: [Felix Pieschka](https://github.com/Felix-Pi)

    ```python
    # Example usage of community contributed device modules
    from tinytuya.Contrib import SocketDevice

    socket = SocketDevice('abcdefghijklmnop123456', '172.28.321.475', '', version=3.3)
    
    print(socket.get_energy_consumption())
    print(socket.get_state())
    ```

### DoorbellDevice

* DoorbellDevice - A community-contributed Python module to add support for Tuya WiFi doorbells.
* Author: [JonesMeUp](https://github.com/jonesMeUp)
* Note: Most doorbells will not stay online (to preserve battery) so controlling them locally is difficult.

    ```python
    import tinytuya
    from tinytuya.Contrib import DoorbellDevice

    d = DoorbellDevice('abcdefghijklmnop123456', '192.168.178.25', 
        '1234567890123abc', 'device22')
    d.set_version(3.3)
    d.set_socketPersistent(True) # Keep socket connection open between commands

    d.set_volume(3)
    d.set_motion_area(0, 5, 50, 50)
    d.set_motion_area_switch(True)

    print(" > Begin Monitor Loop <")
    while(True):
        # See if any data is available
        data = d.receive()
        print('Data: %r' % data)
        # Send keyalive heartbeat
        print(" > Send Heartbeat Ping < ")
        payload = d.generate_payload(tinytuya.HEART_BEAT)
        d.send(payload)
    ```

### ClimateDevice

* ClimateDevice - A community-contributed Python module to add support for Tuya WiFi portable air conditioners
* Author: [Frédéric Chardon](https://github.com/fr3dz10)

    ```python
    # Example usage of community contributed device modules
    # turn on cooling for up to 2 hours if room temperature is too high
    from tinytuya.Contrib import ClimateDevice

    d = ClimateDevice('tuya_id', '1.2.3.4', 'local_key')

    if d.get_room_temperature() > 22:
        d.set_operating_mode("cold")
        d.set_target_temperature(20)
        d.turn_on()
        d.set_timer(2)
    ```

### InverterHeatPumpDevice

* InverterHeatPumpDevice - A community-contributed Python module to add support for Tuya WiFi smart inverter heat pump
* Author: [Valentin Dusollier](https://github.com/valentindusollier)
* Tested: Fairland Inverter+ 21kW (IPHR55)

    ```python
    from tinytuya import Contrib

    device = Contrib.InverterHeatPumpDevice(dev_id="devid", address="ip", local_key="key", version="3.3")

    device.set_unit(Contrib.TemperatureUnit.CELSIUS)

    if device.get_fault() != Contrib.InverterHeatPumpFault.NOMINAL:
        print("The inverter can't work normally. Turning off...")
        device.turn_off()
        exit()

    if device.get_inlet_water_temp() < 26:
        device.set_silence_mode(True)
        device.set_target_water_temp(28)
    ```

### PresenceDetectorDevice

* PresenceDetectorDevice - A community-contributed Python module to add support for Tuya WiFi smart presence detector device
* Author: [Mario Antollini](https://github.com/mrioan)
* Tested: [MmWave Human Presence Sensor](https://www.amazon.com/gp/product/B0BZCRNY14)

    ```python
    from tinytuya.Contrib import PresenceDetectorDevice
    import time

    device_id = 'XXXX'                                                                  
    device_ip = 'YYYY'                                                                           
    local_key = 'ZZZZ'

    device = PresenceDetectorDevice.PresenceDetectorDevice(device_id, address=device_ip, local_key=local_key)

    print(" >>>> Begin Monitor Loop <<<< ")
    while(True):
        presence = device.get_presence_state()
        if (presence == 'presence'):
            print('Presence detected!')
        else:
            print('no presence, sleep...') 
        time.sleep(20)
    ```

### BlanketDevice

* BlanketDevice - A community-contributed Python module to add support for Tuya WiFi smart electric blankets
* Author: [Leo Denham](https://github.com/leodenham)
* Tested: [Goldair Platinum Electric Blanket GPFAEB-Q](https://www.target.com.au/p/goldair-platinum-electric-blanket-gpfaeb-q/8300270020_white)

  ```python
  from tinytuya.Contrib import BlanketDevice
  import time

  device = BlanketDevice.BlanketDevice(dev_id="XXXX", address="Y.Y.Y.Y", local_key="ZZZZ", version=3.3)

  device.turn_on()

  # Heat up for 20 minutes then maintain nice temperature overnight.
  device.set_body_level(6)
  time.sleep(60*20)
  device.set_body_level(2)
  device.set_body_time(12)
  ```

### ColorfulX7Device

* ColorfulX7Device - A community-contributed Python module to add support for Tuya Smart WiFi Zigbee BT 'Colorful-X7' LED Music Controller
* Author: [Ahmed Chehaibi](https://github.com/CheAhMeD)
* Tested: [Colorful-X7 mini](https://www.superlightingled.com/colorful-x7-mini-smart-wifi-addressable-rgb-led-music-controller-p-6494.html)

  ```python
    from tinytuya.Contrib import ColorfulX7Device
    import time
    
    EQUILIZER_DEVICE_ID  = 'XXXXXxx'                                                                  
    EQUILIZER_DEVICE_IP  = 'Y.Y.Y.Y'                                                                           
    EQUILIZER_DEVICE_KEY = 'ZzZzZzZ'
    
    controller = ColorfulX7Device.ColorfulX7Device(
        dev_id=EQUILIZER_DEVICE_ID, 
        address=EQUILIZER_DEVICE_IP, 
        local_key=EQUILIZER_DEVICE_KEY, 
        version="3.5")
    
    controller.switch_off()
    state = "ON" if controller.is_on() else "OFF"
    print("Colorful-X7 Status: {}".format(state))
    time.sleep(0.5)
    controller.switch_on()
    state = "ON" if controller.is_on() else "OFF"
    print("Colorful-X7 Status: {}".format(state))
    # Set up the controller for 16x16 WS2811 led matrix
    controller.set_segments_number(16)
    controller.set_leds_PerSegment(16)
    controller.set_led_brand("WS2811")
    # Loop through the dynamic modes
    controller.set_work_mode('DYNAMIC')
    for i in range(1, 180):
        controller.set_dynamic_mode(i)
        time.sleep(2)
  
  ```

## Submit Your Device

* We welcome new device modules!
* Follow the template example in [ThermostatDevice.py](ThermostatDevice.py) to add your device.


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/RFRemoteControlDevice.py

# TinyTuya Contrib RFRemoteControlDevice Module
# -*- coding: utf-8 -*-
"""
 A community-contributed Python module to add support for Tuya WiFi smart universal RF remote controller

 This module attempts to provide everything needed so there is no need to import the base tinytuya module

 Module Author: uzlonewolf (https://github.com/uzlonewolf)
 Based on IRRemoteControlDevice by Alexey 'Cluster' Avdyukhin (https://github.com/clusterm)

 Local Control Classes
    RFRemoteControlDevice(..., version=3.3)
        This class uses a default version of 3.3
        See OutletDevice() for the other constructor arguments

    Functions:
        rf = RFRemoteControlDevice(..., control_type=None)
            -> will immediately connect to the device to try and detect the control type if control_type is not provided
               control_type=1 for older devices using DPS 201/202
               control_type=2 for newer devices using DPS 1-13

        rf.send_command( mode, data={} )
            -> sends a command to the device
               IRRemoteControlDevice.send_command() is used when mode is not 'rf_study', 'rfstudy_exit', 'rfstudy_send',
                   'rf_shortstudy', 'rfshortstudy_exit', or 'send_cmd'

        rf.rf_study_start( freq=0, short=False )
        rf.rf_study_end( freq=0, short=False )
            -> start or end a study session
               freq=0 auto-detects the frequency, or it can be specified as i.e. freq="433.92" or freq="315"
               when sort=True, 'rf_shortstudy' is used instead of 'rf_study'

        rf.rf_receive_button( freq=0, timeout )
            -> call this method and press button on real remote control to read its code in Base64 format
               freq - 0 to auto-detect
               timeout - maximum time to wait for button press

        rf.rf_send_button( base64_code, times=6, delay=0, intervals=0 )
            -> send a learned (raw base64-encoded) button press

        rf.rf_send_key( keys, cmt_bank, system_bank, frequency_bank, datarate_bank, baseband_bank, tx_bank, mode=8, freq=0, rate=0 )
            -> send pre-defined key(s)
               The *_bank values are directly copied from CMOSTEK's RFPDK software (select chip "CMT2300A")
              'keys' can be:
                  a dict containing 'code', 'delay', 'intervals', and  'times'
                  a single hex string
                  a list or tuple containing dicts or hex strings

        RFRemoteControlDevice.rf_print_button( base64_code )
            -> prints and returns the JSON dict as a string from a base64-encoded learned button
                the base64 string is base64 decoded but not JSON parsed

        RFRemoteControlDevice.rf_decode_button( base64_code )
            -> returns the JSON dict as a dict from a base64-encoded learned button
                the base64 string is base64 decoded and then JSON parsed

"""

import base64
import json
import logging
import struct
import time

from ..core import log, CONTROL
from .IRRemoteControlDevice import IRRemoteControlDevice

# extends IRRemoteControlDevice
class RFRemoteControlDevice(IRRemoteControlDevice):
    def send_command( self, mode, data={} ):
        if( mode in ('rf_study', 'rfstudy_exit', 'rfstudy_send', 'rf_shortstudy', 'rfshortstudy_exit') ):
            if 'rf_type' not in data or not data['rf_type']:
                data['rf_type'] = 'sub_2g'
            if 'freq' not in data or not data['freq']:
                data['freq'] = '0'
            if 'ver' not in data or not data['ver']:
                data['ver'] = '2'
            command = { RFRemoteControlDevice.NSDP_CONTROL: mode, 'rf_type': data['rf_type'], 'study_feq': data['freq'], 'ver': data['ver'] }
            if mode == 'rfstudy_send':
                for i in range( 1, 10 ):
                    k = 'key%d' % i
                    if k in data:
                        command[k] = data[k]
            self.set_value( RFRemoteControlDevice.DP_SEND_IR, json.dumps(command), nowait=True )
        elif mode == 'send_cmd':
            data[RFRemoteControlDevice.NSDP_CONTROL] = mode
            self.set_value( RFRemoteControlDevice.DP_SEND_IR, json.dumps(data), nowait=True )
        else:
            super(RFRemoteControlDevice, self).send_command( mode, data )

    def rf_study_start( self, freq=0, short=False ):
        # {"dps":{"201":"{\"rf_type\":\"sub_2g\",\"control\":\"rf_study\",\"study_feq\":\"433\",\"ver\":\"2\"}"}
        data = { 'freq': str(freq) }
        cmd = 'rf_shortstudy' if short else 'rf_study'
        self.send_command( cmd, data )

    def rf_study_end( self, freq=0, short=False ):
        # {"dps":{"201":"{\"rf_type\":\"sub_2g\",\"control\":\"rfstudy_exit\",\"study_feq\":\"433\",\"ver\":\"2\"}"}
        data = { 'freq': str(freq) }
        cmd = 'rfshortstudy_exit' if short else 'rfstudy_exit'
        self.send_command( cmd, data )

    def rf_receive_button( self, freq=0, timeout=30 ):
        log.debug("Receiving button")
        # Exit study mode in case it's enabled
        self.rf_study_end()
        # Enable study mode
        self.rf_study_start( freq=freq )

        # Receiving button code
        response = None
        response_code = None
        found = False
        # Remember old timeout and set new timeout
        old_timeout = self.connection_timeout
        end_at_time = time.time() + timeout
        old_persist = self.socketPersistent
        self.set_socketPersistent( True )
        try:
            while end_at_time > time.time():
                timeo = round(time.time() - end_at_time)
                if timeo < 1: timeo = 1
                self.set_socketTimeout(timeo)

                log.debug("Waiting for button...")
                response = self._send_receive(None)
                if response == None:
                    # Nothing received
                    log.debug("Timeout")
                elif type(response) != dict or "dps" not in response:
                    # Some unexpected result
                    log.debug("Unexpected response: %r", response)
                    response_code = response # Some error message? Pass it.
                    break
                elif self.DP_LEARNED_ID in response["dps"]:
                    # Button code received, extracting it as Base64 string
                    log.info( 'Response (type 1): %r', response )
                    response_code = response["dps"][self.DP_LEARNED_ID]
                    found = True
                    break
                elif self.DP_LEARNED_REPORT in response["dps"]:
                    log.info( 'Response (type 2): %r', response )
                    response_code = response["dps"][self.DP_LEARNED_REPORT]
                    found = True
                    break
                else:
                    # Unknown DPS
                    log.debug("Unknown DPS in response: %r", response)
                    response_code = response # Pass it if we do not get a response we like
                    # try again
        finally:
            # Revert timeout
            self.set_socketTimeout(old_timeout)

        if found:
            self.rf_print_button( response_code )

        # Exit study mode
        self.rf_study_end( freq=freq )

        if not old_persist:
            self.set_socketPersistent( False )

        return response_code

    def rf_send_button( self, base64_code, times=6, delay=0, intervals=0 ):
        # key1\":{\"code\":\"eyJud..iI==\",\"times\":6,\"delay\":0,\"intervals\":0}}"}}'
        log.debug( 'Sending Learned RF Button: ' + base64_code)
        self.rf_print_button( base64_code )

        bdata = self.rf_decode_button( base64_code )
        key1 = { 'code': base64_code, 'times': times, 'delay': delay, 'intervals': intervals }
        data = { 'key1': key1 }
        if bdata:
            if 'study_feq' in bdata: data['freq'] = bdata['study_feq']
            if 'ver' in bdata: data['ver'] = bdata['ver']
        return self.send_command( 'rfstudy_send', data )

    def rf_send_key( self, keys, cmt_bank, system_bank, frequency_bank, datarate_bank, baseband_bank, tx_bank, mode=8, freq=0, rate=0 ):
        """
        'keys' can be:
          a dict containing 'code', 'delay', 'intervals', and  'times'
          a single hex string
          a list or tuple containing dicts or hex strings

        The *_bank values are directly copied from CMOSTEK's RFPDK software (select chip "CMT2300A")
        Example:
          Baseband "b":  [2,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,96,255,0,0,31,16]
          CMT "c":       [0,102,236,28,240,128,20,8,145,2,2,208]
          System "s":    [174,224,53,0,0,244,16,226,66,32,0,129]
          Data Rate "d": [63,30,128,204,0,0,0,0,0,0,0,41,192,218,33,75,5,0,80,45,0,1,5,5]
          TX "t":        [81,154,12,0,12,176,0,31,4,63,127]
          Frequency "f": [66,113,206,28,66,91,28,28]
        """
        if len(cmt_bank) != 12 or type(cmt_bank) not in (list, tuple):
            raise ValueError( 'CMT Bank list/tuple size must be 12' )
        if len(system_bank) != 12 or type(system_bank) not in (list, tuple):
            raise ValueError( 'System Bank list/tuple size must be 12' )
        if len(frequency_bank) != 8 or type(frequency_bank) not in (list, tuple):
            raise ValueError( 'Frequency Bank list/tuple size must be 8' )
        if len(datarate_bank) != 24 or type(datarate_bank) not in (list, tuple):
            raise ValueError( 'Data Rate Bank list/tuple size must be 24' )
        if len(baseband_bank) != 29 or type(baseband_bank) not in (list, tuple):
            raise ValueError( 'Baseband Bank list/tuple size must be 29' )
        if len(tx_bank) != 11 or type(tx_bank) not in (list, tuple):
            raise ValueError( 'TX Bank list/tuple size must be 11' )

        # {"dps":{"201":"{\"rf_type\":\"sub_2g\",\"mode\":8,\"key1\":{\"code\":\"ffffc01fa4934924924924934d34924da4926db0\",\"delay\":0,\"intervals\":0,\"times\":5},\"feq\":0,\"rate\":0,\"cfg\":{\"b\":[2,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,96,255,0,0,31,16],\"c\":[0,102,236,28,240,128,20,8,145,2,2,208],\"s\":[174,224,53,0,0,244,16,226,66,32,0,129],\"d\":[63,30,128,204,0,0,0,0,0,0,0,41,192,218,33,75,5,0,80,45,0,1,5,5],\"t\":[81,154,12,0,12,176,0,31,4,63,127],\"f\":[66,113,206,28,66,91,28,28]},\"control\":\"send_cmd\"}"}

        if type(keys) == dict:
            data = { 'key1': keys }
        elif type(keys) == str:
            data = { 'key1': { 'code': keys, 'delay': 0, 'intervals': 0, 'times': 5 } }
        elif type(keys) in (list, tuple):
            i = 1
            data = {}
            for k in keys:
                kkey = 'key%d' % i
                if type(k) == dict:
                    data[kkey] = k
                elif type(k) == str:
                    data[kkey] = { 'code': k, 'delay': 0, 'intervals': 0, 'times': 5 }
                else:
                    raise ValueError( 'rf_send_key(): Unknown data type for key: %r' % k )
        else:
            raise ValueError( 'rf_send_key(): Unknown data type for keys: %r' % keys )

        default = { 'delay': 0, 'intervals': 0, 'times': 5 }
        for k in data:
            for d in default:
                if d not in data[k] or type(data[k][d]) != int:
                    data[k][d] = default[d]

        data['rf_type'] = 'sub_2g'
        data['mode'] = mode
        data['feq'] = freq
        data['rate'] = rate
        data['cfg'] = { 'c': cmt_bank, 's': system_bank, 'f': frequency_bank, 'd': datarate_bank, 'b': baseband_bank, 't': tx_bank }

        log.info( 'Sending Keys: %r', data )
        return self.send_command( 'send_cmd', data )

    @staticmethod
    def rf_print_button( base64_code, use_log=None ):
        if not use_log: use_log = log
        try:
            jstr = base64.b64decode( base64_code )
            #jdata = json.loads( jstr )
            use_log.debug( 'Learned button: %s', jstr )
            return jstr
        except:
            use_log.debug( 'Failed to decode learned button: %r', base64_code )
            return None

    @staticmethod
    def rf_decode_button( base64_code ):
        try:
            jstr = base64.b64decode
            jdata = json.loads( jstr )
            return jdata
        except:
            return None


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/SocketDevice.py

# TinyTuya Outlet Device
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya Socket Devices

 Author: Felix Pieschka
 For more information see https://github.com/Felix-Pi

 Local Control Classes
    SocketDevice(...)
        See OutletDevice() for constructor arguments

 Functions
    SocketDevice:
        get_energy_consumption()
        get_current()
        get_power()
        get_get_voltage()
        get_state()
    Inherited
        json = status()                    # returns json payload
        set_version(version)               # 3.1 [default] or 3.3
        set_socketPersistent(False/True)   # False [default] or True
        set_socketNODELAY(False/True)      # False or True [default]
        set_socketRetryLimit(integer)      # retry count limit [default 5]
        set_socketTimeout(timeout)         # set connection timeout in seconds [default 5]
        set_dpsUsed(dps_to_request)        # add data points (DPS) to request
        add_dps_to_request(index)          # add data point (DPS) index set to None
        set_retry(retry=True)              # retry if response payload is truncated
        set_status(on, switch=1, nowait)   # Set status of switch to 'on' or 'off' (bool)
        set_value(index, value, nowait)    # Set int value of any index.
        heartbeat(nowait)                  # Send heartbeat to device
        updatedps(index=[1], nowait)       # Send updatedps command to device
        turn_on(switch=1, nowait)          # Turn on device / switch #
        turn_off(switch=1, nowait)         # Turn off
        set_timer(num_secs, nowait)        # Set timer for num_secs
        set_debug(toggle, color)           # Activate verbose debugging output
        set_sendWait(num_secs)             # Time to wait after sending commands before pulling response
        detect_available_dps()             # Return list of DPS available from device
        generate_payload(command, data)    # Generate TuyaMessage payload for command with data
        send(payload)                      # Send payload to device (do not wait for response)
        receive()
"""

from ..core import Device


class SocketDevice(Device):
    """
    Represents a Tuya based Socket
    """

    DPS_STATE = '1'
    DPS_CURRENT = '18'
    DPS_POWER = '19'
    DPS_VOLTAGE = '20'

    def get_energy_consumption(self):
        data = self.status()
        return {**self.get_current(data), **self.get_power(data), **self.get_voltage(data)}

    def get_current(self, status_data=None):
        if status_data is None:
            status_data = self.status()

        current = status_data['dps'][self.DPS_CURRENT]

        return {'current_raw': current,
                'current_fmt': str(current) + ' mA', }

    def get_power(self, status_data=None):
        if status_data is None:
            status_data = self.status()

        power = status_data['dps'][self.DPS_POWER] / 10

        return {'power_raw': power,
                'power_fmt': str(power) + ' W', }

    def get_voltage(self, status_data=None):
        if status_data is None:
            status_data = self.status()

        voltage = status_data['dps'][self.DPS_VOLTAGE] / 10

        return {'voltage_raw': voltage,
                'voltage_fmt': str(voltage) + ' V'}

    def get_state(self):
        return {'on': self.status()['dps'][self.DPS_STATE]}


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/ThermostatDevice.py

# TinyTuya Contrib ThermostatDevice Module
# -*- coding: utf-8 -*-
"""
 A community-contributed Python module to add support for Tuya WiFi smart thermostats

 This module attempts to provide everything needed so there is no need to import the base tinytuya module

 Module Author: uzlonewolf (https://github.com/uzlonewolf)

 Local Control Classes
    ThermostatDevice(..., version=3.3, persist=True)
        This class uses a default version of 3.3 and enables persistance so we can catch temperature updates
        See OutletDevice() for the other constructor arguments

 Additional Classes
    ThermostatSensorList(dps, parent_device)
        Mainly used internally, exposed in case it's useful elsewhere
        The 'dps' argument should be the DPS ID of the list so it knows what DPS to send when updating a sensor option
        The 'parent_device' argument should be the ThermostatDevice() this sensor list belongs to


    Sensor related functions:
        tstatdev = ThermostatDevice(...)
        tstatdev.sensors
            -> an iterable list of all the sensors that can also be acessed like a dict:

              for sensor in tstatdev.sensors:
                  if not sensor.online:
                      print( 'Sensor %r offline!' % sensor.name )

              if tstatdev.sensors['12345678'].battery < 10:
                  print( 'Sensor %r low battery!' % tstatdev.sensors['12345678'].name )
              else:
                  print( 'Sensor %r battery %d%%' % (tstatdev.sensors['12345678'].name, tstatdev.sensors['12345678'].battery ) )

            dict access matches against both name and id:
              tstatdev.sensors['name'] and tstatdev.sensors['id'] both work

        When sensor values change, the sensor object is also available in data['changed_sensors'].  i.e.
            data = tstatdev.receive()
            if data and 'changed_sensors' in data:
                for sensor in data['changed_sensors']:
                    if 'temperature' in sensor['changed'] and sensor.online:
                        ...do something with sensor.temperature or whatever...

        sensors have the following attributes:
          id -> ID # of the sensor as a hex string
          raw_id -> ID # of the sensor as a integer
          name -> decoded and trimmed name of the sensor
          raw_name -> NUL-padded name of the sensor as a byte array
          enabled -> sensor enabled flag True/False
          occupied -> sensor detected occupancy flag True/False
          temperature -> temperature in degrees C as a float
          raw_temperature -> temperature as reported by the sensor (degrees C * 100)
          temperature_used -> the rounded temperature used in averaging calculations
          raw_temperature_used -> the rounded temperature used in averaging calculations (degrees C * 100)
          online -> sensor online flag True/False
          participation -> schedule participation bitmask ['wake', 'away', 'home', 'sleep']
          battery -> battery percentage remaining
          unknown2 -> value of unknown field, integer 0-255
          firmware_version -> firmware version * 10 (01 = v0.1)
          averaging -> sensor currently participation in the temperature averaging (occupied is True and participation flag for the current schedule mode is set)
          unknown3 -> value of unknown field, 8 byte long byte array
          changed -> list of attributes which have changed since last update

        sensors also have the following methods:
          sensor.setName( new_name )
          sensor.setEnabled( enabled )
          sensor.setOccupied( occupied )
              -> not really useful for remote sensors as they get overwritten on the next update
          sensor.setParticipation( flag, val=True )
              -> flag can be either a string in ['wake', 'away', 'home', 'sleep'] or an integer bitmask
                 when it's a string, val sets (True) or clears (False) that particular flag
                 when it's a integer, the bitmask is set to flag and val is ignored
          sensor.getParticipation( flag )
              -> flag can be either a string in ['wake', 'away', 'home', 'sleep'] or an integer bitmask
                 returns True if (string) flag is set or (integer) bitmask matches exactly, otherwise returns False
              -> if the current value of all flags is wanted, the sensor.participation field can be read directly instead of using this function
          sensor.setUnknown2( val )
              -> sets the second unknown field to val.  'val' should be an integer in the range 0-255
          sensor.setUnknown3( val )
              -> sets the third unknown field to val.  'val' should be a 8 byte long byte array

        If multiple sensor options are going to be changed at the same time, it is much quicker to queue the updates and send them all at once:
            sensor.delayUpdates()
            ... call sensor.setName() or whatever here ...
            sensor.sendUpdates()


    Thermostat related functions:
        delayUpdates()
            -> when changing multiple settings, calling this first will cause them to be queued and sent all at once later
        sendUpdates()
            -> sends all queued updates at once and disables queueing (delayUpdates() will need to be called again if you want to queue things)

        setSetpoint( setpoint, cf=None )
            -> tried to auto-detect which setpoint you want to set (cooling or heating)) using the system mode and sets it
               if cf is None it assumes the given setpoint is the same temperature unit (degrees C or F) as the system temperature unit
        setCoolSetpoint( setpoint, cf=None )
            -> sets the cooling setpoint, for when the system mode is 'cool' or 'auto'
        setHeatSetpoint( setpoint, cf=None )
            -> sets the heating setpoint, for when the system mode is 'heat' or 'auto'
        setMiddleSetpoint( setpoint, cf=None )
            -> you should not need to call this, the thermostat handles it
               matches the cool or heat setpoint if the system is in those modes, or the midpoint between them if the mode is 'auto'

        setMode( mode )
            -> sets the system mode.  mode should be a string in ['cool', 'heat', 'auto', 'off']
        setFan( fan )
            -> sets the fan mode.  fan should be True (on), False (auto), or a string in ['on', 'auto', 'circ']
        setFanRuntime( runtime )
            -> when the fan mode is 'circ' this sets how many minutes per hour the fan is run to circulate the air
        setUnits( cf )
            -> sets the system temperature units.  cf should be a string in ['c', 'f']
        setSchedule( schedule )
            -> enables or disables the previously-created schedule.  creating a new schedule is not yet implemented
        setHold( hold )
            -> sets the temperature hold.  hold should be True (permhold), False (followschedule), or a string in ['permhold', 'temphold', 'followschedule']

        getCF(cf=None)
            -> parses the given cf value and returns either 'c' or 'f', or returns the system temperature units if cf is None
        isSingleSetpoint()
            -> returns True if the system is expecting a single temperature (mode is 'cool' or 'heat'), or False if it is expecting separate cool and heat setpoints

        sendPing()
            -> sends a async heartbeat packet
        sendStatusRequest()
            -> sends a async status request packet
        status()
            -> sends a synchronous status request packet and returns the result after parsing it
        receive()
            -> receives a single packet and returns the result after parsing it

        setValue( key, val )
            -> directly set a key in the dict.  you probably do not need to call this directly
        setValues( dict )
            -> directly set multiple keys in the dict.  you probably do not need to call this directly
        parseValue( key, val )
            -> converts a value to the format the DPS is expecting for that particular key.  you probably do not need to call this directly

    attributes:
        mode -> ['auto', 'cool', 'heat', 'emergencyheat', 'off']
        fan -> ['auto', 'cycle', 'on']
        system -> current system state, ['fanon', 'coolfanon', 'alloff', 'heatfanon', 'heaton']
        setpoint_c -> either the setpoint when system is not in 'auto' mode, or the midpoint between the heating and cooling setpoints
        temp_set -> alias for setpoint_c
        setpoint_f and temp_set_f -> same as setpoint_c but in degrees F
        cooling_setpoint_c and upper_temp
        cooling_setpoint_f and upper_temp_f
        heating_setpoint_c and lower_temp
        heating_setpoint_f and lower_temp_f
        units and temp_unit_convert -> system temperature units, either 'c' or 'f'
        temp_correction -> offset to adjust displayed sensor temperatures
        temperature_c and temp_current -> current temperature in degrees C
        temperature_f and temp_current_f -> current temperature in degrees F
        humidity -> RH%
        fault -> fault flags, [e1, e2, e3]
        system_type -> '4'=heatpump, '5'=2-stage heatpump?
        home -> ??
        schedule -> ThermostatSchedule() class
        schedule_enabled -> flag True/False
        hold -> ['permhold', 'temphold', 'followschedule']
        vacation -> binary blob
        fan_run_time -> when the fan mode is 'circ' this is how many minutes per hour the fan is run to circulate the air
        weather_forcast -> ??

    status() and receive() both return a dict containing both the raw DPS dict as well as a list of changed attributes in 'changed' and a list of changed sensors in 'changed_sensors'
     these can be used like:

            data = tstatdev.receive()
            if data and 'changed' in data:
                if 'system' in data['changed']:
                    print( 'System State changed, current temperature is:', tstatdev.temperature_c )
                for changed in data['changed']:
                    print( 'Changed:', changed, 'New Value:', getattr( tstatdev, changed ) )
            if data and 'changed_sensors' in data:
                for sensor in data['changed_sensors']:
                    print( 'Sensor Changed! Changed Attribs:%r DPS:%s ID:%s Name:"%s" Current Temperature: %r' % (sensor.changed, sensor.parent_sensorlist.dps, sensor.id, sensor.name, sensor.temperature) )
                    if 'sensor_added' in sensor.changed:
                        print( 'New sensor was added!' )
                    if 'name' in sensor.changed:
                        print( 'Sensor was renamed!' )
                    for changed in sensor.changed:
                        print( 'Changed:', changed, 'New Value:', getattr( sensor, changed ) )

    ThermostatSchedule class:

        !! WARNING !! The thermostat does NOT send the current schedule when you request the status, it only sends it when it has changed.  So, you
            must either a) set the entire schedule or b) change it in the app or on the thermostat itself while tinytuya is running.  Changes to a
            single day/period/value can only be made once this has been done.

        'day' is a case-insensitive string starting with su, m, tu, w, th, f, sa or an integer in the range 0-6
        'period' is a case-insensitive string starting with w[ake], a[way], h[ome], s[leep], e[xtra] or an integer in the range 0-4
            -> Only periods 0-3 (wake-sleep) show up in the app or on the thermostat! (4 (extra) is hidden)

        Schedule parameters can be accessed directly by dict via name or index:
            tstatdev.schedule[1][0].coolto = 25.0 or
            tstatdev.schedule['monday']['wake'].coolto = 25.0 or
            tstatdev.schedule['m']['w'].coolto = 25.0 or
            tstatdev.schedule['MoNdAySsUcK']['WakeMeUp'].coolto = 25.0
        all mean the same thing.  Parameters can also be set using the .setPeriod method:
            tstatdev.schedule.setPeriod( day_of_week, period, coolto=25.0, heatto=10.0, time=0, participation=(period & 3) )
        To disable a schedule period (set the time to 0xFFFF) you can:
            tstatdev.schedule.setPeriod( day, 4, delete=True)

        Once a day is set you can copy it to a different day with:
            # copy sunday (0) to monday-saturday (1-6)
            for i in range(6):
                tstatdev.schedule.copyDay( 0, i+1 )

        Individual periods can also be copied:
            tstatdev.schedule.copyPeriod( src_day, src_period, dst_day, dst_period )
"""

import struct
import base64

from ..core import Device, log, HEART_BEAT, DP_QUERY, CONTROL

class ThermostatDevice(Device):
    """
    Represents a Tuya based 24v Thermostat.
    """

    sensor_dps = ('122', '125', '126', '127', '128')
    dps_data = {
        '2' : { 'name': 'mode', 'enum': ['auto', 'cool', 'heat', 'emergencyheat', 'off'] },
        '16': { 'name': 'temp_set', 'alt': 'setpoint_c', 'scale': 100 },
        '17': { 'name': 'temp_set_f', 'alt': 'setpoint_f' },
        '18': { 'name': 'upper_temp_f', 'alt': 'cooling_setpoint_f', 'high_resolution': False },
        '19': { 'name': 'upper_temp', 'alt': 'cooling_setpoint_c', 'high_resolution': False },
        '20': { 'name': 'lower_temp_f', 'alt': 'heating_setpoint_f', 'high_resolution': False },
        '23': { 'name': 'temp_unit_convert', 'alt': 'units', 'enum': ['f','c'] },
        '24': { 'name': 'temp_current', 'alt': 'temperature_c', 'scale': 100 },
        '26': { 'name': 'lower_temp', 'alt': 'heating_setpoint_c', 'high_resolution': False },
        '27': { 'name': 'temp_correction', 'high_resolution': False },
        '29': { 'name': 'temp_current_f', 'alt': 'temperature_f' },
        '34': { 'name': 'humidity' },
        '45': { 'name': 'fault' },
        '107': { 'name': 'system_type', 'decode': int },
        '108': { 'name': 'upper_temp', 'alt': 'cooling_setpoint_c', 'scale': 100, 'high_resolution': True },
        '109': { 'name': 'lower_temp', 'alt': 'heating_setpoint_c', 'scale': 100, 'high_resolution': True },
        '110': { 'name': 'upper_temp_f', 'alt': 'cooling_setpoint_f', 'high_resolution': True },
        '111': { 'name': 'lower_temp_f', 'alt': 'heating_setpoint_f', 'high_resolution': True },
        '115': { 'name': 'fan', 'enum': ['auto', 'cycle', 'on'] },
        '116': { 'name': 'home' },
        '118': { 'name': 'schedule', 'base64': True, 'selfclass': 'ThermostatSchedule' },
        '119': { 'name': 'schedule_enabled' },
        '120': { 'name': 'hold', 'enum': ['permhold', 'temphold', 'followschedule'] },
        '121': { 'name': 'vacation', 'base64': True },
        #'122': { 'name': 'sensor_list_1', 'base64': True },
        '123': { 'name': 'fan_run_time' }, # presumably for when fan='circ'
        #'125': { 'name': 'sensor_list_2', 'base64': True },
        #'126': { 'name': 'sensor_list_3', 'base64': True },
        #'127': { 'name': 'sensor_list_4', 'base64': True },
        #'128': { 'name': 'sensor_list_5', 'base64': True },
        '129': { 'name': 'system', 'enum': ['fanon', 'coolfanon', 'alloff', 'heatfanon', 'heaton'] },
        '130': { 'name': 'weather_forcast' }
        }

    def __init__(self, *args, **kwargs):
        # set the default version to 3.3 as there are no 3.1 devices
        if 'version' not in kwargs or not kwargs['version']:
            kwargs['version'] = 3.3
        # set persistant so we can receive sensor broadcasts
        if 'persist' not in kwargs:
            kwargs['persist'] = True
        super(ThermostatDevice, self).__init__(*args, **kwargs)

        self.high_resolution = None
        self.schedule = None
        self.delay_updates = False
        self.delayed_updates = { }
        self.sensorlists = [ ]
        self.sensors = self.SensorList( self )

        for k in self.sensor_dps:
            self.sensorlists.append(ThermostatSensorList(k, self))

        for k in self.dps_data:
            val = None

            if 'selfclass' in self.dps_data[k]:
                val = getattr( self, self.dps_data[k]['selfclass'] )( self, k )

            setattr( self, self.dps_data[k]['name'], val )
            if 'alt' in self.dps_data[k]:
                setattr( self, self.dps_data[k]['alt'], val )

            if( ('scale' in self.dps_data[k]) or (('base64' in self.dps_data[k]) and self.dps_data[k]['base64']) or ('selfclass' in self.dps_data[k]) or ('decode' in self.dps_data[k]) ):
                self.dps_data[k]['check_raw'] = True

            if 'check_raw' in self.dps_data[k] and self.dps_data[k]['check_raw']:
                setattr( self, 'raw_' + self.dps_data[k]['name'], None )

    def delayUpdates( self ):
        self.delay_updates = True

    def setSetpoint( self, setpoint, cf=None ):
        if self.mode == 'cool':
            return self.setCoolSetpoint( setpoint, cf )
        elif self.mode == 'heat' or self.mode == 'emergencyheat':
            return self.setHeatSetpoint( setpoint, cf )
        else:
            # no idea, let the thermostat figure it out
            return self.setMiddleSetpoint( setpoint, cf )

    def setCoolSetpoint( self, setpoint, cf=None ):
        k = 'cooling_setpoint_' + self.getCF( cf )
        return self.setValue( k, setpoint )

    def setHeatSetpoint( self, setpoint, cf=None ):
        k = 'heating_setpoint_' + self.getCF( cf )
        return self.setValue( k, setpoint )

    def setMiddleSetpoint( self, setpoint, cf=None ):
        k = 'setpoint_' + self.getCF( cf )
        return self.setValue( k, setpoint )

    def setMode( self, mode ):
        return self.setValue( 'mode', mode )

    def setFan( self, fan ):
        if not fan:
            fan = 'auto'
        elif fan is True:
            fan = 'on'
        return self.setValue( 'fan', fan )

    def setUnits( self, cf ):
        cf = self.getCF( cf )
        return self.setValue( 'temp_unit_convert', cf )

    def setSchedule( self, sch ):
        # FIXME set schedule data?
        if sch:
            return self.setValue( 'schedule_enabled', True )
        return self.setValue( 'schedule_enabled', False )

    def setHold( self, hold ):
        if hold is True:
            return self.setValue( 'hold', 'permhold' )

        if hold is False:
            return self.setValue( 'hold', 'followschedule' )

        return self.setValue( 'hold', hold )

    def setFanRuntime( self, rt ):
        return self.setValue( 'fan_run_time', int(rt) )

    def setValue( self, key, val ):
        dps, val = self.parseValue( key, val )

        if not self.delay_updates:
            return self.set_value( dps, val, nowait=True )

        self.delayed_updates[dps] = val
        return True

    def setValues( self, val_dict ):
        for key in val_dict:
            dps, val = self.parseValue( key, val_dict[key] )
            self.delayed_updates[dps] = val

        if not self.delay_updates:
            payload = self.generate_payload(CONTROL, self.delayed_updates)
            self.delayed_updates = { }
            return self.send(payload)

        return True

    def parseValue( self, key, val ):
        dps = None
        for k in self.dps_data:
            if( (key == self.dps_data[k]['name']) or (('alt' in self.dps_data[k]) and (key == self.dps_data[k]['alt'])) ):
                if( ('high_resolution' not in self.dps_data[k]) or (self.dps_data[k]['high_resolution'] == self.high_resolution) ):
                    dps = k
                    break

        if not dps:
            log.warn( 'Requested key %r not found!' % key )
            return False

        ddata = self.dps_data[dps]

        if 'scale' in ddata:
            val = int( val * ddata['scale'] )

        if 'encode' in ddata:
            val = ddata['encode']( val )

        if 'enum' in ddata:
            if val not in ddata['enum']:
                log.warn( 'Requested value %r for key %r/%r not in enum list %r !  Setting anyway...' % (val, dps, key, ddata['enum']) )

        if 'base64' in ddata:
            val = base64.b64encode( val ).decode('ascii')

        return ( dps, val )

    def sendUpdates( self ):
        self.delay_updates = False

        if len(self.delayed_updates) > 0:
            payload = self.generate_payload(CONTROL, self.delayed_updates)
            self.delayed_updates = { }
            return self.send(payload)

        return False

    def getCF( self, cf=None ):
        if cf is None:
            cf = getattr(self, 'temp_unit_convert', 'c')
        if cf == 'f':
            return 'f'
        return 'c'

    def isSingleSetpoint( self ):
        if self.mode == 'auto':
            return False

        return True

    def sendPing( self ):
        payload = self.generate_payload( HEART_BEAT )
        return self.send(payload)

    def sendStatusRequest( self ):
        payload = self.generate_payload( DP_QUERY )
        return self.send(payload)

    def status(self):
        return super(ThermostatDevice, self).status()

    def receive(self):
        return self._send_receive(None)

    def _process_response( self, data ):
        if not data:
            return data

        if 'dps' not in data:
            return data

        data['changed'] = [ ]
        data['changed_sensors'] = [ ]

        for i in range( len(self.sensor_dps) ):
            k = self.sensor_dps[i]
            if k in data['dps']:
                data['changed_sensors'] += self.sensorlists[i].update( data['dps'][k] )

        if self.high_resolution is None:
            for k in self.dps_data:
                if k in data['dps'] and 'high_resolution' in self.dps_data[k]:
                    self.high_resolution = self.dps_data[k]['high_resolution']
                    log.info('ThermostatDevice: high-resolution is now %r' % self.high_resolution)
                    break

        for k in data['dps']:
            if k in self.dps_data:
                name = self.dps_data[k]['name']
                checkname = ('raw_' + name) if 'check_raw' in self.dps_data[k] and self.dps_data[k]['check_raw'] else name
                val = data['dps'][k]

                if getattr( self, checkname ) == val:
                    continue

                data['changed'].append( name )
                if name != checkname: data['changed'].append( checkname )
                setattr( self, checkname, val )

                if ('base64' in self.dps_data[k]) and self.dps_data[k]:
                    val = base64.b64decode( val )

                if 'selfclass' in self.dps_data[k]:
                    getattr( self, name ).update( val )

                    if 'alt' in self.dps_data[k]:
                        data['changed'].append( self.dps_data[k]['alt'] )
                        setattr( self, self.dps_data[k]['alt'], getattr( self, name ) )
                else:
                    if 'decode' in self.dps_data[k]:
                        val = self.dps_data[k]['decode']( val )

                    if 'scale' in self.dps_data[k]:
                        val /= self.dps_data[k]['scale']

                    setattr(self, name, val)

                    if 'enum' in self.dps_data[k]:
                        if val not in self.dps_data[k]['enum']:
                            log.warn( 'Received value %r for key %r/%r not in enum list %r !  Perhaps enum list needs to be updated?' % (val, k, name, self.dps_data[k]['enum']) )

                    if 'alt' in self.dps_data[k]:
                        data['changed'].append( self.dps_data[k]['alt'] )
                        setattr( self, self.dps_data[k]['alt'], val )

        return data

    def __iter__(self):
        for k in self.dps_data:
            if 'alt' in self.dps_data[k]:
                yield (self.dps_data[k]['alt'], getattr(self, self.dps_data[k]['alt']))
            yield (self.dps_data[k]['name'], getattr(self, self.dps_data[k]['name']))

    class SensorList:
        def __init__( self, parent ):
            self.parent = parent

        def find_sensor( self, name ):
            for l in self.parent.sensorlists:
                for s in l:
                    if s.id == name or s.name == name:
                        return s

            return None

        def __getitem__( self, key ):
            if isinstance( key, str ):
                return self.find_sensor( key )
            elif not isinstance( key, int ):
                return getattr( self, key )

            i = 0
            for l in self.parent.sensorlists:
                for s in l:
                    if i == key:
                        return s
                    i += 1

            return None

        def __len__( self ):
            i = 0
            for l in self.parent.sensorlists:
                for s in l:
                    i += 1
            return i

        def __iter__( self ):
            for l in self.parent.sensorlists:
                for s in l:
                    yield s

        def __call__( self ):
            for l in self.parent.sensorlists:
                for s in l:
                    yield s


    class ThermostatSchedule(object):
        class ScheduleDay:
            class SchedulePeriod:
                def __init__( self, sched ):
                    self.sched = sched
                    self.participation = 0xFF
                    self.time = 0xFFFF
                    self.heatto = -32768
                    self.coolto = -32768

                def __setitem__( self, key, data ):
                    if not isinstance( key, int ):
                        setattr( self, key, data )

                    if key == 0: self.participation = data
                    elif key == 1: self.time = data
                    elif key == 2: self.heatto = data
                    elif key == 3: self.coolto = data
                    else: raise IndexError('Numeric index must be an integer 0-3')

                def __getitem__( self, key ):
                    if not isinstance( key, int ):
                        return getattr(self, key)

                    if key == 0: return self.participation
                    elif key == 1: return self.time
                    elif key == 2: return self.heatto
                    elif key == 3: return self.coolto
                    else: raise IndexError('Numeric index must be an integer 0-3')

                def __len__( self ):
                    return 4

                def __iter__( self ):
                    yield self.participation
                    yield self.time
                    yield self.heatto
                    yield self.coolto

                def __bytes__( self ):
                    cf = self.sched.parent.getCF( self.sched.cf )

                    if self.heatto < -100 or self.heatto > 100:
                        heatto = round(self.heatto)
                    else:
                        heatto = self.heatto
                        # schedule is in C, so convert from F
                        if cf == 'f':
                            heatto = (heatto - 32) / 1.8
                        heatto = round(heatto * 100)
                        heatmod = heatto % 50
                        heatto -= heatmod
                        if heatmod >= 25: heatto += 50

                    if self.coolto < -100 or self.coolto > 100:
                        coolto = round(self.coolto)
                    else:
                        coolto = self.coolto
                        # schedule is in C, so convert from F
                        if cf == 'f':
                            coolto = (coolto - 32) / 1.8
                        coolto = round(coolto * 100)
                        coolmod = coolto % 50
                        coolto -= coolmod
                        if coolmod >= 25: coolto += 50

                    log.info( 'CF is: %r %r %r cool: %r %r %r', cf, self.heatto, heatto / 100, self.coolto, coolto / 100, self.time )

                    # if self.time is a string then it needs to be in 24-hour HH:MM[:SS] format!
                    if isinstance( self.time, str ):
                        tparts = self.time.split( ':' )
                        if len(tparts) >= 2:
                            ptime = (int(tparts[0]) * 60) + int(tparts[1])
                        else:
                            ptime = int(tparts[0])
                    elif isinstance( self.time, int ):
                        ptime = self.time
                    else:
                        ptime = int(self.time)

                    return struct.pack( '>BHhh', self.participation, ptime, heatto, coolto )

                def __repr__( self ):
                    return bytes(self).hex().upper()

            def __init__( self, sched ):
                self.sched = sched
                self.periods = [ ]
                for i in range( 5 ):
                    sp = self.SchedulePeriod( sched )
                    self.periods.append( sp )

            def period_to_idx( self, period ):
                if isinstance( period, int ):
                    if period >= 0 and period < 5:
                        return period
                    raise ValueError('"period" must be an integer in the range 0-4 or a string containing the period name')

                if not isinstance( period, str ):
                    raise ValueError('"period" must be an integer in the range 0-4 or a string containing the period name')

                period = period[0].lower()
                if period == 'w': return 0 # wake
                if period == 'a': return 1 # away
                if period == 'h': return 2 # home
                if period == 's': return 3 # sleep
                if period == 'e': return 4 # extra

                raise ValueError('"period" must be an integer in the range 0-4 or a string containing the period name')

            def __setitem__( self, key, data ):
                if isinstance( key, str ):
                    key = self.period_to_idx( key )
                elif not isinstance( key, int ):
                    setattr( self, key, data )

                if key < 0 or key > 4:
                    raise IndexError('Numeric index must be an integer 0-4')

                self.periods[key] = data

            def __getitem__( self, key ):
                if isinstance( key, str ):
                    key = self.period_to_idx( key )
                elif not isinstance( key, int ):
                    return getattr( self, key )

                if key < 0 or key > 4:
                    raise IndexError('Numeric index must be an integer 0-4')

                return self.periods[key]

            def __len__( self ):
                return 5

            def __iter__( self ):
                for p in self.periods:
                    yield p

            def __bytes__( self ):
                ret = bytearray()
                for period in self.periods:
                    ret += bytearray( bytes( period ) )
                return bytes(ret)

            def __repr__( self ):
                return bytes(self).hex().upper()


        def __init__( self, parent, dps ):
            self.parent = parent
            self.dps = dps
            self.have_data = False
            self.cf = None

            self.day_data = [ ]

            for i in range( 7 ):
                sd = self.ScheduleDay( self )
                self.day_data.append( sd )

        def day_to_idx( self, day ):
            if isinstance( day, int ):
                if day >= 0 and day < 7:
                    return day
                raise ValueError('"day" must be an integer in the range 0-6 or a string containing the day name')

            if not isinstance( day, str ):
                raise ValueError('"day" must be an integer in the range 0-6 or a string containing the day name')

            day = day[:2].lower()
            if day == 'su':   return 0
            if day[0] == 'm': return 1
            if day == 'tu':   return 2
            if day[0] == 'w': return 3
            if day == 'th':   return 4
            if day[0] == 'f': return 5
            if day == 'sa':   return 6

            raise ValueError('"day" must be an integer in the range 0-6 or a string containing the day name')

        def copyDay( self, src, dst ):
            src = self.day_to_idx( src )
            dst = self.day_to_idx( dst )

            for period in range( len(self.day_data[src]) ):
                for itm in range( len(self.day_data[src][period]) ):
                    self.day_data[dst][period][itm] = self.day_data[src][period][itm]

            return self.have_data

        def copyPeriod( self, src_day, src_period, dst_day, dst_period ):
            src_day = self.day_to_idx( src_day )
            #src_period = self.period_to_idx( src_period )
            dst_day = self.day_to_idx( dst_day )
            #dst_period = self.period_to_idx( dst_period )

            for itm in range( len(self.day_data[src_day][src_period]) ):
                self.day_data[dst_day][dst_period][itm] = self.day_data[src_day][src_period][itm]

            return self.have_data

        def setPeriod( self, day, period, **kwargs ):
            day = self.day_to_idx( day )
            #period = self.period_to_idx( period )

            if 'delete' in kwargs:
                self.day_data[day][period] = self.ScheduleDay.SchedulePeriod( self )

            if 'participation' in kwargs:
                self.day_data[day][period].participation = kwargs['participation']

            if 'time' in kwargs:
                self.day_data[day][period].time = kwargs['time']

            if 'heatto' in kwargs:
                self.day_data[day][period].heatto = kwargs['heatto']

            if 'coolto' in kwargs:
                self.day_data[day][period].coolto = kwargs['coolto']

            if self.day_data[day][period][0] > 3 and self.day_data[day][period][1] < 1440:
                if self.day_data[day][period][0] != 0xFF:
                    log.warn('Selected participation flag is out of range, setting to %d', period)
                self.day_data[day][period][0] = period & 3

        def setCF( self, cf ):
            self.cf = cf

        def update( self, data ):
            self.have_data = False

            if len(data) % 7 != 0:
                log.warn( 'Schedule data is in an unknown format, ignoring schedule' )
                return False

            cf = self.parent.getCF( self.cf )
            daylen = int(len(data) / 7)
            for dow in range( 7 ):
                offset = dow * daylen
                day = data[offset:offset+daylen]

                if len(day) % 7 != 0:
                    log.warn( 'Schedule day data for day %d is in an unknown format, ignoring schedule' % dow )
                    return False

                periods = len(day) / 7
                period = -1

                for dayoffset in range( 0, len(day), 7 ):
                    period += 1
                    perioddata = day[dayoffset:dayoffset+7]

                    if len(perioddata) != 7:
                        log.warn( 'Schedule period data for period %d on day %d is in an unknown format, ignoring schedule' % (period, dow) )
                        return False

                    newdata = struct.unpack( '>BHhh', perioddata )

                    for i in range( len(newdata) ):
                        self.day_data[dow][period][i] = newdata[i]

                    # display the time as 24-hour HH:MM
                    if self.day_data[dow][period].time < 1440:
                        hrs = int(self.day_data[dow][period].time / 60)
                        mins = self.day_data[dow][period].time % 60
                        self.day_data[dow][period].time = '%d:%02d' % (hrs,mins)

                    if self.day_data[dow][period].heatto > -10000 and self.day_data[dow][period].heatto < 10000:
                        self.day_data[dow][period].heatto /= 100
                        if cf == 'f':
                            self.day_data[dow][period].heatto = round((self.day_data[dow][period].heatto * 1.8) + 32)

                    if self.day_data[dow][period].coolto > -10000 and self.day_data[dow][period].coolto < 10000:
                        self.day_data[dow][period].coolto /= 100
                        if cf == 'f':
                            self.day_data[dow][period].coolto = round((self.day_data[dow][period].coolto * 1.8) + 32)

            self.have_data = True

        def save( self ):
            return self.parent.set_value( self.dps, self.b64(), nowait=True )

        def __bytes__( self ):
            ret = bytearray()
            for daydata in self.day_data:
                ret += bytearray( bytes( daydata ) )

            return bytes(ret)

        def __repr__( self ):
            #if not self.have_data:
            #    return ''
            return bytes(self).hex().upper()

        def b64(self):
            return base64.b64encode( bytes(self) ).decode('ascii')

        def __iter__(self):
            for d in self.day_data:
                yield d

        def __setitem__( self, key, data ):
            if isinstance( key, str ):
                if key == 'cf':
                    self.cf = data
                    return
                key = self.day_to_idx( key )
            elif not isinstance( key, int ):
                setattr( self, key, data )

            if key < 0 or key > 6:
                raise IndexError('Numeric index must be an integer 0-6')

            self.day_data[key] = data

        def __getitem__( self, key ):
            if isinstance( key, str ):
                key = self.day_to_idx( key )
            elif not isinstance( key, int ):
                return getattr( self, key )

            if key < 0 or key > 6:
                raise IndexError('Numeric index must be an integer 0-6')

            return self.day_data[key]


class ThermostatSensorList(object):
    """
    Represents a list of sensors such as what gets returned in DPS 122

    Args:
        dps: the DPS of this sensor list
        parent_device: the ThermostatDevice which this sensor list is attached to


    The .update(sensordata_list) method parses an update
      Args:
        sensordata_list: either a base64-encoded string such as what DPS 122 contains, or an already-decoded byte string

    The .b64() method returns a base64-encoded string ready for sending
    The str() method returns a hexidecimal string to make it easier to visualize the data

    This class is iterable so you can easily loop through the individual sensors

    I.e.
        ## create a new list
        sensor_list_object = ThermostatSensorList( '122', self ) # for DPS 122

        ## populate the sensor data
        sensor_list_object.update( 'base64 string here' )

        ## send an update after changing a sensor value
        send_dps = { '122': sensor_list_object.b64() }
        payload = d.generate_payload(tinytuya.CONTROL, data)
        d.send(payload)
    """

    def __init__( self, dps, parent_device ):
        self.stated_count = 0
        self.actual_count = 0
        self.sensors = [ ]
        self.parent_device = parent_device

        if isinstance(dps, int):
            dps = str(dps)

        self.dps = dps

    def update(self, sensordata_list):
        changed = [ ]
        if isinstance(sensordata_list, str):
            sensordata_list = base64.b64decode( sensordata_list )
        elif not isinstance(sensordata_list, bytes):
            raise TypeError( 'Unhandled Thermostat Sensor List data type' )

        if( len(sensordata_list) < 1 ):
            self.stated_count = self.actual_count = 0
            self.sensors = [ ]
            return

        lenmod = len(sensordata_list) % 52

        if lenmod == 1:
            self.stated_count = sensordata_list[0]
        elif lenmod == 0:
            self.stated_count = None
        else:
            raise TypeError( 'Unhandled Thermostat Sensor List data length' )

        self.actual_count = int((len(sensordata_list) - lenmod) / 52)

        for i in range( self.actual_count ):
            if i < len(self.sensors):
                if self.sensors[i].parse(sensordata_list[(i*52)+lenmod:((i+1)*52)+lenmod]):
                    changed.append(self.sensors[i])
            else:
                self.sensors.append( self.ThermostatSensorData( self ) )
                self.sensors[i].parse(sensordata_list[(i*52)+lenmod:((i+1)*52)+lenmod])
                # instead of listing every field, just say it was added
                self.sensors[i].changed = [ 'sensor_added' ]
                self.sensors[i].sensor_added = True
                changed.append(self.sensors[i])

            # FIXME should we delete removed sensors?

        return changed

    def __repr__( self ):
        if self.stated_count is not None:
            out = '%02X' % self.stated_count
        else:
            out = ''

        for s in self.sensors:
            out += str(s)

        return out

    def b64(self):
        if self.stated_count is not None:
            b = bytearray( [self.stated_count] )
        else:
            b = bytearray()

        for s in self.sensors:
            b += bytearray( bytes( s ) )
        return base64.b64encode( b ).decode('ascii')

    def __iter__(self):
        for s in self.sensors:
            yield s

    class ThermostatSensorData(object):
        # unpack the 52-byte long binary blob
        struct_format = '>I30s??h?BBBB?h6s'
        keys = ('raw_id', 'raw_name', 'enabled', 'occupied', 'raw_temperature_used', 'online', 'participation', 'battery', 'firmware_version', 'unknown2', 'averaging', 'raw_temperature', 'unknown3')
        raw_temperature_used_idx = keys.index( 'raw_temperature_used' )
        raw_temperature_idx = keys.index( 'raw_temperature' )

        def __init__( self, parent_sensorlist ):
            self.parent_sensorlist = parent_sensorlist
            self.raw_id = 0
            self.raw_name = b'\x00' * 30
            self.name = ''
            self.enabled = True
            self.occupied = True
            self.raw_temperature = 0
            self.temperature = 0.0
            self.raw_temperature_used = 0
            self.temperature_used = 0.0
            self.online = True
            self.participation = 0
            self.battery = 0
            self.unknown2 = 0
            self.firmware_version = 0
            self.averaging = True
            self.unknown3 = b'\x00' * 8
            self.changed = [ ]
            self.want_update = [ ]
            self.sensor_added = True
            self.delay_updates = False


        def parse( self, sensordata ):
            new = struct.unpack( self.struct_format, sensordata )
            self.changed = [ ]
            self.sensor_added = False
            self.delay_updates = False

            if new[self.raw_temperature_idx] == 0:
                new = list(new)
                new[self.raw_temperature_idx] = new[self.raw_temperature_used_idx]
                # "int( N / 50 ) * 50" does a pretty good job of matching what the thermostat does
                new[self.raw_temperature_used_idx] = int(new[self.raw_temperature_used_idx] / 50) * 50

            for i in range(len(self.keys)):
                k = self.keys[i]

                if (k in self.want_update) or (getattr(self, k) != new[i]):
                    self.changed.append( k )
                    setattr(self, k, new[i])

            if 'raw_id' in self.changed:
                self.changed.remove('raw_id')
                self.changed.append('id')
                self.id = '%08x' % self.raw_id

            if 'raw_name' in self.changed:
                self.changed.remove('raw_name')
                self.changed.append('name')
                self.name = self.raw_name.strip(b'\x00').decode('utf8')

            if 'raw_temperature' in self.changed:
                self.changed.remove('raw_temperature')
                self.changed.append('temperature')
                self.temperature = self.raw_temperature / 100.0

            if 'raw_temperature_used' in self.changed:
                self.changed.remove('raw_temperature_used')
                self.changed.append('temperature_used')
                self.temperature_used = self.raw_temperature_used / 100.0

            self.want_update = [ ]

            return (len(self.changed) != 0)

        def delayUpdates( self ):
            self.delay_updates = True

        def setName( self, name ):
            self.name = name
            # the app limits the length to 20 chars, so lets do the same
            self.raw_name = name[:20].encode('utf8').rjust( 30, b'\0' )
            self.want_update.append( 'raw_name' )
            self.sendUpdates(False)

        def setEnabled( self, ena ):
            self.enabled = ena
            self.want_update.append( 'enabled' )
            self.sendUpdates(False)

        def setOccupied( self, occ ):
            self.occupied = occ
            self.want_update.append( 'occupied' )
            self.sendUpdates(False)

        def setParticipation( self, flag, val=True ):
            self.want_update.append( 'participation' )

            if isinstance( flag, str ):
                mask = 1 << ( 'wake', 'away', 'home', 'sleep' ).index( flag )
                if val:
                    self.participation |= mask
                else:
                    self.participation &= ~mask
            elif isinstance( flag, int ):
                self.participation = flag

            self.sendUpdates(False)

        #def clearParticipation( self, flag ):
        #    return self.setParticipation( 0, False )

        def getParticipation( self, flag ):
            if isinstance( flag, str ):
                mask = 1 << ( 'wake', 'away', 'home', 'sleep' ).index( flag )
                if (self.participation & mask) == mask:
                    return True
                return False
            elif isinstance( flag, int ):
                if (self.participation & flag) == flag:
                    return True
                return False

            return False

        ## technically the battery level and firmware version can also be changed, no idea why someone would want to do that though
        #def setBattery( self, new_battery ):
        #def setFirmware( self, new_firmware ):

        def setUnknown2( self, u2 ):
            self.unknown2 = u2
            self.want_update.append( 'unknown2' )
            self.sendUpdates(False)

        def setUnknown3( self, u3 ):
            if not isinstance( u3, bytes ):
                u3 = bytes( u3 )

            if len( u3 ) < 8:
                u3 = u3 + (b'\x00' * (8 - len( u3 )))

            self.unknown3 = u3[:8]
            self.want_update.append( 'unknown3' )
            self.sendUpdates(False)

        def sendUpdates( self, force=True ):
            if (not force) and self.delay_updates:
                return

            self.delay_updates = False
            idx = self.parent_sensorlist.parent_device.sensor_dps.index( self.parent_sensorlist.dps )
            self.parent_sensorlist.parent_device.set_value( self.parent_sensorlist.dps, self.parent_sensorlist.b64(), nowait=True )

        def __repr__( self ):
            return bytes(self).hex().upper()

        def __bytes__( self ):
            try:
                return struct.pack( self.struct_format, *(getattr(self, k) for k in self.keys) )
            except:
                log.exception( 'Error while attempting to pack %s with %r/%r/%r/%r/%r/%r/%r/%r/%r/%r/%r/%r', self.struct_format, *(getattr(self, k) for k in self.keys) )
                raise



=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/Contrib/__init__.py

#
# Note: This file has been deprecated, please do not add new modules to it.
# Instead, import new modules with `from tinytuya.Contrib import YourNewModule`
#  and call with `YourNewModule.YourNewModule(...)`
#

from .ThermostatDevice import ThermostatDevice
from .IRRemoteControlDevice import IRRemoteControlDevice
from .SocketDevice import SocketDevice
from .DoorbellDevice import DoorbellDevice
from .ClimateDevice import ClimateDevice
from .AtorchTemperatureControllerDevice import AtorchTemperatureControllerDevice
from .InverterHeatPumpDevice import InverterHeatPumpDevice, TemperatureUnit, InverterHeatPumpMode, InverterHeatPumpFault

DeviceTypes = ["ThermostatDevice", "IRRemoteControlDevice", "SocketDevice", "DoorbellDevice", "ClimateDevice", "AtorchTemperatureControllerDevice", "InverterHeatPumpDevice"]


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/CoverDevice.py

# TinyTuya Cover Device
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya WiFi smart devices

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

 Local Control Classes
    CoverDevice(...)
        See OutletDevice() for constructor arguments

 Functions
    CoverDevice:
        open_cover(switch=1):
        close_cover(switch=1):
        stop_cover(switch=1):

    Inherited
        json = status()                    # returns json payload
        set_version(version)               # 3.1 [default] or 3.3
        set_socketPersistent(False/True)   # False [default] or True
        set_socketNODELAY(False/True)      # False or True [default]
        set_socketRetryLimit(integer)      # retry count limit [default 5]
        set_socketTimeout(timeout)         # set connection timeout in seconds [default 5]
        set_dpsUsed(dps_to_request)        # add data points (DPS) to request
        add_dps_to_request(index)          # add data point (DPS) index set to None
        set_retry(retry=True)              # retry if response payload is truncated
        set_status(on, switch=1, nowait)   # Set status of switch to 'on' or 'off' (bool)
        set_value(index, value, nowait)    # Set int value of any index.
        heartbeat(nowait)                  # Send heartbeat to device
        updatedps(index=[1], nowait)       # Send updatedps command to device
        turn_on(switch=1, nowait)          # Turn on device / switch #
        turn_off(switch=1, nowait)         # Turn off
        set_timer(num_secs, nowait)        # Set timer for num_secs
        set_debug(toggle, color)           # Activate verbose debugging output
        set_sendWait(num_secs)             # Time to wait after sending commands before pulling response
        detect_available_dps()             # Return list of DPS available from device
        generate_payload(command, data)    # Generate TuyaMessage payload for command with data
        send(payload)                      # Send payload to device (do not wait for response)
        receive()
"""

from .core import Device

class CoverDevice(Device):
    """
    Represents a Tuya based Smart Window Cover.
    """

    DPS_INDEX_MOVE = "1"
    DPS_INDEX_BL = "101"

    DPS_2_STATE = {
        "1": "movement",
        "101": "backlight",
    }

    def open_cover(self, switch=1, nowait=False):
        """Open the cover"""
        self.set_status("on", switch, nowait=nowait)

    def close_cover(self, switch=1, nowait=False):
        """Close the cover"""
        self.set_status("off", switch, nowait=nowait)

    def stop_cover(self, switch=1, nowait=False):
        """Stop the motion of the cover"""
        self.set_status("stop", switch, nowait=nowait)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/OutletDevice.py

# TinyTuya Outlet Device
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya WiFi smart devices

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

 Local Control Classes
    OutletDevice(dev_id, address=None, local_key=None, dev_type='default', connection_timeout=5, version=3.1, persist=False
        dev_id (str): Device ID e.g. 01234567891234567890
        address (str, optional): Device Network IP Address e.g. 10.0.1.99, or None to try and find the device
        local_key (str, optional): The encryption key. Defaults to None. If None, key will be looked up in DEVICEFILE if available
        dev_type (str, optional): Device type for payload options (see below)
        connection_timeout (float, optional): The default socket connect and data timeout
        version (float, optional): The API version to use. Defaults to 3.1
        persist (bool, optional): Make a persistant connection to the device

 Functions
    OutletDevice:
        set_dimmer(percentage):

    Inherited
        json = status()                    # returns json payload
        set_version(version)               # 3.1 [default] or 3.3
        set_socketPersistent(False/True)   # False [default] or True
        set_socketNODELAY(False/True)      # False or True [default]
        set_socketRetryLimit(integer)      # retry count limit [default 5]
        set_socketTimeout(timeout)         # set connection timeout in seconds [default 5]
        set_dpsUsed(dps_to_request)        # add data points (DPS) to request
        add_dps_to_request(index)          # add data point (DPS) index set to None
        set_retry(retry=True)              # retry if response payload is truncated
        set_status(on, switch=1, nowait)   # Set status of switch to 'on' or 'off' (bool)
        set_value(index, value, nowait)    # Set int value of any index.
        heartbeat(nowait)                  # Send heartbeat to device
        updatedps(index=[1], nowait)       # Send updatedps command to device
        turn_on(switch=1, nowait)          # Turn on device / switch #
        turn_off(switch=1, nowait)         # Turn off
        set_timer(num_secs, nowait)        # Set timer for num_secs
        set_debug(toggle, color)           # Activate verbose debugging output
        set_sendWait(num_secs)             # Time to wait after sending commands before pulling response
        detect_available_dps()             # Return list of DPS available from device
        generate_payload(command, data)    # Generate TuyaMessage payload for command with data
        send(payload)                      # Send payload to device (do not wait for response)
        receive()
"""

from .core import Device

class OutletDevice(Device):
    """
    Represents a Tuya based Smart Plug or Switch.
    """

    def set_dimmer(self, percentage=None, value=None, dps_id=3, nowait=False):
        """Set dimmer value

        Args:
            percentage (int): percentage dim 0-100
            value (int): direct value for switch 0-255
            dps_id (int): DPS index for dimmer value
            nowait (bool): True to send without waiting for response.
        """

        if percentage is not None:
            level = int(percentage * 255.0 / 100.0)
        else:
            level = value

        if level == 0:
            self.turn_off(nowait=nowait)
        elif level is not None:
            if level < 25:
                level = 25
            if level > 255:
                level = 255
            self.turn_on(nowait=nowait)
            self.set_value(dps_id, level, nowait=nowait)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/__init__.py

# TinyTuya Module
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya WiFi smart devices

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

  Local Control Classes
    OutletDevice(dev_id, address=None, local_key=None, dev_type='default', connection_timeout=5, version=3.1, persist=False)
    CoverDevice(...)
    BulbDevice(...)
    Device(...)
        dev_id (str): Device ID e.g. 01234567891234567890
        address (str, optional): Device Network IP Address e.g. 10.0.1.99, or None to try and find the device
        local_key (str, optional): The encryption key. Defaults to None. If None, key will be looked up in DEVICEFILE if available
        dev_type (str, optional): Device type for payload options (see below)
        connection_timeout (float, optional): The default socket connect and data timeout
        version (float, optional): The API version to use. Defaults to 3.1
        persist (bool, optional): Make a persistant connection to the device
    Cloud(apiRegion, apiKey, apiSecret, apiDeviceID, new_sign_algorithm)

  Functions
    Device(XenonDevice)
        json = status()                    # returns json payload
        set_version(version)               # 3.1 [default] or 3.3
        set_socketPersistent(False/True)   # False [default] or True
        set_socketNODELAY(False/True)      # False or True [default]
        set_socketRetryLimit(integer)      # retry count limit [default 5]
        set_socketTimeout(timeout)         # set connection timeout in seconds [default 5]
        set_dpsUsed(dps_to_request)        # add data points (DPS) to request
        add_dps_to_request(index)          # add data point (DPS) index set to None
        set_retry(retry=True)              # retry if response payload is truncated
        set_status(on, switch=1, nowait)   # Set status of switch to 'on' or 'off' (bool)
        set_value(index, value, nowait)    # Set int value of any index.
        heartbeat(nowait)                  # Send heartbeat to device
        updatedps(index=[1], nowait)       # Send updatedps command to device
        turn_on(switch=1, nowait)          # Turn on device / switch #
        turn_off(switch=1, nowait)         # Turn off
        set_timer(num_secs, nowait)        # Set timer for num_secs
        set_debug(toggle, color)           # Activate verbose debugging output
        set_sendWait(num_secs)             # Time to wait after sending commands before pulling response
        detect_available_dps()             # Return list of DPS available from device
        generate_payload(command, data)    # Generate TuyaMessage payload for command with data
        send(payload)                      # Send payload to device (do not wait for response)
        receive()                          # Receive payload from device

    OutletDevice:
        set_dimmer(percentage):

    CoverDevice:
        open_cover(switch=1):
        close_cover(switch=1):
        stop_cover(switch=1):

    BulbDevice
        set_colour(r, g, b, nowait):
        set_hsv(h, s, v, nowait):
        set_white(brightness, colourtemp, nowait):
        set_white_percentage(brightness=100, colourtemp=0, nowait):
        set_brightness(brightness, nowait):
        set_brightness_percentage(brightness=100, nowait):
        set_colourtemp(colourtemp, nowait):
        set_colourtemp_percentage(colourtemp=100, nowait):
        set_scene(scene, nowait):             # 1=nature, 3=rave, 4=rainbow
        set_mode(mode='white', nowait):       # white, colour, scene, music
        result = brightness():
        result = colourtemp():
        (r, g, b) = colour_rgb():
        (h,s,v) = colour_hsv()
        result = state():

    Cloud
        setregion(apiRegion)
        getdevices(verbose=False)
        getstatus(deviceid)
        getfunctions(deviceid)
        getproperties(deviceid)
        getdps(deviceid)
        sendcommand(deviceid, commands)

 Credits
  * TuyaAPI https://github.com/codetheweb/tuyapi by codetheweb and blackrozes
    For protocol reverse engineering
  * PyTuya https://github.com/clach04/python-tuya by clach04
    The origin of this python module (now abandoned)
  * LocalTuya https://github.com/rospogrigio/localtuya-homeassistant by rospogrigio
    Updated pytuya to support devices with Device IDs of 22 characters

"""

from .core import *
from .core import __version__
from .core import __author__

from .OutletDevice import OutletDevice
from .CoverDevice import CoverDevice
from .BulbDevice import BulbDevice
from .Cloud import Cloud


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/__main__.py

#!/usr/bin/env python
# -*- coding: utf-8 -*-
# PYTHON_ARGCOMPLETE_OK
# TinyTuya Module
"""
 Python module to interface with Tuya WiFi smart devices

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

 Run TinyTuya Setup Wizard:
    python -m tinytuya wizard
 This network scan will run if calling this module via command line:
    python -m tinytuya <max_time>

"""

# Modules
import sys
import argparse
try:
    import argcomplete
    HAVE_ARGCOMPLETE = True
except:
    HAVE_ARGCOMPLETE = False

from . import wizard, scanner, version, SCANTIME, DEVICEFILE, SNAPSHOTFILE, CONFIGFILE, RAWFILE, set_debug

prog = 'python3 -m tinytuya' if sys.argv[0][-11:] == '__main__.py' else None
description = 'TinyTuya [%s]' % (version,)
parser = argparse.ArgumentParser( prog=prog, description=description )

# Options for all functions.
# Add both here and in subparsers (with alternate `dest=`) if you want to allow it to be positioned anywhere
parser.add_argument( '-debug', '-d', help='Enable debug messages', action='store_true' )

subparser = parser.add_subparsers( dest='command', title='commands (run <command> -h to see usage information)' )
subparsers = {}
cmd_list = {
    'wizard': 'Launch Setup Wizard to get Device Local Keys',
    'scan': 'Scan local network for Tuya devices',
    'devices': 'Scan all devices listed in device-file',
    'snapshot': 'Scan devices listed in snapshot-file',
    'json': 'Scan devices listed in snapshot-file and display the result as JSON'
}
for sp in cmd_list:
    subparsers[sp] = subparser.add_parser(sp, help=cmd_list[sp])
    subparsers[sp].add_argument( '-debug', '-d', help='Enable debug messages', action='store_true', dest='debug2' )

    if sp != 'json':
        if sp != 'snapshot':
            subparsers[sp].add_argument( 'max_time', help='Maximum time to find Tuya devices [Default: %s]' % SCANTIME, nargs='?', type=int )
            subparsers[sp].add_argument( '-force', '-f', metavar='0.0.0.0/24', help='Force network scan of device IP addresses. Auto-detects net/mask if none provided', action='append', nargs='*' )
            subparsers[sp].add_argument( '-no-broadcasts', help='Ignore broadcast packets when force scanning', action='store_true' )

        subparsers[sp].add_argument( '-nocolor', help='Disable color text output', action='store_true' )
        subparsers[sp].add_argument( '-yes', '-y', help='Answer "yes" to all questions', action='store_true' )
        if sp != 'scan':
            subparsers[sp].add_argument( '-no-poll', '-no', help='Answer "no" to "Poll?" (overrides -yes)', action='store_true' )

    if sp == 'wizard':
        help = 'JSON file to load/save devices from/to [Default: %s]' % DEVICEFILE
        subparsers[sp].add_argument( '-device-file', help=help, default=DEVICEFILE, metavar='FILE' )
        subparsers[sp].add_argument( '-raw-response-file', help='JSON file to save the raw server response to [Default: %s]' % RAWFILE, default=RAWFILE, metavar='FILE' )
    else:
        help = 'JSON file to load devices from [Default: %s]' % DEVICEFILE
        subparsers[sp].add_argument( '-device-file', help=help, default=DEVICEFILE, metavar='FILE' )

    if sp == 'json':
        # Throw error if file does not exist
        subparsers[sp].add_argument( '-snapshot-file', help='JSON file to load snapshot from [Default: %s]' % SNAPSHOTFILE, default=SNAPSHOTFILE, metavar='FILE', type=argparse.FileType('r') )
    else:
        # May not exist yet, will be created
        subparsers[sp].add_argument( '-snapshot-file', help='JSON file to load/save snapshot from/to [Default: %s]' % SNAPSHOTFILE, default=SNAPSHOTFILE, metavar='FILE' )

# Looks neater in a group
cred_group = subparsers['wizard'].add_argument_group( 'Cloud API Credentials', 'If no option is set then the Wizard will prompt')
cred_group.add_argument( '-credentials-file', help='JSON file to load/save Cloud credentials from/to [Default: %s]' % CONFIGFILE, metavar='FILE' )
cred_group.add_argument( '-key', help='Cloud API Key to use' )
cred_group.add_argument( '-secret', help='Cloud API Secret to use' )
cred_group.add_argument( '-region', help='Cloud API Region to use', choices=('cn', 'eu', 'eu-w', 'in', 'us', 'us-e') )
cred_group.add_argument( '-device', help='One or more Device ID(s) to use', action='append', nargs='+' )

subparsers['wizard'].add_argument( '-dry-run', help='Do not actually connect to the Cloud', action='store_true' )

if HAVE_ARGCOMPLETE:
    argcomplete.autocomplete( parser )

args = parser.parse_args()

if args.debug:
    print('Parsed args:', args)
    set_debug(True)

if args.command:
    if args.debug2 and not args.debug:
        print('Parsed args:', args)
        set_debug(True)

    if args.command == 'wizard' and args.raw_response_file:
        wizard.RAWFILE = args.raw_response_file

    if args.device_file:
        if type(args.device_file) == str:
            scanner.DEVICEFILE = args.device_file
            wizard.DEVICEFILE = args.device_file
        else:
            fname = args.device_file.name
            args.device_file.close()
            args.device_file = fname
            scanner.DEVICEFILE = fname
            wizard.DEVICEFILE = fname

    if args.snapshot_file:
        if args.command == 'json':
            scanner.SNAPSHOTFILE = args.snapshot_file.name
            args.snapshot_file.close()
            args.snapshot_file = scanner.SNAPSHOTFILE
        else:
            scanner.SNAPSHOTFILE = args.snapshot_file
            wizard.SNAPSHOTFILE = args.snapshot_file

if args.command == 'scan':
    scanner.scan( scantime=args.max_time, color=(not args.nocolor), forcescan=args.force, discover=(not args.no_broadcasts), assume_yes=args.yes )
elif args.command == 'snapshot':
    scanner.snapshot( color=(not args.nocolor), assume_yes=args.yes, skip_poll=args.no_poll )
elif args.command == 'devices':
    scanner.alldevices( scantime=args.max_time, color=(not args.nocolor), forcescan=args.force, discover=(not args.no_broadcasts), assume_yes=args.yes, skip_poll=args.no_poll )
elif args.command == 'json':
    scanner.snapshotjson()
elif args.command == 'wizard':
    if args.credentials_file:
        wizard.CONFIGFILE = args.credentials_file
    creds = { 'file': args.credentials_file, 'apiKey': args.key, 'apiSecret': args.secret, 'apiRegion': args.region, 'apiDeviceID': None }
    if args.device:
        creds['apiDeviceID'] = ','.join(sum(args.device, []))
    wizard.wizard( color=(not args.nocolor), retries=args.max_time, forcescan=args.force, nocloud=args.dry_run, assume_yes=args.yes, discover=(not args.no_broadcasts), skip_poll=args.no_poll, credentials=creds )
else:
    # No command selected - show help
    parser.print_help()

# Entry_points/console_scripts endpoints require a function to be called
def dummy():
    pass

# End


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/core.py

# TinyTuya Module
# -*- coding: utf-8 -*-
"""
 Python module to interface with Tuya WiFi smart devices

 Author: Jason A. Cox
 For more information see https://github.com/jasonacox/tinytuya

 Core Classes and Helper Functions

 Classes
  * AESCipher - Cryptography Helpers
  * XenonDevice(...) - Base Tuya Objects and Functions
        XenonDevice(dev_id, address=None, local_key="", dev_type="default", connection_timeout=5, 
            version="3.1", persist=False, cid/node_id=None, parent=None, connection_retry_limit=5, 
            connection_retry_delay=5)
  * Device(XenonDevice) - Tuya Class for Devices

 Module Functions
    set_debug(toggle, color)                    # Activate verbose debugging output
    pack_message(msg, hmac_key=None)            # Packs a TuyaMessage() into a network packet, encrypting or adding a CRC if protocol requires
    unpack_message(data, hmac_key=None, header=None, no_retcode=False)
                                                # Unpacks a TuyaMessage() from a network packet, decrypting or checking the CRC if protocol requires
    parse_header(data)                          # Unpacks just the header part of a message into a TuyaHeader()
    find_device(dev_id=None, address=None)      # Scans network for Tuya devices with either ID = dev_id or IP = address
    device_info(dev_id)                         # Searches DEVICEFILE (usually devices.json) for devices with ID = dev_id and returns just that device
    assign_dp_mappings(tuyadevices, mappings)   # Adds mappings to all the devices in the tuyadevices list
    decrypt_udp(msg)                            # Decrypts a UDP network broadcast packet

 Device Functions
    json = status()                    # returns json payload
    subdev_query(nowait)               # query sub-device status (only for gateway devices)
    set_version(version)               # 3.1 [default], 3.2, 3.3 or 3.4
    set_socketPersistent(False/True)   # False [default] or True
    set_socketNODELAY(False/True)      # False or True [default]
    set_socketRetryLimit(integer)      # retry count limit [default 5]
    set_socketRetryDelay(integer)      # retry delay [default 5]
    set_socketTimeout(timeout)         # set connection timeout in seconds [default 5]
    set_dpsUsed(dps_to_request)        # add data points (DPS) to request
    add_dps_to_request(index)          # add data point (DPS) index set to None
    set_retry(retry=True)              # retry if response payload is truncated
    set_status(on, switch=1, nowait)   # Set status of switch to 'on' or 'off' (bool)
    set_value(index, value, nowait)    # Set int value of any index.
    set_multiple_values(index_value_dict, nowait)
                                       # Set multiple values with a single request
    heartbeat(nowait)                  # Send heartbeat to device
    updatedps(index=[1], nowait)       # Send updatedps command to device
    turn_on(switch=1, nowait)          # Turn on device / switch #
    turn_off(switch=1, nowait)         # Turn off
    set_timer(num_secs, nowait)        # Set timer for num_secs
    set_sendWait(num_secs)             # Time to wait after sending commands before pulling response
    detect_available_dps()             # Return list of DPS available from device
    generate_payload(command, data,...)# Generate TuyaMessage payload for command with data
    send(payload)                      # Send payload to device (do not wait for response)
    receive()                          # Receive payload from device

 Credits
  * TuyaAPI https://github.com/codetheweb/tuyapi by codetheweb and blackrozes
    For protocol reverse engineering
  * PyTuya https://github.com/clach04/python-tuya by clach04
    The origin of this python module (now abandoned)
  * LocalTuya https://github.com/rospogrigio/localtuya-homeassistant by rospogrigio
    Updated pytuya to support devices with Device IDs of 22 characters
  * Tuya Protocol 3.4 and 3.5 Support by uzlonewolf
    Enhancement to TuyaMessage logic for multi-payload messages

"""

# Modules
from __future__ import print_function  # python 2.7 support
import binascii
from collections import namedtuple
import base64
from hashlib import md5,sha256
import hmac
import json
import logging
import socket
import select
import struct
import sys
import time
from colorama import init

# Backward compatibility for python2
try:
    input = raw_input
except NameError:
    pass

for clib in ('pyca/cryptography', 'PyCryptodomex', 'PyCrypto', 'pyaes'):
    Crypto = Crypto_modes = AES = CRYPTOLIB = None
    try:
        if clib == 'pyca/cryptography': # https://cryptography.io/en/latest/
            from cryptography import __version__ as Crypto_version
            if (Crypto_version[:2] in ('0.', '1.', '2.')) or (Crypto_version == '3.0'):
                # cryptography <= 3.0 requires a backend= parameter
                continue
            from cryptography.hazmat.primitives.ciphers import Cipher as Crypto
            from cryptography.hazmat.primitives.ciphers import modes as Crypto_modes
            from cryptography.hazmat.primitives.ciphers.algorithms import AES
        elif clib == 'PyCryptodomex': # https://pycryptodome.readthedocs.io/en/latest/
            # PyCryptodome is installed as "Cryptodome" when installed by
            #  `apt install python3-pycryptodome` or `pip install pycryptodomex`
            import Cryptodome as Crypto
            from Cryptodome.Cipher import AES
        elif clib == 'PyCrypto': # https://www.pycrypto.org/
            import Crypto
            from Crypto.Cipher import AES
            # v1/v2 is PyCrypto, v3 is PyCryptodome
            clib = 'PyCrypto' if Crypto.version_info[0] < 3 else 'PyCryptodome'
        elif clib == 'pyaes':
            import pyaes  # https://github.com/ricmoo/pyaes
        else:
            continue
        CRYPTOLIB = clib
        break
    except ImportError:
        continue
if CRYPTOLIB is None:
    raise ModuleNotFoundError('No crypto library found, please "pip install" cryptography, pycryptodome, or pyaes')

# Colorama terminal color capability for all platforms
init()

version_tuple = (1, 15, 1)
version = __version__ = "%d.%d.%d" % version_tuple
__author__ = "jasonacox"

log = logging.getLogger(__name__)

# Globals Network Settings
MAXCOUNT = 15       # How many tries before stopping
SCANTIME = 18       # How many seconds to wait before stopping device discovery
UDPPORT = 6666      # Tuya 3.1 UDP Port
UDPPORTS = 6667     # Tuya 3.3 encrypted UDP Port
UDPPORTAPP = 7000   # Tuya app encrypted UDP Port
TCPPORT = 6668      # Tuya TCP Local Port
TIMEOUT = 3.0       # Seconds to wait for a broadcast
TCPTIMEOUT = 0.4    # Seconds to wait for socket open for scanning
DEFAULT_NETWORK = '192.168.0.0/24'

# Configuration Files
CONFIGFILE = 'tinytuya.json'
DEVICEFILE = 'devices.json'
RAWFILE = 'tuya-raw.json'
SNAPSHOTFILE = 'snapshot.json'

DEVICEFILE_SAVE_VALUES = ('category', 'product_name', 'product_id', 'biz_type', 'model', 'sub', 'icon', 'version', 'last_ip', 'uuid', 'node_id', 'sn', 'mapping')

# Tuya Command Types
# Reference: https://github.com/tuya/tuya-iotos-embeded-sdk-wifi-ble-bk7231n/blob/master/sdk/include/lan_protocol.h
AP_CONFIG       = 1  # FRM_TP_CFG_WF      # only used for ap 3.0 network config
ACTIVE          = 2  # FRM_TP_ACTV (discard) # WORK_MODE_CMD
SESS_KEY_NEG_START  = 3  # FRM_SECURITY_TYPE3 # negotiate session key
SESS_KEY_NEG_RESP   = 4  # FRM_SECURITY_TYPE4 # negotiate session key response
SESS_KEY_NEG_FINISH = 5  # FRM_SECURITY_TYPE5 # finalize session key negotiation
UNBIND          = 6  # FRM_TP_UNBIND_DEV  # DATA_QUERT_CMD - issue command
CONTROL         = 7  # FRM_TP_CMD         # STATE_UPLOAD_CMD
STATUS          = 8  # FRM_TP_STAT_REPORT # STATE_QUERY_CMD
HEART_BEAT      = 9  # FRM_TP_HB
DP_QUERY        = 0x0a # 10 # FRM_QUERY_STAT      # UPDATE_START_CMD - get data points
QUERY_WIFI      = 0x0b # 11 # FRM_SSID_QUERY (discard) # UPDATE_TRANS_CMD
TOKEN_BIND      = 0x0c # 12 # FRM_USER_BIND_REQ   # GET_ONLINE_TIME_CMD - system time (GMT)
CONTROL_NEW     = 0x0d # 13 # FRM_TP_NEW_CMD      # FACTORY_MODE_CMD
ENABLE_WIFI     = 0x0e # 14 # FRM_ADD_SUB_DEV_CMD # WIFI_TEST_CMD
WIFI_INFO       = 0x0f # 15 # FRM_CFG_WIFI_INFO
DP_QUERY_NEW    = 0x10 # 16 # FRM_QUERY_STAT_NEW
SCENE_EXECUTE   = 0x11 # 17 # FRM_SCENE_EXEC
UPDATEDPS       = 0x12 # 18 # FRM_LAN_QUERY_DP    # Request refresh of DPS
UDP_NEW         = 0x13 # 19 # FR_TYPE_ENCRYPTION
AP_CONFIG_NEW   = 0x14 # 20 # FRM_AP_CFG_WF_V40
BOARDCAST_LPV34 = 0x23 # 35 # FR_TYPE_BOARDCAST_LPV34
REQ_DEVINFO     = 0x25 # broadcast to port 7000 to get v3.5 devices to send their info
LAN_EXT_STREAM  = 0x40 # 64 # FRM_LAN_EXT_STREAM

# Protocol Versions and Headers
PROTOCOL_VERSION_BYTES_31 = b"3.1"
PROTOCOL_VERSION_BYTES_33 = b"3.3"
PROTOCOL_VERSION_BYTES_34 = b"3.4"
PROTOCOL_VERSION_BYTES_35 = b"3.5"
PROTOCOL_3x_HEADER = 12 * b"\x00"
PROTOCOL_33_HEADER = PROTOCOL_VERSION_BYTES_33 + PROTOCOL_3x_HEADER
PROTOCOL_34_HEADER = PROTOCOL_VERSION_BYTES_34 + PROTOCOL_3x_HEADER
PROTOCOL_35_HEADER = PROTOCOL_VERSION_BYTES_35 + PROTOCOL_3x_HEADER
MESSAGE_HEADER_FMT = MESSAGE_HEADER_FMT_55AA = ">4I"  # 4*uint32: prefix, seqno, cmd, length [, retcode]
MESSAGE_HEADER_FMT_6699 = ">IHIII"  # 4*uint32: prefix, unknown, seqno, cmd, length
MESSAGE_RETCODE_FMT = ">I"  # retcode for received messages
MESSAGE_END_FMT = MESSAGE_END_FMT_55AA = ">2I"  # 2*uint32: crc, suffix
MESSAGE_END_FMT_HMAC = ">32sI"  # 32s:hmac, uint32:suffix
MESSAGE_END_FMT_6699 = ">16sI"  # 16s:tag, suffix
PREFIX_VALUE = PREFIX_55AA_VALUE = 0x000055AA
PREFIX_BIN = PREFIX_55AA_BIN = b"\x00\x00U\xaa"
SUFFIX_VALUE = SUFFIX_55AA_VALUE = 0x0000AA55
SUFFIX_BIN = SUFFIX_55AA_BIN = b"\x00\x00\xaaU"
PREFIX_6699_VALUE = 0x00006699
PREFIX_6699_BIN = b"\x00\x00\x66\x99"
SUFFIX_6699_VALUE = 0x00009966
SUFFIX_6699_BIN = b"\x00\x00\x99\x66"

NO_PROTOCOL_HEADER_CMDS = [DP_QUERY, DP_QUERY_NEW, UPDATEDPS, HEART_BEAT, SESS_KEY_NEG_START, SESS_KEY_NEG_RESP, SESS_KEY_NEG_FINISH, LAN_EXT_STREAM ]

# Python 2 Support
IS_PY2 = sys.version_info[0] == 2

# Tuya Packet Format
TuyaHeader = namedtuple('TuyaHeader', 'prefix seqno cmd length total_length')
MessagePayload = namedtuple("MessagePayload", "cmd payload")
try:
    TuyaMessage = namedtuple("TuyaMessage", "seqno cmd retcode payload crc crc_good prefix iv", defaults=(True,0x55AA,None))
except:
    TuyaMessage = namedtuple("TuyaMessage", "seqno cmd retcode payload crc crc_good prefix iv")

# TinyTuya Error Response Codes
ERR_JSON = 900
ERR_CONNECT = 901
ERR_TIMEOUT = 902
ERR_RANGE = 903
ERR_PAYLOAD = 904
ERR_OFFLINE = 905
ERR_STATE = 906
ERR_FUNCTION = 907
ERR_DEVTYPE = 908
ERR_CLOUDKEY = 909
ERR_CLOUDRESP = 910
ERR_CLOUDTOKEN = 911
ERR_PARAMS = 912
ERR_CLOUD = 913
ERR_KEY_OR_VER = 914

error_codes = {
    ERR_JSON: "Invalid JSON Response from Device",
    ERR_CONNECT: "Network Error: Unable to Connect",
    ERR_TIMEOUT: "Timeout Waiting for Device",
    ERR_RANGE: "Specified Value Out of Range",
    ERR_PAYLOAD: "Unexpected Payload from Device",
    ERR_OFFLINE: "Network Error: Device Unreachable",
    ERR_STATE: "Device in Unknown State",
    ERR_FUNCTION: "Function Not Supported by Device",
    ERR_DEVTYPE: "Device22 Detected: Retry Command",
    ERR_CLOUDKEY: "Missing Tuya Cloud Key and Secret",
    ERR_CLOUDRESP: "Invalid JSON Response from Cloud",
    ERR_CLOUDTOKEN: "Unable to Get Cloud Token",
    ERR_PARAMS: "Missing Function Parameters",
    ERR_CLOUD: "Error Response from Tuya Cloud",
    ERR_KEY_OR_VER: "Check device key or version",
    None: "Unknown Error",
}

class DecodeError(Exception):
    pass

# Cryptography Helpers
class _AESCipher_Base(object):
    def __init__(self, key):
        self.key = key

    @classmethod
    def get_encryption_iv( cls, iv ):
        if not cls.CRYPTOLIB_HAS_GCM:
            raise NotImplementedError( 'Crypto library does not support GCM' )
        if iv is True:
            if log.isEnabledFor( logging.DEBUG ):
                iv = b'0123456789ab'
            else:
                iv = str(time.time() * 10)[:12].encode('utf8')
        return iv

    @classmethod
    def get_decryption_iv( cls, iv, data ):
        if not cls.CRYPTOLIB_HAS_GCM:
            raise NotImplementedError( 'Crypto library does not support GCM' )
        if iv is True:
            iv = data[:12]
            data = data[12:]
        return iv, data

    @staticmethod
    def _pad(s, bs):
        padnum = bs - len(s) % bs
        return s + padnum * chr(padnum).encode()

    @staticmethod
    def _unpad(s, verify_padding=False):
        padlen = ord(s[-1:])
        if padlen < 1 or padlen > 16:
            raise ValueError("invalid padding length byte")
        if verify_padding and s[-padlen:] != (padlen * chr(padlen).encode()):
            raise ValueError("invalid padding data")
        return s[:-padlen]

class _AESCipher_pyca(_AESCipher_Base):
    def encrypt(self, raw, use_base64=True, pad=True, iv=False, header=None): # pylint: disable=W0621
        if iv: # initialization vector or nonce (number used once)
            iv = self.get_encryption_iv( iv )
            encryptor = Crypto( AES(self.key), Crypto_modes.GCM(iv) ).encryptor()
            if header:
                encryptor.authenticate_additional_data(header)
            crypted_text = encryptor.update(raw) + encryptor.finalize()
            crypted_text = iv + crypted_text + encryptor.tag
        else:
            if pad: raw = self._pad(raw, 16)
            encryptor = Crypto( AES(self.key), Crypto_modes.ECB() ).encryptor()
            crypted_text = encryptor.update(raw) + encryptor.finalize()

        return base64.b64encode(crypted_text) if use_base64 else crypted_text

    def decrypt(self, enc, use_base64=True, decode_text=True, verify_padding=False, iv=False, header=None, tag=None):
        if not iv:
            if use_base64:
                enc = base64.b64decode(enc)
            if len(enc) % 16 != 0:
                raise ValueError("invalid length")
        if iv:
            iv, enc = self.get_decryption_iv( iv, enc )
            if tag is None:
                decryptor = Crypto( AES(self.key), Crypto_modes.CTR(iv + b'\x00\x00\x00\x02') ).decryptor()
            else:
                decryptor = Crypto( AES(self.key), Crypto_modes.GCM(iv, tag) ).decryptor()
            if header and (tag is not None):
                decryptor.authenticate_additional_data( header )
            raw = decryptor.update( enc ) + decryptor.finalize()
        else:
            decryptor = Crypto( AES(self.key), Crypto_modes.ECB() ).decryptor()
            raw = decryptor.update( enc ) + decryptor.finalize()
            raw = self._unpad(raw, verify_padding)
        return raw.decode("utf-8") if decode_text else raw

class _AESCipher_PyCrypto(_AESCipher_Base):
    def encrypt(self, raw, use_base64=True, pad=True, iv=False, header=None): # pylint: disable=W0621
        if iv: # initialization vector or nonce (number used once)
            iv = self.get_encryption_iv( iv )
            cipher = AES.new(self.key, mode=AES.MODE_GCM, nonce=iv)
            if header:
                cipher.update(header)
            crypted_text, tag = cipher.encrypt_and_digest(raw)
            crypted_text = cipher.nonce + crypted_text + tag
        else:
            if pad: raw = self._pad(raw, 16)
            cipher = AES.new(self.key, mode=AES.MODE_ECB)
            crypted_text = cipher.encrypt(raw)

        return base64.b64encode(crypted_text) if use_base64 else crypted_text

    def decrypt(self, enc, use_base64=True, decode_text=True, verify_padding=False, iv=False, header=None, tag=None):
        if not iv:
            if use_base64:
                enc = base64.b64decode(enc)
            if len(enc) % 16 != 0:
                raise ValueError("invalid length")
        if iv:
            iv, enc = self.get_decryption_iv( iv, enc )
            cipher = AES.new(self.key, AES.MODE_GCM, nonce=iv)
            if header:
                cipher.update(header)
            if tag:
                raw = cipher.decrypt_and_verify(enc, tag)
            else:
                raw = cipher.decrypt(enc)
        else:
            cipher = AES.new(self.key, AES.MODE_ECB)
            raw = cipher.decrypt(enc)
            raw = self._unpad(raw, verify_padding)
        return raw.decode("utf-8") if decode_text else raw

class _AESCipher_pyaes(_AESCipher_Base):
    def encrypt(self, raw, use_base64=True, pad=True, iv=False, header=None): # pylint: disable=W0621
        if iv:
            # GCM required for 3.5 devices
            raise NotImplementedError( 'pyaes does not support GCM, please install PyCryptodome' )

        # pylint: disable-next=used-before-assignment
        cipher = pyaes.blockfeeder.Encrypter(
            pyaes.AESModeOfOperationECB(self.key),
            pyaes.PADDING_DEFAULT if pad else pyaes.PADDING_NONE
        )  # no IV, auto pads to 16
        crypted_text = cipher.feed(raw)
        crypted_text += cipher.feed()  # flush final block
        return base64.b64encode(crypted_text) if use_base64 else crypted_text

    def decrypt(self, enc, use_base64=True, decode_text=True, verify_padding=False, iv=False, header=None, tag=None):
        if iv:
            # GCM required for 3.5 devices
            raise NotImplementedError( 'pyaes does not support GCM, please install PyCryptodome' )

        if use_base64:
            enc = base64.b64decode(enc)

        if len(enc) % 16 != 0:
            raise ValueError("invalid length")

        cipher = pyaes.blockfeeder.Decrypter(
            pyaes.AESModeOfOperationECB(self.key),
            pyaes.PADDING_NONE if verify_padding else pyaes.PADDING_DEFAULT
        )  # no IV, auto pads to 16

        raw = cipher.feed(enc)
        raw += cipher.feed()  # flush final block

        if verify_padding: raw = self._unpad(raw, verify_padding)
        return raw.decode("utf-8") if decode_text else raw

if CRYPTOLIB[:8] == 'PyCrypto': # PyCrypto, PyCryptodome, and PyCryptodomex
    class AESCipher(_AESCipher_PyCrypto):
        CRYPTOLIB = CRYPTOLIB
        CRYPTOLIB_VER = '.'.join( [str(x) for x in Crypto.version_info] )
        CRYPTOLIB_HAS_GCM = getattr( AES, 'MODE_GCM', False ) # only PyCryptodome supports GCM, PyCrypto does not
elif CRYPTOLIB == 'pyaes':
    class AESCipher(_AESCipher_pyaes):
        CRYPTOLIB = CRYPTOLIB
        CRYPTOLIB_VER = '.'.join( [str(x) for x in pyaes.VERSION] )
        CRYPTOLIB_HAS_GCM = False
elif CRYPTOLIB == 'pyca/cryptography':
    class AESCipher(_AESCipher_pyca):
        CRYPTOLIB = CRYPTOLIB
        CRYPTOLIB_VER = Crypto_version
        CRYPTOLIB_HAS_GCM = getattr( Crypto_modes, 'GCM', False )

# Misc Helpers
def bin2hex(x, pretty=False):
    if pretty:
        space = " "
    else:
        space = ""
    if IS_PY2:
        result = "".join("%02X%s" % (ord(y), space) for y in x)
    else:
        result = "".join("%02X%s" % (y, space) for y in x)
    return result

def hex2bin(x):
    if IS_PY2:
        return x.decode("hex")
    else:
        return bytes.fromhex(x)

def set_debug(toggle=True, color=True):
    """Enable tinytuya verbose logging"""
    if toggle:
        if color:
            logging.basicConfig(
                format="\x1b[31;1m%(levelname)s:%(message)s\x1b[0m", level=logging.DEBUG
            )
        else:
            logging.basicConfig(format="%(levelname)s:%(message)s", level=logging.DEBUG)
        log.setLevel(logging.DEBUG)
        log.debug("TinyTuya [%s]\n", __version__)
        log.debug("Python %s on %s", sys.version, sys.platform)
        if AESCipher.CRYPTOLIB_HAS_GCM == False:
            log.debug("Using %s %s for crypto", AESCipher.CRYPTOLIB, AESCipher.CRYPTOLIB_VER)
            log.debug("Warning: Crypto library does not support AES-GCM, v3.5 devices will not work!")
        else:
            log.debug("Using %s %s for crypto, GCM is supported", AESCipher.CRYPTOLIB, AESCipher.CRYPTOLIB_VER)
    else:
        log.setLevel(logging.NOTSET)

def pack_message(msg, hmac_key=None):
    """Pack a TuyaMessage into bytes."""
    if msg.prefix == PREFIX_55AA_VALUE:
        header_fmt = MESSAGE_HEADER_FMT_55AA
        end_fmt = MESSAGE_END_FMT_HMAC if hmac_key else MESSAGE_END_FMT_55AA
        msg_len = len(msg.payload) + struct.calcsize(end_fmt)
        header_data = ( msg.prefix, msg.seqno, msg.cmd, msg_len )
    elif msg.prefix == PREFIX_6699_VALUE:
        if not hmac_key:
            raise TypeError( 'key must be provided to pack 6699-format messages' )
        header_fmt = MESSAGE_HEADER_FMT_6699
        end_fmt = MESSAGE_END_FMT_6699
        msg_len = len(msg.payload) + (struct.calcsize(end_fmt) - 4) + 12
        if type(msg.retcode) == int:
            msg_len += struct.calcsize(MESSAGE_RETCODE_FMT)
        header_data = ( msg.prefix, 0, msg.seqno, msg.cmd, msg_len )
    else:
        raise ValueError( 'pack_message() cannot handle message format %08X' % msg.prefix )

    # Create full message excluding CRC and suffix
    data = struct.pack( header_fmt, *header_data )

    if msg.prefix == PREFIX_6699_VALUE:
        cipher = AESCipher( hmac_key )
        if type(msg.retcode) == int:
            raw = struct.pack( MESSAGE_RETCODE_FMT, msg.retcode ) + msg.payload
        else:
            raw = msg.payload
        data2 = cipher.encrypt( raw, use_base64=False, pad=False, iv=True if not msg.iv else msg.iv, header=data[4:])
        data += data2 + SUFFIX_6699_BIN
    else:
        data += msg.payload
        if hmac_key:
            crc = hmac.new(hmac_key, data, sha256).digest()
        else:
            crc = binascii.crc32(data) & 0xFFFFFFFF
        # Calculate CRC, add it together with suffix
        data += struct.pack( end_fmt, crc, SUFFIX_VALUE )

    return data

def unpack_message(data, hmac_key=None, header=None, no_retcode=False):
    """Unpack bytes into a TuyaMessage."""
    if header is None:
        header = parse_header(data)

    if header.prefix == PREFIX_55AA_VALUE:
        # 4-word header plus return code
        header_len = struct.calcsize(MESSAGE_HEADER_FMT_55AA)
        end_fmt = MESSAGE_END_FMT_HMAC if hmac_key else MESSAGE_END_FMT_55AA
        retcode_len = 0 if no_retcode else struct.calcsize(MESSAGE_RETCODE_FMT)
        msg_len = header_len + header.length
    elif header.prefix == PREFIX_6699_VALUE:
        if not hmac_key:
            raise TypeError( 'key must be provided to unpack 6699-format messages' )
        header_len = struct.calcsize(MESSAGE_HEADER_FMT_6699)
        end_fmt = MESSAGE_END_FMT_6699
        retcode_len = 0
        msg_len = header_len + header.length + 4
    else:
        raise ValueError( 'unpack_message() cannot handle message format %08X' % header.prefix )

    if len(data) < msg_len:
        log.debug('unpack_message(): not enough data to unpack payload! need %d but only have %d', header_len+header.length, len(data))
        raise DecodeError('Not enough data to unpack payload')

    end_len = struct.calcsize(end_fmt)
    # the retcode is technically part of the payload, but strip it as we do not want it here
    retcode = 0 if not retcode_len else struct.unpack(MESSAGE_RETCODE_FMT, data[header_len:header_len+retcode_len])[0]
    payload = data[header_len+retcode_len:msg_len]
    crc, suffix = struct.unpack(end_fmt, payload[-end_len:])
    crc_good = False
    payload = payload[:-end_len]

    if header.prefix == PREFIX_55AA_VALUE:
        if hmac_key:
            have_crc = hmac.new(hmac_key, data[:(header_len+header.length)-end_len], sha256).digest()
        else:
            have_crc = binascii.crc32(data[:(header_len+header.length)-end_len]) & 0xFFFFFFFF

        if suffix != SUFFIX_VALUE:
            log.debug('Suffix prefix wrong! %08X != %08X', suffix, SUFFIX_VALUE)

        if crc != have_crc:
            if hmac_key:
                log.debug('HMAC checksum wrong! %r != %r', binascii.hexlify(have_crc), binascii.hexlify(crc))
            else:
                log.debug('CRC wrong! %08X != %08X', have_crc, crc)
        crc_good = crc == have_crc
        iv = None
    elif header.prefix == PREFIX_6699_VALUE:
        iv = payload[:12]
        payload = payload[12:]
        try:
            cipher = AESCipher( hmac_key )
            payload = cipher.decrypt( payload, use_base64=False, decode_text=False, verify_padding=False, iv=iv, header=data[4:header_len], tag=crc)
            crc_good = True
        except:
            crc_good = False

        retcode_len = struct.calcsize(MESSAGE_RETCODE_FMT)
        if no_retcode is False:
            pass
        elif no_retcode is None and payload[0:1] != b'{' and payload[retcode_len:retcode_len+1] == b'{':
            retcode_len = struct.calcsize(MESSAGE_RETCODE_FMT)
        else:
            retcode_len = 0
        if retcode_len:
            retcode = struct.unpack(MESSAGE_RETCODE_FMT, payload[:retcode_len])[0]
            payload = payload[retcode_len:]

    return TuyaMessage(header.seqno, header.cmd, retcode, payload, crc, crc_good, header.prefix, iv)

def parse_header(data):
    if( data[:4] == PREFIX_6699_BIN ):
        fmt = MESSAGE_HEADER_FMT_6699
    else:
        fmt = MESSAGE_HEADER_FMT_55AA

    header_len = struct.calcsize(fmt)

    if len(data) < header_len:
        raise DecodeError('Not enough data to unpack header')

    unpacked = struct.unpack( fmt, data[:header_len] )
    prefix = unpacked[0]

    if prefix == PREFIX_55AA_VALUE:
        prefix, seqno, cmd, payload_len = unpacked
        total_length = payload_len + header_len
    elif prefix == PREFIX_6699_VALUE:
        prefix, unknown, seqno, cmd, payload_len = unpacked
        #seqno |= unknown << 32
        total_length = payload_len + header_len + len(SUFFIX_6699_BIN)
    else:
        #log.debug('Header prefix wrong! %08X != %08X', prefix, PREFIX_VALUE)
        raise DecodeError('Header prefix wrong! %08X is not %08X or %08X' % (prefix, PREFIX_55AA_VALUE, PREFIX_6699_VALUE))

    # sanity check. currently the max payload length is somewhere around 300 bytes
    if payload_len > 1000:
        raise DecodeError('Header claims the packet size is over 1000 bytes!  It is most likely corrupt.  Claimed size: %d bytes. fmt:%s unpacked:%r' % (payload_len,fmt,unpacked))

    return TuyaHeader(prefix, seqno, cmd, payload_len, total_length)

def has_suffix(payload):
    """Check to see if payload has valid Tuya suffix"""
    if len(payload) < 4:
        return False
    log.debug("buffer %r = %r", payload[-4:], SUFFIX_BIN)
    return payload[-4:] == SUFFIX_BIN

def error_json(number=None, payload=None):
    """Return error details in JSON"""
    try:
        spayload = json.dumps(payload)
        # spayload = payload.replace('\"','').replace('\'','')
    except:
        spayload = '""'

    vals = (error_codes[number], str(number), spayload)
    log.debug("ERROR %s - %s - payload: %s", *vals)

    return json.loads('{ "Error":"%s", "Err":"%s", "Payload":%s }' % vals)

def find_device(dev_id=None, address=None):
    """Scans network for Tuya devices with either ID = dev_id or IP = address

    Parameters:
        dev_id = The specific Device ID you are looking for
        address = The IP address you are tring to find the Device ID for

    Response:
        {'ip':<ip>, 'version':<version>, 'id':<id>, 'product_id':<product_id>, 'data':<broadcast data>}
    """
    if dev_id is None and address is None:
        return {'ip':None, 'version':None, 'id':None, 'product_id':None, 'data':{}}

    from . import scanner

    want_ids = (dev_id,) if dev_id else None
    want_ips = (address,) if address else None
    all_results = scanner.devices(verbose=False, poll=False, forcescan=False, byID=True, wantids=want_ids, wantips=want_ips)
    ret = None

    for gwId in all_results:
        # Check to see if we are only looking for one device
        if dev_id and gwId != dev_id:
            continue
        if address and address != all_results[gwId]['ip']:
            continue

        # We found it!
        result = all_results[gwId]
        product_id = '' if 'productKey' not in result else result['productKey']
        ret = {'ip':result['ip'], 'version':result['version'], 'id':gwId, 'product_id':product_id, 'data':result}
        break

    if ret is None:
        ret = {'ip':None, 'version':None, 'id':None, 'product_id':None, 'data':{}}
    log.debug( 'find() is returning: %r', ret )
    return ret

def device_info( dev_id ):
    """Searches the devices.json file for devices with ID = dev_id

    Parameters:
        dev_id = The specific Device ID you are looking for

    Response:
        {dict} containing the the device info, or None if not found
    """
    devinfo = None
    try:
        # Load defaults
        with open(DEVICEFILE, 'r') as f:
            tuyadevices = json.load(f)
            log.debug("loaded=%s [%d devices]", DEVICEFILE, len(tuyadevices))
            for dev in tuyadevices:
                if 'id' in dev and dev['id'] == dev_id:
                    log.debug("Device %r found in %s", dev_id, DEVICEFILE)
                    devinfo = dev
                    break
    except:
        # No DEVICEFILE
        pass

    return devinfo

def assign_dp_mappings( tuyadevices, mappings ):
    """ Adds mappings to all the devices in the tuyadevices list

    Parameters:
        tuyadevices = list of devices
        mappings = dict containing the mappings

    Response:
        Nothing, modifies tuyadevices in place
    """
    if type(mappings) != dict:
        raise ValueError( '\'mappings\' must be a dict' )

    if (not mappings) or (not tuyadevices):
        return None

    for dev in tuyadevices:
        try:
            devid = dev['id']
            productid = dev['product_id']
        except:
            # we need both the device id and the product id to download mappings!
            log.debug( 'Cannot add DP mapping, no device id and/or product id: %r', dev )
            continue

        if productid in mappings:
            dev['mapping'] = mappings[productid]
        else:
            log.debug( 'Device %s has no mapping!', devid )
            dev['mapping'] = None

# Tuya Device Dictionary - Command and Payload Overrides
#
# 'default' devices require the 0a command for the DP_QUERY request
# 'device22' devices require the 0d command for the DP_QUERY request and a list of
#            dps used set to Null in the request payload
#
# Any command not defined in payload_dict will be sent as-is with a
#  payload of {"gwId": "", "devId": "", "uid": "", "t": ""}

payload_dict = {
    # Default Device
    "default": {
        AP_CONFIG: {  # [BETA] Set Control Values on Device
            "command": {"gwId": "", "devId": "", "uid": "", "t": ""},
        },
        CONTROL: {  # Set Control Values on Device
            "command": {"devId": "", "uid": "", "t": ""},
        },
        STATUS: {  # Get Status from Device
            "command": {"gwId": "", "devId": ""},
        },
        HEART_BEAT: {"command": {"gwId": "", "devId": ""}},
        DP_QUERY: {  # Get Data Points from Device
            "command": {"gwId": "", "devId": "", "uid": "", "t": ""},
        },
        CONTROL_NEW: {"command": {"devId": "", "uid": "", "t": ""}},
        DP_QUERY_NEW: {"command": {"devId": "", "uid": "", "t": ""}},
        UPDATEDPS: {"command": {"dpId": [18, 19, 20]}},
        LAN_EXT_STREAM: { "command": { "reqType": "", "data": {} }},
    },
    # Special Case Device with 22 character ID - Some of these devices
    # Require the 0d command as the DP_QUERY status request and the list of
    # dps requested payload
    "device22": {
        DP_QUERY: {  # Get Data Points from Device
            "command_override": CONTROL_NEW,  # Uses CONTROL_NEW command for some reason
            "command": {"devId": "", "uid": "", "t": ""},
        },
    },
    # v3.3+ devices do not need devId/gwId/uid
    "v3.4": {
        CONTROL: {
            "command_override": CONTROL_NEW,  # Uses CONTROL_NEW command
            "command": {"protocol":5, "t": "int", "data": {}}
            },
        CONTROL_NEW: {
            "command": {"protocol":5, "t": "int", "data": {}}
        },
        DP_QUERY: {
            "command_override": DP_QUERY_NEW,
            "command": {} #"protocol":4, "t": "int", "data": {}}
        },
        DP_QUERY_NEW: {
            "command": {}
        },
    },
    # v3.5 is just a copy of v3.4
    "v3.5": {
        CONTROL: {
            "command_override": CONTROL_NEW,  # Uses CONTROL_NEW command
            "command": {"protocol":5, "t": "int", "data": {}}
        },
        CONTROL_NEW: {
            "command": {"protocol":5, "t": "int", "data": {}}
        },
        DP_QUERY: {
            "command_override": DP_QUERY_NEW,
            "command": {}
        },
        DP_QUERY_NEW: {
            "command": {}
        },
    },
    # placeholders, not yet needed
    "gateway": { },
    "gateway_v3.4": { },
    "gateway_v3.5": { },
    "zigbee": {
        CONTROL: { "command": {"t": "int", "cid": ""} },
        DP_QUERY: { "command": {"t": "int", "cid": ""} },
    },
    "zigbee_v3.4": {
        CONTROL: {
            "command_override": CONTROL_NEW,
            "command": {"protocol":5, "t": "int", "data": {"cid":""}}
        },
        CONTROL_NEW: {
            "command": {"protocol":5, "t": "int", "data": {"cid":""}}
        },
    },
    "zigbee_v3.5": {
        CONTROL: {
            "command_override": CONTROL_NEW,
            "command": {"protocol":5, "t": "int", "data": {"cid":""}}
        },
        CONTROL_NEW: {
            "command": {"protocol":5, "t": "int", "data": {"cid":""}}
        },
    },
}

########################################################
#             Core Classes and Functions
########################################################

class XenonDevice(object):
    def __init__(
            self, dev_id, address=None, local_key="", dev_type="default", connection_timeout=5, version=3.1, persist=False, cid=None, node_id=None, parent=None, connection_retry_limit=5, connection_retry_delay=5, port=TCPPORT # pylint: disable=W0621
    ):
        """
        Represents a Tuya device.

        Args:
            dev_id (str): The device id.
            address (str): The network address.
            local_key (str, optional): The encryption key. Defaults to None.
            cid (str: Optional sub device id. Default to None.
            node_id (str: alias for cid)
            parent (object: gateway device this device is a child of)

        Attributes:
            port (int): The port to connect to.
        """

        self.id = dev_id
        self.cid = cid if cid else node_id
        self.address = address
        self.auto_ip = False
        self.dev_type = dev_type
        self.dev_type_auto = self.dev_type == 'default'
        self.last_dev_type = ''
        self.connection_timeout = connection_timeout
        self.retry = True
        self.disabledetect = False  # if True do not detect device22
        self.port = port  # default - do not expect caller to pass in
        self.socket = None
        self.socketPersistent = False if not persist else True # pylint: disable=R1719
        self.socketNODELAY = True
        self.socketRetryLimit = connection_retry_limit
        self.socketRetryDelay = connection_retry_delay
        self.version = 0
        self.dps_to_request = {}
        self.seqno = 1
        self.sendWait = 0.01
        self.dps_cache = {}
        self.parent = parent
        self.children = {}
        self.received_wrong_cid_queue = []
        self.local_nonce = b'0123456789abcdef' # not-so-random random key
        self.remote_nonce = b''
        self.payload_dict = None

        if not local_key:
            local_key = ""
            # sub-devices do not need a local key, so only look it up if we are not a sub-device
            if not parent:
                devinfo = device_info( dev_id )
                if devinfo and 'key' in devinfo and devinfo['key']:
                    local_key = devinfo['key']
        self.local_key = local_key.encode("latin1")
        self.real_local_key = self.local_key
        self.cipher = None

        if self.parent:
            # if we are a child then we should have a cid/node_id but none were given - try and find it the same way we look up local keys
            if not self.cid:
                devinfo = device_info( dev_id )
                if devinfo and 'node_id' in devinfo and devinfo['node_id']:
                    self.cid = devinfo['node_id']
            if not self.cid:
                # not fatal as the user could have set the device_id to the cid
                # in that case dev_type should be 'zigbee' to set the proper fields in requests
                log.debug( 'Child device but no cid/node_id given!' )
            XenonDevice.set_version(self, self.parent.version)
            self.parent._register_child(self)
        elif (not address) or address == "Auto" or address == "0.0.0.0":
            # try to determine IP address automatically
            self.auto_ip = True
            bcast_data = find_device(dev_id)
            if bcast_data['ip'] is None:
                log.debug("Unable to find device on network (specify IP address)")
                raise Exception("Unable to find device on network (specify IP address)")
            self.address = bcast_data['ip']
            self.set_version(float(bcast_data['version']))
            time.sleep(0.1)
        elif version:
            self.set_version(float(version))
        else:
            # make sure we call our set_version() and not a subclass since some of
            # them (such as BulbDevice) make connections when called
            XenonDevice.set_version(self, 3.1)

    def __del__(self):
        # In case we have a lingering socket connection, close it
        try:
            if self.socket:
                # self.socket.shutdown(socket.SHUT_RDWR)
                self.socket.close()
                self.socket = None
        except:
            pass

    def __repr__(self):
        # FIXME can do better than this
        if self.parent:
            parent = self.parent.id
        else:
            parent = None
        return ("%s( %r, address=%r, local_key=%r, dev_type=%r, connection_timeout=%r, version=%r, persist=%r, cid=%r, parent=%r, children=%r )" %
                (self.__class__.__name__, self.id, self.address, self.real_local_key.decode(), self.dev_type, self.connection_timeout, self.version, self.socketPersistent, self.cid, parent, self.children))

    def _get_socket(self, renew):
        if renew and self.socket is not None:
            # self.socket.shutdown(socket.SHUT_RDWR)
            self.socket.close()
            self.socket = None
        if self.socket is None:
            # Set up Socket
            retries = 0
            err = ERR_OFFLINE
            while retries < self.socketRetryLimit:
                if self.auto_ip and not self.address:
                    bcast_data = find_device(self.id)
                    if bcast_data['ip'] is None:
                        log.debug("Unable to find device on network (specify IP address)")
                        return ERR_OFFLINE
                    self.address = bcast_data['ip']
                    new_version = float(bcast_data['version'])
                    if new_version != self.version:
                        # this may trigger a network call which will call _get_socket() again
                        #self.set_version(new_version)
                        self.version = new_version
                        self.version_str = "v" + str(version)
                        self.version_bytes = str(version).encode('latin1')
                        self.version_header = self.version_bytes + PROTOCOL_3x_HEADER
                        self.payload_dict = None

                if not self.address:
                    log.debug("No address for device!")
                    return ERR_OFFLINE

                self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                if self.socketNODELAY:
                    self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
                self.socket.settimeout(self.connection_timeout)
                try:
                    retries = retries + 1
                    self.socket.connect((self.address, self.port))
                    if self.version >= 3.4:
                        # restart session key negotiation
                        if self._negotiate_session_key():
                            return True
                        else:
                            if self.socket:
                                self.socket.close()
                                self.socket = None
                            return ERR_KEY_OR_VER
                    else:
                        return True
                except socket.timeout as e:
                    # unable to open socket
                    log.debug(
                        "socket unable to connect (timeout) - retry %d/%d",
                        retries, self.socketRetryLimit
                    )
                    err = ERR_OFFLINE
                except Exception as e:
                    # unable to open socket
                    log.debug(
                        "socket unable to connect (exception) - retry %d/%d",
                        retries, self.socketRetryLimit, exc_info=True
                    )
                    err = ERR_CONNECT
                if self.socket:
                    self.socket.close()
                    self.socket = None
                if retries < self.socketRetryLimit:
                    time.sleep(self.socketRetryDelay)
                if self.auto_ip:
                    self.address = None
            # unable to get connection
            return err
        # existing socket active
        return True

    def _check_socket_close(self, force=False):
        if (force or not self.socketPersistent) and self.socket:
            self.socket.close()
            self.socket = None

    def _recv_all(self, length):
        tries = 2
        data = b''

        while length > 0:
            newdata = self.socket.recv(length)
            if not newdata or len(newdata) == 0:
                log.debug("_recv_all(): no data? %r", newdata)
                # connection closed?
                tries -= 1
                if tries == 0:
                    raise DecodeError('No data received - connection closed?')
                if self.sendWait is not None:
                    time.sleep(self.sendWait)
                continue
            data += newdata
            length -= len(newdata)
            tries = 2
        return data

    def _receive(self):
        # make sure to use the parent's self.seqno and session key
        if self.parent:
            return self.parent._receive()
        # message consists of header + retcode + [data] + crc (4 or 32) + footer
        min_len_55AA = struct.calcsize(MESSAGE_HEADER_FMT_55AA) + 4 + 4 + len(SUFFIX_BIN)
        # message consists of header + iv + retcode + [data] + crc (16) + footer
        min_len_6699 = struct.calcsize(MESSAGE_HEADER_FMT_6699) + 12 + 4 + 16 + len(SUFFIX_BIN)
        min_len = min_len_55AA if min_len_55AA < min_len_6699 else min_len_6699
        prefix_len = len( PREFIX_55AA_BIN )

        data = self._recv_all( min_len )

        # search for the prefix.  if not found, delete everything except
        # the last (prefix_len - 1) bytes and recv more to replace it
        prefix_offset_55AA = data.find( PREFIX_55AA_BIN )
        prefix_offset_6699 = data.find( PREFIX_6699_BIN )

        while prefix_offset_55AA != 0 and prefix_offset_6699 != 0:
            log.debug('Message prefix not at the beginning of the received data!')
            log.debug('Offset 55AA: %d, 6699: %d, Received data: %r', prefix_offset_55AA, prefix_offset_6699, data)
            if prefix_offset_55AA < 0 and prefix_offset_6699 < 0:
                data = data[1-prefix_len:]
            else:
                prefix_offset = prefix_offset_6699 if prefix_offset_55AA < 0 else prefix_offset_55AA
                data = data[prefix_offset:]

            data += self._recv_all( min_len - len(data) )
            prefix_offset_55AA = data.find( PREFIX_55AA_BIN )
            prefix_offset_6699 = data.find( PREFIX_6699_BIN )

        header = parse_header(data)
        remaining = header.total_length - len(data)
        if remaining > 0:
            data += self._recv_all( remaining )

        log.debug("received data=%r", binascii.hexlify(data))
        hmac_key = self.local_key if self.version >= 3.4 else None
        no_retcode = False #None if self.version >= 3.5 else False
        return unpack_message(data, header=header, hmac_key=hmac_key, no_retcode=no_retcode)

    # similar to _send_receive() but never retries sending and does not decode the response
    def _send_receive_quick(self, payload, recv_retries, from_child=None): # pylint: disable=W0613
        if self.parent:
            return self.parent._send_receive_quick(payload, recv_retries, from_child=self)

        log.debug("sending payload quick")
        if self._get_socket(False) is not True:
            return None
        enc_payload = self._encode_message(payload) if type(payload) == MessagePayload else payload
        try:
            self.socket.sendall(enc_payload)
        except:
            self._check_socket_close(True)
            return None
        if not recv_retries:
            return True
        while recv_retries:
            try:
                msg = self._receive()
            except:
                msg = None
            if msg and len(msg.payload) != 0:
                return msg
            recv_retries -= 1
            if recv_retries == 0:
                log.debug("received null payload (%r) but out of recv retries, giving up", msg)
            else:
                log.debug("received null payload (%r), fetch new one - %s retries remaining", msg, recv_retries)
        return False

    def _send_receive(self, payload, minresponse=28, getresponse=True, decode_response=True, from_child=None):
        """
        Send single buffer `payload` and receive a single buffer.

        Args:
            payload(bytes): Data to send. Set to 'None' to receive only.
            minresponse(int): Minimum response size expected (default=28 bytes)
            getresponse(bool): If True, wait for and return response.
        """
        if self.parent:
            return self.parent._send_receive(payload, minresponse, getresponse, decode_response, from_child=self)

        if (not payload) and getresponse and self.received_wrong_cid_queue:
            if (not self.children) or (not from_child):
                r = self.received_wrong_cid_queue[0]
                self.received_wrong_cid_queue = self.received_wrong_cid_queue[1:]
                return r
            found_rq = False
            for rq in self.received_wrong_cid_queue:
                if rq[0] == from_child:
                    found_rq = rq
                    break
            if found_rq:
                self.received_wrong_cid_queue.remove(found_rq)
                return found_rq[1]

        success = False
        partial_success = False
        retries = 0
        recv_retries = 0
        #max_recv_retries = 0 if not self.retry else 2 if self.socketRetryLimit > 2 else self.socketRetryLimit
        max_recv_retries = 0 if not self.retry else self.socketRetryLimit
        dev_type = self.dev_type
        do_send = True
        msg = None
        while not success:
            # open up socket if device is available
            sock_result = self._get_socket(False)
            if sock_result is not True:
                # unable to get a socket - device likely offline
                self._check_socket_close(True)
                return error_json( sock_result if sock_result else ERR_OFFLINE )
            # send request to device
            try:
                if payload is not None and do_send:
                    log.debug("sending payload")
                    enc_payload = self._encode_message(payload) if type(payload) == MessagePayload else payload
                    self.socket.sendall(enc_payload)
                    if self.sendWait is not None:
                        time.sleep(self.sendWait)  # give device time to respond
                if getresponse:
                    do_send = False
                    rmsg = self._receive()
                    # device may send null ack (28 byte) response before a full response
                    # consider it an ACK and do not retry the send even if we do not get a full response
                    if rmsg:
                        payload = None
                        partial_success = True
                        msg = rmsg
                    if (not msg or len(msg.payload) == 0) and recv_retries <= max_recv_retries:
                        log.debug("received null payload (%r), fetch new one - retry %s / %s", msg, recv_retries, max_recv_retries)
                        recv_retries += 1
                        if recv_retries > max_recv_retries:
                            success = True
                    else:
                        success = True
                        log.debug("received message=%r", msg)
                else:
                    # legacy/default mode avoids persisting socket across commands
                    self._check_socket_close()
                    return None
            except (KeyboardInterrupt, SystemExit) as err:
                log.debug("Keyboard Interrupt - Exiting")
                raise
            except socket.timeout as err:
                # a socket timeout occurred
                if payload is None:
                    # Receive only mode - return None
                    self._check_socket_close()
                    return None
                do_send = True
                retries += 1
                # toss old socket and get new one
                self._check_socket_close(True)
                log.debug(
                    "Timeout in _send_receive() - retry %s / %s",
                    retries, self.socketRetryLimit
                )
                # if we exceed the limit of retries then lets get out of here
                if retries > self.socketRetryLimit:
                    log.debug(
                        "Exceeded tinytuya retry limit (%s)",
                        self.socketRetryLimit
                    )
                    # timeout reached - return error
                    return error_json(ERR_KEY_OR_VER)
                # wait a bit before retrying
                time.sleep(0.1)
            except DecodeError as err:
                log.debug("Error decoding received data - read retry %s/%s", recv_retries, max_recv_retries, exc_info=True)
                recv_retries += 1
                if recv_retries > max_recv_retries:
                    # we recieved at least 1 valid message with a null payload, so the send was successful
                    if partial_success:
                        self._check_socket_close()
                        return None
                    # no valid messages received
                    self._check_socket_close(True)
                    return error_json(ERR_PAYLOAD)
            except Exception as err:
                # likely network or connection error
                do_send = True
                retries += 1
                # toss old socket and get new one
                self._check_socket_close(True)
                log.debug(
                    "Network connection error in _send_receive() - retry %s/%s",
                    retries, self.socketRetryLimit, exc_info=True
                )
                # if we exceed the limit of retries then lets get out of here
                if retries > self.socketRetryLimit:
                    log.debug(
                        "Exceeded tinytuya retry limit (%s)",
                        self.socketRetryLimit
                    )
                    log.debug("Unable to connect to device ")
                    # timeout reached - return error
                    return error_json(ERR_CONNECT)
                # wait a bit before retrying
                time.sleep(0.1)
            # except
        # while

        # could be None or have a null payload
        if not decode_response:
            # legacy/default mode avoids persisting socket across commands
            self._check_socket_close()
            return msg

        return self._process_message( msg, dev_type, from_child, minresponse, decode_response )

    def _process_message( self, msg, dev_type=None, from_child=None, minresponse=28, decode_response=True ):
        # null packet, nothing to decode
        if not msg or len(msg.payload) == 0:
            log.debug("raw unpacked message = %r", msg)
            # legacy/default mode avoids persisting socket across commands
            self._check_socket_close()
            return None

        # option - decode Message with hard coded offsets
        # result = self._decode_payload(data[20:-8])

        # Unpack Message into TuyaMessage format
        # and return payload decrypted
        try:
            # Data available: seqno cmd retcode payload crc
            log.debug("raw unpacked message = %r", msg)
            result = self._decode_payload(msg.payload)

            if result is None:
                log.debug("_decode_payload() failed!")
        except:
            log.debug("error unpacking or decoding tuya JSON payload", exc_info=True)
            result = error_json(ERR_PAYLOAD)

        # Did we detect a device22 device? Return ERR_DEVTYPE error.
        if dev_type and dev_type != self.dev_type:
            log.debug(
                "Device22 detected and updated (%s -> %s) - Update payload and try again",
                dev_type,
                self.dev_type,
            )
            result = error_json(ERR_DEVTYPE)

        found_child = False
        if self.children:
            found_cid = None
            if result and 'cid' in result:
                found_cid = result['cid']
            elif result and 'data' in result and type(result['data']) == dict and 'cid' in result['data']:
                found_cid = result['data']['cid']

            if found_cid:
                for c in self.children:
                    if self.children[c].cid == found_cid:
                        result['device'] = found_child = self.children[c]
                        break

            if from_child and from_child is not True and from_child != found_child:
                # async update from different CID, try again
                log.debug( 'Recieved async update for wrong CID %s while looking for CID %s, trying again', found_cid, from_child.cid )
                if self.socketPersistent:
                    # if persistent, save response until the next receive() call
                    # otherwise, trash it
                    if found_child:
                        result = found_child._process_response(result)
                    else:
                        result = self._process_response(result)
                    self.received_wrong_cid_queue.append( (found_child, result) )
                # events should not be coming in so fast that we will never timeout a read, so don't worry about loops
                return self._send_receive( None, minresponse, True, decode_response, from_child=from_child)

        # legacy/default mode avoids persisting socket across commands
        self._check_socket_close()

        if found_child:
            return found_child._process_response(result)

        return self._process_response(result)

    def _decode_payload(self, payload):
        log.debug("decode payload=%r", payload)
        cipher = AESCipher(self.local_key)

        if self.version == 3.4:
            # 3.4 devices encrypt the version header in addition to the payload
            try:
                log.debug("decrypting=%r", payload)
                payload = cipher.decrypt(payload, False, decode_text=False)
            except:
                log.debug("incomplete payload=%r (len:%d)", payload, len(payload), exc_info=True)
                return error_json(ERR_PAYLOAD)

            log.debug("decrypted 3.x payload=%r", payload)
            log.debug("payload type = %s", type(payload))

        if payload.startswith(PROTOCOL_VERSION_BYTES_31):
            # Received an encrypted payload
            # Remove version header
            payload = payload[len(PROTOCOL_VERSION_BYTES_31) :]
            # Decrypt payload
            # Remove 16-bytes of MD5 hexdigest of payload
            payload = cipher.decrypt(payload[16:])
        elif self.version >= 3.2: # 3.2 or 3.3 or 3.4 or 3.5
            # Trim header for non-default device type
            if payload.startswith( self.version_bytes ):
                payload = payload[len(self.version_header) :]
                log.debug("removing 3.x=%r", payload)
            elif self.dev_type == "device22" and (len(payload) & 0x0F) != 0:
                payload = payload[len(self.version_header) :]
                log.debug("removing device22 3.x header=%r", payload)

            if self.version < 3.4:
                try:
                    log.debug("decrypting=%r", payload)
                    payload = cipher.decrypt(payload, False)
                except:
                    log.debug("incomplete payload=%r (len:%d)", payload, len(payload), exc_info=True)
                    return error_json(ERR_PAYLOAD)

                log.debug("decrypted 3.x payload=%r", payload)
                # Try to detect if device22 found
                log.debug("payload type = %s", type(payload))

            if not isinstance(payload, str):
                try:
                    payload = payload.decode()
                except:
                    log.debug("payload was not string type and decoding failed")
                    return error_json(ERR_JSON, payload)
            if not self.disabledetect and "data unvalid" in payload:
                self.dev_type = "device22"
                # set at least one DPS
                self.dps_to_request = {"1": None}
                log.debug(
                    "'data unvalid' error detected: switching to dev_type %r",
                    self.dev_type,
                )
                return None
        elif not payload.startswith(b"{"):
            log.debug("Unexpected payload=%r", payload)
            return error_json(ERR_PAYLOAD, payload)

        if not isinstance(payload, str):
            payload = payload.decode()
        log.debug("decoded results=%r", payload)
        try:
            json_payload = json.loads(payload)
        except:
            json_payload = error_json(ERR_JSON, payload)

        # v3.4 stuffs it into {"data":{"dps":{"1":true}}, ...}
        if "dps" not in json_payload and "data" in json_payload and "dps" in json_payload['data']:
            json_payload['dps'] = json_payload['data']['dps']

        return json_payload

    def _process_response(self, response): # pylint: disable=R0201
        """
        Override this function in a sub-class if you want to do some processing on the received data
        """
        return response

    def _negotiate_session_key(self):
        rkey = self._send_receive_quick( self._negotiate_session_key_generate_step_1(), 2 )
        step3 = self._negotiate_session_key_generate_step_3( rkey )
        if not step3:
            return False
        self._send_receive_quick( step3, None )
        self._negotiate_session_key_generate_finalize()
        return True

    def _negotiate_session_key_generate_step_1( self ):
        self.local_nonce = b'0123456789abcdef' # not-so-random random key
        self.remote_nonce = b''
        self.local_key = self.real_local_key

        return MessagePayload(SESS_KEY_NEG_START, self.local_nonce)

    def _negotiate_session_key_generate_step_3( self, rkey ):
        if not rkey or type(rkey) != TuyaMessage or len(rkey.payload) < 48:
            # error
            log.debug("session key negotiation failed on step 1")
            return False

        if rkey.cmd != SESS_KEY_NEG_RESP:
            log.debug("session key negotiation step 2 returned wrong command: %d", rkey.cmd)
            return False

        payload = rkey.payload
        if self.version == 3.4:
            try:
                log.debug("decrypting=%r", payload)
                cipher = AESCipher(self.real_local_key)
                payload = cipher.decrypt(payload, False, decode_text=False)
            except:
                log.debug("session key step 2 decrypt failed, payload=%r (len:%d)", payload, len(payload), exc_info=True)
                return False

        log.debug("decrypted session key negotiation step 2 payload=%r", payload)
        log.debug("payload type = %s len = %d", type(payload), len(payload))

        if len(payload) < 48:
            log.debug("session key negotiation step 2 failed, too short response")
            return False

        self.remote_nonce = payload[:16]
        hmac_check = hmac.new(self.local_key, self.local_nonce, sha256).digest()

        if hmac_check != payload[16:48]:
            log.debug("session key negotiation step 2 failed HMAC check! wanted=%r but got=%r", binascii.hexlify(hmac_check), binascii.hexlify(payload[16:48]))
            return False

        log.debug("session local nonce: %r remote nonce: %r", self.local_nonce, self.remote_nonce)

        rkey_hmac = hmac.new(self.local_key, self.remote_nonce, sha256).digest()
        return MessagePayload(SESS_KEY_NEG_FINISH, rkey_hmac)

    def _negotiate_session_key_generate_finalize( self ):
        if IS_PY2:
            k = [ chr(ord(a)^ord(b)) for (a,b) in zip(self.local_nonce,self.remote_nonce) ]
            self.local_key = ''.join(k)
        else:
            self.local_key = bytes( [ a^b for (a,b) in zip(self.local_nonce,self.remote_nonce) ] )
        log.debug("Session nonce XOR'd: %r", self.local_key)

        cipher = AESCipher(self.real_local_key)
        if self.version == 3.4:
            self.local_key = cipher.encrypt( self.local_key, False, pad=False )
        else:
            iv = self.local_nonce[:12]
            log.debug("Session IV: %r", iv)
            self.local_key = cipher.encrypt( self.local_key, use_base64=False, pad=False, iv=iv )[12:28]

        log.debug("Session key negotiate success! session key: %r", self.local_key)
        return True

    # adds protocol header (if needed) and encrypts
    def _encode_message( self, msg ):
        # make sure to use the parent's self.seqno and session key
        if self.parent:
            return self.parent._encode_message( msg )
        hmac_key = None
        iv = None
        payload = msg.payload
        self.cipher = AESCipher(self.local_key)

        if self.version >= 3.4:
            hmac_key = self.local_key
            if msg.cmd not in NO_PROTOCOL_HEADER_CMDS:
                # add the 3.x header
                payload = self.version_header + payload
            log.debug('final payload: %r', payload)

            if self.version >= 3.5:
                iv = True
                # seqno cmd retcode payload crc crc_good, prefix, iv
                msg = TuyaMessage(self.seqno, msg.cmd, None, payload, 0, True, PREFIX_6699_VALUE, True)
                self.seqno += 1  # increase message sequence number
                data = pack_message(msg,hmac_key=self.local_key)
                log.debug("payload encrypted=%r",binascii.hexlify(data))
                return data

            payload = self.cipher.encrypt(payload, False)
        elif self.version >= 3.2:
            # expect to connect and then disconnect to set new
            payload = self.cipher.encrypt(payload, False)
            if msg.cmd not in NO_PROTOCOL_HEADER_CMDS:
                # add the 3.x header
                payload = self.version_header + payload
        elif msg.cmd == CONTROL:
            # need to encrypt
            payload = self.cipher.encrypt(payload)
            preMd5String = (
                b"data="
                + payload
                + b"||lpv="
                + PROTOCOL_VERSION_BYTES_31
                + b"||"
                + self.local_key
            )
            m = md5()
            m.update(preMd5String)
            hexdigest = m.hexdigest()
            # some tuya libraries strip 8: to :24
            payload = (
                PROTOCOL_VERSION_BYTES_31
                + hexdigest[8:][:16].encode("latin1")
                + payload
            )

        self.cipher = None
        msg = TuyaMessage(self.seqno, msg.cmd, 0, payload, 0, True, PREFIX_55AA_VALUE, False)
        self.seqno += 1  # increase message sequence number
        buffer = pack_message(msg,hmac_key=hmac_key)
        log.debug("payload encrypted=%r",binascii.hexlify(buffer))
        return buffer

    def _register_child(self, child):
        if child.id in self.children and child != self.children[child.id]:
            log.debug('Replacing existing child %r!', child.id)
        self.children[child.id] = child
        # disable device22 detection as some gateways return "json obj data unvalid" when the gateway is polled without a cid
        self.disabledetect = True
        self.payload_dict = None

    def receive(self):
        """
        Poll device to read any payload in the buffer.  Timeout results in None returned.
        """
        return self._send_receive(None)

    def send(self, payload):
        """
        Send single buffer `payload`.

        Args:
            payload(bytes): Data to send.
        """
        return self._send_receive(payload, 0, getresponse=False)

    def status(self, nowait=False):
        """Return device status."""
        query_type = DP_QUERY
        log.debug("status() entry (dev_type is %s)", self.dev_type)
        payload = self.generate_payload(query_type)

        data = self._send_receive(payload, 0, getresponse=(not nowait))
        log.debug("status() received data=%r", data)
        # Error handling
        if (not nowait) and data and "Err" in data:
            if data["Err"] == str(ERR_DEVTYPE):
                # Device22 detected and change - resend with new payload
                log.debug("status() rebuilding payload for device22")
                payload = self.generate_payload(query_type)
                data = self._send_receive(payload)
            elif data["Err"] == str(ERR_PAYLOAD):
                log.debug("Status request returned an error, is version %r and local key %r correct?", self.version, self.local_key)

        return data

    def subdev_query( self, nowait=False ):
        """Query for a list of sub-devices and their status"""
        # final payload should look like: {"data":{"cids":[]},"reqType":"subdev_online_stat_query"}
        payload = self.generate_payload(LAN_EXT_STREAM, rawData={"cids":[]}, reqType='subdev_online_stat_query')
        return self._send_receive(payload, 0, getresponse=(not nowait))

    def detect_available_dps(self):
        """Return which datapoints are supported by the device."""
        # device22 devices need a sort of bruteforce querying in order to detect the
        # list of available dps experience shows that the dps available are usually
        # in the ranges [1-25] and [100-110] need to split the bruteforcing in
        # different steps due to request payload limitation (max. length = 255)
        self.dps_cache = {}
        ranges = [(2, 11), (11, 21), (21, 31), (100, 111)]

        for dps_range in ranges:
            # dps 1 must always be sent, otherwise it might fail in case no dps is found
            # in the requested range
            self.dps_to_request = {"1": None}
            self.add_dps_to_request(range(*dps_range))
            try:
                data = self.status()
            except Exception as ex:
                log.exception("Failed to get status: %s", ex)
                raise
            if data is not None and "dps" in data:
                for k in data["dps"]:
                    self.dps_cache[k] = None

            if self.dev_type == "default":
                self.dps_to_request = self.dps_cache
                return self.dps_cache
        log.debug("Detected dps: %s", self.dps_cache)
        self.dps_to_request = self.dps_cache
        return self.dps_cache

    def add_dps_to_request(self, dp_indicies):
        """Add a datapoint (DP) to be included in requests."""
        if isinstance(dp_indicies, int):
            self.dps_to_request[str(dp_indicies)] = None
        else:
            self.dps_to_request.update({str(index): None for index in dp_indicies})

    def set_version(self, version): # pylint: disable=W0621
        version = float(version)
        self.version = version
        self.version_str = "v" + str(version)
        self.version_bytes = str(version).encode('latin1')
        self.version_header = self.version_bytes + PROTOCOL_3x_HEADER
        self.payload_dict = None
        if version == 3.2: # 3.2 behaves like 3.3 with device22
            self.dev_type="device22"
            if self.dps_to_request == {}:
                self.detect_available_dps()

    def set_socketPersistent(self, persist):
        self.socketPersistent = persist
        if self.socket and not persist:
            self.socket.close()
            self.socket = None

    def set_socketNODELAY(self, nodelay):
        self.socketNODELAY = nodelay
        if self.socket:
            if nodelay:
                self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
            else:
                self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 0)

    def set_socketRetryLimit(self, limit):
        self.socketRetryLimit = limit

    def set_socketRetryDelay(self, delay):
        self.socketRetryDelay = delay

    def set_socketTimeout(self, s):
        self.connection_timeout = s
        if self.socket:
            self.socket.settimeout(s)

    def set_dpsUsed(self, dps_to_request):
        self.dps_to_request = dps_to_request

    def set_retry(self, retry):
        self.retry = retry

    def set_sendWait(self, s):
        self.sendWait = s

    def close(self):
        self.__del__()

    @staticmethod
    def find(did):
        """
        Mainly here for backwards compatibility.
        Calling tinytuya.find_device() directly is recommended.

        Parameters:
            did = The specific Device ID you are looking for (returns only IP and Version)

        Response:
            (ip, version)
        """
        bcast_data = find_device(dev_id=did)
        return (bcast_data['ip'], bcast_data['version'])

    def generate_payload(self, command, data=None, gwId=None, devId=None, uid=None, rawData=None, reqType=None):
        """
        Generate the payload to send.

        Args:
            command(str): The type of command.
                This is one of the entries from payload_dict
            data(dict, optional): The data to send.
                This is what will be passed via the 'dps' entry
            gwId(str, optional): Will be used for gwId
            devId(str, optional): Will be used for devId
            uid(str, optional): Will be used for uid
        """
        # dicts will get referenced instead of copied if we don't do this
        def _deepcopy(dict1):
            result = {}
            for k in dict1:
                if isinstance( dict1[k], dict ):
                    result[k] = _deepcopy( dict1[k] )
                else:
                    result[k] = dict1[k]
            return result

        # dict2 will be merged into dict1
        # as dict2 is payload_dict['...'] we only need to worry about copying 2 levels deep,
        #  the command id and "command"/"command_override" keys: i.e. dict2[CMD_ID]["command"]
        def _merge_payload_dicts(dict1, dict2):
            for cmd in dict2:
                if cmd not in dict1:
                    # make a deep copy so we don't get a reference
                    dict1[cmd] = _deepcopy( dict2[cmd] )
                else:
                    for var in dict2[cmd]:
                        if not isinstance( dict2[cmd][var], dict ):
                            # not a dict, safe to copy
                            dict1[cmd][var] = dict2[cmd][var]
                        else:
                            # make a deep copy so we don't get a reference
                            dict1[cmd][var] = _deepcopy( dict2[cmd][var] )

        # start merging down to the final payload dict
        # later merges overwrite earlier merges
        # "default" - ("gateway" if gateway) - ("zigbee" if sub-device) - [version string] - ('gateway_'+[version string] if gateway) -
        #   'zigbee_'+[version string] if sub-device - [dev_type if not "default"]
        if not self.payload_dict or self.last_dev_type != self.dev_type:
            self.payload_dict = {}
            _merge_payload_dicts( self.payload_dict, payload_dict['default'] )
            if self.children:
                _merge_payload_dicts( self.payload_dict, payload_dict['gateway'] )
            if self.cid:
                _merge_payload_dicts( self.payload_dict, payload_dict['zigbee'] )
            if self.version_str in payload_dict:
                _merge_payload_dicts( self.payload_dict, payload_dict[self.version_str] )
            if self.children and ('gateway_'+self.version_str) in payload_dict:
                _merge_payload_dicts( self.payload_dict, payload_dict['gateway_'+self.version_str] )
            if self.cid and ('zigbee_'+self.version_str) in payload_dict:
                _merge_payload_dicts( self.payload_dict, payload_dict['zigbee_'+self.version_str] )
            if self.dev_type != 'default':
                _merge_payload_dicts( self.payload_dict, payload_dict[self.dev_type] )
            log.debug( 'final payload_dict for %r (%r/%r): %r', self.id, self.version_str, self.dev_type, self.payload_dict )
            # save it so we don't have to calculate this again unless something changes
            self.last_dev_type = self.dev_type

        json_data = command_override = None

        if command in self.payload_dict:
            if 'command' in self.payload_dict[command]:
                json_data = self.payload_dict[command]['command']
            if 'command_override' in self.payload_dict[command]:
                command_override = self.payload_dict[command]['command_override']

        if command_override is None:
            command_override = command
        if json_data is None:
            # I have yet to see a device complain about included but unneeded attribs, but they *will*
            # complain about missing attribs, so just include them all unless otherwise specified
            json_data = {"gwId": "", "devId": "", "uid": "", "t": ""}

        # make sure we don't modify payload_dict
        json_data = json_data.copy()

        if "gwId" in json_data:
            if gwId is not None:
                json_data["gwId"] = gwId
            elif self.parent:
                json_data["gwId"] = self.parent.id
            else:
                json_data["gwId"] = self.id
        if "devId" in json_data:
            if devId is not None:
                json_data["devId"] = devId
            else:
                json_data["devId"] = self.id
        if "uid" in json_data:
            if uid is not None:
                json_data["uid"] = uid
            else:
                json_data["uid"] = self.id
        if self.cid:
            json_data["cid"] = self.cid
            if "data" in json_data:
                json_data["data"]["cid"] = self.cid
                json_data["data"]["ctype"] = 0
        #elif "cid" in json_data:
        #    del json_data['cid']
        if "t" in json_data:
            if json_data['t'] == "int":
                json_data["t"] = int(time.time())
            else:
                json_data["t"] = str(int(time.time()))
        if rawData is not None and "data" in json_data:
            json_data["data"] = rawData
        elif data is not None:
            if "dpId" in json_data:
                json_data["dpId"] = data
            elif "data" in json_data:
                json_data["data"]["dps"] = data
            else:
                json_data["dps"] = data
        elif self.dev_type == "device22" and command == DP_QUERY:
            json_data["dps"] = self.dps_to_request
        if reqType and "reqType" in json_data:
            json_data["reqType"] = reqType

        # Create byte buffer from hex data
        if json_data == "":
            payload = ""
        else:
            payload = json.dumps(json_data)
        # if spaces are not removed device does not respond!
        payload = payload.replace(" ", "")
        payload = payload.encode("utf-8")
        log.debug("building command %s payload=%r", command, payload)

        # create Tuya message packet
        return MessagePayload(command_override, payload)


class Device(XenonDevice):
    #def __init__(self, *args, **kwargs):
    #    super(Device, self).__init__(*args, **kwargs)

    def set_status(self, on, switch=1, nowait=False):
        """
        Set status of the device to 'on' or 'off'.

        Args:
            on(bool):  True for 'on', False for 'off'.
            switch(int): The switch to set
            nowait(bool): True to send without waiting for response.
        """
        # open device, send request, then close connection
        if isinstance(switch, int):
            switch = str(switch)  # index and payload is a string
        payload = self.generate_payload(CONTROL, {switch: on})

        data = self._send_receive(payload, getresponse=(not nowait))
        log.debug("set_status received data=%r", data)

        return data

    def product(self):
        """
        Request AP_CONFIG Product Info from device. [BETA]

        """
        # open device, send request, then close connection
        payload = self.generate_payload(AP_CONFIG)
        data = self._send_receive(payload, 0)
        log.debug("product received data=%r", data)
        return data

    def heartbeat(self, nowait=True):
        """
        Send a keep-alive HEART_BEAT command to keep the TCP connection open.

        Devices only send an empty-payload response, so no need to wait for it.

        Args:
            nowait(bool): True to send without waiting for response.
        """
        # open device, send request, then close connection
        payload = self.generate_payload(HEART_BEAT)
        data = self._send_receive(payload, 0, getresponse=(not nowait))
        log.debug("heartbeat received data=%r", data)
        return data

    def updatedps(self, index=None, nowait=False):
        """
        Request device to update index.

        Args:
            index(array): list of dps to update (ex. [4, 5, 6, 18, 19, 20])
            nowait(bool): True to send without waiting for response.
        """
        if index is None:
            index = [1]

        log.debug("updatedps() entry (dev_type is %s)", self.dev_type)
        # open device, send request, then close connection
        payload = self.generate_payload(UPDATEDPS, index)
        data = self._send_receive(payload, 0, getresponse=(not nowait))
        log.debug("updatedps received data=%r", data)
        return data

    def set_value(self, index, value, nowait=False):
        """
        Set int value of any index.

        Args:
            index(int): index to set
            value(int): new value for the index
            nowait(bool): True to send without waiting for response.
        """
        # open device, send request, then close connection
        if isinstance(index, int):
            index = str(index)  # index and payload is a string

        payload = self.generate_payload(CONTROL, {index: value})

        data = self._send_receive(payload, getresponse=(not nowait))

        return data

    def set_multiple_values(self, data, nowait=False):
        """
        Set multiple indexes at the same time

        Args:
            data(dict): array of index/value pairs to set
            nowait(bool): True to send without waiting for response.
        """
        out = {}
        for i in data:
            out[str(i)] = data[i]
        payload = self.generate_payload(CONTROL, out)
        return self._send_receive(payload, getresponse=(not nowait))

    def turn_on(self, switch=1, nowait=False):
        """Turn the device on"""
        return self.set_status(True, switch, nowait)

    def turn_off(self, switch=1, nowait=False):
        """Turn the device off"""
        return self.set_status(False, switch, nowait)

    def set_timer(self, num_secs, dps_id=0, nowait=False):
        """
        Set a timer.

        Args:
            num_secs(int): Number of seconds
            dps_id(int): DPS Index for Timer
            nowait(bool): True to send without waiting for response.
        """

        # Query status, pick last device id as that is probably the timer
        if dps_id == 0:
            status = self.status()
            if "dps" in status:
                devices = status["dps"]
                devices_numbers = list(devices.keys())
                devices_numbers.sort()
                dps_id = devices_numbers[-1]
            else:
                log.debug("set_timer received error=%r", status)
                return status

        payload = self.generate_payload(CONTROL, {dps_id: num_secs})

        data = self._send_receive(payload, getresponse=(not nowait))
        log.debug("set_timer received data=%r", data)
        return data

# Utility Functions

def pad(s):
    return s + (16 - len(s) % 16) * chr(16 - len(s) % 16)

def unpad(s):
    return s[: -ord(s[len(s) - 1 :])]

def encrypt(msg, key):
    return AESCipher( key ).encrypt( msg, use_base64=False, pad=True )

def decrypt(msg, key):
    return AESCipher( key ).decrypt( msg, use_base64=False, decode_text=True )

#def decrypt_gcm(msg, key):
#    nonce = msg[:12]
#    return AES.new(key, AES.MODE_GCM, nonce=nonce).decrypt(msg[12:]).decode()

# UDP packet payload decryption - credit to tuya-convert
udpkey = md5(b"yGAdlopoPVldABfn").digest()

def decrypt_udp(msg):
    try:
        header = parse_header(msg)
    except:
        header = None
    if not header:
        return decrypt(msg, udpkey)
    if header.prefix == PREFIX_55AA_VALUE:
        payload = unpack_message(msg).payload
        try:
            if payload[:1] == b'{' and payload[-1:] == b'}':
                return payload.decode()
        except:
            pass
        return decrypt(payload, udpkey)
    if header.prefix == PREFIX_6699_VALUE:
        unpacked = unpack_message(msg, hmac_key=udpkey, no_retcode=None)
        payload = unpacked.payload.decode()
        # app sometimes has extra bytes at the end
        while payload[-1] == chr(0):
            payload = payload[:-1]
        return payload
    return decrypt(msg, udpkey)


def appenddevice(newdevice, devices):
    if newdevice["ip"] in devices:
        return True
    devices[newdevice["ip"]] = newdevice
    return False

# Terminal color helper
def termcolor(color=True):
    if color is False:
        # Disable Terminal Color Formatting
        bold = subbold = normal = dim = alert = alertdim = cyan = red = yellow = ""
    else:
        # Terminal Color Formatting
        bold = "\033[0m\033[97m\033[1m"
        subbold = "\033[0m\033[32m"
        normal = "\033[97m\033[0m"
        dim = "\033[0m\033[97m\033[2m"
        alert = "\033[0m\033[91m\033[1m"
        alertdim = "\033[0m\033[91m\033[2m"
        cyan = "\033[0m\033[36m"
        red = "\033[0m\033[31m"
        yellow = "\033[0m\033[33m"
    return bold,subbold,normal,dim,alert,alertdim,cyan,red,yellow


# Scan function shortcut
def scan(maxretry=None, color=True, forcescan=False):
    """Scans your network for Tuya devices with output to stdout"""
    from . import scanner
    scanner.scan(scantime=maxretry, color=color, forcescan=forcescan)


# Scan function
def deviceScan(verbose=False, maxretry=None, color=True, poll=True, forcescan=False, byID=False):
    """Scans your network for Tuya devices and returns dictionary of devices discovered
        devices = tinytuya.deviceScan(verbose)

    Parameters:
        verbose = True or False, print formatted output to stdout [Default: False]
        maxretry = The number of loops to wait to pick up UDP from all devices
        color = True or False, print output in color [Default: True]
        poll = True or False, poll dps status for devices if possible
        forcescan = True or False, force network scan for device IP addresses

    Response:
        devices = Dictionary of all devices found

    To unpack data, you can do something like this:

        devices = tinytuya.deviceScan()
        for ip in devices:
            id = devices[ip]['gwId']
            key = devices[ip]['productKey']
            vers = devices[ip]['version']
            dps = devices[ip]['dps']

    """
    from . import scanner
    return scanner.devices(verbose=verbose, scantime=maxretry, color=color, poll=poll, forcescan=forcescan, byID=byID)


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/scanner.py

# TinyTuya Setup Wizard
# -*- coding: utf-8 -*-
"""
TinyTuya Network Scanner for Tuya based WiFi smart devices

Author: Jason A. Cox
For more information see https://github.com/jasonacox/tinytuya

Description
    Scan will scan the local network for Tuya devices and if a local devices.json is
    present in the local directory, will use the Local KEYs to poll the devices for
    status.

"""
# Modules
from __future__ import print_function
from collections import namedtuple
import ipaddress
import json
import logging
import socket
import select
import sys
import time
import errno
import base64
import traceback
from colorama import init
import tinytuya

# Optional libraries required for forced scanning
#try:
#    from getmac import get_mac_address
#    SCANLIBS = True
#except:
#    SCANLIBS = False

# Backward compatibility for python2
try:
    input = raw_input
except NameError:
    pass

try:
    import netifaces # pylint: disable=E0401
    NETIFLIBS = True
except ImportError:
    NETIFLIBS = False

try:
    import psutil # pylint: disable=E0401
    PSULIBS = True
except ImportError:
    PSULIBS = False

# Colorama terminal color capability for all platforms
init()

# Configuration Files
DEVICEFILE = tinytuya.DEVICEFILE
SNAPSHOTFILE = tinytuya.SNAPSHOTFILE

# Global Network Configs
DEFAULT_NETWORK = tinytuya.DEFAULT_NETWORK
TCPTIMEOUT = tinytuya.TCPTIMEOUT    # Seconds to wait for socket open for scanning
TCPPORT = tinytuya.TCPPORT          # Tuya TCP Local Port
MAXCOUNT = tinytuya.MAXCOUNT        # How many tries before stopping
UDPPORT = tinytuya.UDPPORT          # Tuya 3.1 UDP Port
UDPPORTS = tinytuya.UDPPORTS        # Tuya 3.3 encrypted UDP Port
UDPPORTAPP = tinytuya.UDPPORTAPP    # Tuya app encrypted UDP Port
TIMEOUT = tinytuya.TIMEOUT          # Socket Timeout
SCANTIME = tinytuya.SCANTIME        # How many seconds to wait before stopping
BROADCASTTIME = 6                   # How often to broadcast to port 7000 to get v3.5 devices to send us their info

max_parallel = 300
connect_timeout = 3

devinfo_keys = ('ip', 'mac', 'name', 'key', 'gwId', 'active', 'ability', 'encrypt', 'productKey', 'version', 'token', 'wf_cfg' )
# id ver

TermColors = namedtuple("TermColors", "bold, subbold, normal, dim, alert, alertdim, cyan, red, yellow")

FSCAN_NOT_STARTED = 0
FSCAN_INITIAL_CONNECT = 1
FSCAN_v3x_PROVOKE_RESPONSE = 2
FSCAN_v31_BRUTE_FORCE_ACTIVE = 3
FSCAN_v33_BRUTE_FORCE_ACTIVE = 4
FSCAN_v34_BRUTE_FORCE_ACTIVE = 5
FSCAN_v33_BRUTE_FORCE_ACQUIRE = 6
FSCAN_v31_PASSIVE_LISTEN = 7
#FSCAN_ = 8
FSCAN_FINAL_POLL = 100


# Logging
log = logging.getLogger(__name__)

# Helper Functions
def getmyIPaddr():
    # Fetch my IP address and assume /24 network
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    r = str(s.getsockname()[0])
    s.close()
    return r

def getmyIP():
    r = getmyIPaddr().split('.')
    # assume a /24 network
    return '%s.%s.%s.0/24' % tuple(r[:3])

def getmyIPs( term, verbose, ask ):
    if NETIFLIBS:
        return getmyIPs_via_netifaces( term, verbose, ask )
    if PSULIBS:
        return getmyIPs_via_psutil( term, verbose, ask )
    return None

def getmyIPs_via_netifaces( term, verbose, ask ):
    ips = {}
    interfaces = netifaces.interfaces()
    try:
        # skip the loopback interface
        interfaces.remove('lo')
    except:
        pass
    for interface in interfaces:
        addresses = netifaces.ifaddresses(interface)
        #for address_family in (netifaces.AF_INET, netifaces.AF_INET6):
        family_addresses = addresses.get(netifaces.AF_INET)
        if not family_addresses:
            continue

        for address in family_addresses:
            k = str(ipaddress.IPv4Interface(address['addr']+'/'+address['netmask']).network)
            if k[:4] == '127.':
                # skip the loopback interface
                continue
            if ask:
                if ask != 2:
                    answer = input( '%sScan network %s from interface %s?%s ([Y]es/[n]o/[a]ll yes): ' % (term.bold, k, str(interface), term.normal) )
                    if answer[0:1].lower() == 'a':
                        ask = 2
                    elif answer.lower().find('n') >= 0:
                        continue
            if verbose:
                print(term.dim + 'Adding Network', k, 'to the force-scan list')
            ips[k] = True
    return ips.keys()

def getmyIPs_via_psutil( term, verbose, ask ):
    ips = {}
    interfaces = psutil.net_if_addrs()
    for interface in interfaces:
        addresses = interfaces[interface]
        for addr in addresses:
            if addr.family != socket.AF_INET:
                continue
            k = str(ipaddress.IPv4Interface(addr.address+'/'+addr.netmask).network)
            if k[:4] == '127.':
                # skip the loopback interface
                continue
            if ask:
                if ask != 2:
                    answer = input( '%sScan network %s from interface %s?%s ([Y]es/[n]o/[a]ll yes): ' % (term.bold, k, str(interface), term.normal) )
                    if answer[0:1].lower() == 'a':
                        ask = 2
                    elif answer.lower().find('n') >= 0:
                        continue
            if verbose:
                print(term.dim + 'Adding Network', k, 'to the force-scan list')
            ips[k] = True
    return ips.keys()

def get_ip_to_broadcast():
    ip_to_broadcast = {}

    if NETIFLIBS:
        interfaces = netifaces.interfaces()
        for interface in interfaces:
            addresses = netifaces.ifaddresses(interface)
            ipv4 = addresses.get(netifaces.AF_INET)

            if ipv4:
                for addr in ipv4:
                    if 'broadcast' in addr and 'addr' in addr and addr['broadcast'] != addr['addr']:
                        ip_to_broadcast[addr['broadcast']] = addr['addr']

        if ip_to_broadcast:
            return ip_to_broadcast

    if PSULIBS:
        interfaces = psutil.net_if_addrs()
        for addresses in interfaces.values():
            for addr in addresses:
                if addr.family == socket.AF_INET and addr.broadcast and addr.address and addr.address != addr.broadcast:  # AF_INET is for IPv4
                    ip_to_broadcast[addr.broadcast] = addr.address

        if ip_to_broadcast:
            return ip_to_broadcast

    ip_to_broadcast['255.255.255.255'] = getmyIPaddr()
    return ip_to_broadcast

def send_discovery_request( iface_list=None ):
    close_sockets = False

    if not iface_list:
        close_sockets = True
        iface_list = {}
        client_bcast_addrs = get_ip_to_broadcast()
        for bcast in client_bcast_addrs:
            addr = client_bcast_addrs[bcast]
            iface_list[addr] = { 'broadcast': bcast }

    for address in iface_list:
        iface = iface_list[address]
        if 'socket' not in iface:
            iface['socket'] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP
            iface['socket'].setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
            try:
                iface['socket'].bind( (address,0) )
            except:
                log.debug( 'Failed to bind to address %r for discovery broadcasts, skipping interface!', address, exc_info=True )
                continue

        if 'payload' not in iface:
            bcast = json.dumps( {"from":"app","ip":address} ).encode()
            bcast_msg = tinytuya.TuyaMessage( 0, tinytuya.REQ_DEVINFO, None, bcast, 0, True, tinytuya.PREFIX_6699_VALUE, True )
            iface['payload'] = tinytuya.pack_message( bcast_msg, hmac_key=tinytuya.udpkey )

        if 'port' not in iface:
            iface['port'] = 7000

        log.debug( 'Sending discovery broadcast from %r to %r on port %r', address, iface['broadcast'], iface['port'] )
        # the official app always sends it twice, so do the same
        iface['socket'].sendto( iface['payload'], (iface['broadcast'], iface['port']) )
        iface['socket'].sendto( iface['payload'], (iface['broadcast'], iface['port']) )

        if close_sockets:
            iface['socket'].close()
            del iface['socket']

class KeyObj(object):
    def __init__( self, gwId, key ):
        self.gwId = gwId
        self.key = key
        self.key_encoded = key.encode('utf8')
        self.used = False

class DeviceDetect(object):
    def __init__( self, ip, deviceinfo, options, debug ):
        self.ip = ip
        self.deviceinfo = None
        self.options = options
        self.debug = debug
        self.device = None
        self.scanned = False
        self.broadcasted = False
        self.found = False
        self.key_found = False
        self.gwid_found = False
        self.err_found = False
        self.ver_found = False
        self.displayed = False
        self.message = None
        self.passive = False
        self.msgs = []
        self.send_queue = []
        self.sock = None
        self.read = False
        self.write = False
        self.remove = False
        self.timeo = 0
        self.resets = 0
        self.step = FSCAN_NOT_STARTED
        self.try_v35_with_v34 = False
        self.cur_key = None
        self.hard_time_limit = time.time() + 30
        self.initial_connect_retries = options['retries']

        if not deviceinfo:
            deviceinfo = {}
        # some devices report "ability" but most have this as the typo "ablilty"
        if 'ablilty' in deviceinfo and 'ability' not in deviceinfo:
            deviceinfo['ability'] = deviceinfo['ablilty']
            del deviceinfo['ablilty']
        self.deviceinfo = deviceinfo
        for k in devinfo_keys:
            if k not in deviceinfo:
                self.deviceinfo[k] = ''

        if not self.deviceinfo['version']:
            self.deviceinfo['version']  = 3.1
        if ('dev_type' not in self.deviceinfo) or (not self.deviceinfo['dev_type']):
            self.deviceinfo['dev_type'] = 'default'
        #if not self.deviceinfo['gwId']:
        #    self.deviceinfo['gwId'] = ''
        #if not self.deviceinfo['key']:
        #    self.deviceinfo['key'] = ''
        self.deviceinfo['ip'] = ip

    def connect( self ):
        if self.debug:
            print('Connecting to debug ip', self.ip)
        if self.sock: self.sock.close()
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        #self.sock.settimeout(TCPTIMEOUT)
        self.sock.setblocking(False)
        self.sock.connect_ex( (str(self.ip), TCPPORT) )
        self.read = False
        self.write = True
        self.send_queue = []
        self.timeo = time.time() + self.options['connect_timeout']
        #print( 'key', self.ip, self.deviceinfo['key'])
        key = self.cur_key.key if self.cur_key else self.deviceinfo['key']
        if key == "":
            key = 'f'*16 # use bogus key if missing
        self.device = tinytuya.OutletDevice( self.deviceinfo['gwId'], self.ip, key, dev_type=self.deviceinfo['dev_type'], version=float(self.deviceinfo['version']))
        self.device.set_socketPersistent(True)
        self.device.socket = self.sock

    def close( self ):
        if self.debug:
            print('in close 0', self.ip)
        if self.sock: self.sock.close()
        self.sock = None
        self.read = self.write = False
        self.remove = True

    def stop(self):
        if self.debug:
            print('in stop 0', self.ip)
        if self.sock:
            self.close()

    def get_peer(self):
        try:
            # getpeername() blows up with "OSError: [Errno 107] Transport endpoint is
            # not connected" if the connection was refused
            addr = self.sock.getpeername()[0]
        except Exception as e:
            addr = None
            if self.debug:
                traceback.print_exception(e,e,None)
                print('Debug sock', self.ip, 'connection failed!')
                print(self.sock)
        # connection failed
        if not addr:
            # sometimes the devices accept the connection, but then immediately close it
            # so, retry if that happens
            try:
                # this should throw either ConnectionResetError or ConnectionRefusedError
                r = self.sock.recv( 5000 )
                if self.debug:
                    print('Debug sock', self.ip, 'closed but received data?? Received:', r)
            # ugh, ConnectionResetError and ConnectionRefusedError are not available on python 2.7
            #except ConnectionResetError:
            except OSError as e:
                if self.initial_connect_retries and e.errno == errno.ECONNRESET:
                    # connected, but then closed
                    self.initial_connect_retries -= 1
                    if self.debug:
                        print('Debug sock', self.ip, 'connection made but then closed, retrying')
                    return False
                elif e.errno == errno.ECONNRESET:
                    if self.debug:
                        print('Debug sock', self.ip, 'connection made but then closed and retry limit exceeded, giving up')
                else:
                    if self.debug:
                        traceback.print_exception(e,e,None)
                        print('Debug sock', self.ip, 'connection refused, not retrying')
                    return None
            except:
                if self.debug:
                    print('Debug sock', self.ip, 'unhandled connection exception!')
                    traceback.print_exc()
                self.close()
                return None
            # we should never get here
            return False
        return addr

    def v34_negotiate_sess_key_start( self ):
        if self.debug:
            print('v3.4/5 trying key', self.ip, self.device.real_local_key)
        step1 = self.device._negotiate_session_key_generate_step_1()
        self.sock.sendall( self.device._encode_message( step1 ) )
        if self.try_v35_with_v34 and self.device.version == 3.4:
            self.device.version = 3.5
            step1 = self.device._negotiate_session_key_generate_step_1()
            self.sock.sendall( self.device._encode_message( step1 ) )
            self.device.version = 3.4
        if self.debug:
            print('v3.4/5 session key neg start, debug ip', self.ip)

    def v34_negotiate_sess_key_step_2( self, rkey ):
        lastloglevel = log.level
        if self.debug:
            log.setLevel(logging.DEBUG)
        step3 = self.device._negotiate_session_key_generate_step_3( rkey )
        if not step3:
            log.setLevel(lastloglevel)
            return False
        self.sock.sendall( self.device._encode_message( step3 ) )
        self.device._negotiate_session_key_generate_finalize()
        log.setLevel(lastloglevel)
        return True

class ForceScannedDevice(DeviceDetect):
    def __init__( self, ip, deviceinfo, options, debug ):
        super(ForceScannedDevice, self).__init__( ip, deviceinfo, options, debug )
        self.retries = 0
        self.keygen = None
        self.brute_force_data = []
        self.try_v35_with_v34 = True
        self.v34_connect_ok = False

        self.connect()

    def abort( self ):
        if self.debug:
            print('in abort', self.ip)
        self.found = False
        self.close()

    def stop( self ):
        if self.debug:
            print('in stop', self.ip)
        super(ForceScannedDevice, self).stop()

        if self.step == FSCAN_v33_BRUTE_FORCE_ACQUIRE:
            self.brute_force_v3x_data()

        if not self.ver_found:
            self.deviceinfo['version'] = 0.0

        if self.options['verbose'] and self.found and not self.displayed:
            _print_device_info( self.deviceinfo, 'Failed to Force-Scan, FORCED STOP', self.options['termcolors'], self.message, self.options['verbose'] )
            self.displayed = True

    def timeout( self, forced=False ):
        if self.debug:
            print( 'in timeout', self.ip, self.step ) #self.__dict__ )
        if self.remove:
            return

        if self.step == FSCAN_NOT_STARTED:
            self.remove = True
            self.err_found = True
            if self.debug:
                print('ForceScannedDevice: Debug sock', self.ip, 'connect timed out!')
        elif self.step == FSCAN_INITIAL_CONNECT:
            if self.debug:
                print('ForceScannedDevice: Debug sock', self.ip, 'socket send failed,', 'no data received,' if forced else 'receive timed out,', 'current retry:', self.retries)
            if self.retries < 2:
                self.retries += 1
                self.connect()
            else:
                if self.debug:
                    print('ForceScannedDevice: Debug sock closed thrice:', self.ip)
                if self.deviceinfo['dev_type'] == 'default':
                    # could be a device22, try 2 more times
                    if self.debug:
                        print('ForceScannedDevice: Retrying as v3.3 Device22')
                    self.retries = 1
                    self.deviceinfo['dev_type'] = 'device22'
                    self.step = FSCAN_NOT_STARTED
                    self.connect()
                    return
                # closed thrice, probably a v3.4 device
                if self.debug:
                    print('ForceScannedDevice: Retrying as v3.4')
                self.retries = 0
                self.deviceinfo['dev_type'] = 'default'
                self.step = FSCAN_v34_BRUTE_FORCE_ACTIVE
                self.deviceinfo['version'] = 3.4
                self.ver_found = True
                self.keygen = (i for i in self.options['keylist'] if not i.used)
                self.cur_key = next( self.keygen, None )
                if self.debug:
                    print('ForceScannedDevice: Keygen gave:', self.cur_key, self.ip)
                if self.cur_key is None:
                    self.remove = True
                else:
                    self.connect()
                    self.v34_connect_ok = False
        elif self.step == FSCAN_v34_BRUTE_FORCE_ACTIVE:
            if( (not forced) and (not self.v34_connect_ok) ):
                # actual timeout, connect failed
                if self.retries < 2:
                    self.retries += 1
                    self.connect()
                else:
                    self.err_found = True
                    self.deviceinfo['version'] = 0.0
                    self.message = "%s    Polling %s Failed: Device stopped responding before key was found" % (self.options['termcolors'].alertdim, self.ip)
                    _print_device_info( self.deviceinfo, 'Failed to Force-Scan', self.options['termcolors'], self.message, self.options['verbose'])
                    self.displayed = True
                    self.close()
                return
            # brute-forcing the key
            self.v3x_brute_force_try_next_key()
            self.v34_connect_ok = False
        elif self.step == FSCAN_v31_BRUTE_FORCE_ACTIVE:
            # brute-forcing the key
            self.v3x_brute_force_try_next_key()
        elif forced:
            self.err_found = True
            self.message = "%s    Polling %s Failed: Unexpected close during read/write operation" % (self.options['termcolors'].alertdim, self.ip)
            _print_device_info( self.deviceinfo, 'Failed to Force-Scan', self.options['termcolors'], self.message, self.options['verbose']) 
            self.displayed = True
            self.remove = True
        elif self.step == FSCAN_v31_PASSIVE_LISTEN or self.step == FSCAN_v33_BRUTE_FORCE_ACQUIRE:
            if not self.brute_force_v3x_data():
                # passively wait for async status updates
                self.timeo = time.time() + 5.0
                self.passive = True
        elif self.step == FSCAN_FINAL_POLL:
            if not self.message:
                self.message = "%s    Polling %s Failed: No response to poll request" % (self.options['termcolors'].alertdim, self.ip)
            _print_device_info( self.deviceinfo, 'Force-Scanned', self.options['termcolors'], self.message, self.options['verbose'])
            self.displayed = True
            self.remove = True
        else:
            if self.debug:
                print('ForceScannedDevice: Debug sock', self.ip, 'timeout on unhandled step', self.step)
            self.remove = True
            _print_device_info( self.deviceinfo, 'Failed to Force-Scan', self.options['termcolors'], self.message, self.options['verbose'])
            self.displayed = True

        if self.remove:
            self.close()

    def write_data( self ):
        # get_peer() returns:
        #  'None' on connection refused
        #  'False' when connection was made but then closed
        #  The IP address when the connection is still open
        addr = self.get_peer()
        if self.debug:
            print('ForceScannedDevice: device', self.ip, 'addr is:', addr)
        if addr is None:
            # refused
            self.close()
            return
        elif addr is False:
            # sometimes the devices immediately close the connection, so retry
            if self.debug:
                print('ForceScannedDevice: Retrying connect', self.ip)
            if self.sock:
                self.sock.close()
            self.connect()
            return

        # connection succeeded!
        #self.timeo = time.time() + self.options['data_timeout']
        self.timeo = time.time() + 1.5
        self.found = True
        self.v34_connect_ok = True

        if len(self.send_queue) > 0:
            self.sock.sendall( self.device._encode_message( self.send_queue[0] ) )
            self.send_queue = self.send_queue[1:]
            if len(self.send_queue) == 0:
                self.write = False
                self.read = True
            return

        self.write = False
        self.read = True
        log.debug("Force-Scan Found Device %s", self.ip)
        #if self.options['verbose'] and self.step == 0:
        if self.debug and self.step == 0:
            print(" ForceScannedDevice: Force-Scan Found Device %s" % (self.ip,))

        msg = None
        if self.step == FSCAN_NOT_STARTED:
            self.scanned = True
            self.step = FSCAN_INITIAL_CONNECT
            # try to figure out what version device it is by sending an unencrypted status request
            # v3.1 devices will return the status
            # v3.2 devices will ???
            # v3.3 devices will return an encrypted rejection message
            # v3.4/3.5 devices will slam the door in our face by dropping the connection
            if self.deviceinfo['dev_type'] == 'device22':
                msg = tinytuya.MessagePayload(tinytuya.CONTROL_NEW, b'')
            else:
                msg = tinytuya.MessagePayload(tinytuya.DP_QUERY, b'')
        elif self.step == FSCAN_INITIAL_CONNECT:
            # this is a connect retry
            dummy_payload = bytes(bytearray.fromhex('deadbeef112233445566778899aabbccddeeffb00bface112233feedbabe74f0'))
            if self.deviceinfo['dev_type'] == 'device22':
                msg = tinytuya.MessagePayload(tinytuya.CONTROL_NEW, dummy_payload)
            else:
                msg = tinytuya.MessagePayload(tinytuya.DP_QUERY, dummy_payload)
        elif self.step == FSCAN_v31_BRUTE_FORCE_ACTIVE:
            dummy_payload = bytes(bytearray.fromhex('deadbeef112233445566778899aabbccddeeffb00bface112233feedbabe74f0'))
            msg = tinytuya.MessagePayload(tinytuya.CONTROL, dummy_payload)
        #elif self.step == FSCAN_v33_BRUTE_FORCE_ACTIVE:
        #    pass
        elif self.step == FSCAN_v34_BRUTE_FORCE_ACTIVE:
            # try to brute-force the key
            self.v34_negotiate_sess_key_start()
        else:
            print('ForceScannedDevice: Unhandled step in write()?!?!', self.ip, 'step', self.step)

        if msg:
            if self.debug:
                print(" ForceScannedDevice: Sending Device %s Message %r" % (self.ip,msg))
            msg = self.device._encode_message( msg )
            try:
                self.sock.sendall( msg )
            except:
                self.send_queue.append( msg )
                self.write = True
                self.read = False

    def read_data( self ):
        try:
            data = self.sock.recv( 5000 )
        except:
            data = b''

        if self.debug:
            print('ForceScannedDevice:', self.ip, 'got step', self.step, 'data:', data )

        if len(data) == 0:
            self.timeout( True )
            return

        while len(data):
            try:
                if self.deviceinfo['version'] == 3.5:
                    prefix_offset = data.find(tinytuya.PREFIX_6699_BIN)
                    if prefix_offset > 0:
                        data = data[prefix_offset:]
                else:
                    prefix_offset = data.find(tinytuya.PREFIX_BIN)
                    if prefix_offset >= 0:
                        data = data[prefix_offset:]
                        self.try_v35_with_v34 = False
                    elif self.try_v35_with_v34 and self.deviceinfo['version'] == 3.4:
                        prefix_offset = data.find(tinytuya.PREFIX_6699_BIN)
                        if prefix_offset >= 0:
                            if self.debug:
                                print('ForceScannedDevice: device is v3.5!')
                            data = data[prefix_offset:]
                            self.try_v35_with_v34 = False
                            self.deviceinfo['version'] = 3.5
                            self.device.set_version(3.5)
                            self.ver_found = True
                hmac_key = self.device.local_key if self.deviceinfo['version'] >= 3.4 else None
                msg = tinytuya.unpack_message(data, hmac_key=hmac_key)
            except:
                break

            odata = data
            #data = data[tinytuya.message_length(msg.payload):]
            # this will not strip everything, but it will be enough for data.find() to find it
            data = data[len(msg.payload)+8:]

            # ignore NULL packets
            if not msg or len(msg.payload) == 0:
                continue

            if msg.cmd == tinytuya.SESS_KEY_NEG_RESP:
                if not self.v34_negotiate_sess_key_step_2( msg ):
                    #if self.debug:
                    print('odata:', odata)
                    self.timeout()
                    return
                self.read = False
                self.write = True
                self.step = FSCAN_FINAL_POLL
                self.message = "%s    Polling %s Failed: No response to poll request" % (self.options['termcolors'].alertdim, self.ip)
                self.ver_found = True
                self.deviceinfo['key'] = self.cur_key.key
                self.found_key()
                self.cur_key.used = True
                self.send_queue.append(self.device.generate_payload(tinytuya.DP_QUERY))
                return

            if msg.payload.startswith(tinytuya.PROTOCOL_VERSION_BYTES_31):
                self.deviceinfo['version'] = 3.1
                payload = msg.payload[len(tinytuya.PROTOCOL_VERSION_BYTES_31)+16 :]
                self.ver_found = True
            elif msg.payload.startswith(tinytuya.PROTOCOL_VERSION_BYTES_33):
                self.deviceinfo['version'] = 3.3
                payload = msg.payload[len(tinytuya.PROTOCOL_33_HEADER) :]
                self.ver_found = True
            else:
                payload = msg.payload

            if self.debug:
                print( 'Got message from %s for step %s: %r' % (self.ip, self.step, msg) )

            if self.step == FSCAN_INITIAL_CONNECT:
                # FIXME try and use the response?
            #    self.step = FSCAN_v3x_PROVOKE_RESPONSE
            #    self.timeo = time.time() + 1.0
            #    self.sock.sendall( self.device._encode_message( tinytuya.MessagePayload(tinytuya.DP_QUERY, b'') ) )
            #elif self.step == FSCAN_v3x_PROVOKE_RESPONSE:
                self.timeo = time.time() + 5.0
                have_err_string = False
                try:
                    if 'error' in payload.decode('utf8'):
                        # clear-text response, device is v3.1
                        self.ver_found = True
                        self.device.set_version(3.1)
                        self.deviceinfo['version'] = 3.1
                        # there is no good way of brute-forcing this one, so listen passively in hopes of receiving a message containing the gwId
                        self.step = FSCAN_v31_BRUTE_FORCE_ACTIVE #FSCAN_v31_PASSIVE_LISTEN
                        #self.passive = True
                        have_err_string = True
                        if self.debug:
                            print( 'Trying brute force!' )

                        self.keygen = (i for i in self.options['keylist'] if not i.used)
                        self.v3x_brute_force_try_next_key()
                        #self.sock.sendall( self.device._encode_message( self.device.generate_payload(tinytuya.DP_QUERY) ) )
                        #self.step = FSCAN_FINAL_POLL
                except:
                    pass

                if not have_err_string:
                    # encrypted response, probably v3.3
                    if self.debug:
                        print( 'Device %s is probably v3.3' % self.ip )
                    self.device.set_version(3.3)
                    self.deviceinfo['version'] = 3.3
                    self.ver_found = True
                    self.step = FSCAN_v33_BRUTE_FORCE_ACQUIRE
                    self.brute_force_data.append( payload )
            elif self.step == FSCAN_v33_BRUTE_FORCE_ACQUIRE:
                # no timout resetting for this one, let self.timeout() process the data
                self.brute_force_data.append( payload )
            elif self.step ==  FSCAN_v31_BRUTE_FORCE_ACTIVE:
                if 'error' in payload.decode('utf8'):
                    self.brute_force_found_key()
            elif self.step == FSCAN_v31_PASSIVE_LISTEN:
                if msg.cmd == tinytuya.STATUS and msg.retcode == 0:
                    try:
                        self.brute_force_data.append( base64.b64decode( payload ) )
                        self.brute_force_v3x_data()
                    except:
                        pass

            elif self.step == FSCAN_FINAL_POLL:
                result = self.device._decode_payload( msg.payload )
                if self.debug:
                    print('ForceScannedDevice: Final Poll', self.ip, self.step, payload)
                    print(result)

                finished = False
                if not result:
                    #self.message = "%s    Error: %s" % (self.options['termcolors'].alertdim, result)
                    pass
                elif 'dps' in result:
                    if len(result['dps']) > 2:
                        finished = True
                    self.message = "%s    Status: %s" % (self.options['termcolors'].dim, result["dps"])
                    #self.last_result = result
                elif 'Error' in result:
                    self.message = "%s    Error: %s" % (self.options['termcolors'].alertdim, result)
                else:
                    self.message = "%s    Unknown: %s" % (self.options['termcolors'].dim, result)

                if self.options['verbose'] and finished:
                    _print_device_info( self.deviceinfo, 'Force-Scanned', self.options['termcolors'], self.message )
                    self.displayed = True

                if finished:
                    self.close()
                else:
                    self.timeo = time.time() + 2.0
                return

    def brute_force_v3x_data( self ):
        if len( self.brute_force_data ) == 0:
            return False

        for key in (i for i in self.options['keylist'] if not i.used):
            self.cur_key = key
            bad = False
            cipher = tinytuya.AESCipher( key.key_encoded )
            matched = None
            for msg in self.brute_force_data:
                matched = None
                try:
                    text = cipher.decrypt( msg, False, True )

                    if len(text) == 0:
                        continue

                    if self.debug: #self.options['verbose']:
                        print('ForceScannedDevice: Brute force', self.ip, 'decrypted:', text)
                    matched = cipher.key
                except:
                    pass

                if not matched:
                    bad = True
                    break

            if matched and not bad:
                self.brute_force_found_key()
                return True

        self.brute_force_data = []
        return False

    def v3x_brute_force_try_next_key( self ):
        self.cur_key = next( self.keygen, None )

        if not self.passive:
            while self.cur_key and self.cur_key.used:
                self.cur_key = next( self.keygen, None )
        #if self.debug and self.cur_key:
        #    print( 'ForceScannedDevice: v3.x', self.step, 'brute force got key', self.cur_key.key )
        if self.cur_key is None:
            # Keep trying.  Go through the list again but include "already-used" keys as well
            if not self.passive:
                self.keygen = (i for i in self.options['keylist'])
                try:
                    self.cur_key = next( self.keygen, None )
                except:
                    self.cur_key = None
            self.passive = True
            if self.cur_key is None:
                if self.debug:
                    print('ForceScannedDevice: v3.x brute force ran out of keys without finding a match!', self.ip)
                self.remove = True
                self.deviceinfo['version'] = 0.0
                self.message = "%s    Polling %s Failed: No matching key found" % (self.options['termcolors'].alertdim, self.ip)
                _print_device_info( self.deviceinfo, 'Failed to Force-Scan', self.options['termcolors'], self.message, self.options['verbose'] )
                self.displayed = True
            else:
                if self.debug:
                    print('ForceScannedDevice: v3.x brute force ran out of keys, restarting without skipping any', self.ip, self.cur_key.key)
                self.connect()
        else:
            if self.debug:
                print('ForceScannedDevice: v3.x brute force trying next key', self.ip, self.cur_key.key)
            self.connect()

    def brute_force_found_key( self ):
        if self.debug:
            print('ForceScannedDevice: v3.x brute forced key', self.cur_key.key, 'for', self.ip)
        self.brute_force_data = []
        self.read = True
        self.write = False
        self.ver_found = True
        self.deviceinfo['key'] = self.cur_key.key
        self.found_key()
        self.device.local_key = self.device.real_local_key = self.cur_key.key_encoded
        self.sock.sendall( self.device._encode_message( self.device.generate_payload(tinytuya.DP_QUERY) ) )
        self.step = FSCAN_FINAL_POLL
        self.message = "%s    Polling %s Failed: No response to poll request" % (self.options['termcolors'].alertdim, self.ip)
        self.timeo = time.time() + 2.0
        self.cur_key.used = True

    def found_key( self ):
        for dev in self.options['tuyadevices']:
            if dev['key'] == self.deviceinfo['key']:
                self.deviceinfo['name'] = dev['name']
                self.deviceinfo['id'] = self.deviceinfo['gwId'] = dev['id']
                if 'mac' in dev and dev['mac'] and ('mac' not in self.deviceinfo or not self.deviceinfo['mac']):
                    self.deviceinfo['mac'] = dev['mac']
                self.device.id = dev['id']
                self.key_found = True
                return


class PollDevice(DeviceDetect):
    def __init__( self, ip, deviceinfo, options, debug ):
        super(PollDevice, self).__init__( ip, deviceinfo, options, debug )
        self.broadcasted = True
        self.retries = options['retries']
        self.finished = False

    def close(self):
        super(PollDevice, self).close()
        if self.options['verbose']:
            _print_device_info( self.deviceinfo, 'Valid Broadcast', self.options['termcolors'], self.message )
            self.displayed = True

    def	timeout( self ):
        if self.retries > 0:
            if self.debug:
                print('PollDevice: Timeout for debug ip', self.ip, '- reconnecting, retries', self.retries)
            self.retries -= 1
            # get_peer() may have closed it already
            if self.sock:
                self.sock.close()
            self.connect()
            self.timeo = time.time() + tinytuya.TIMEOUT
            if self.debug:
                print('PollDevice: New timeo:', self.timeo)
        else:
            if self.debug:
                print('PollDevice: Final timeout for debug ip', self.ip, '- aborting')
            err = ""
            if "err" in self.deviceinfo:
                err = self.deviceinfo["err"]
            self.message = "%s    Polling %s Failed: %s" % (self.options['termcolors'].alertdim, self.ip, err)
            self.close()

    def write_data( self ):
        addr = self.get_peer()
        if not addr:
            if ("err" not in self.deviceinfo) or (not self.deviceinfo["err"]):
                self.deviceinfo["err"] = "Connect Failed"
            if self.debug:
                print('PollDevice: Debug sock', self.ip, 'failed!', addr, self.sock)
                print(traceback.format_exc())
            self.timeout()
            return

        # connection succeeded!
        self.timeo = time.time() + self.options['data_timeout']
        if self.debug:
            print('PollDevice: WD New timeo:', self.timeo)

        if len(self.send_queue) > 0:
            self.sock.sendall( self.device._encode_message( self.send_queue[0] ) )
            self.send_queue = self.send_queue[1:]
            if len(self.send_queue) == 0:
                self.write = False
                self.read = True
            return

        self.write = False

        try:
            # connected, send the query
            if self.device.version >= 3.4 :
                # self.device.real_local_key, self.device.local_key
                self.v34_negotiate_sess_key_start()
            else:
                self.sock.sendall( self.device._encode_message( self.device.generate_payload(tinytuya.DP_QUERY) ) )

            self.read = True
            #deviceslist[ip]["err"] = "Check DEVICE KEY - Invalid response"
            self.deviceinfo["err"] = "No response"
        except:
            self.deviceinfo["err"] = "Send Poll failed"
            print(traceback.format_exc())
            self.timeout()


    def read_data( self ):
        try:
            data = self.sock.recv( 5000 )
        except:
            if self.retries > 0:
                if self.options['verbose']:
                    print('read_data() failed, retrying', self.ip)
                self.timeout()
                return

            self.message = "%s    Polling %s Failed: Read error" % (self.options['termcolors'].alertdim, self.ip)
            self.close()
            return

        while len(data):
            try:
                prefix_offset = data.find(tinytuya.PREFIX_BIN)
                if prefix_offset > 0:
                    data = data[prefix_offset:]
                hmac_key = self.device.local_key if self.device.version >= 3.4 else None
                msg = tinytuya.unpack_message(data, hmac_key=hmac_key)
            except:
                break

            # this will not strip everything, but it will be enough for data.find() to find it
            odata = data
            data = data[len(msg.payload)+8:]

            # ignore NULL packets
            if not msg or len(msg.payload) == 0:
                continue

            if msg.cmd == tinytuya.SESS_KEY_NEG_RESP:
                if not self.v34_negotiate_sess_key_step_2( msg ):
                    print('odata:', odata)
                    self.timeout()
                    return
                self.read = False
                self.write = True
                self.send_queue.append(self.device.generate_payload(tinytuya.DP_QUERY))
                return

            dev_type = self.device.dev_type
            try:
                # Data available: seqno cmd retcode payload crc
                log.debug("PollDevice: raw unpacked message = %r", msg)
                result = self.device._decode_payload(msg.payload)
            except:
                log.debug("PollDevice: error unpacking or decoding tuya JSON payload")
                result = tinytuya.error_json(tinytuya.ERR_PAYLOAD)

            # Did we detect a device22 device? Return ERR_DEVTYPE error.
            if dev_type != self.device.dev_type:
                log.debug(
                    "PollDevice: Device22 detected and updated (%s -> %s) - Update payload and try again",
                    dev_type,
                    self.device.dev_type,
                )
                self.sock.sendall( self.device._encode_message( self.device.generate_payload(tinytuya.DP_QUERY) ) )
                break

            self.finished = True
            self.deviceinfo['type'] = self.device.dev_type

            if not result or "dps" not in result:
                if result and "Error" in result:
                    self.message = "%s    Access rejected by %s (check key): %s: %s" % (self.options['termcolors'].alertdim, self.ip, result["Error"], result["Payload"])
                else:
                    self.message = "%s    Check DEVICE KEY - Invalid response from %s: %r" % (self.options['termcolors'].alertdim, self.ip, result)
                self.deviceinfo["err"] = "Unable to poll"
                self.close()
            else:
                self.deviceinfo["dps"] = result
                self.deviceinfo["err"] = ""
                self.message = self.options['termcolors'].dim + "    Status: %s" % result["dps"]
                self.close()



# Scan function shortcut
def scan(scantime=None, color=True, forcescan=False, discover=True, assume_yes=False):
    """Scans your network for Tuya devices with output to stdout"""
    devices(verbose=True, scantime=scantime, color=color, poll=True, forcescan=forcescan, discover=discover, assume_yes=assume_yes)

def _generate_ip(networks, verbose, term):
    for netblock in networks:
        if tinytuya.IS_PY2 and type(netblock) == str:
            netblock = netblock.decode('latin1')
        try:
            network = ipaddress.ip_network(netblock, strict=False)
            log.debug("Starting brute force network scan %s", network)
        except:
            log.debug("Unable to get network for %r, ignoring", netblock)
            if verbose:
                print(term.alert +
                    'ERROR: Unable to get network for %r, ignoring.' % netblock + term.normal)
                print(traceback.format_exc())
            continue

        if verbose:
            print(term.bold + '  Starting Scan for network %s%s' % (network, term.dim))
        # Loop through each host
        for addr in ipaddress.IPv4Network(network):
            yield str(addr)

def _print_device_info( result, note, term, extra_message=None, verbose=True ):
    if not verbose:
        return
    ip = result["ip"]
    gwId = result["gwId"]
    productKey = result["productKey"] if result["productKey"] else '?'
    version = result["version"] if result["version"] and result["version"] != '0.0' else '??'
    devicename = result["name"]
    dkey = result["key"]
    mac = result["mac"]
    devicetype = result['dev_type'] if 'dev_type' in result else '??'

    suffix = term.dim + ", MAC = " + mac + ""
    if not result['name']:
        devicename = "%sUnknown v%s Device%s" % (term.alert, version, term.normal+term.dim) # (term.normal+term.dim, term.normal, version, term.dim)
    else:
        devicename = term.normal + result['name'] + term.dim
    print(
        "%s   Product ID = %s  [%s]:\n    %sAddress = %s   %sDevice ID = %s (len:%d)  %sLocal Key = %s  %sVersion = %s  %sType = %s%s"
        % (
            devicename,
            productKey,
            note,
            term.subbold,
            ip,
            term.cyan,
            gwId,
            len(gwId),
            term.red,
            dkey,
            term.yellow,
            version,
            term.cyan,
            devicetype,
            suffix
        )
    )

    if extra_message:
        print( extra_message )


# Scan function
def devices(verbose=False, scantime=None, color=True, poll=True, forcescan=False, byID=False, show_timer=None, 
            discover=True, wantips=None, wantids=None, snapshot=None, assume_yes=False, tuyadevices=[], 
            maxdevices=0): # pylint: disable=W0621, W0102
    """Scans your network for Tuya devices and returns dictionary of devices discovered
        devices = tinytuya.deviceScan(verbose)

    Parameters:
        verbose = True or False, print formatted output to stdout [Default: False]
        scantime = The time to wait to pick up UDP from all devices (ignored when discover=False))
        color = True or False, print output in color [Default: True]
        poll = True or False, poll dps status for devices if possible
        forcescan = True, False, or a list of networks to force scan for device IP addresses
        byID = True or False, return dictionary by ID, otherwise by IP (default)
        show_timer = True or False, if True then timer will be displayed even when verbose=False
        discover = True or False, when False, UDP broadcast packets will be ignored
        wantips = A list of IP addresses we want.  Scan will stop early if all are found
        wantids = A list of Device IDs we want.  Scan will stop early if all are found
        snapshot = A dict of devices with IP addresses as keys.  These devices will be force-scanned
        assume_yes = True or False, do not prompt to confirm auto-detected network ranges
        tuyadevices = contents of devices.json, to prevent re-loading it if we already have it
        maxdevices = Stop scanning after this many devices are found.  0 for no limit

    Response:
        devices = Dictionary of all devices found

    To unpack data, you can do something like this:

        devices = tinytuya.deviceScan()
        for ip in devices:
            id = devices[ip]['gwId']
            key = devices[ip]['productKey']
            vers = devices[ip]['version']
            dps = devices[ip]['dps']

    """
    # Terminal formatting
    termcolors = tinytuya.termcolor(color)
    #(bold, subbold, normal, dim, alert, alertdim, cyan, red, yellow) = termcolors
    term = TermColors( *termcolors )

    # Lookup Tuya device info by (id) returning (name, key)
    def tuyaLookup(deviceid):
        for i in tuyadevices:
            if "id" in i and i["id"] == deviceid:
                return (i["name"], i["key"], i["mac"] if "mac" in i else "")
        return ("", "", "")

    havekeys = False
    if not tuyadevices:
        # Check to see if we have additional Device info
        try:
            # Load defaults
            with open(DEVICEFILE) as f:
                tuyadevices = json.load(f)
                havekeys = True
                log.debug("loaded=%s [%d devices]", DEVICEFILE, len(tuyadevices))
        except:
            # No Device info
            pass

    if forcescan and len(tuyadevices) == 0:
        if discover:
            print(term.alert + 'Warning: Force-scan requires keys in %s but no keys were found.  Disabling force-scan.' % DEVICEFILE + term.normal)
            forcescan = False
        else:
            raise RuntimeError('Force-scan requires keys in %s but no keys were found.' % DEVICEFILE)

    if discover:
        # Enable UDP listening broadcasting mode on UDP port 6666 - 3.1 Devices
        client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        client.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        try:
            client.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        except AttributeError:
            # SO_REUSEPORT not available
            pass
        client.bind(("", UDPPORT))
        #client.settimeout(TIMEOUT)

        # Enable UDP listening broadcasting mode on encrypted UDP port 6667 - 3.3 Devices
        clients = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        clients.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        try:
            clients.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        except AttributeError:
            # SO_REUSEPORT not available
            pass
        clients.bind(("", UDPPORTS))
        #clients.settimeout(TIMEOUT)

        # Enable UDP listening broadcasting mode on encrypted UDP port 7000 - App
        clientapp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        clientapp.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        try:
            clientapp.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        except AttributeError:
            # SO_REUSEPORT not available
            pass
        clientapp.bind(("", UDPPORTAPP))
    else:
        client = clients = clientapp = None
        # no broadcast and no force scan???
        #if not forcescan:
        scantime = 0.1

    if scantime is None:
        scantime = tinytuya.SCANTIME

    if show_timer is None:
        show_timer = verbose

    if verbose:
        print(
            "\n%sTinyTuya %s(Tuya device scanner)%s [%s]\n"
            % (term.bold, term.normal, term.dim, tinytuya.__version__)
        )
        if havekeys:
            print("%s[Loaded devices.json - %d devices]\n" % (term.dim, len(tuyadevices)))
        if discover:
            print(
                "%sScanning on UDP ports %s and %s and %s for devices for %d seconds...%s\n"
                % (term.subbold, UDPPORT, UDPPORTS, UDPPORTAPP, scantime, term.normal)
            )

    #debug_ips = ['172.20.10.144', '172.20.10.91', '172.20.10.51', '172.20.10.136']
    debug_ips = []
    networks = []
    scanned_devices = {}
    broadcasted_devices = {}
    broadcast_messages = {}
    broadcasted_apps = {}
    devicelist = []
    read_socks = []
    write_socks = []
    spinnerx = 0
    spinner = "|/-\\|"
    connect_this_round = []
    connect_next_round = []
    ip_wantips = bool(wantips)
    ip_wantids = bool(wantids)
    ip_force_wants_end = False
    ip_scan = False
    ip_scan_running = False
    ip_scan_delay = False
    scan_end_time = time.time() + scantime
    device_end_time = 0
    log.debug("Listening for Tuya devices on UDP ports %d, %d and %d", UDPPORT, UDPPORTS, UDPPORTAPP)
    start_time = time.time()
    timeout_time = time.time() + 5
    scan_ips = None
    current_ip = None
    need_sleep = 0.1
    user_break_count = 0
    client_ip_broadcast_list = {}
    client_ip_broadcast_timer = 0
    options = {
        'connect_timeout': connect_timeout,
        'data_timeout': connect_timeout,
        'termcolors': term,
        'verbose': verbose,
        'retries': 2,
        'tuyadevices': tuyadevices,
        'keylist': [],
    }

    for i in tuyadevices:
        options['keylist'].append( KeyObj( i['id'], i['key'] ) )

    wantips = [] if not wantips else list(wantips) #['192.168.1.3']
    wantids = [] if not wantids else list(wantids) #['abcdef']

    if forcescan:
        if verbose:
            print(term.subbold + "    Option: " + term.dim + "Network force scanning requested.\n")

        # argparse gives us a list of lists
        # the inner list is empty [[]] when no address specified
        add_connected = True
        if isinstance( forcescan, list ) or isinstance( forcescan, tuple ):
            for ip in forcescan:
                if isinstance( ip, list ) or isinstance( ip, tuple ):
                    for ip2 in ip:
                        networks.append( ip2 )
                        add_connected = False
                else:
                    networks.append( ip )
                    add_connected = False

        if isinstance( forcescan, str ) or isinstance( forcescan, bytes ):
            networks.append( forcescan )
            add_connected = False

        if add_connected:
            if (not NETIFLIBS) and (not PSULIBS):
                print(term.alert +
                      '    NOTE: neither module netifaces nor module psutil are available, multi-interface machines will be limited.\n'
                      '           (Requires: `pip install netifaces` or `pip install psutil`)\n' + term.dim)
                try:
                    ip = getmyIP()
                    networks.append( ip )
                except:
                    #traceback.print_exc()
                    networks.append( u''+DEFAULT_NETWORK )
                    log.debug("Unable to get local network, using default %r", DEFAULT_NETWORK)
                    if verbose:
                        print(term.alert +
                              'ERROR: Unable to get your IP address and network automatically, using %s' % DEFAULT_NETWORK +
                              term.normal)
            else:
                networks = getmyIPs( term, verbose, not assume_yes )
                if not networks:
                    print(term.alert + 'No networks to force-scan, exiting.' + term.normal)
                    return None

    if snapshot:
        for ip in snapshot:
            networks.append( ip )
    else:
        snapshot = []

    if networks:
        if verbose:
            log.debug("Force-scanning networks: %r", networks)

        scan_ips = _generate_ip( networks, verbose, term )
        ip_scan = ip_scan_running = True
        if discover:
            ip_scan_delay = time.time() + 5

        # Warn user of scan duration
        if verbose:
            print(term.bold + '\n    Running Scan...' + term.dim)

    # If no scantime value set use default
    if not scantime:
        scantime = 0 if ip_scan_running else tinytuya.SCANTIME

    client_bcast_addrs = get_ip_to_broadcast()
    for bcast in client_bcast_addrs:
        addr = client_bcast_addrs[bcast]
        client_ip_broadcast_list[addr] = { 'broadcast': bcast }

    while ip_scan_running or scan_end_time > time.time() or device_end_time > time.time() or connect_next_round:
        if client:
            read_socks = [client, clients, clientapp]
        else:
            read_socks = []

        write_socks = []
        all_socks = {}
        remove = []
        connect_this_round = connect_next_round
        connect_next_round = []
        device_end_time = 0
        devices_with_timers = ''
        if timeout_time >= scan_end_time:
            do_timeout = True
        else:
            do_timeout = timeout_time <= time.time()
            if do_timeout: timeout_time = time.time() + 1.0 #connect_timeout

        for dev in devicelist:
            if dev.scanned and dev.ip not in scanned_devices:
                scanned_devices[dev.ip] = dev
            if do_timeout and dev.hard_time_limit < time.time():
                dev.stop()
            if dev.remove:
                remove.append(dev)
                #if dev.scanned:
                #    scanned_devices[dev.ip] = dev
                continue
            else:
                if do_timeout and dev.timeo <= time.time():
                    dev.timeout()

                if (not dev.passive) and ((dev.timeo + 1.0) > device_end_time):
                    # if dev.debug:
                    #     print('Resetting device scan end time due to debug ip', dev.ip, device_end_time, dev.timeo)
                    #     if len(devices_with_timers) < 64:
                    #         devices_with_timers += ' ' + str(dev.ip) + ' ' + str(int(dev.timeo))
                    device_end_time = dev.timeo + 1.0

            if not dev.sock:
                continue

            if dev.read:
                read_socks.append(dev.sock)

            if dev.write:
                write_socks.append(dev.sock)

            all_socks[dev.sock] = dev

        for dev in remove:
            devicelist.remove(dev)

        if show_timer:
            if scan_end_time > device_end_time:
                end_time = int(scan_end_time - time.time())
                if end_time < 0: end_time = 0
            else:
                end_time = 'Devs:'+str(len(devicelist))
            tim = 'FS:'+str(current_ip) if ip_scan_running else str(end_time)
            print("%sScanning... %s (%s) %s                                \r" % (term.dim, spinner[spinnerx], tim, devices_with_timers), end="")
            spinnerx = (spinnerx + 1) % 4
            sys.stdout.flush()

        try:
            if ip_scan_running:
                # half-speed the spinner while force-scanning
                need_sleep = 0.2
                # time out any sockets which have not yet connected
                # no need to run this every single time through the loop
                if ip_scan_delay:
                    if ip_scan_delay < time.time():
                        ip_scan_delay = False
                if (not ip_scan_delay) and len(write_socks) < max_parallel:
                    ip_scan_delay = False
                    want = max_parallel - len(write_socks)
                    # only open 10 at most during each pass through select()
                    if want > 10: want = 10
                    for i in range(want):
                        current_ip = next( scan_ips, None )
                        # all done!
                        if current_ip is None:
                            ip_scan_running = False
                            device_end_time = time.time() + connect_timeout + 1.0
                            need_sleep = 0.1
                            break
                        else:
                            if current_ip in broadcasted_devices:
                                continue
                            elif current_ip in snapshot and snapshot[current_ip]['version'] and snapshot[current_ip]['gwId']:
                                ip = current_ip
                                broadcasted_devices[ip] = PollDevice( ip, snapshot[current_ip], options, ip in debug_ips )
                                broadcasted_devices[ip].connect()
                                devicelist.append( broadcasted_devices[ip] )
                                check_end_time = time.time() + connect_timeout
                                if check_end_time > device_end_time: device_end_time = check_end_time
                            else:
                                if current_ip in snapshot:
                                    dev = ForceScannedDevice( current_ip, snapshot[current_ip], options, current_ip in debug_ips )
                                else:
                                    dev = ForceScannedDevice( current_ip, None, options, current_ip in debug_ips )
                                devicelist.append(dev)
                                write_socks.append(dev.sock)
                                all_socks[dev.sock] = dev

                            # we slept here so adjust the loop sleep time accordingly
                            time.sleep(0.02)
                            need_sleep -= 0.02

            if need_sleep > 0:
                time.sleep( need_sleep )

            if len(write_socks) > 0:
                rd, wr, _ = select.select( read_socks, write_socks, [], 0 )
            elif len(read_socks) > 0:
                rd, _, _ = select.select( read_socks, [], [], 0 )
                wr = []
            else:
                # not listening for broadcasts and no open sockets yet
                rd = []
                wr = []
        except KeyboardInterrupt as err:
            log.debug('Keyboard Interrupt')
            if verbose: print("\n**User Break**")
            user_break_count += 1

            if user_break_count == 1:
                ip_scan_running = False
                scan_end_time = 0
            elif user_break_count == 2:
                break
            else:
                log.debug('Keyboard Interrupt - Exiting')
                if verbose: print("\n**User Break** - Exiting")
                sys.exit()

        # these sockets are now writable (just connected) or failed
        for sock in wr:
            if sock in all_socks:
                all_socks[sock].write_data()

        # these sockets are now have data waiting to be read
        for sock in rd:
            # this sock is not a UDP listener
            if sock is not client and sock is not clients and sock is not clientapp:
                # may not exist if user-interrupted
                if sock in all_socks:
                    all_socks[sock].read_data()
                continue

            # if we are here then it is from a UDP listener
            if sock is client:
                tgt_port = UDPPORT
            elif sock is clients:
                tgt_port = UDPPORTS
            elif sock is clientapp:
                tgt_port = UDPPORTAPP
            else:
                tgt_port = '???'

            data, addr = sock.recvfrom(4048)
            ip = addr[0]
            result = b''
            try:
                result = tinytuya.decrypt_udp( data )
                result = json.loads(result)
                log.debug("Received valid UDP packet: %r", result)
            except:
                #traceback.print_exc()
                if verbose:
                    print(term.alertdim + "*  Unexpected payload from %r to port %r:%s %r (%r)\n" % (ip, tgt_port, term.normal, result, data))
                log.debug("Invalid UDP Packet from %r port %r - %r", ip, tgt_port, data)
                continue

            if ip_force_wants_end:
                continue

            if 'from' in result and result['from'] == 'app': #sock is clientapp:
                if ip not in broadcasted_apps:
                    broadcasted_apps[ip] = result
                    if verbose:
                        print( term.alertdim + 'New Broadcast from App at ' + str(ip) + term.dim + ' - ' + str(result) + term.normal )
                continue

            if 'gwId' not in result:
                if verbose:
                    print(term.alertdim + "*  Payload missing required 'gwId' - from %r to port %r:%s %r (%r)\n" % (ip, tgt_port, term.normal, result, data))
                log.debug("UDP Packet payload missing required 'gwId' - from %r port %r - %r", ip, tgt_port, data)
                continue

            # check to see if we have seen this device before and add to devices array
            #if tinytuya.appenddevice(result, deviceslist) is False:
            if ip not in broadcasted_devices:
                (dname, dkey, mac) = tuyaLookup(result['gwId'])
                result["name"] = dname
                result["key"] = dkey
                result["mac"] = mac

                if 'id' not in result:
                    result['id'] = result['gwId']

                if verbose:
                    broadcast_messages[ip] = term.alertdim + term.dim + 'New Broadcast from ' + str(ip) + ' / ' + str(mac) + ' ' + str(result) + term.normal
                    # if False:
                    #     print( data )
                    #     print( result )
                    #     print( broadcast_messages[ip] )

                #if not mac and SCANLIBS:
                #    a = time.time()
                #    mac = get_mac_address(ip=ip, network_request=False)
                #    b = time.time()
                #    if verbose:
                #        print('Discovered MAC', mac, 'in', (b-a))
                #    if mac and mac != '00:00:00:00:00:00':
                #        result["mac"] = mac

                # 20-digit-long IDs are product_idx + MAC
                if not mac and len(result['gwId']) == 20:
                    try:
                        mac = bytearray.fromhex( result['gwId'][-12:] )
                        result["mac"] = '%02x:%02x:%02x:%02x:%02x:%02x' % tuple(mac)
                    except:
                        pass

                broadcasted_devices[ip] = PollDevice( ip, result, options, ip in debug_ips )
                do_poll = False

                if poll:
                    # v3.1 does not require a key for polling, but v3.2+ do
                    if result['version'] != "3.1" and not dkey:
                        broadcasted_devices[ip].message = "%s    No Stats for %s: DEVICE KEY required to poll for status%s" % (term.alertdim, ip, term.dim)
                    elif user_break_count:
                        broadcasted_devices[ip].message = "%s    No Stats for %s: User interrupted scan%s" % (term.alertdim, ip, term.dim)
                    else:
                        # open a connection and dump it into the select()
                        do_poll = True

                if do_poll:
                    # delay at least 100ms
                    connect_next_round.append(ip)
                else:
                    broadcasted_devices[ip].close()

                if ip in wantips:
                    wantips.remove(ip)
                if broadcasted_devices[ip].deviceinfo['gwId'] in wantids:
                    wantids.remove( broadcasted_devices[ip].deviceinfo['gwId'] )
                if maxdevices:
                    maxdevices -= 1
                    if maxdevices == 0:
                        if verbose:
                            print('Found all the devices we wanted, ending scan early')
                        ip_wantips = False
                        ip_wantids = False
                        ip_force_wants_end = True
                        scan_end_time = 0
                        for dev in devicelist:
                            if (not dev.remove) and (not dev.passive) and ((dev.timeo + 1.0) > device_end_time):
                                device_end_time = dev.timeo + 1.0

                for dev in devicelist:
                    if dev.ip == ip:
                        if verbose:
                            print('Aborting force-scan for device', ip, 'due to received broadcast')
                        dev.abort()
                        break

        for ip in connect_this_round:
            broadcasted_devices[ip].connect()
            devicelist.append( broadcasted_devices[ip] )
            check_end_time = time.time() + connect_timeout
            if check_end_time > device_end_time: device_end_time = check_end_time

        if (not ip_scan_running) and wantips and scan_end_time <= time.time() and device_end_time <= time.time() and not user_break_count:
            if verbose:
                print("Not all devices were found by broadcast, starting force-scan for missing devices %r" % wantips)
            scan_ips = (i for i in wantips)
            wantips = None
            ip_scan_running = True

        if ip_wantids and (not bool(wantips)) and (not bool(wantids)):
            if verbose:
                print('Found all the device IDs we wanted, ending scan early')
            ip_wantids = False
            ip_force_wants_end = True
            scan_end_time = 0

        if ip_wantips and (not bool(wantips)) and (not bool(wantids)):
            if verbose:
                print('Found all the device IPs we wanted, ending scan early')
            ip_wantips = False
            ip_force_wants_end = True
            scan_end_time = 0
            for dev in devicelist:
                if (not dev.remove) and (not dev.passive) and ((dev.timeo + 1.0) > device_end_time):
                    device_end_time = dev.timeo + 1.0

        if discover and (not user_break_count) and (not ip_force_wants_end) and time.time() >= client_ip_broadcast_timer:
            client_ip_broadcast_timer = time.time() + BROADCASTTIME
            send_discovery_request( client_ip_broadcast_list )

    for sock in read_socks:
        sock.close()
    for sock in write_socks:
        sock.close()

    if client:
        client.close()
        clients.close()
        clientapp.close()

    for address in client_ip_broadcast_list:
        iface = client_ip_broadcast_list[address]
        if 'socket' in iface:
            iface['socket'].close()
            del iface['socket']

    if verbose:
        print( 'Scan completed in', round( time.time() - start_time, 4 ), 'seconds' )
        #print( len(response_list), response_list )

    ver_count = { '3.1': 0, '3.2': 0, '3.3': 0, '3.4': 0, '3.5': 0 }
    unknown_dev_count = 0
    no_key_count = 0

    for ip in broadcasted_devices:
        if ip in scanned_devices:
            del scanned_devices[ip]
        ver_str = str(broadcasted_devices[ip].deviceinfo['version'])
        if ver_str not in ver_count:
            ver_count[ver_str] = 1
        else:
            ver_count[ver_str] += 1

        if not broadcasted_devices[ip].deviceinfo['name']:
            unknown_dev_count += 1
        elif not broadcasted_devices[ip].deviceinfo['key']:
            no_key_count += 1

        if broadcasted_devices[ip].displayed and ip in broadcast_messages:
            del broadcast_messages[ip]

    for ip in scanned_devices:
        ver_str = str(scanned_devices[ip].deviceinfo['version'])
        if ver_str not in ver_count:
            ver_count[ver_str] = 1
        else:
            ver_count[ver_str] += 1

        if not scanned_devices[ip].deviceinfo['name']:
            unknown_dev_count += 1
        elif not scanned_devices[ip].deviceinfo['key']:
            no_key_count += 1

        if scanned_devices[ip].displayed and ip in broadcast_messages:
            # remove the "Received Broadcast from ..." line
            del broadcast_messages[ip]

        if scanned_devices[ip].sock or not scanned_devices[ip].displayed:
            scanned_devices[ip].stop()

    found_count = len(broadcasted_devices)+len(scanned_devices)

    if verbose:
        print(
            "                    \n%sScan Complete!  Found %s devices."
            % (term.normal, found_count)
        )
        print( 'Broadcasted:', len(broadcasted_devices) )
        if ip_scan:
            key_found = gwid_found = err_found = invalid = unmatched = 0
            for ip in scanned_devices:
                dev = scanned_devices[ip]
                if dev.key_found: key_found += 1
                if dev.gwid_found: gwid_found += 1
                if (not dev.key_found) and (not dev.gwid_found): unmatched += 1
                if dev.err_found: err_found += 1
                if not dev.ver_found: invalid += 1
            print( 'Force-Scanned:', len(scanned_devices), ' - Matched GWID:', gwid_found,'Matched Key:', key_found, 'Unmatched:', unmatched )
            if err_found or invalid:
                print( 'Force-Scan Errors: Connection Errors:', err_found, 'Version Detect Failed:', invalid )

        ver_found = ''
        for i in sorted(ver_count.keys()):
            if ver_count[i]:
                ver_found += ', %s: %s' % (i, ver_count[i])
        print( 'Versions:', ver_found[2:] )

        if unknown_dev_count:
            print( '%sUnknown Devices: %s%s' % (term.alert, unknown_dev_count, term.normal) )

        if no_key_count:
            print( '%sMissing Local Key: %s%s' % (term.alert, no_key_count, term.normal) )

        if wantips:
            print('%s%sDid not find %s devices by IP Address: %r%s' % (term.alert, term.yellow, len(wantips), wantips, term.normal))
        if wantids:
            print('%s%sDid not find %s devices by DevID: %r%s' % (term.alert, term.yellow, len(wantids), wantids, term.normal))

        if broadcast_messages:
            print('%sUndisplayed Broadcasts:%s' % (term.alert, term.normal))
            for ip in broadcast_messages:
                print( broadcast_messages[ip] )

    if byID:
        k = 'gwId'
    else:
        k = 'ip'
    devices = {} # pylint: disable=W0621
    for ip in broadcasted_devices:
        dev = broadcasted_devices[ip].deviceinfo
        dev['ip'] = ip
        dev['origin'] = 'broadcast'
        dkey = dev[k]
        devices[dkey] = dev

    for ip in scanned_devices:
        dev = scanned_devices[ip].deviceinfo
        dev['ip'] = ip
        dev['origin'] = 'forcescan'
        dkey = dev[k]
        if scanned_devices[ip].found and dkey not in devices:
            devices[dkey] = dev

    if verbose:
        # Save polling data into snapshot format
        devicesarray = list(devices.values())
        # Add devices from devices.json even if they didn't poll
        for item in tuyadevices:
            k = item["id"]
            if not any(d['gwId'] == k for d in devicesarray):
                tmp = item
                tmp["gwId"] = item["id"]
                tmp["ip"] = ''
                tmp['origin'] = 'cloud'
                devicesarray.append(tmp)
        save_snapshotfile( SNAPSHOTFILE, devicesarray, term )

    log.debug("Scan complete with %s devices found", found_count)
    return devices

def _get_gwid( old ):
    if 'gwId' in old and old['gwId']:
        return old["gwId"]
    if 'id' in old and old['id']:
        return old["id"]
    return 0

def _build_item( old, new ):
    item = {}
    item['id'] = item['gwId'] = _get_gwid( old )
    ip = ver = 0
    items = { 'ip':0, 'version':0, 'name':'', 'key':'', 'mac':None }
    for itm in items:
        if new and itm in new and new[itm]:
            item[itm] = new[itm]
        elif itm in old and old[itm]:
            item[itm] = old[itm]
        else:
            item[itm] = items[itm]
    return item

def _display_status( item, dps, term ):
    name = item['name']
    if name == "":
        name = item['gwId']
    ip = item['ip']
    if not ip:
        print("    %s[%-25.25s] %sError: No IP found%s" %
              (term.subbold, name, term.alert, term.normal))
    elif not dps:
        print("    %s[%-25.25s] %s%-18s - %sNo Response" %
              (term.subbold, name, term.dim, ip, term.alert))
    else:
        if '1' in dps or '20' in dps:
            state = term.alertdim + "[Off]" + term.dim
            if '1' in dps and dps['1'] is True:
                state = term.bold + "[On] " + term.dim
            elif '20' in dps and dps['20'] is True:
                state = term.bold + "[On] " + term.dim
            print("    %s[%-25.25s] %s%-18s - %s - DPS: %r" %
                  (term.subbold, name, term.dim, ip, state, dps))
        else:
            print("    %s[%-25.25s] %s%-18s - DPS: %r" %
                  (term.subbold, name, term.dim, ip, dps))

def _snapshot_load_item( itm ):
    # normalize all the fields
    itm['id'] = itm['gwId'] = _get_gwid( itm )
    if 'ver' in itm and itm['ver']:
        itm['version'] = float(itm['ver'])
        del itm['ver']
    elif 'version' in itm and itm['version']:
        itm['version'] = float(itm['version'])
    else:
        itm['version'] = 0.0
    return itm

def _snapshot_save_item( old ):
    # normalize all the fields
    # "version" is prefered over "ver", but saved as "ver"
    # "gwId" is prefered over "id", but saved as "id"
    item = {}
    item['id'] = _get_gwid( old )
    items = { 'ip':'', 'ver':'', 'origin':'', 'name':'', 'key':'', 'mac':'' }
    for itm in old:
        item[itm] = old[itm]

    for itm in items:
        if itm not in item or not item[itm]:
            item[itm] = items[itm]

    if 'version' in old:
        if old['version']:
            item['ver'] = old['version']
        del item['version']

    if 'gwId' in item:
        del item['gwId']

    item['ver'] = str(item['ver'])

    return item

def load_snapshotfile(fname):
    if (not fname) or (not isinstance(fname, str)):
        fname = SNAPSHOTFILE
    with open(fname) as json_file:
        data = json.load(json_file)
    devices = [] # pylint: disable=W0621
    if data and 'devices' in data:
        for dev in data['devices']:
            devices.append( _snapshot_load_item(dev) )
    if data:
        data['devices'] = devices
    return data

def save_snapshotfile(fname, data, term=None):
    if (not fname) or (not isinstance(fname, str)):
        fname = SNAPSHOTFILE
    if term:
        norm = term.normal
        bold = term.bold
    else:
        norm = bold = ''
    devices = [] # pylint: disable=W0621
    if type(data) == dict:
        data = list(data.values())
    for itm in data:
        devices.append( _snapshot_save_item(itm) )
    current = {'timestamp' : time.time(), 'devices' : devices}
    output = json.dumps(current, indent=4)
    print(bold + "\n>> " + norm + "Saving device snapshot data to " + fname + "\n")
    with open(fname, "w") as outfile:
        outfile.write(output)

# Scan Devices in snapshot.json
def snapshot(color=True, assume_yes=False, skip_poll=None):
    """Uses snapshot.json to scan devices

    Parameters:
        color = True or False, print output in color [Default: True]
        assume_yes = True or False, auto-answer 'yes' to "Poll local devices?" (ignored when skip_poll is set)
        skip_poll = True or False, auto-answer 'no' to "Poll local devices?" (overrides assume_yes)
    """
    # Terminal formatting
    termcolors = tinytuya.termcolor(color)
    term = TermColors( *termcolors )

    print(
        "\n%sTinyTuya %s(Tuya device scanner)%s [%s]\n"
        % (term.bold, term.normal, term.dim, tinytuya.__version__)
    )

    try:
        data = load_snapshotfile(SNAPSHOTFILE)
    except Exception as e:
        #traceback.print_exc(0)
        print("%s ERROR: Missing %s file:%s %s: %s\n" % (term.alert, SNAPSHOTFILE, term.normal, type(e).__name__, e))
        return

    print("%sLoaded %s - %d devices:\n" % (term.dim, SNAPSHOTFILE, len(data["devices"])))

    # Print a table with all devices
    table = []
    print("%s%-25s %-24s %-15s %-17s %-5s" % (term.normal, "Name","ID", "IP","Key","Version"))
    print(term.dim)
    by_ip = {}
    devicesx = sorted(data["devices"], key=lambda x: x['name'])
    for idx in devicesx:
        device = _build_item( idx, None )
        ips = device['ip'].ljust(15) if device['ip'] else (term.alert + "E: No IP found " + term.normal)
        dname = device['name']
        if dname == "":
            dname = device['gwId']
        print("%s%-25.25s %s%-24s %s%s %s%-17s %s%-5s" %
            (term.dim, dname, term.cyan, device['gwId'], term.subbold, ips, term.red, device['key'], term.yellow, device['version']))
        if device['ip']:
            by_ip[device['ip']] = device

    # Find out if we should poll all devices
    if skip_poll:
        answer = 'n'
    elif assume_yes:
        answer = 'y'
    else:
        answer = input(term.subbold + '\nPoll local devices? ' + term.normal + '(Y/n): ')
    if answer.lower().find('n') < 0:
        print("")
        print("%sPolling %s local devices from last snapshot..." % (term.normal, len(devicesx)))
        result = devices(verbose=False, color=color, poll=True, byID=True, discover=False, snapshot=by_ip)

        for i in devicesx:
            gwId = _get_gwid( i )
            if not gwId or gwId not in result:
                item = _build_item( i, None )
                _display_status( item, None, term )
            else:
                item = _build_item( i, result[gwId] )
                if 'dps' in result[gwId] and 'dps' in result[gwId]['dps'] and result[gwId]['dps']['dps']:
                    _display_status( item, result[gwId]['dps']['dps'], term )
                else:
                    _display_status( item, None, term )

        # for loop
    # if poll
    print("%s\nDone.\n" % term.dim)
    return


# Scan All Devices in devices.json
def alldevices(color=True, scantime=None, forcescan=False, discover=True, assume_yes=False, skip_poll=None):
    """Uses devices.json to scan devices

    Parameters:
        color = True or False, print output in color [Default: True]
    """
    # Terminal formatting
    #(bold, subbold, normal, dim, alert, alertdim, cyan, red, yellow) = tinytuya.termcolor(color)
    termcolors = tinytuya.termcolor(color)
    term = TermColors( *termcolors )

    print(
        "\n%sTinyTuya %s(Tuya device scanner)%s [%s]\n"
        % (term.bold, term.normal, term.dim, tinytuya.__version__)
    )
    # Check to see if we have additional Device info
    try:
        # Load defaults
        with open(DEVICEFILE) as f:
            tuyadevices = json.load(f)
            log.debug("loaded=%s [%d devices]", DEVICEFILE, len(tuyadevices))
    except:
        print("%s ERROR: Missing %s file\n" % (term.alert, DEVICEFILE))
        return

    print("%sLoaded %s - %d devices:" % (term.dim, DEVICEFILE, len(tuyadevices)))

    # Display device list
    print("\n\n" + term.bold + "Device Listing\n" + term.dim)
    output = json.dumps(sorted(tuyadevices,key=lambda x: x['name']), indent=4)
    print(output)

    # Find out if we should poll all devices
    if skip_poll:
        answer = 'n'
    elif assume_yes:
        answer = 'y'
    else:
        answer = input(term.subbold + '\nPoll local devices? ' + term.normal + '(Y/n): ')
    if answer.lower().find('n') < 0:
        poll_and_display( tuyadevices, color=color, scantime=scantime, snapshot=True, forcescan=forcescan, discover=discover )

    print("%s\nDone.\n" % term.dim)
    return

def poll_and_display( tuyadevices, color=True, scantime=None, snapshot=False, forcescan=False, discover=True ): # pylint: disable=W0621
    termcolors = tinytuya.termcolor(color)
    term = TermColors( *termcolors )

    by_id = [x['id'] for x in tuyadevices]
    # Scan network for devices and provide polling data
    print(term.normal + "\nScanning local network for Tuya devices...")
    result = devices(verbose=False, poll=True, byID=True, scantime=scantime, wantids=by_id, show_timer=True, forcescan=forcescan, tuyadevices=tuyadevices, discover=discover)
    print("    %s%s local devices discovered%s" % (term.dim, len(result), term.normal))
    print("")

    polling = []
    print("Polling local devices...")
    # devices = sorted(data["devices"], key=lambda x: x['name'])
    for idx in sorted(tuyadevices, key=lambda x: x['name']):
        gwId = _get_gwid( idx )
        if gwId and gwId in result:
            item = _build_item( idx, result[gwId] )
            if 'dps' in result[gwId] and 'dps' in result[gwId]['dps']:
                _display_status( item, result[gwId]['dps']['dps'], term )
            else:
                _display_status( item, None, term )
        else:
            item = _build_item( idx, None )
            _display_status( item, None, term )
        polling.append(item)
    # for loop

    if snapshot:
        # Save polling data snapsot
        save_snapshotfile( SNAPSHOTFILE, result, term )

    return polling

# Scan Devices in tuyascan.json - respond in JSON
def snapshotjson():
    """Uses snapshot.json to scan devices - respond with json
    """
    polling = []

    try:
        data = load_snapshotfile(SNAPSHOTFILE)
    except:
        current = {'timestamp' : time.time(), 'error' : 'Could not load JSON snapshot file: %s' % SNAPSHOTFILE}
        output = json.dumps(current, indent=4)
        print(output)
        return

    devicesx = sorted(data["devices"], key=lambda x: x['name'])
    by_ip = {}
    for idx in devicesx:
        if 'ip' in idx and idx['ip']:
            device = _build_item( idx, None )
            by_ip[idx['ip']] = device

    resp = devices(verbose=False, scantime=0, poll=True, byID=True, discover=False, snapshot=by_ip)

    for idx in devicesx:
        gwId = _get_gwid( idx )

        if gwId and gwId in resp:
            item = _build_item( idx, resp[gwId] )
        else:
            item = _build_item( idx, None )
        if not item['ip']:
            item['error'] = "No IP"
        elif gwId not in resp or 'dps' not in resp[gwId] or 'dps' not in resp[gwId]['dps'] or not resp[gwId]['dps']['dps']:
            item['error'] = "No Response"
        else:
            item['dps'] = resp[gwId]['dps']['dps']
        polling.append(item)
    # for loop
    current = {'timestamp' : time.time(), 'devices' : polling}
    output = json.dumps(current, indent=4)
    print(output)
    return


if __name__ == '__main__':

    try:
        scan()
    except KeyboardInterrupt:
        pass


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tinytuya/wizard.py

# TinyTuya Setup Wizard
# -*- coding: utf-8 -*-
"""
TinyTuya Setup Wizard Tuya based WiFi smart devices

Author: Jason A. Cox
For more information see https://github.com/jasonacox/tinytuya

Description
    Setup Wizard will prompt the user for Tuya IoT Developer credentials and will gather all
    registered Device IDs and their Local KEYs.  It will save the credentials and the device
    data in the tinytuya.json and devices.json configuration files respectively. The Wizard
    will then optionally scan the local devices for status.

    HOW to set up your Tuya IoT Developer account: iot.tuya.com:
    https://github.com/jasonacox/tinytuya#get-the-tuya-device-local-key

Credits
* Tuya API Documentation
    https://developer.tuya.com/en/docs/iot/open-api/api-list/api?id=K989ru6gtvspg
* TuyaAPI https://github.com/codetheweb/tuyapi by codetheweb and blackrozes
    The TuyAPI/CLI wizard inspired and informed this python version.
"""
# Modules
from __future__ import print_function
import json
from colorama import init
from datetime import datetime
import tinytuya

# Backward compatibility for python2
try:
    input = raw_input
except NameError:
    pass

# Colorama terminal color capability for all platforms
init()

# Configuration Files
DEVICEFILE = tinytuya.DEVICEFILE
SNAPSHOTFILE = tinytuya.SNAPSHOTFILE
CONFIGFILE = tinytuya.CONFIGFILE
RAWFILE = tinytuya.RAWFILE

# Global Network Configs
DEFAULT_NETWORK = tinytuya.DEFAULT_NETWORK
TCPTIMEOUT = tinytuya.TCPTIMEOUT    # Seconds to wait for socket open for scanning
TCPPORT = tinytuya.TCPPORT          # Tuya TCP Local Port

def wizard(color=True, retries=None, forcescan=False, nocloud=False, assume_yes=False, discover=True, credentials=None, skip_poll=None):
    """
    TinyTuya Setup Wizard Tuya based WiFi smart devices

    Parameter:
        color = True or False, print output in color [Default: True]
        retries = Number of retries to find IP address of Tuya Devices
        forcescan = True or False, force network scan for device IP addresses

    Description
        Setup Wizard will prompt user for Tuya IoT Developer credentials and will gather all of
        the Device IDs and their Local KEYs.  It will save the credentials and the device
        data in the tinytuya.json and devices.json configuration files respectively.

        HOW to set up your Tuya IoT Developer account: iot.tuya.com:
        https://github.com/jasonacox/tinytuya#get-the-tuya-device-local-key

    Credits
    * Tuya API Documentation
        https://developer.tuya.com/en/docs/iot/open-api/api-list/api?id=K989ru6gtvspg
    * TuyaAPI https://github.com/codetheweb/tuyapi by codetheweb and blackrozes
        The TuyAPI/CLI wizard inspired and informed this python version.
    """

    config_file = CONFIGFILE
    config_keys = ('apiKey', 'apiSecret', 'apiRegion', 'apiDeviceID')
    config = {}
    config['apiKey'] = ''
    config['apiSecret'] = ''
    config['apiRegion'] = ''
    config['apiDeviceID'] = ''
    needconfigs = True

    if credentials and 'file' in credentials and credentials['file']:
        needconfigs = False
        config_file = credentials['file']

    try:
        # Load defaults
        with open(config_file) as f:
            file_config = json.load(f)
        for k in config_keys:
            if file_config and k in file_config and file_config[k]:
                config[k] = file_config[k]
    except:
        # First Time Setup
        pass

    if credentials:
        for k in config_keys:
            if k in credentials and credentials[k]:
                config[k] = credentials[k]
                needconfigs = False

    if not needconfigs:
        for k in config_keys:
            if not config[k]:
                needconfigs = True

    try:
        # Load the old device list, if available
        with open(DEVICEFILE, "r") as infile:
            old_devices = json.load( infile )
    except:
        old_devices = {}

    (bold, subbold, normal, dim, alert, alertdim, cyan, red, yellow) = tinytuya.termcolor(color)

    print(bold + 'TinyTuya Setup Wizard' + dim + ' [%s]' % (tinytuya.version) + normal)
    print('')

    if (needconfigs and config['apiKey'] != '' and config['apiSecret'] != '' and
            config['apiRegion'] != ''):
        needconfigs = False
        apiDeviceID = '<None>' if ('apiDeviceID' not in config or not config['apiDeviceID']) else config['apiDeviceID']
        print("    " + subbold + "Existing settings:" + dim +
              "\n        API Key=%s \n        Secret=%s\n        DeviceID=%s\n        Region=%s" %
              (config['apiKey'], config['apiSecret'], apiDeviceID,
               config['apiRegion']))
        print('')
        if not assume_yes:
            answer = input(subbold + '    Use existing credentials ' + normal + '(Y/n): ')
            if answer[0:1].lower() == 'n':
                needconfigs = True

    if needconfigs and (not (nocloud and assume_yes)):
        # Ask user for config settings
        print('')
        config['apiKey'] = input(subbold + "    Enter " + bold + "API Key" + subbold +
                                 " from tuya.com: " + normal)
        config['apiSecret'] = input(subbold + "    Enter " + bold + "API Secret" + subbold +
                                    " from tuya.com: " + normal)
        config['apiDeviceID'] = input(subbold +
                                      "    Enter " + bold + "any Device ID" + subbold +
                                      " currently registered in Tuya App (used to pull full list) or 'scan' to scan for one: " + normal)
        # TO DO - Determine apiRegion based on Device - for now, ask
        print("\n      " + subbold + "Region List" + dim +
              "\n        cn\tChina Data Center" +
              "\n        us\tUS - Western America Data Center" +
              "\n        us-e\tUS - Eastern America Data Center" +
              "\n        eu\tCentral Europe Data Center" +
              "\n        eu-w\tWestern Europe Data Center" +
              "\n        in\tIndia Data Center\n")
        config['apiRegion'] = input(subbold + "    Enter " + bold + "Your Region" + subbold +
                                    " (Options: cn, us, us-e, eu, eu-w, or in): " + normal)
        # Write Config
        json_object = json.dumps(config, indent=4)
        with open(config_file, "w") as outfile:
            outfile.write(json_object)
        print(bold + "\n>> Configuration Data Saved to " + config_file)
        print(dim + json_object)

    if nocloud:
        tuyadevices = old_devices
    else:
        if 'apiDeviceID' in config and config['apiDeviceID'] and config['apiDeviceID'].strip().lower() == 'scan':
            config['apiDeviceID'] = ''
            print( '\nScanning to find a Device ID...' )
            dev = tinytuya.scanner.devices( verbose=False, poll=False, byID=True, show_timer=False, maxdevices=1 )
            for devid in dev:
                print( '\nScan found Device ID %r' % devid )
                config['apiDeviceID'] = devid
                break
            if not config['apiDeviceID']:
                print('\n\n' + bold + 'Scan failed to detect a device, please enter a Device ID manually' )
                return

        cloud = tinytuya.Cloud( **config )

        # on auth error getdevices() will implode
        if cloud.error:
            err = cloud.error['Payload'] if 'Payload' in cloud.error else 'Unknown Error'
            print('\n\n' + bold + 'Error from Tuya server: ' + dim + err)
            print('Check API Key and Secret')
            return

        # Fetch the DP name mappings for all devices
        if assume_yes:
            answer = 'y'
        else:
            answer = input(subbold + '\nDownload DP Name mappings? ' + normal + '(Y/n): ')
        include_map = not bool( answer[0:1].lower() == 'n' )

        # Get UID from sample Device ID
        tuyadevices = cloud.getdevices( False, oldlist=old_devices, include_map=include_map )

        if type(tuyadevices) != list:
            err = tuyadevices['Payload'] if 'Payload' in tuyadevices else 'Unknown Error'
            print('\n\n' + bold + 'Error from Tuya server: ' + dim + err)
            print('Check DeviceID and Region')
            return

    # The device list does not (always) tell us which device is the parent for a sub-device, so we need to try and figure it out
    # The only link between parent and child appears to be the local key

    # Result:
    # if 'parent' not in device: device is not a sub-device
    # if 'parent' in device: device is a sub-device
    #     if device['parent'] == '': device is a sub-device with an unknown parent
    #     else: device['parent'] == device_id of parent
    for dev in tuyadevices:
        if 'gateway_id' in dev:
            # if the Cloud gave us the parent then just use that
            if dev['gateway_id']:
                dev['parent'] = dev['gateway_id']
            del dev['gateway_id']

        if 'sub' in dev and dev['sub']:
            # no parent from cloud, try to find it via the local key
            if 'parent' in dev and dev['parent']:
                continue

            # Set 'parent' to an empty string in case we can't find it
            dev['parent'] = ''

            # Only try to find the parent if the device has a local key
            if 'key' in dev and dev['key']:
                if 'id' not in dev:
                    dev['id'] = ''
                found = False
                # Loop through all devices again to try and find a non-sub-device with the same local key
                for parent in tuyadevices:
                    if 'id' not in parent or parent['id'] == dev['id']:
                        continue
                    # Check for matching local keys and if device is not a sub-device then assume we found the parent
                    if 'key' in parent and parent['key'] and dev['key'] == parent['key'] and ( 'sub' not in parent or not parent['sub']):
                        found = parent
                        break
                if found:
                    dev['parent'] = found['id']

    # Display device list
    print("\n\n" + bold + "Device Listing\n" + dim)
    output = json.dumps(tuyadevices, indent=4)  # sort_keys=True)
    print(output)

    # Save list to devices.json
    print(bold + "\n>> " + normal + "Saving list to " + DEVICEFILE)
    with open(DEVICEFILE, "w") as outfile:
        outfile.write(output)
    print(dim + "    %d registered devices saved" % len(tuyadevices))

    if not nocloud:
        # Save raw TuyaPlatform data to tuya-raw.json
        print(bold + "\n>> " + normal + "Saving raw TuyaPlatform response to " + RAWFILE)
        cloud.getdevices_raw['file'] = {
            'name': RAWFILE,
            'description': 'Full raw list of Tuya devices.',
            'account': cloud.apiKey,
            'date': datetime.now().isoformat(),
            'tinytuya': tinytuya.version
        }
        try:
            with open(RAWFILE, "w") as outfile:
                outfile.write(json.dumps(cloud.getdevices_raw, indent=4))
        except:
            print('\n\n' + bold + 'Unable to save raw file' + dim )

    # Find out if we should poll all devices
    if skip_poll:
        answer = 'n'
    elif assume_yes:
        answer = 'y'
    else:
        answer = input(subbold + '\nPoll local devices? ' + normal + '(Y/n): ')
    if answer.lower().find('n') < 0:
        tinytuya.scanner.SNAPSHOTFILE = SNAPSHOTFILE
        result = tinytuya.scanner.poll_and_display( tuyadevices, color=color, scantime=retries, snapshot=True, forcescan=forcescan )
        iplist = {}
        found = 0
        for itm in result:
            if 'gwId' in itm and itm['gwId']:
                gwid = itm['gwId']
                ip = itm['ip'] if 'ip' in itm and itm['ip'] else ''
                ver = itm['version'] if 'version' in itm and itm['version'] else ''
                iplist[gwid] = (ip, ver)
        for k in range( len(tuyadevices) ):
            gwid = tuyadevices[k]['id']
            if gwid in iplist:
                tuyadevices[k]['ip'] = iplist[gwid][0]
                tuyadevices[k]['version'] = iplist[gwid][1]
                if iplist[gwid][0]: found += 1
        if found:
            # re-write devices.json now that we have IP addresses
            output = json.dumps(tuyadevices, indent=4)
            print(bold + "\n>> " + normal + "Saving IP addresses to " + DEVICEFILE)
            with open(DEVICEFILE, "w") as outfile:
                outfile.write(output)
            print(dim + "    %d device IP addresses found" % found)

    print("\nDone.\n")
    return


if __name__ == '__main__':

    try:
        wizard()
    except KeyboardInterrupt:
        pass


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tools/README.md

# TinyTuya Tools

## Packet Capture Parser

A program to read *.pcap files and decrypt the Tuya device traffic.  It requires the dpkt module for PCAP parsing.

Written by uzlonewolf (https://github.com/uzlonewolf)

### Setup

```bash
# Install required python modules
pip install dpkt

# Test and display Help
python3 pcap_parse.py -h
```

### Usage

```
usage: pcap_parse.py [-h] [-z] [-s] -d devices.json INFILE.pcap [INFILE.pcap ...]

Reads PCAP files created by tcpdump and prints the traffic to/from Tuya devices. Local keys 
are loaded from devices.json.

positional arguments:
  INFILE.pcap           Input file(s) to parse

options:
  -h, --help            show this help message and exit
  -z, --hide-zero-len   Hide 0-length heartbeat packets
  -s, --sortable        Output data in a way which is sortable by device ID
  -d devices.json,      devices.json file to read local keys from
```

### Example Usage

```bash
# Capture local traffic - use control-C to end capture
sudo tcpdump -i en0 -w trace.pcap   
^C

# Parse pcap file - make sure to specify location of devices.json
python3 pcap_parse.py -d ../devices.json trace.pcap

# Display output sorted
python3 pcap_parse.py -s -d ../devices.json trace.pcap | sort
```


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tools/fake-v35-device.py


import ttcorefunc as tinytuya
import socket
import select
import time
import json
from hashlib import md5, sha256
import hmac

bind_host = ''
bind_port = 6668

# can also be set to the address of a hub/gateway device or phone running  SmartLife
bcast_to = '127.0.0.1'

bcast_data = b'{"ip":"127.0.0.1","gwId":"eb0123456789abcdefghij","active":2,"ablilty":0,"encrypt":true,"productKey":"keydeadbeef12345","version":"3.5","token":true,"wf_cfg":true}'
real_key = b'thisisarealkey00'
local_nonce = str(time.time() * 1000000)[:16].encode('utf8') #b'0123456789abcdef'

msg = tinytuya.TuyaMessage(1, tinytuya.UDP_NEW, 0, bcast_data, 0, True, tinytuya.PREFIX_6699_VALUE, True)
bcast_data = tinytuya.pack_message(msg,hmac_key=tinytuya.udpkey)
print("broadcast encrypted=%r" % bcast_data.hex() )


srv = socket.socket( socket.AF_INET6, socket.SOCK_STREAM )
srv.setsockopt( socket.SOL_SOCKET, socket.SO_REUSEADDR, 1 )
srv.bind( (bind_host, bind_port) )
srv.listen( 1 )

bsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP
bsock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)

client = None

bcast_time = 0

while True:
    r = [srv]
    if client: r.append( client )
    w = []
    x = []

    r, w, x = select.select( r, w, x, 1 )
    #print('select')

    if( bcast_time < time.time() ):
        bcast_time = time.time() + 8
        #print( 'bcast' )
        bsock.sendto( bcast_data, (bcast_to, 6667) )

    for sock in r:
        if sock is srv:
            if client:
                client.close()
                client = None
            client, addr = sock.accept()
            client.setblocking( False )
            tmp_key = real_key
            seqno = 1
            print( 'new client connected:', addr )
            continue

        if sock is not client:
            print('not:', sock)
            continue

        data = sock.recv( 4096 )
        #print( 'client data: %r' % data )
        if not data:
            client.close()
            client = None
            continue

        print('')
        print('client sent:', data)
        #print(data.hex())
        m = tinytuya.unpack_message(data,hmac_key=tmp_key, no_retcode=True)
        #print('payload len:', len(m.payload), 'tuya message:', m)
        print('decoded message:', m)

        if m.cmd == tinytuya.SESS_KEY_NEG_START:
            tmp_key = real_key
            payload = m.payload
            remote_nonce = payload
            miv = remote_nonce[:12]
            hmac_check = hmac.new(real_key, remote_nonce, sha256).digest()
            msg = tinytuya.TuyaMessage(seqno, tinytuya.SESS_KEY_NEG_RESP, 0, local_nonce+hmac_check, 0, True, tinytuya.PREFIX_6699_VALUE, True)
            seqno += 1
            data = tinytuya.pack_message(msg, hmac_key=tmp_key)
            print( 'session neg start:', msg )
            client.sendall( data )
        elif m.cmd == tinytuya.SESS_KEY_NEG_FINISH:
            rkey_hmac = hmac.new(real_key, local_nonce, sha256).digest()
            print('neg fin. success:', rkey_hmac == m.payload)
            print('want hmac:', rkey_hmac.hex())
            print('got hmac: ', m.payload.hex())
            tmp_key = bytes( [ a^b for (a,b) in zip(remote_nonce,local_nonce) ] )
            print( 'sess nonce:', tmp_key.hex() )
            cipher = tinytuya.AESCipher( real_key )
            print( 'sess iv:', m.iv.hex() )
            tmp_key = cipher.encrypt( tmp_key, use_base64=False, pad=False, iv=miv )[12:28]
            print( 'sess key:', tmp_key.hex(), tmp_key)
        elif m.cmd == tinytuya.DP_QUERY_NEW:
            print('got status request')
            resp = {'protocol': 4, 't': int(time.time()), 'data': {'dps': {'20': True, '21': 'white', '22': 946, '23': 3, '24': '014a03e803a9', '25': '04464602007803e803e800000000464602007803e8000a00000000', '26': 0, '34': False}} }
            msg = tinytuya.TuyaMessage(seqno, 16, 0, json.dumps(resp).encode('ascii'), 0, True, tinytuya.PREFIX_6699_VALUE, True)
            seqno += 1
            data = tinytuya.pack_message(msg, hmac_key=tmp_key)
            client.sendall( data )
        else:
            print('unhandled command', m.cmd)
            msg = tinytuya.TuyaMessage(seqno, 16, 0, b'json obj data unvalid', 0, True, tinytuya.PREFIX_6699_VALUE, True)
            seqno += 1
            data = tinytuya.pack_message(msg, hmac_key=tmp_key)
            client.sendall( data )




=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tools/pcap_parse.py

#!/usr/bin/env python
# -*- coding: utf-8 -*-
# PYTHON_ARGCOMPLETE_OK

"""
 A program to read *.pcap files and decrypt the Tuya device traffic.

 Requires the dpkt module for PCAP parsing.

 Written by uzlonewolf (https://github.com/uzlonewolf) for the TinyTuya project https://github.com/jasonacox/tinytuya

 Call with "-h" for options.
 The "-s" option is designed to make the output display nice when sorted, i.e. `python3 pcap_parse.py ... | sort`
"""

try:
    import dpkt
    from dpkt.utils import mac_to_str, inet_to_str
except:
    print( "Required module 'dpkt' not found" )
    print( "Try: pip install dpkt" )
    print( "" )
    raise

try:
    import argcomplete
    HAVE_ARGCOMPLETE = True
except:
    HAVE_ARGCOMPLETE = False

import json
import argparse
import traceback
import struct
from hashlib import md5,sha256
import hmac

import tinytuya

devices = {}

def pop_packet_from_data( data, from_dev ):
    min_len_55AA = struct.calcsize(tinytuya.MESSAGE_HEADER_FMT_55AA) + 4 + 4 + len(tinytuya.SUFFIX_BIN)
    min_len_6699 = struct.calcsize(tinytuya.MESSAGE_HEADER_FMT_6699) + 12 + 4 + 16 + len(tinytuya.SUFFIX_BIN)
    min_len = min_len_55AA if min_len_55AA < min_len_6699 else min_len_6699
    prefix_len = len( tinytuya.PREFIX_55AA_BIN )

    # search for the prefix.  if not found, delete everything except
    # the last (prefix_len - 1) bytes and recv more to replace it
    prefix_offset_55AA = data.find( tinytuya.PREFIX_55AA_BIN )
    prefix_offset_6699 = data.find( tinytuya.PREFIX_6699_BIN )

    if prefix_offset_55AA != 0 and prefix_offset_6699 != 0:
        print('Message prefix not at the beginning of the received data!')
        print('Offset 55AA: %d, 6699: %d, Received data: %r', prefix_offset_55AA, prefix_offset_6699, data)
        if prefix_offset_55AA < 0 and prefix_offset_6699 < 0:
            return None, None, None, None

        if prefix_offset_55AA < 0:
            prefix_offset = prefix_offset_6699 # if prefix_offset_55AA < 0 else prefix_offset_55AA
            prefix = tinytuya.PREFIX_6699_BIN
        else:
            prefix_offset = prefix_offset_55AA
            prefix = tinytuya.PREFIX_55AA_BIN

        data = data[prefix_offset:]
    elif prefix_offset_55AA == 0:
        prefix = tinytuya.PREFIX_55AA_BIN
    else:
        prefix = tinytuya.PREFIX_6699_BIN

    header = tinytuya.parse_header(data)
    remaining = header.total_length - len(data)
    if remaining > 0:
        return None, None, prefix, data

    return header, data[:header.total_length], prefix, data[header.total_length:]

def process_data( data, from_dev, devinfo, flow, args ):
    #print( 'di', devinfo )
    #print( 'fl', flow )
    if( ('key' not in devinfo) or (not devinfo['key']) ):
        print( 'Missing device key, skipping packet' )
        return

    if 'packet_idx' not in flow:
        flow['packet_idx'] = 0

    while data:
        header, pdata, prefix, data = pop_packet_from_data( data, from_dev )

        if 'ver' not in flow:
            if 'version' in devinfo:
                flow['ver'] = float( devinfo['version'] )
            elif 'ver' in devinfo:
                flow['ver'] = devinfo['ver']
            elif( prefix == tinytuya.PREFIX_6699_BIN ):
                flow['ver'] = 3.5
            else:
                flow['ver'] = 0

        #src_str = ('from' if from_dev else 'to') + (' %r v%.1f' % (devinfo['id'], flow['ver']))
        cmd_str = 'cmd:% 3d (%02X)' % (header.cmd, header.cmd)
        flow['packet_idx'] += 1

        if args.sortable:
            src_str = ('from' if from_dev else 'to  ')
            output_prefix = '%s %s/%s/%04d v%.1f' % ( devinfo['id'], args.fnum_str, flow['numstr'], flow['packet_idx'], flow['ver'] )
        else:
            src_str = '%-29s' % (('from' if from_dev else 'to  ') + (' %r v%.1f' % (devinfo['id'], flow['ver'])))
            output_prefix = ''

        if not flow['ver']:
            # try <=3.3
            packet = tinytuya.unpack_message(pdata, header=header, hmac_key=None, no_retcode=(not from_dev))
            if( not packet.crc_good ):
                # next try v3.4
                try2 = tinytuya.unpack_message(pdata, header=header, hmac_key=devinfo['key'], no_retcode=True)
                if try2.crc_good:
                    print( '%s %-11s %s' % (src_str, '', '<Auto-detected v3.4 device>') )
                    flow['ver'] = 3.4
                    packet = try2
        if flow['ver'] <= 3.3:
            packet = tinytuya.unpack_message(pdata, header=header, hmac_key=None, no_retcode=(not from_dev))
            payload = packet.payload

            if not flow['ver']:
                if payload.startswith( b'3.' ):
                    v = payload[2]
                    if type(v) == str: v = int(str)
                    if v > 0 and v < 4:
                        flow['ver'] = float(payload[:3])

            if len(payload) == 0:
                pass
            elif not flow['ver']:
                pass
            elif( flow['ver'] == 3.1 ):
                pass
            else: # 3.2 or 3.3
                if( payload.startswith( str(flow['ver']).encode('utf8') ) ):
                    headlen = len(tinytuya.PROTOCOL_3x_HEADER)+3
                    head = payload[:headlen]
                    enc = payload[headlen:]
                else:
                    head = b''
                    enc = payload

                try:
                    payload = head + tinytuya.AESCipher( devinfo['key'] ).decrypt(enc, False).encode('utf8')
                except:
                    traceback.print_exc()
                    print(enc, packet)
                    continue
        else:
            if 'session_key' not in flow:
                flow['session_key'] = b''

            if( (header.cmd >= tinytuya.SESS_KEY_NEG_START) and (header.cmd <= tinytuya.SESS_KEY_NEG_FINISH) ):
                hmac_key = devinfo['key']
            elif not flow['session_key']:
                print( '%s %-15s %s' % (src_str, cmd_str, '<Error: No Session Key for stream!  The 3-way handshake needs to be captured to decrypt v3.4+ device streams!') )
                continue
            else:
                hmac_key = flow['session_key']

            packet = tinytuya.unpack_message(pdata, header=header, hmac_key=hmac_key, no_retcode=(not from_dev))
            if( (not packet.crc_good) and (hmac_key != devinfo['key']) ):
                try2 = tinytuya.unpack_message(pdata, header=header, hmac_key=devinfo['key'], no_retcode=True)
                if try2.crc_good:
                    packet = try2
                    flow['session_key'] = b''

            payload = packet.payload
            if packet.crc_good:
                payload = packet.payload
                if flow['ver'] == 3.4 and len(payload):
                    try:
                        payload = tinytuya.AESCipher( hmac_key ).decrypt(payload, False, decode_text=False)
                    except:
                        print("v3.4 decrypt payload failed, payload=%r (len:%d)" % (payload, len(payload)))
                        payload = b''

                if( packet.cmd == tinytuya.SESS_KEY_NEG_START ):
                    payload_str = '<Negotiate Session Key Step 1>'
                    flow['session_key'] = b''
                    flow['device_nonce'] = b''
                    flow['client_nonce'] = payload
                elif( packet.cmd == tinytuya.SESS_KEY_NEG_RESP ):
                    payload_str = '<Negotiate Session Key Step 2>'
                    flow['session_key'] = b''
                    flow['device_nonce'] = payload[:16]
                    dev_hmac = payload[16:]
                    hmac_check = hmac.new( devinfo['key'], flow['client_nonce'], sha256).digest()
                    if( dev_hmac != hmac_check ):
                        payload_str += ' session key step 2 HMAC verify fail!'
                    else:
                        payload_str += ' session key step 2 HMAC verify OK!'
                elif( packet.cmd == tinytuya.SESS_KEY_NEG_FINISH ):
                    payload_str = '<Negotiate Session Key Step 3>'
                    hmac_check = hmac.new( devinfo['key'], flow['device_nonce'], sha256).digest()
                    if( payload != hmac_check ):
                        payload_str += ' session key step 3 HMAC verify fail!'
                    else:
                        payload_str += ' session key step 3 HMAC verify OK!'

                    try:
                        flow['session_key'] = bytes( [ a^b for (a,b) in zip(flow['client_nonce'], flow['device_nonce']) ] )
                    except:
                        k = [ chr(ord(a)^ord(b)) for (a,b) in zip(flow['client_nonce'], flow['device_nonce']) ]
                        flow['session_key'] = ''.join(k)

                    if flow['ver'] == 3.4:
                        flow['session_key'] = tinytuya.AESCipher( devinfo['key'] ).encrypt( flow['session_key'], False, pad=False )
                    else:
                        iv = flow['client_nonce'][:12]
                        print("Session IV:", iv)
                        flow['session_key'] = tinytuya.AESCipher( devinfo['key'] ).encrypt( flow['session_key'], use_base64=False, pad=False, iv=iv )[12:28]

        if( len(packet.payload) == 0 and args.hide_zero_len and packet.cmd == tinytuya.HEART_BEAT ):
            continue
        elif not packet.crc_good:
            print( output_prefix, packet )
        else:
            cmd_str += ' len(%d)' % len(packet.payload)
            if( flow['ver'] < 3.4 or (packet.cmd < tinytuya.SESS_KEY_NEG_START) or (packet.cmd > tinytuya.SESS_KEY_NEG_FINISH) ):
                if all((char <= 0x7E and char >= 0x20) for char in payload):
                    payload_str = payload.decode('utf8')
                else:
                    payload_str = '%r' % payload

            print( output_prefix, '%s %-22s %s' % (src_str, cmd_str, payload_str) )

    return True

def get_key( dev=None, mac=None, ip=None ):
    global devices

    ver = 0

    # first lookup by device id, if provided
    if dev:
        for dev in devices:
            if 'id' in dev and 'key' in dev and dev['key']:
                if dev == dev['id']:
                    return dev['id'], dev['key'], ver

    # if no device id, try the mac
    if mac:
        mac = mac.lower()
        for dev in devices:
            if 'mac' in dev and 'key' in dev and dev['key']:
                if mac == dev['mac'].lower():
                    return dev['id'], dev['key'], ver

    # if no device id or mac, try the IP address
    if ip:
        for dev in devices:
            if 'ip' in dev and 'key' in dev and dev['key']:
                if ip == dev['ip']:
                    return dev['id'], dev['key'], ver

    # uh oh, device not found!
    return None, '', ver

def process_pcap( pcap_file, args ):
    flows = {}
    ignore_flows = {}
    flow_count = 0
    ip_devs = {}
    bcast_devs = []

    if not args.sortable:
        print( 'Processing file %d %r' % (args.fnum, pcap_file.name) )

    for ts, buf in dpkt.pcap.Reader(pcap_file):
        eth = dpkt.ethernet.Ethernet(buf)
        if not isinstance(eth.data, dpkt.ip.IP):
            #print( 'Non IP Packet type not supported: %s\n' % eth.data.__class__.__name__ )
            continue

        if( isinstance(eth.ip.data, dpkt.udp.UDP) ):
            if( (eth.ip.udp.dport == 6667 or eth.ip.udp.dport == 6666 or eth.ip.udp.dport == 7000) and eth.ip.src not in ip_devs ):
                try:
                    data = eth.ip.udp.data
                    devmac = mac_to_str( eth.src )
                    devip = inet_to_str( eth.ip.src )
                    payload_raw = tinytuya.decrypt_udp( data )
                    payload = json.loads( payload_raw )
                    bcast_dev = devip + ':' + str(eth.ip.udp.dport)
                    if bcast_dev not in bcast_devs:
                        if 'gwId' not in payload:
                            print( 'Non-device broadcast from ', devip, '-', payload )
                        bcast_devs.append( bcast_dev )
                    if 'gwId' in payload:
                        did, dkey, dver = get_key( dev=payload['gwId'], mac=devmac )
                        payload['id'] = did
                        payload['key'] = dkey.encode('utf8')
                        ip_devs[devip] = payload
                except:
                    traceback.print_exc()

        if( isinstance(eth.ip.data, dpkt.tcp.TCP) ):
            data = None
            if( eth.ip.tcp.dport == 6668 ):
                data = eth.ip.tcp.data
                devmac = mac_to_str( eth.dst )
                devip = inet_to_str( eth.ip.dst )
                dev_str = '%s:%d' % (devip, eth.ip.tcp.dport)
                client_str = '%s:%d' % (inet_to_str( eth.ip.src ), eth.ip.tcp.sport)
                from_dev = False
            elif( eth.ip.tcp.sport == 6668 ):
                data = eth.ip.tcp.data
                devmac = mac_to_str( eth.src )
                devip = inet_to_str( eth.ip.src )
                dev_str = '%s:%d' % (devip, eth.ip.tcp.sport)
                client_str = '%s:%d' % (inet_to_str( eth.ip.dst ), eth.ip.tcp.dport)
                from_dev = True

            if data:
                flow_key = '%s_%s' % (dev_str, client_str)
                if( flow_key not in flows ):
                    flows[flow_key] = { 'id': flow_key, 'idx': flow_count }

    total_flows = len(flows)
    flownum_format = '%%0%dd' % len(str(args.ftot))
    flows = {}
    pcap_file.seek(0)
    for ts, buf in dpkt.pcap.Reader(pcap_file):
        eth = dpkt.ethernet.Ethernet(buf)
        if not isinstance(eth.data, dpkt.ip.IP):
            #print( 'Non IP Packet type not supported: %s\n' % eth.data.__class__.__name__ )
            continue

        if( isinstance(eth.ip.data, dpkt.tcp.TCP) ):
            data = None
            if( eth.ip.tcp.dport == 6668 ):
                #TcpFrom( eth )
                data = eth.ip.tcp.data
                devmac = mac_to_str( eth.dst )
                devip = inet_to_str( eth.ip.dst )
                dev_str = '%s:%d' % (devip, eth.ip.tcp.dport)
                client_str = '%s:%d' % (inet_to_str( eth.ip.src ), eth.ip.tcp.sport)
                from_dev = False
            elif( eth.ip.tcp.sport == 6668 ):
                #TcpTo( eth )
                data = eth.ip.tcp.data
                devmac = mac_to_str( eth.src )
                devip = inet_to_str( eth.ip.src )
                dev_str = '%s:%d' % (devip, eth.ip.tcp.sport)
                client_str = '%s:%d' % (inet_to_str( eth.ip.dst ), eth.ip.tcp.dport)
                from_dev = True

            if data:
                flow_key = '%s_%s' % (dev_str, client_str)

                if flow_key in ignore_flows:
                    continue

                if( devip not in ip_devs ):
                    print( 'Flow but no broadcast??  Attempting lookup by MAC address' )
                    did, dkey, dver = get_key( mac=devmac, ip=devip )
                    ip_devs[devip] = {'id': did, 'key': dkey.encode('utf8')}
                    print( 'Lookup result:', ip_devs[devip])

                if( flow_key not in flows ):
                    flow_count += 1
                    flownum_str = flownum_format % flow_count
                    flows[flow_key] = { 'id': flow_key, 'idx': flow_count, 'numstr': flownum_str }
                    if args.sortable:
                        print( '%s %s/%s/%04d v    %s %r' % ( ip_devs[devip]['id'], args.fnum_str, flownum_str, 0, flow_key, pcap_file.name ) )

                if not ip_devs[devip]['key']:
                    print( 'Missing device key for %s [MAC %s] [Flow %s], skipping' % (devip, devmac, flow_key) )
                    ignore_flows[flow_key] = True
                    continue

                process_data( data, from_dev, ip_devs[devip], flows[flow_key], args )

        else:
            #print( 'Non TCP/UDP Packet type not supported: %s\n' % eth.ip.data.__class__.__name__ )
            continue

if __name__ == '__main__':
    disc = 'Reads PCAP files created by tcpdump and prints the traffic to/from Tuya devices.  Local keys are loaded from devices.json.'
    epi = 'The "-s" option is designed to make the output display packets in the correct order when sorted, i.e. with `python3 pcap_parse.py ... | sort`'
    arg_parser = argparse.ArgumentParser( description=disc, epilog=epi )
    arg_parser.add_argument( '-z', '--hide-zero-len', help='Hide 0-length heartbeat packets', action='store_true' )
    arg_parser.add_argument( '-s', '--sortable', help='Output data in a way which is sortable by device ID', action='store_true' )
    arg_parser.add_argument( '-d', '--devices', help='devices.json file to read local keys from', default='devices.json', metavar='devices.json', type=argparse.FileType('rb'), required=True )
    arg_parser.add_argument( 'files', metavar='INFILE.pcap', nargs='+', help='Input file(s) to parse', type=argparse.FileType('rb') )

    if HAVE_ARGCOMPLETE:
        argcomplete.autocomplete( arg_parser )

    args = arg_parser.parse_args()
    devices = json.load( args.devices )

    args.fnum = 0
    args.ftot = len(args.files)
    #fnum_format = 'file-%%0%dd' % len(str(args.ftot))
    fnum_format = '%%0%dd' % len(str(args.ftot))
    args.fnum_str = fnum_format % args.fnum

    for pf in args.files:
        args.fnum += 1
        args.fnum_str = fnum_format % args.fnum
        process_pcap( pf, args )

    


=======================================================================================================================================================================

Repository: jasonacox/tinytuya
Branch: master
File: tools/ttcorefunc.py

# Copy of TinyTuya core Module
# -*- coding: utf-8 -*-

# Modules
from __future__ import print_function  # python 2.7 support
import binascii
from collections import namedtuple
import base64
from hashlib import md5,sha256
import hmac
import json
import logging
import socket
import select
import struct
import sys
import time
from colorama import init

# Required module: pycryptodome
import Cryptodome as Crypto
from Cryptodome.Cipher import AES  # PyCrypto

# Colorama terminal color capability for all platforms
init()

log = logging.getLogger(__name__)

# Globals Network Settings
MAXCOUNT = 15       # How many tries before stopping
SCANTIME = 18       # How many seconds to wait before stopping device discovery
UDPPORT = 6666      # Tuya 3.1 UDP Port
UDPPORTS = 6667     # Tuya 3.3 encrypted UDP Port
UDPPORTAPP = 7000   # Tuya app encrypted UDP Port
TCPPORT = 6668      # Tuya TCP Local Port
TIMEOUT = 3.0       # Seconds to wait for a broadcast
TCPTIMEOUT = 0.4    # Seconds to wait for socket open for scanning
DEFAULT_NETWORK = '192.168.0.0/24'

# Configuration Files
CONFIGFILE = 'tinytuya.json'
DEVICEFILE = 'devices.json'
RAWFILE = 'tuya-raw.json'
SNAPSHOTFILE = 'snapshot.json'

DEVICEFILE_SAVE_VALUES = ('category', 'product_name', 'product_id', 'biz_type', 'model', 'sub', 'icon', 'version', 'last_ip', 'uuid', 'node_id', 'sn', 'mapping')

# Tuya Command Types
# Reference: https://github.com/tuya/tuya-iotos-embeded-sdk-wifi-ble-bk7231n/blob/master/sdk/include/lan_protocol.h
AP_CONFIG       = 1  # FRM_TP_CFG_WF      # only used for ap 3.0 network config
ACTIVE          = 2  # FRM_TP_ACTV (discard) # WORK_MODE_CMD
SESS_KEY_NEG_START  = 3  # FRM_SECURITY_TYPE3 # negotiate session key
SESS_KEY_NEG_RESP   = 4  # FRM_SECURITY_TYPE4 # negotiate session key response
SESS_KEY_NEG_FINISH = 5  # FRM_SECURITY_TYPE5 # finalize session key negotiation
UNBIND          = 6  # FRM_TP_UNBIND_DEV  # DATA_QUERT_CMD - issue command
CONTROL         = 7  # FRM_TP_CMD         # STATE_UPLOAD_CMD
STATUS          = 8  # FRM_TP_STAT_REPORT # STATE_QUERY_CMD
HEART_BEAT      = 9  # FRM_TP_HB
DP_QUERY        = 0x0a # 10 # FRM_QUERY_STAT      # UPDATE_START_CMD - get data points
QUERY_WIFI      = 0x0b # 11 # FRM_SSID_QUERY (discard) # UPDATE_TRANS_CMD
TOKEN_BIND      = 0x0c # 12 # FRM_USER_BIND_REQ   # GET_ONLINE_TIME_CMD - system time (GMT)
CONTROL_NEW     = 0x0d # 13 # FRM_TP_NEW_CMD      # FACTORY_MODE_CMD
ENABLE_WIFI     = 0x0e # 14 # FRM_ADD_SUB_DEV_CMD # WIFI_TEST_CMD
WIFI_INFO       = 0x0f # 15 # FRM_CFG_WIFI_INFO
DP_QUERY_NEW    = 0x10 # 16 # FRM_QUERY_STAT_NEW
SCENE_EXECUTE   = 0x11 # 17 # FRM_SCENE_EXEC
UPDATEDPS       = 0x12 # 18 # FRM_LAN_QUERY_DP    # Request refresh of DPS
UDP_NEW         = 0x13 # 19 # FR_TYPE_ENCRYPTION
AP_CONFIG_NEW   = 0x14 # 20 # FRM_AP_CFG_WF_V40
BOARDCAST_LPV34 = 0x23 # 35 # FR_TYPE_BOARDCAST_LPV34
LAN_EXT_STREAM  = 0x40 # 64 # FRM_LAN_EXT_STREAM

# Protocol Versions and Headers
PROTOCOL_VERSION_BYTES_31 = b"3.1"
PROTOCOL_VERSION_BYTES_33 = b"3.3"
PROTOCOL_VERSION_BYTES_34 = b"3.4"
PROTOCOL_VERSION_BYTES_35 = b"3.5"
PROTOCOL_3x_HEADER = 12 * b"\x00"
PROTOCOL_33_HEADER = PROTOCOL_VERSION_BYTES_33 + PROTOCOL_3x_HEADER
PROTOCOL_34_HEADER = PROTOCOL_VERSION_BYTES_34 + PROTOCOL_3x_HEADER
PROTOCOL_35_HEADER = PROTOCOL_VERSION_BYTES_35 + PROTOCOL_3x_HEADER
MESSAGE_HEADER_FMT = MESSAGE_HEADER_FMT_55AA = ">4I"  # 4*uint32: prefix, seqno, cmd, length [, retcode]
MESSAGE_HEADER_FMT_6699 = ">IHIII"  # 4*uint32: prefix, unknown, seqno, cmd, length
MESSAGE_RETCODE_FMT = ">I"  # retcode for received messages
MESSAGE_END_FMT = MESSAGE_END_FMT_55AA = ">2I"  # 2*uint32: crc, suffix
MESSAGE_END_FMT_HMAC = ">32sI"  # 32s:hmac, uint32:suffix
MESSAGE_END_FMT_6699 = ">16sI"  # 16s:tag, suffix
PREFIX_VALUE = PREFIX_55AA_VALUE = 0x000055AA
PREFIX_BIN = PREFIX_55AA_BIN = b"\x00\x00U\xaa"
SUFFIX_VALUE = SUFFIX_55AA_VALUE = 0x0000AA55
SUFFIX_BIN = SUFFIX_55AA_BIN = b"\x00\x00\xaaU"
PREFIX_6699_VALUE = 0x00006699
PREFIX_6699_BIN = b"\x00\x00\x66\x99"
SUFFIX_6699_VALUE = 0x00009966
SUFFIX_6699_BIN = b"\x00\x00\x99\x66"

NO_PROTOCOL_HEADER_CMDS = [DP_QUERY, DP_QUERY_NEW, UPDATEDPS, HEART_BEAT, SESS_KEY_NEG_START, SESS_KEY_NEG_RESP, SESS_KEY_NEG_FINISH, LAN_EXT_STREAM ]

# Python 2 Support
IS_PY2 = sys.version_info[0] == 2

# Tuya Packet Format
TuyaHeader = namedtuple('TuyaHeader', 'prefix seqno cmd length total_length')
MessagePayload = namedtuple("MessagePayload", "cmd payload")
try:
    TuyaMessage = namedtuple("TuyaMessage", "seqno cmd retcode payload crc crc_good prefix iv", defaults=(True,0x55AA,None))
except:
    TuyaMessage = namedtuple("TuyaMessage", "seqno cmd retcode payload crc crc_good prefix iv")

# TinyTuya Error Response Codes
ERR_JSON = 900
ERR_CONNECT = 901
ERR_TIMEOUT = 902
ERR_RANGE = 903
ERR_PAYLOAD = 904
ERR_OFFLINE = 905
ERR_STATE = 906
ERR_FUNCTION = 907
ERR_DEVTYPE = 908
ERR_CLOUDKEY = 909
ERR_CLOUDRESP = 910
ERR_CLOUDTOKEN = 911
ERR_PARAMS = 912
ERR_CLOUD = 913
ERR_KEY_OR_VER = 914

error_codes = {
    ERR_JSON: "Invalid JSON Response from Device",
    ERR_CONNECT: "Network Error: Unable to Connect",
    ERR_TIMEOUT: "Timeout Waiting for Device",
    ERR_RANGE: "Specified Value Out of Range",
    ERR_PAYLOAD: "Unexpected Payload from Device",
    ERR_OFFLINE: "Network Error: Device Unreachable",
    ERR_STATE: "Device in Unknown State",
    ERR_FUNCTION: "Function Not Supported by Device",
    ERR_DEVTYPE: "Device22 Detected: Retry Command",
    ERR_CLOUDKEY: "Missing Tuya Cloud Key and Secret",
    ERR_CLOUDRESP: "Invalid JSON Response from Cloud",
    ERR_CLOUDTOKEN: "Unable to Get Cloud Token",
    ERR_PARAMS: "Missing Function Parameters",
    ERR_CLOUD: "Error Response from Tuya Cloud",
    ERR_KEY_OR_VER: "Check device key or version",
    None: "Unknown Error",
}

class DecodeError(Exception):
    pass

# Cryptography Helpers
class AESCipher(object):
    def __init__(self, key):
        self.bs = 16
        self.key = key

    def encrypt(self, raw, use_base64=True, pad=True, iv=False, header=None): # pylint: disable=W0621
        if Crypto:
            if iv: # initialization vector or nonce (number used once)
                if iv is True:
                    if log.isEnabledFor( logging.DEBUG ):
                        iv = b'0123456789ab'
                    else:
                        iv = str(time.time() * 10)[:12].encode('utf8')
                cipher = AES.new(self.key, mode=AES.MODE_GCM, nonce=iv)
                if header:
                    cipher.update(header)
                crypted_text, tag = cipher.encrypt_and_digest(raw)
                crypted_text = cipher.nonce + crypted_text + tag
            else:
                if pad: raw = self._pad(raw)
                cipher = AES.new(self.key, mode=AES.MODE_ECB)
                crypted_text = cipher.encrypt(raw)
        else:
            if iv:
                # GCM required for 3.5 devices
                raise NotImplementedError( 'pyaes does not support GCM, please install PyCryptodome' )

            _ = self._pad(raw)
            # pylint: disable-next=used-before-assignment
            cipher = pyaes.blockfeeder.Encrypter(
                pyaes.AESModeOfOperationECB(self.key),
                pyaes.PADDING_DEFAULT if pad else pyaes.PADDING_NONE
            )  # no IV, auto pads to 16
            crypted_text = cipher.feed(raw)
            crypted_text += cipher.feed()  # flush final block

        if use_base64:
            return base64.b64encode(crypted_text)
        else:
            return crypted_text

    def decrypt(self, enc, use_base64=True, decode_text=True, verify_padding=False, iv=False, header=None, tag=None):
        if not iv:
            if use_base64:
                enc = base64.b64decode(enc)

            if len(enc) % 16 != 0:
                raise ValueError("invalid length")

        if Crypto:
            if iv:
                if iv is True:
                    iv = enc[:12]
                    enc = enc[12:]
                cipher = AES.new(self.key, AES.MODE_GCM, nonce=iv)
                if header:
                    cipher.update(header)
                if tag:
                    raw = cipher.decrypt_and_verify(enc, tag)
                else:
                    raw = cipher.decrypt(enc)
            else:
                cipher = AES.new(self.key, AES.MODE_ECB)
                raw = cipher.decrypt(enc)
                raw = self._unpad(raw, verify_padding)
            return raw.decode("utf-8") if decode_text else raw
        else:
            if iv:
                # GCM required for 3.5 devices
                raise NotImplementedError( 'pyaes does not support GCM, please install PyCryptodome' )
            cipher = pyaes.blockfeeder.Decrypter(
                pyaes.AESModeOfOperationECB(self.key),
                pyaes.PADDING_NONE if verify_padding else pyaes.PADDING_DEFAULT
            )  # no IV, auto pads to 16
            raw = cipher.feed(enc)
            raw += cipher.feed()  # flush final block
            if verify_padding: raw = self._unpad(raw, verify_padding)
            return raw.decode("utf-8") if decode_text else raw

    def _pad(self, s):
        padnum = self.bs - len(s) % self.bs
        return s + padnum * chr(padnum).encode()

    @staticmethod
    def _unpad(s, verify_padding=False):
        padlen = ord(s[-1:])
        if padlen < 1 or padlen > 16:
            raise ValueError("invalid padding length byte")
        if verify_padding and s[-padlen:] != (padlen * chr(padlen).encode()):
            raise ValueError("invalid padding data")
        return s[:-padlen]

# Misc Helpers
def bin2hex(x, pretty=False):
    if pretty:
        space = " "
    else:
        space = ""
    if IS_PY2:
        result = "".join("%02X%s" % (ord(y), space) for y in x)
    else:
        result = "".join("%02X%s" % (y, space) for y in x)
    return result

def hex2bin(x):
    if IS_PY2:
        return x.decode("hex")
    else:
        return bytes.fromhex(x)

def set_debug(toggle=True, color=True):
    """Enable tinytuya verbose logging"""
    if toggle:
        if color:
            logging.basicConfig(
                format="\x1b[31;1m%(levelname)s:%(message)s\x1b[0m", level=logging.DEBUG
            )
        else:
            logging.basicConfig(format="%(levelname)s:%(message)s", level=logging.DEBUG)
        log.setLevel(logging.DEBUG)
        log.debug("TinyTuya [%s]\n", __version__)
        log.debug("Python %s on %s", sys.version, sys.platform)
        if Crypto is None:
            # pylint: disable-next=used-before-assignment
            log.debug("Using pyaes version %r", pyaes.VERSION)
        else:
            log.debug("Using PyCrypto %r", Crypto.version_info)
    else:
        log.setLevel(logging.NOTSET)

def pack_message(msg, hmac_key=None):
    """Pack a TuyaMessage into bytes."""
    if msg.prefix == PREFIX_55AA_VALUE:
        header_fmt = MESSAGE_HEADER_FMT_55AA
        end_fmt = MESSAGE_END_FMT_HMAC if hmac_key else MESSAGE_END_FMT_55AA
        msg_len = len(msg.payload) + struct.calcsize(end_fmt)
        header_data = ( msg.prefix, msg.seqno, msg.cmd, msg_len )
    elif msg.prefix == PREFIX_6699_VALUE:
        if not hmac_key:
            raise TypeError( 'key must be provided to pack 6699-format messages' )
        header_fmt = MESSAGE_HEADER_FMT_6699
        end_fmt = MESSAGE_END_FMT_6699
        msg_len = len(msg.payload) + (struct.calcsize(end_fmt) - 4) + 12
        if type(msg.retcode) == int:
            msg_len += struct.calcsize(MESSAGE_RETCODE_FMT)
        header_data = ( msg.prefix, 0, msg.seqno, msg.cmd, msg_len )
    else:
        raise ValueError( 'pack_message() cannot handle message format %08X' % msg.prefix )

    # Create full message excluding CRC and suffix
    data = struct.pack( header_fmt, *header_data )

    if msg.prefix == PREFIX_6699_VALUE:
        cipher = AESCipher( hmac_key )
        if type(msg.retcode) == int:
            raw = struct.pack( MESSAGE_RETCODE_FMT, msg.retcode ) + msg.payload
        else:
            raw = msg.payload
        data2 = cipher.encrypt( raw, use_base64=False, pad=False, iv=True if not msg.iv else msg.iv, header=data[4:])
        data += data2 + SUFFIX_6699_BIN
    else:
        data += msg.payload
        if hmac_key:
            crc = hmac.new(hmac_key, data, sha256).digest()
        else:
            crc = binascii.crc32(data) & 0xFFFFFFFF
        # Calculate CRC, add it together with suffix
        data += struct.pack( end_fmt, crc, SUFFIX_VALUE )

    return data

def unpack_message(data, hmac_key=None, header=None, no_retcode=False):
    """Unpack bytes into a TuyaMessage."""
    if header is None:
        header = parse_header(data)

    if header.prefix == PREFIX_55AA_VALUE:
        # 4-word header plus return code
        header_len = struct.calcsize(MESSAGE_HEADER_FMT_55AA)
        end_fmt = MESSAGE_END_FMT_HMAC if hmac_key else MESSAGE_END_FMT_55AA
        retcode_len = 0 if no_retcode else struct.calcsize(MESSAGE_RETCODE_FMT)
        msg_len = header_len + header.length
    elif header.prefix == PREFIX_6699_VALUE:
        if not hmac_key:
            raise TypeError( 'key must be provided to unpack 6699-format messages' )
        header_len = struct.calcsize(MESSAGE_HEADER_FMT_6699)
        end_fmt = MESSAGE_END_FMT_6699
        retcode_len = 0
        msg_len = header_len + header.length + 4
    else:
        raise ValueError( 'unpack_message() cannot handle message format %08X' % header.prefix )

    if len(data) < msg_len:
        log.debug('unpack_message(): not enough data to unpack payload! need %d but only have %d', header_len+header.length, len(data))
        raise DecodeError('Not enough data to unpack payload')

    end_len = struct.calcsize(end_fmt)
    # the retcode is technically part of the payload, but strip it as we do not want it here
    retcode = 0 if not retcode_len else struct.unpack(MESSAGE_RETCODE_FMT, data[header_len:header_len+retcode_len])[0]
    payload = data[header_len+retcode_len:msg_len]
    crc, suffix = struct.unpack(end_fmt, payload[-end_len:])
    payload = payload[:-end_len]

    if header.prefix == PREFIX_55AA_VALUE:
        if hmac_key:
            have_crc = hmac.new(hmac_key, data[:(header_len+header.length)-end_len], sha256).digest()
        else:
            have_crc = binascii.crc32(data[:(header_len+header.length)-end_len]) & 0xFFFFFFFF

        if suffix != SUFFIX_VALUE:
            log.debug('Suffix prefix wrong! %08X != %08X', suffix, SUFFIX_VALUE)

        if crc != have_crc:
            if hmac_key:
                log.debug('HMAC checksum wrong! %r != %r', binascii.hexlify(have_crc), binascii.hexlify(crc))
            else:
                log.debug('CRC wrong! %08X != %08X', have_crc, crc)
        crc_good = crc == have_crc
        iv = None
    elif header.prefix == PREFIX_6699_VALUE:
        iv = payload[:12]
        payload = payload[12:]
        try:
            cipher = AESCipher( hmac_key )
            payload = cipher.decrypt( payload, use_base64=False, decode_text=False, verify_padding=False, iv=iv, header=data[4:header_len], tag=crc)
            crc_good = True
        except:
            crc_good = False

        retcode_len = struct.calcsize(MESSAGE_RETCODE_FMT)
        if no_retcode is False:
            pass
        elif no_retcode is None and payload[0:1] != b'{' and payload[retcode_len:retcode_len+1] == b'{':
            retcode_len = struct.calcsize(MESSAGE_RETCODE_FMT)
        else:
            retcode_len = 0
        if retcode_len:
            retcode = struct.unpack(MESSAGE_RETCODE_FMT, payload[:retcode_len])[0]
            payload = payload[retcode_len:]

    return TuyaMessage(header.seqno, header.cmd, retcode, payload, crc, crc_good, header.prefix, iv)

def parse_header(data):
    if( data[:4] == PREFIX_6699_BIN ):
        fmt = MESSAGE_HEADER_FMT_6699
    else:
        fmt = MESSAGE_HEADER_FMT_55AA

    header_len = struct.calcsize(fmt)

    if len(data) < header_len:
        raise DecodeError('Not enough data to unpack header')

    unpacked = struct.unpack( fmt, data[:header_len] )
    prefix = unpacked[0]

    if prefix == PREFIX_55AA_VALUE:
        prefix, seqno, cmd, payload_len = unpacked
        total_length = payload_len + header_len
    elif prefix == PREFIX_6699_VALUE:
        prefix, unknown, seqno, cmd, payload_len = unpacked
        #seqno |= unknown << 32
        total_length = payload_len + header_len + len(SUFFIX_6699_BIN)
    else:
        #log.debug('Header prefix wrong! %08X != %08X', prefix, PREFIX_VALUE)
        raise DecodeError('Header prefix wrong! %08X is not %08X or %08X' % (prefix, PREFIX_55AA_VALUE, PREFIX_6699_VALUE))

    # sanity check. currently the max payload length is somewhere around 300 bytes
    if payload_len > 1000:
        raise DecodeError('Header claims the packet size is over 1000 bytes!  It is most likely corrupt.  Claimed size: %d bytes. fmt:%s unpacked:%r' % (payload_len,fmt,unpacked))

    return TuyaHeader(prefix, seqno, cmd, payload_len, total_length)

def has_suffix(payload):
    """Check to see if payload has valid Tuya suffix"""
    if len(payload) < 4:
        return False
    log.debug("buffer %r = %r", payload[-4:], SUFFIX_BIN)
    return payload[-4:] == SUFFIX_BIN

def error_json(number=None, payload=None):
    """Return error details in JSON"""
    try:
        spayload = json.dumps(payload)
        # spayload = payload.replace('\"','').replace('\'','')
    except:
        spayload = '""'

    vals = (error_codes[number], str(number), spayload)
    log.debug("ERROR %s - %s - payload: %s", *vals)

    return json.loads('{ "Error":"%s", "Err":"%s", "Payload":%s }' % vals)

def encrypt(msg, key):
    return AESCipher( key ).encrypt( msg, use_base64=False, pad=True )

def decrypt(msg, key):
    return AESCipher( key ).decrypt( msg, use_base64=False, decode_text=True )

# UDP packet payload decryption - credit to tuya-convert
udpkey = md5(b"yGAdlopoPVldABfn").digest()


=======================================================================================================================================================================

